const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview # Lorx is a Lua binding to the Orx game engine . Orx is a data-driven game engine with high performance and abundant features. The goal of Lorx is to provide a set of APIs in Lua that is as complete as possible to the original Orx APIs and a comfortable experience in Lua. With the power of Lua, Lorx enables agile game development. Lorx is created with a bunch of scripts for auto-generating code, and some manually written code. The bindings are currently built for Orx 1.13.0, but the scripts can also work with Orx 1.14. See \" How to Build \" if you wish to use a more recent version of Orx. The current version, 0.1.0, is built with Orx 1.13.0 and Lua 5.3.6. Advantages # Lua is a simple but flexible language which has been tested for many years in the game industry. The config system is very powerful. Visit the Orx Wiki to find out. Orx is a very performant game engine written in C. It runs very fast and it's memory efficient. Orx has many advanced features that are missing even in many established engines (e.g. multiple viewports, object aging). Lorx has covered almost all of Orx's functionalities. Lorx runs nearly as fast as native Orx. Lua won't slow you down since Orx has done most of the heavy work for you. Lorx is simple, you can get started in minutes if you are already familiar with Orx. Get started # The Lorx executable (lorx.sh if you are on Linux) accepts a game directory as argument. A typical directory layout might look like this: boot.lua # Load on initializing. main.lua # Load after initialized. settings.lua # Settings. data/ config/ # Config files. texture/ # Textures. sound/ # Sound. ... # Other resources. If you want to do something before Orx is fully initialized, boot.lua is the place to put your code in. Example boot.lua : lorx . config . load ( \"settings.ini\" ) If you only need to load some settings, you can create a settings.ini in the root directory, Lorx will detect and load it automatically. Example settings.lua : [Display] Title = My Game ScreenWidth = 800 ScreenHeight = 600 FullScreen = false AllowResize = false [Resource] Texture = data/texture Sound = data/sound [Input] SetList = MainInput [MainInput] KEY_ESCAPE = Quit The file main.lua is loaded after the engine is fully initialized. The Orx engine should be started in here. Example main.lua : local function init () -- load game configs lorx . resource . addStorage ( 'Config' , 'data/config' , false ) lorx . config . load ( 'my_game.ini' ) -- create cameras, objects, ... local scene = lorx . object . createFromConfig ( 'Scene' ) local camera = lorx . camera . createFromConfig ( 'MainCamera' ) -- ... end local function update ( clockinfo ) -- print dt print ( 'dt =' , clockinfo . dt ) -- handle keys if lorx . input . isActive ( 'Quit' ) then lorx . event . sendShort ( 'system' , 'close' ) end end -- start Orx lorx . execute ( init , update , function () print ( 'exit!' ) end ) To run a game, provide the game directory as the sole arg to lorx.sh or lorx.exe: <path-to-lorx> <game-directory> . There are some examples shipped with the source code, you can view them to learn more about Lorx. (Before you try any of these, it is strongly advised that you get familiar with Orx's config system first.) In addition, there is some advices about setting up a development environment: Auto-completion and linting: If your editor/IDE (vscode, vim, ...) supports LSP, you can install the sumneoko Lua language server, download the emmy annotations for Lorx and set the api path as an external library path for your project. Debugging: use a debugger plugin that supports custom Lua environments (e.g. Local Lua Debugger for vscode). How is everything mapped to Lua # Basic types # Orx Lua Remarks orxFLOAT number orxDOUBLE number orxU64 integer orxU32 integer orxU16 integer orxU8 integer orxS64 integer orxS32 integer orxS16 integer orxS8 integer orxBOOL boolean orxCHAR string single char string char string single char string orxCHAR* string char* string orxHANDLE userdata void* userdata orxSTRINGID integer u64 orxENUM string depends on the type of the enum orxSTRING string orxSPTR * integer s32 / s64 orxUPTR * integer u32 / u64 * orxSPTR and orxUPTR is only available for Orx version >= 1.14 Note: All strings are immutable (const), string APIs defined in orxString.h with non-const char sequence params are prohibited. Every conversion from Lua string to C string will cause caching in Orx ( orxString_Store ), so you must avoid immoderate generation of C strings. void is stored as a userdata in Lorx (lorx.void or lorx.void*#, '#' stands for 'const'). Enums # Enums are converted to lowercase strings: orxEVENT_TYPE_PHYSICS -> 'physics' . Utypes (structs) # Structs are stored as userdata. However, there is no difference between a struct and a pointer to struct in Lorx, so I like to call them 'utypes'. There are two types of utypes in Lorx, one is private structs, the other is public structs. For private structs, only the pointer to the struct is stored and they can only be created by Orx through an API call. For public structs, both the pointer and the memory block are stored and you can create them through a constructor function. As a result, these utypes are totally managed by Lua GC. When passing utypes between Lua and Orx, they will be duplicated (pass by value) rather than referenced. Obviously, only the pointers are duplicated for private types, while the whole data are duplicated for public types. Avoiding referencing makes things a lot easier. For the sake of simplicity, complex data structures are dealt with differently. (e.g. events related types, see Events for details). Note: There are a few cases where a const pointer is returned, Lorx marks these APIs with a 'Const' suffix and distinguish const utypes with a '#' suffix in the tname or type name. Const objects cannot be passed to the APIs asking for a non-const param. Arrays # Arrays are Lua tables in Lorx. Every Orx API call with array param will cause memory allocation and deallocation. This won't be very performant, so don't do arrays too heavily in Lua. How to build # Prerequisites # Lua (>= 5.3) Orx (>= 1.13) Linux # Compile Lua and Orx. Copy Makefile.linux to Makefile set LUA in the makefile and make sure the environment variable ORX is set to the right path. Run make to build 64 bit binary; run make arch=x86 to build 32 bit binary. Run make clean and make config=debug or make config=profile if you wish to build debug or profile config. Windows # The recommended way to build on Windows is using NMake/cl (need to install Visual Studio), and link dynamically to lua. Alternatively, you can build with MinGW. (you can find Makefile.mingw in src ) Compile Lua and Orx. (Lua must also be compiled in MSVC) Copy Makefile.nmake or Makefile.mingw to Makefile . Set LUA , LUA_INC and LUA_LIB in the makefile; Make sure the environment variable ORX is set correctly (which should contain include and lib ). Open VS command prompt (x86 or x86_64), cd to src and run nmake to build. Run nmake clean and nmake config=debug or nmake config=profile if you wish to build debug or profile config. For MinGW, take similar steps as on Linux. Bind to another Orx version # Lorx is on 1.13.0, but the auto-generation scripts support 1.14. Prepare corresponding Orx headers and libs and make sure the environment variable ORX points to a path containing include and lib of Orx. Then, run python autogen.py to generate source code and some other stuff. Finally, build the source and doc. Build documentation # The documentations are built with Mkdocs . Run the following command to install the prerequisites: pip3 install mkdocs mkdocs-material mkdocs-localsearch markdown-extra mkdocs-markdownextradata-plugin Go to doc , run mkdocs build to generate all documentations. (The generated htmls are fully static, which can used offline) Events # Events are dealt with differently in Lorx. The event system is too flexible for Lua, too many void* and unions. The first difference being, event handlers are registered separately with respect to event types. For each type of event, there can be only one handler. Register two handlers to the same event type and the first one will be discarded. The second difference is that there's no direct type mapping between orxEVENT and all event payloads. Instead, Lorx puts all event data in one table and pass it as the sole argument to handlers. Following emmy annotation shows the sound event type: ---@class lorxSOUND_EVENT ---@field id orxSOUND_EVENT ---@field sender orxHANDLE|orxOBJECT|orxSTRUCTURE|voidptr ---@field recipient orxOBJECT|voidptr ---@field streaminfo orxSOUND_STREAM_INFO # when id is 'packet' or 'recording_*' ---@field streampacket orxSOUND_STREAM_PACKET # when id is 'packet' or 'recording_*' ---@field filterdata orxSOUND_FILTER_DATA # when id is 'set_filter_param' ---@field filterbusid integer # when id is 'set_filter_param' ---@field raw voidptr # raw pointer of orxEVENT local lorxSOUND_EVENT = {} An example of sound event handler: local function sound_handler ( e ) if e . id == 'packet' then print ( 'stream name:' , e . streaminfo . name ) end end Note: All types of event have at least four fields: id , sender , recipient and raw . The returning value of event handlers can be omitted and orxSTATUS_SUCCESS ('success') will be returned by default. The types of sender and recipient are often decided by id , however you don't have to cast pointers manully. Other fields might only be available for certain id [s]. See event handler callbacks for more detail. Commands # Commands are also a bit different than in C. In Lorx, you can register sub-commands to a main command Lorx via lorx.command.sRegister and it does not involve orxCOMMAND_VAR_TYPE and orxCOMMAND_VAR_DEF . Here is an example: lorx . command . sRegister ( function ( arg ) return arg + lorx . vector . vector ( 1 , 1 , 1 ) end , 'MyCmd' , 'vector' , 1 , 0 , 'vector' ) if lorx . command . sIsRegistered ( 'MyCmd' ) then local vvar = lorx . command . evaluate ( 'Lorx MyCmd (1, 0, 0)' ) print ( 'MyCmd returns' , vvar . vvalue ) end To add comments to a sub-command, you can use lorx.command.sComment . To get help message, use the LorxHelp command. Example: lorx . command . sComment ( \"MyCmd\" , \"Help me, help you\" , \"OutVector\" , \"InVector\" ) print ( lorx . command . evaluate ( 'LorxHelp MyCmd' )) What's not implemented # Threading ( orxThread_Start , orxThread_RunTask and orxThread_SetCallbacks ). Lua is not thread safe and there's little benefit in supporting it. Low-level resource reading/writting ( orxResource_Read and orxResource_Write ). Body, part and joint definition structs ( orxBODY_DEF , orxBODY_PART_DEF and orxBODY_JOINT_DEF ). Please use configuration instead. Meshes. Lorx supports drawing meshes, but does not support creating or reading meshes from files. However, you can write your own code to get meshes read in C and store the pointer in a userdata with the tname of 'lorx.orxDISPLAY_MESH', then you will be able to draw meshes in Lua. Upcoming # Android support. Loading pre-compiled chunks (and maybe basic chunk encryption). Reflect event data modification to Orx. Maybe support setting lua tables as the usredata of orxObject. So that we can easily attach data (health, mana, ...) to objects. FAQ # Why not Luajit Luajit has better performance in most cases. However, unlike a Lua game framework, Orx is a full-featured game engine that handles most of the heavy work for you, and Lorx is performant enough in the sense of interacting with Orx. Also, Luajit does not support 64 bit integers for the sake of performance. How to stay performant Here are some advices about performance: Strings. Passing strings between Lua and Orx will result in memory duplication. Store the string IDs in Lua (rather than the strings) for strings that will be heavily. Arrays. Passing arrays in Orx API calls will induce memory allocation/deallocation. Avoid doing this too frequently. GC. Avoid generating too much garbage in a short time. Don't think too much about performance until you really have to :). How to make C extensions Building extensions for Lorx is simple, you just write your functions, put them in a new table and return the table as a module. It's no different than making a C module for vanilla Lua . Just make sure you have the headers of both Lua and Lorx.","title":"Overview"},{"location":"index.html#overview","text":"Lorx is a Lua binding to the Orx game engine . Orx is a data-driven game engine with high performance and abundant features. The goal of Lorx is to provide a set of APIs in Lua that is as complete as possible to the original Orx APIs and a comfortable experience in Lua. With the power of Lua, Lorx enables agile game development. Lorx is created with a bunch of scripts for auto-generating code, and some manually written code. The bindings are currently built for Orx 1.13.0, but the scripts can also work with Orx 1.14. See \" How to Build \" if you wish to use a more recent version of Orx. The current version, 0.1.0, is built with Orx 1.13.0 and Lua 5.3.6.","title":"Overview"},{"location":"index.html#advantages","text":"Lua is a simple but flexible language which has been tested for many years in the game industry. The config system is very powerful. Visit the Orx Wiki to find out. Orx is a very performant game engine written in C. It runs very fast and it's memory efficient. Orx has many advanced features that are missing even in many established engines (e.g. multiple viewports, object aging). Lorx has covered almost all of Orx's functionalities. Lorx runs nearly as fast as native Orx. Lua won't slow you down since Orx has done most of the heavy work for you. Lorx is simple, you can get started in minutes if you are already familiar with Orx.","title":"Advantages"},{"location":"index.html#get-started","text":"The Lorx executable (lorx.sh if you are on Linux) accepts a game directory as argument. A typical directory layout might look like this: boot.lua # Load on initializing. main.lua # Load after initialized. settings.lua # Settings. data/ config/ # Config files. texture/ # Textures. sound/ # Sound. ... # Other resources. If you want to do something before Orx is fully initialized, boot.lua is the place to put your code in. Example boot.lua : lorx . config . load ( \"settings.ini\" ) If you only need to load some settings, you can create a settings.ini in the root directory, Lorx will detect and load it automatically. Example settings.lua : [Display] Title = My Game ScreenWidth = 800 ScreenHeight = 600 FullScreen = false AllowResize = false [Resource] Texture = data/texture Sound = data/sound [Input] SetList = MainInput [MainInput] KEY_ESCAPE = Quit The file main.lua is loaded after the engine is fully initialized. The Orx engine should be started in here. Example main.lua : local function init () -- load game configs lorx . resource . addStorage ( 'Config' , 'data/config' , false ) lorx . config . load ( 'my_game.ini' ) -- create cameras, objects, ... local scene = lorx . object . createFromConfig ( 'Scene' ) local camera = lorx . camera . createFromConfig ( 'MainCamera' ) -- ... end local function update ( clockinfo ) -- print dt print ( 'dt =' , clockinfo . dt ) -- handle keys if lorx . input . isActive ( 'Quit' ) then lorx . event . sendShort ( 'system' , 'close' ) end end -- start Orx lorx . execute ( init , update , function () print ( 'exit!' ) end ) To run a game, provide the game directory as the sole arg to lorx.sh or lorx.exe: <path-to-lorx> <game-directory> . There are some examples shipped with the source code, you can view them to learn more about Lorx. (Before you try any of these, it is strongly advised that you get familiar with Orx's config system first.) In addition, there is some advices about setting up a development environment: Auto-completion and linting: If your editor/IDE (vscode, vim, ...) supports LSP, you can install the sumneoko Lua language server, download the emmy annotations for Lorx and set the api path as an external library path for your project. Debugging: use a debugger plugin that supports custom Lua environments (e.g. Local Lua Debugger for vscode).","title":"Get started"},{"location":"index.html#how-is-everything-mapped-to-lua","text":"","title":"How is everything mapped to Lua"},{"location":"index.html#basic-types","text":"Orx Lua Remarks orxFLOAT number orxDOUBLE number orxU64 integer orxU32 integer orxU16 integer orxU8 integer orxS64 integer orxS32 integer orxS16 integer orxS8 integer orxBOOL boolean orxCHAR string single char string char string single char string orxCHAR* string char* string orxHANDLE userdata void* userdata orxSTRINGID integer u64 orxENUM string depends on the type of the enum orxSTRING string orxSPTR * integer s32 / s64 orxUPTR * integer u32 / u64 * orxSPTR and orxUPTR is only available for Orx version >= 1.14 Note: All strings are immutable (const), string APIs defined in orxString.h with non-const char sequence params are prohibited. Every conversion from Lua string to C string will cause caching in Orx ( orxString_Store ), so you must avoid immoderate generation of C strings. void is stored as a userdata in Lorx (lorx.void or lorx.void*#, '#' stands for 'const').","title":"Basic types"},{"location":"index.html#enums","text":"Enums are converted to lowercase strings: orxEVENT_TYPE_PHYSICS -> 'physics' .","title":"Enums"},{"location":"index.html#utypes-structs","text":"Structs are stored as userdata. However, there is no difference between a struct and a pointer to struct in Lorx, so I like to call them 'utypes'. There are two types of utypes in Lorx, one is private structs, the other is public structs. For private structs, only the pointer to the struct is stored and they can only be created by Orx through an API call. For public structs, both the pointer and the memory block are stored and you can create them through a constructor function. As a result, these utypes are totally managed by Lua GC. When passing utypes between Lua and Orx, they will be duplicated (pass by value) rather than referenced. Obviously, only the pointers are duplicated for private types, while the whole data are duplicated for public types. Avoiding referencing makes things a lot easier. For the sake of simplicity, complex data structures are dealt with differently. (e.g. events related types, see Events for details). Note: There are a few cases where a const pointer is returned, Lorx marks these APIs with a 'Const' suffix and distinguish const utypes with a '#' suffix in the tname or type name. Const objects cannot be passed to the APIs asking for a non-const param.","title":"Utypes (structs)"},{"location":"index.html#arrays","text":"Arrays are Lua tables in Lorx. Every Orx API call with array param will cause memory allocation and deallocation. This won't be very performant, so don't do arrays too heavily in Lua.","title":"Arrays"},{"location":"index.html#how-to-build","text":"","title":"How to build"},{"location":"index.html#prerequisites","text":"Lua (>= 5.3) Orx (>= 1.13)","title":"Prerequisites"},{"location":"index.html#linux","text":"Compile Lua and Orx. Copy Makefile.linux to Makefile set LUA in the makefile and make sure the environment variable ORX is set to the right path. Run make to build 64 bit binary; run make arch=x86 to build 32 bit binary. Run make clean and make config=debug or make config=profile if you wish to build debug or profile config.","title":"Linux"},{"location":"index.html#windows","text":"The recommended way to build on Windows is using NMake/cl (need to install Visual Studio), and link dynamically to lua. Alternatively, you can build with MinGW. (you can find Makefile.mingw in src ) Compile Lua and Orx. (Lua must also be compiled in MSVC) Copy Makefile.nmake or Makefile.mingw to Makefile . Set LUA , LUA_INC and LUA_LIB in the makefile; Make sure the environment variable ORX is set correctly (which should contain include and lib ). Open VS command prompt (x86 or x86_64), cd to src and run nmake to build. Run nmake clean and nmake config=debug or nmake config=profile if you wish to build debug or profile config. For MinGW, take similar steps as on Linux.","title":"Windows"},{"location":"index.html#bind-to-another-orx-version","text":"Lorx is on 1.13.0, but the auto-generation scripts support 1.14. Prepare corresponding Orx headers and libs and make sure the environment variable ORX points to a path containing include and lib of Orx. Then, run python autogen.py to generate source code and some other stuff. Finally, build the source and doc.","title":"Bind to another Orx version"},{"location":"index.html#build-documentation","text":"The documentations are built with Mkdocs . Run the following command to install the prerequisites: pip3 install mkdocs mkdocs-material mkdocs-localsearch markdown-extra mkdocs-markdownextradata-plugin Go to doc , run mkdocs build to generate all documentations. (The generated htmls are fully static, which can used offline)","title":"Build documentation"},{"location":"index.html#events","text":"Events are dealt with differently in Lorx. The event system is too flexible for Lua, too many void* and unions. The first difference being, event handlers are registered separately with respect to event types. For each type of event, there can be only one handler. Register two handlers to the same event type and the first one will be discarded. The second difference is that there's no direct type mapping between orxEVENT and all event payloads. Instead, Lorx puts all event data in one table and pass it as the sole argument to handlers. Following emmy annotation shows the sound event type: ---@class lorxSOUND_EVENT ---@field id orxSOUND_EVENT ---@field sender orxHANDLE|orxOBJECT|orxSTRUCTURE|voidptr ---@field recipient orxOBJECT|voidptr ---@field streaminfo orxSOUND_STREAM_INFO # when id is 'packet' or 'recording_*' ---@field streampacket orxSOUND_STREAM_PACKET # when id is 'packet' or 'recording_*' ---@field filterdata orxSOUND_FILTER_DATA # when id is 'set_filter_param' ---@field filterbusid integer # when id is 'set_filter_param' ---@field raw voidptr # raw pointer of orxEVENT local lorxSOUND_EVENT = {} An example of sound event handler: local function sound_handler ( e ) if e . id == 'packet' then print ( 'stream name:' , e . streaminfo . name ) end end Note: All types of event have at least four fields: id , sender , recipient and raw . The returning value of event handlers can be omitted and orxSTATUS_SUCCESS ('success') will be returned by default. The types of sender and recipient are often decided by id , however you don't have to cast pointers manully. Other fields might only be available for certain id [s]. See event handler callbacks for more detail.","title":"Events"},{"location":"index.html#commands","text":"Commands are also a bit different than in C. In Lorx, you can register sub-commands to a main command Lorx via lorx.command.sRegister and it does not involve orxCOMMAND_VAR_TYPE and orxCOMMAND_VAR_DEF . Here is an example: lorx . command . sRegister ( function ( arg ) return arg + lorx . vector . vector ( 1 , 1 , 1 ) end , 'MyCmd' , 'vector' , 1 , 0 , 'vector' ) if lorx . command . sIsRegistered ( 'MyCmd' ) then local vvar = lorx . command . evaluate ( 'Lorx MyCmd (1, 0, 0)' ) print ( 'MyCmd returns' , vvar . vvalue ) end To add comments to a sub-command, you can use lorx.command.sComment . To get help message, use the LorxHelp command. Example: lorx . command . sComment ( \"MyCmd\" , \"Help me, help you\" , \"OutVector\" , \"InVector\" ) print ( lorx . command . evaluate ( 'LorxHelp MyCmd' ))","title":"Commands"},{"location":"index.html#whats-not-implemented","text":"Threading ( orxThread_Start , orxThread_RunTask and orxThread_SetCallbacks ). Lua is not thread safe and there's little benefit in supporting it. Low-level resource reading/writting ( orxResource_Read and orxResource_Write ). Body, part and joint definition structs ( orxBODY_DEF , orxBODY_PART_DEF and orxBODY_JOINT_DEF ). Please use configuration instead. Meshes. Lorx supports drawing meshes, but does not support creating or reading meshes from files. However, you can write your own code to get meshes read in C and store the pointer in a userdata with the tname of 'lorx.orxDISPLAY_MESH', then you will be able to draw meshes in Lua.","title":"What's not implemented"},{"location":"index.html#upcoming","text":"Android support. Loading pre-compiled chunks (and maybe basic chunk encryption). Reflect event data modification to Orx. Maybe support setting lua tables as the usredata of orxObject. So that we can easily attach data (health, mana, ...) to objects.","title":"Upcoming"},{"location":"index.html#faq","text":"Why not Luajit Luajit has better performance in most cases. However, unlike a Lua game framework, Orx is a full-featured game engine that handles most of the heavy work for you, and Lorx is performant enough in the sense of interacting with Orx. Also, Luajit does not support 64 bit integers for the sake of performance. How to stay performant Here are some advices about performance: Strings. Passing strings between Lua and Orx will result in memory duplication. Store the string IDs in Lua (rather than the strings) for strings that will be heavily. Arrays. Passing arrays in Orx API calls will induce memory allocation/deallocation. Avoid doing this too frequently. GC. Avoid generating too much garbage in a short time. Don't think too much about performance until you really have to :). How to make C extensions Building extensions for Lorx is simple, you just write your functions, put them in a new table and return the table as a module. It's no different than making a C module for vanilla Lua . Just make sure you have the headers of both Lua and Lorx.","title":"FAQ"},{"location":"callbacks.html","text":"callbacks # lorxLOG_CALLBACK # Signature: r1 = callback ( level , func , file , line , log ) Description: Callback function prototype for lorx.debug.log (see lorx.debug.setLogCallback ) Params: name type description level orxDEBUG_LEVEL debug level func string function name file string file name line integer line number log string log message Returns: type description orxSTATUS if 'failure', the log entry will be entirely inhibited lorxCLOCK_CALLBACK # Signature: callback ( ci ) Description: Callback function for clocks and timers. (see lorx.clock.addGlobalTimer , lorx.clock.removeGlobalTimer , lorx.clock:register , lorx.clock:unregister , lorx.clock:addTimer , lorx.clock:removeTimer ) Params: name type description ci orxCLOCK_INFO - Returns: lorxINIT_CALLBACK # Signature: r1 = callback () Description: Callback function to be called when Orx is initializing (see lorx.execute ) Params: Returns: type description orxSTATUS success / failure lorxUPDATE_CALLBACK # Signature: callback ( ci ) Description: Callback to be called on every frame (see lorx.execute and lorx.registerUpdate ) Params: name type description ci orxCLOCK_INFO - Returns: lorxEXIT_CALLBACK # Signature: callback () Description: Exit callback, will be called when Orx is exiting normally. (see lorx.execute ) Params: Returns: lorxCFGSAVE_CALLBACK # Signature: r1 = callback ( section , key , file , useencryption ) Description: Filter config content when saving. (see lorx.config.save ) Params: name type description section string section name key string entry key name file string file name useencryption boolean use encryption or not Returns: type description boolean false to filter out lorxCFGCLEAR_CALLBACK # Signature: r1 = callback ( section , key ) Description: Filter config content when clearing. (see lorx.config.clear ) Params: name type description section string section name key string entry key name Returns: type description boolean false to filter out lorxANIM_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxANIM_EVENT anim event type sender orxSTRUCTURE sender recipient orxSTRUCTURE recipient anim orxSTRUCTURE concerned orxANIM animname string anim name count integer id == 'loop' loop count time number id == 'cut' or 'custom_event' time name string id == 'custom_event' custom event name value number id == 'custom_event' custom event value raw void* raw pointer of the event lorxCLOCK_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxCLOCK_EVENT clock event type sender orxCLOCK sender recipient void* recipient raw void* raw pointer of the event lorxCONFIG_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxCONFIG_EVENT config event type sender void* sender recipient void* recipient raw void* raw pointer of the event lorxDISPLAY_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxDISPLAY_EVENT display event type sender orxBITMAP id == 'load_bitmap' sender recipient orxBITMAP id == 'load_bitmap' recipient width integer id == 'set_video_mode' video mode width height integer id == 'set_video_mode' video mode height depth integer id == 'set_video_mode' video mode depth refreshrate integer id == 'set_video_mode' video mode refreshrate previouswidth integer id == 'set_video_mode' video mode previouswidth previousheight integer id == 'set_video_mode' video mode previousheight previousdepth integer id == 'set_video_mode' video mode previousdepth previousrefreshrate integer id == 'set_video_mode' video mode previousrefreshrate fullscreen boolean id == 'set_video_mode' video mode fullscreen location string id == 'load_bitmap' bitmap location filenameid integer id == 'load_bitmap' bitmap file name string ID bitmapid integer id == 'load_bitmap' bitmap ID raw void* raw pointer of the event lorxFX_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxFX_EVENT FX event type sender orxSTRUCTURE sender recipient orxSTRUCTURE recipient fx orxFX the FX fxname string the name of the FX raw void* raw pointer of the event lorxINPUT_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxINPUT_EVENT input event type sender void* sender recipient void* recipient setname string the name of the input set inputname string the name of the input typelist table of orxINPUT_TYPE id == 'on' or 'off' input type list idlist table of string id == 'on' or 'off' input ID list modelist table of orxINPUT_MODE id == 'on' or 'off' input ID list valuelist table of number id == 'on' or 'off' value list raw void* raw pointer of the event lorxLOCALE_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxLOCALE_EVENT locale event type sender void* sender recipient void* recipient language string language group string group stringkey string string key stringvalue string string value raw void* raw pointer of the event lorxOBJECT_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxOBJECT_EVENT bbject event type sender orxOBJECT sender recipient orxOBJECT recipient raw void* raw pointer of the event lorxRENDER_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxRENDER_EVENT render event type sender orxOBJECT | orxVIEWPORT id == 'viewport_ ' | id == 'object_ ' sender recipient orxOBJECT | orxVIEWPORT id == 'viewport_ ' | id == 'object_ ' recipient transform orxDISPLAY_TRANSFORM id == 'object_*' transform raw void* raw pointer of the event lorxVIEWPORT_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxVIEWPORT_EVENT viewport event type sender orxVIEWPORT sender recipient orxVIEWPORT recipient raw void* raw pointer of the event lorxTIMELINE_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxTIMELINE_EVENT timeline event type sender orxSTRUCTURE sender recipient orxSTRUCTURE recipient timeline orxTIMELINE the timeline trackname string the name of the track event string timeline event string timestamp number timestamp raw void* raw pointer of the event lorxTEXTURE_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxTIMELINE_EVENT texture event type sender void* sender recipient orxTEXTURE recipient raw void* raw pointer of the event lorxSYSTEM_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxSYSTEM_EVENT system event type sender void* sender recipient void* recipient time number id == 'touch_*' or 'accelerate' touch time or acceleration time touchid integer id == 'touch_*' touch ID pressure number id == 'touch_*' pressure x number id == 'touch_*' x of touch position y number id == 'touch_*' y of touch position acceleration orxVECTOR id == 'accelerate' the acceleration valuelist table of string id == 'drop' drop value list value string id == 'clipboard' clipboard value framecount integer id == 'game_loop_*' frame count raw void* raw pointer of the event lorxSHADER_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxSHADER_EVENT shader event type sender orxSTRUCTURE sender recipient orxSTRUCTURE recipient shader orxShader the shader shadername string the name of the shader paramname string the name of the shader param paramtype orxSHADER_PARAM_TYPE the type of the shader param paramindex integer the index of the shader param value number | orxTEXTURE | orxVECTOR depends on paramtype shader param value raw void* raw pointer of the event lorxSPAWNER_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxSPAWNER_EVENT spawner event type sender orxSPAWNER sender recipient orxOBJECT recipient raw void* raw pointer of the event lorxSOUND_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxSOUND_EVENT sound event type sender orxHANDLE | orxOBJECT | orxSTRUCTURE sender recipient orxOBJECT recipient streaminfo orxSOUND_STREAM_INFO id == 'packet' or 'recording_*' stream info streampacket orxSOUND_STREAM_PACKET id == 'packet' or 'recording_*' stream packet filterdata orxSOUND_FILTER_DATA id == 'set_filter_param' filter data filterbusid integer id == 'set_filter_param' filter bus ID raw void* raw pointer of the event lorxRESOURCE_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxRESOURCE_EVENT resource event type sender void* sender recipient void* recipient time integer event time location string resource location groupid integer resource group ID nameid integer resource name ID typetag string resource tag raw void* raw pointer of the event lorxPHYSICS_EVENT_HANDLER # Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxPHYSICS_EVENT physics event type sender orxOBJECT sender recipient orxOBJECT recipient position orxVECTOR contact position normal orxVECTOR normal direction of contact raw void* raw pointer of the event","title":"Callbacks"},{"location":"callbacks.html#callbacks","text":"","title":"callbacks"},{"location":"callbacks.html#lorxlog_callback","text":"Signature: r1 = callback ( level , func , file , line , log ) Description: Callback function prototype for lorx.debug.log (see lorx.debug.setLogCallback ) Params: name type description level orxDEBUG_LEVEL debug level func string function name file string file name line integer line number log string log message Returns: type description orxSTATUS if 'failure', the log entry will be entirely inhibited","title":"lorxLOG_CALLBACK"},{"location":"callbacks.html#lorxclock_callback","text":"Signature: callback ( ci ) Description: Callback function for clocks and timers. (see lorx.clock.addGlobalTimer , lorx.clock.removeGlobalTimer , lorx.clock:register , lorx.clock:unregister , lorx.clock:addTimer , lorx.clock:removeTimer ) Params: name type description ci orxCLOCK_INFO - Returns:","title":"lorxCLOCK_CALLBACK"},{"location":"callbacks.html#lorxinit_callback","text":"Signature: r1 = callback () Description: Callback function to be called when Orx is initializing (see lorx.execute ) Params: Returns: type description orxSTATUS success / failure","title":"lorxINIT_CALLBACK"},{"location":"callbacks.html#lorxupdate_callback","text":"Signature: callback ( ci ) Description: Callback to be called on every frame (see lorx.execute and lorx.registerUpdate ) Params: name type description ci orxCLOCK_INFO - Returns:","title":"lorxUPDATE_CALLBACK"},{"location":"callbacks.html#lorxexit_callback","text":"Signature: callback () Description: Exit callback, will be called when Orx is exiting normally. (see lorx.execute ) Params: Returns:","title":"lorxEXIT_CALLBACK"},{"location":"callbacks.html#lorxcfgsave_callback","text":"Signature: r1 = callback ( section , key , file , useencryption ) Description: Filter config content when saving. (see lorx.config.save ) Params: name type description section string section name key string entry key name file string file name useencryption boolean use encryption or not Returns: type description boolean false to filter out","title":"lorxCFGSAVE_CALLBACK"},{"location":"callbacks.html#lorxcfgclear_callback","text":"Signature: r1 = callback ( section , key ) Description: Filter config content when clearing. (see lorx.config.clear ) Params: name type description section string section name key string entry key name Returns: type description boolean false to filter out","title":"lorxCFGCLEAR_CALLBACK"},{"location":"callbacks.html#lorxanim_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxANIM_EVENT anim event type sender orxSTRUCTURE sender recipient orxSTRUCTURE recipient anim orxSTRUCTURE concerned orxANIM animname string anim name count integer id == 'loop' loop count time number id == 'cut' or 'custom_event' time name string id == 'custom_event' custom event name value number id == 'custom_event' custom event value raw void* raw pointer of the event","title":"lorxANIM_EVENT_HANDLER"},{"location":"callbacks.html#lorxclock_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxCLOCK_EVENT clock event type sender orxCLOCK sender recipient void* recipient raw void* raw pointer of the event","title":"lorxCLOCK_EVENT_HANDLER"},{"location":"callbacks.html#lorxconfig_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxCONFIG_EVENT config event type sender void* sender recipient void* recipient raw void* raw pointer of the event","title":"lorxCONFIG_EVENT_HANDLER"},{"location":"callbacks.html#lorxdisplay_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxDISPLAY_EVENT display event type sender orxBITMAP id == 'load_bitmap' sender recipient orxBITMAP id == 'load_bitmap' recipient width integer id == 'set_video_mode' video mode width height integer id == 'set_video_mode' video mode height depth integer id == 'set_video_mode' video mode depth refreshrate integer id == 'set_video_mode' video mode refreshrate previouswidth integer id == 'set_video_mode' video mode previouswidth previousheight integer id == 'set_video_mode' video mode previousheight previousdepth integer id == 'set_video_mode' video mode previousdepth previousrefreshrate integer id == 'set_video_mode' video mode previousrefreshrate fullscreen boolean id == 'set_video_mode' video mode fullscreen location string id == 'load_bitmap' bitmap location filenameid integer id == 'load_bitmap' bitmap file name string ID bitmapid integer id == 'load_bitmap' bitmap ID raw void* raw pointer of the event","title":"lorxDISPLAY_EVENT_HANDLER"},{"location":"callbacks.html#lorxfx_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxFX_EVENT FX event type sender orxSTRUCTURE sender recipient orxSTRUCTURE recipient fx orxFX the FX fxname string the name of the FX raw void* raw pointer of the event","title":"lorxFX_EVENT_HANDLER"},{"location":"callbacks.html#lorxinput_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxINPUT_EVENT input event type sender void* sender recipient void* recipient setname string the name of the input set inputname string the name of the input typelist table of orxINPUT_TYPE id == 'on' or 'off' input type list idlist table of string id == 'on' or 'off' input ID list modelist table of orxINPUT_MODE id == 'on' or 'off' input ID list valuelist table of number id == 'on' or 'off' value list raw void* raw pointer of the event","title":"lorxINPUT_EVENT_HANDLER"},{"location":"callbacks.html#lorxlocale_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxLOCALE_EVENT locale event type sender void* sender recipient void* recipient language string language group string group stringkey string string key stringvalue string string value raw void* raw pointer of the event","title":"lorxLOCALE_EVENT_HANDLER"},{"location":"callbacks.html#lorxobject_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxOBJECT_EVENT bbject event type sender orxOBJECT sender recipient orxOBJECT recipient raw void* raw pointer of the event","title":"lorxOBJECT_EVENT_HANDLER"},{"location":"callbacks.html#lorxrender_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxRENDER_EVENT render event type sender orxOBJECT | orxVIEWPORT id == 'viewport_ ' | id == 'object_ ' sender recipient orxOBJECT | orxVIEWPORT id == 'viewport_ ' | id == 'object_ ' recipient transform orxDISPLAY_TRANSFORM id == 'object_*' transform raw void* raw pointer of the event","title":"lorxRENDER_EVENT_HANDLER"},{"location":"callbacks.html#lorxviewport_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxVIEWPORT_EVENT viewport event type sender orxVIEWPORT sender recipient orxVIEWPORT recipient raw void* raw pointer of the event","title":"lorxVIEWPORT_EVENT_HANDLER"},{"location":"callbacks.html#lorxtimeline_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxTIMELINE_EVENT timeline event type sender orxSTRUCTURE sender recipient orxSTRUCTURE recipient timeline orxTIMELINE the timeline trackname string the name of the track event string timeline event string timestamp number timestamp raw void* raw pointer of the event","title":"lorxTIMELINE_EVENT_HANDLER"},{"location":"callbacks.html#lorxtexture_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxTIMELINE_EVENT texture event type sender void* sender recipient orxTEXTURE recipient raw void* raw pointer of the event","title":"lorxTEXTURE_EVENT_HANDLER"},{"location":"callbacks.html#lorxsystem_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxSYSTEM_EVENT system event type sender void* sender recipient void* recipient time number id == 'touch_*' or 'accelerate' touch time or acceleration time touchid integer id == 'touch_*' touch ID pressure number id == 'touch_*' pressure x number id == 'touch_*' x of touch position y number id == 'touch_*' y of touch position acceleration orxVECTOR id == 'accelerate' the acceleration valuelist table of string id == 'drop' drop value list value string id == 'clipboard' clipboard value framecount integer id == 'game_loop_*' frame count raw void* raw pointer of the event","title":"lorxSYSTEM_EVENT_HANDLER"},{"location":"callbacks.html#lorxshader_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxSHADER_EVENT shader event type sender orxSTRUCTURE sender recipient orxSTRUCTURE recipient shader orxShader the shader shadername string the name of the shader paramname string the name of the shader param paramtype orxSHADER_PARAM_TYPE the type of the shader param paramindex integer the index of the shader param value number | orxTEXTURE | orxVECTOR depends on paramtype shader param value raw void* raw pointer of the event","title":"lorxSHADER_EVENT_HANDLER"},{"location":"callbacks.html#lorxspawner_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxSPAWNER_EVENT spawner event type sender orxSPAWNER sender recipient orxOBJECT recipient raw void* raw pointer of the event","title":"lorxSPAWNER_EVENT_HANDLER"},{"location":"callbacks.html#lorxsound_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxSOUND_EVENT sound event type sender orxHANDLE | orxOBJECT | orxSTRUCTURE sender recipient orxOBJECT recipient streaminfo orxSOUND_STREAM_INFO id == 'packet' or 'recording_*' stream info streampacket orxSOUND_STREAM_PACKET id == 'packet' or 'recording_*' stream packet filterdata orxSOUND_FILTER_DATA id == 'set_filter_param' filter data filterbusid integer id == 'set_filter_param' filter bus ID raw void* raw pointer of the event","title":"lorxSOUND_EVENT_HANDLER"},{"location":"callbacks.html#lorxresource_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxRESOURCE_EVENT resource event type sender void* sender recipient void* recipient time integer event time location string resource location groupid integer resource group ID nameid integer resource name ID typetag string resource tag raw void* raw pointer of the event","title":"lorxRESOURCE_EVENT_HANDLER"},{"location":"callbacks.html#lorxphysics_event_handler","text":"Signature: r1 = callback ( e ) Description: Handler for handling anim events. Event data are passed as a table (e). Return 'success' to pass on the event, 'failure' otherwise. Event data: name type condition description id orxPHYSICS_EVENT physics event type sender orxOBJECT sender recipient orxOBJECT recipient position orxVECTOR contact position normal orxVECTOR normal direction of contact raw void* raw pointer of the event","title":"lorxPHYSICS_EVENT_HANDLER"},{"location":"constants.html","text":"module constants # constants # name type value orxFILE_KU32_FLAG_INFO_NORMAL integer 0x00000001 orxFILE_KU32_FLAG_INFO_READONLY integer 0x00000002 orxFILE_KU32_FLAG_INFO_HIDDEN integer 0x00000004 orxFILE_KU32_FLAG_INFO_DIRECTORY integer 0x00000008 orxFILE_KU32_FLAG_OPEN_READ integer 0x10000000 orxFILE_KU32_FLAG_OPEN_WRITE integer 0x20000000 orxFILE_KU32_FLAG_OPEN_APPEND integer 0x40000000 orxFILE_KU32_FLAG_OPEN_BINARY integer 0x80000000 orxMOUSE_KZ_CONFIG_SECTION string \"Mouse\" orxMOUSE_KZ_CONFIG_SHOW_CURSOR string \"ShowCursor\" orxMOUSE_KZ_CONFIG_GRAB string \"Grab\" orxJOYSTICK_KU32_MIN_ID integer 1 orxJOYSTICK_KU32_MAX_ID integer (orxJOYSTICK_BUTTON_NUMBER / orxJOYSTICK_BUTTON_SINGLE_NUMBER) orxINPUT_KZ_CONFIG_SECTION string \"Input\" orxINPUT_KZ_CONFIG_DEFAULT_THRESHOLD string \"DefaultThreshold\" orxINPUT_KZ_CONFIG_DEFAULT_MULTIPLIER string \"DefaultMultiplier\" orxINPUT_KZ_CONFIG_COMBINE_LIST string \"CombineList\" orxINPUT_KZ_CONFIG_JOYSTICK_ID_LIST string \"JoyIDList\" orxINPUT_KU32_BINDING_NUMBER integer 16 orxINPUT_KZ_INTERNAL_SET_PREFIX string \"-=\" orxINPUT_KC_MODE_PREFIX_POSITIVE string '+' orxINPUT_KC_MODE_PREFIX_NEGATIVE string '-' orxINPUT_KU32_FLAG_TYPE_NONE integer 0x00000000 orxINPUT_KU32_MASK_TYPE_ALL integer 0x0000FFFF orxPROFILER_KU32_HISTORY_LENGTH integer 2 orxPROFILER_KS32_MARKER_ID_NONE integer -1 orxFPS_KZ_CLOCK_NAME string \"fps\" orxDEBUG_KU32_STATIC_FLAG_NONE integer 0x00000000 orxDEBUG_KU32_STATIC_FLAG_TIMESTAMP integer 0x00000001 orxDEBUG_KU32_STATIC_FLAG_FULL_TIMESTAMP integer 0x00000002 orxDEBUG_KU32_STATIC_FLAG_TYPE integer 0x00000004 orxDEBUG_KU32_STATIC_FLAG_TAGGED integer 0x00000008 orxDEBUG_KU32_STATIC_FLAG_FILE integer 0x00000010 orxDEBUG_KU32_STATIC_FLAG_TERMINAL integer 0x00000020 orxDEBUG_KU32_STATIC_FLAG_CONSOLE integer 0x00000040 orxDEBUG_KU32_STATIC_FLAG_CALLBACK integer 0x00000080 orxDEBUG_KU32_STATIC_MASK_DEFAULT integer 0x000000F5 orxDEBUG_KU32_STATIC_MASK_DEBUG integer 0x000000BD orxDEBUG_KU32_STATIC_MASK_USER_ALL integer 0x0FFFFFFF orxDEBUG_KZ_DEFAULT_DEBUG_FILE string \"orx-debug.log\" orxDEBUG_KZ_DEFAULT_LOG_FILE string \"orx.log\" orxDEBUG_KZ_DEFAULT_LOG_SUFFIX string \".log\" orxDEBUG_KZ_DEFAULT_DEBUG_SUFFIX string \"-debug.log\" orxDEBUG_KS32_BUFFER_OUTPUT_SIZE integer 2048 orxCOMMAND_KC_BLOCK_MARKER string '\"' orxCOMMAND_KC_PUSH_MARKER string '>' orxCOMMAND_KC_POP_MARKER string '<' orxCOMMAND_KC_GUID_MARKER string '^' orxCOMMAND_KC_SEPARATOR string ',' orxTHREAD_KU32_MAIN_THREAD_ID integer 0 orxTHREAD_KU32_MAX_THREAD_NUMBER integer 16 orxTHREAD_KU32_FLAG_NONE integer 0 orxTHREAD_KU32_MASK_ALL integer (((1 << orxTHREAD_KU32_MAX_THREAD_NUMBER) - 1) & ~(1 << orxTHREAD_KU32_MAIN_THREAD_ID)) orxCONFIG_KZ_RESOURCE_GROUP string \"Config\" orxCLOCK_KU32_CLOCK_BANK_SIZE integer 16 orxCLOCK_KU32_TIMER_BANK_SIZE integer 32 orxCLOCK_KU32_FUNCTION_BANK_SIZE integer 16 orxCLOCK_KZ_CONFIG_FREQUENCY string \"Frequency\" orxCLOCK_KZ_CONFIG_MODIFIER_LIST string \"ModifierList\" orxCLOCK_KZ_CORE string \"core\" orxRESOURCE_KC_LOCATION_SEPARATOR string ':' orxRESOURCE_KZ_DEFAULT_STORAGE string \".\" orxRESOURCE_KZ_TYPE_TAG_FILE string \"file\" orxEVENT_KU32_FLAG_ID_NONE integer 0x00000000 orxEVENT_KU32_MASK_ID_ALL integer 0xFFFFFFFF orxCONSOLE_KZ_INPUT_SET string \"-=ConsoleSet=-\" orxCONSOLE_KZ_INPUT_TOGGLE string \"Toggle\" orxCONSOLE_KZ_INPUT_AUTOCOMPLETE string \"AutoComplete\" orxCONSOLE_KZ_INPUT_DELETE string \"Delete\" orxCONSOLE_KZ_INPUT_DELETE_AFTER string \"DeleteAfter\" orxCONSOLE_KZ_INPUT_TOGGLE_MODE string \"ToggleMode\" orxCONSOLE_KZ_INPUT_ENTER string \"Enter\" orxCONSOLE_KZ_INPUT_PREVIOUS string \"Previous\" orxCONSOLE_KZ_INPUT_NEXT string \"Next\" orxCONSOLE_KZ_INPUT_LEFT string \"Left\" orxCONSOLE_KZ_INPUT_RIGHT string \"Right\" orxCONSOLE_KZ_INPUT_START string \"Start\" orxCONSOLE_KZ_INPUT_END string \"End\" orxCONSOLE_KZ_INPUT_PASTE string \"Paste\" orxCONSOLE_KZ_INPUT_SCROLL_DOWN string \"ScrollDown\" orxCONSOLE_KZ_INPUT_SCROLL_UP string \"ScrollUp\" orxCONSOLE_KZ_CONFIG_HISTORY_FILE_EXTENSION string \"cih\" orxANIMSET_KU32_FLAG_NONE integer 0x00000000 orxANIMSET_KU32_FLAG_REFERENCE_LOCK integer 0x00100000 orxANIMSET_KU32_FLAG_LINK_STATIC integer 0x00200000 orxANIMSET_KU32_LINK_FLAG_NONE integer 0x00000000 orxANIMSET_KU32_LINK_FLAG_LOOP_COUNT integer 0x10000000 orxANIMSET_KU32_LINK_FLAG_PRIORITY integer 0x20000000 orxANIMSET_KU32_LINK_FLAG_IMMEDIATE_CUT integer 0x40000000 orxANIMSET_KU32_LINK_FLAG_CLEAR_TARGET integer 0x80000000 orxANIMSET_KU32_MAX_ANIM_NUMBER integer 128 orxANIM_KU32_FLAG_NONE integer 0x00000000 orxANIM_KU32_FLAG_2D integer 0x00000001 orxANIM_KU32_MASK_USER_ALL integer 0x0000000F orxANIM_KU32_MASK_ALL integer 0xFFFFFFFF orxANIM_KU32_KEY_MAX_NUMBER integer 65535 orxANIM_KU32_EVENT_MAX_NUMBER integer 65535 orxSHADERPOINTER_KU32_SHADER_NUMBER integer 4 orxVIEWPORT_KU32_FLAG_ALIGN_CENTER integer 0x00000000 orxVIEWPORT_KU32_FLAG_ALIGN_LEFT integer 0x10000000 orxVIEWPORT_KU32_FLAG_ALIGN_RIGHT integer 0x20000000 orxVIEWPORT_KU32_FLAG_ALIGN_TOP integer 0x40000000 orxVIEWPORT_KU32_FLAG_ALIGN_BOTTOM integer 0x80000000 orxVIEWPORT_KU32_FLAG_NO_DEBUG integer 0x01000000 orxVIEWPORT_KU32_MAX_TEXTURE_NUMBER integer 8 orxCAMERA_KU32_FLAG_NONE integer 0x00000000 orxCAMERA_KU32_FLAG_2D integer 0x00000001 orxCAMERA_KU32_MASK_USER_ALL integer 0x000000FF orxCAMERA_KU32_GROUP_ID_NUMBER integer 16 orxRENDER_KZ_CONFIG_SECTION string \"Render\" orxRENDER_KZ_CONFIG_SHOW_FPS string \"ShowFPS\" orxRENDER_KZ_CONFIG_SHOW_PROFILER string \"ShowProfiler\" orxRENDER_KZ_CONFIG_MIN_FREQUENCY string \"MinFrequency\" orxRENDER_KZ_CONFIG_PROFILER_ORIENTATION string \"ProfilerOrientation\" orxRENDER_KZ_CONFIG_CONSOLE_COLOR string \"ConsoleColor\" orxRENDER_KZ_CONFIG_CONSOLE_ALPHA string \"ConsoleAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_BACKGROUND_COLOR string \"ConsoleBackgroundColor\" orxRENDER_KZ_CONFIG_CONSOLE_BACKGROUND_ALPHA string \"ConsoleBackgroundAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_SEPARATOR_COLOR string \"ConsoleSeparatorColor\" orxRENDER_KZ_CONFIG_CONSOLE_SEPARATOR_ALPHA string \"ConsoleSeparatorAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_INPUT_COLOR string \"ConsoleInputColor\" orxRENDER_KZ_CONFIG_CONSOLE_INPUT_ALPHA string \"ConsoleInputAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_COMPLETION_COLOR string \"ConsoleCompletionColor\" orxRENDER_KZ_CONFIG_CONSOLE_COMPLETION_ALPHA string \"ConsoleCompletionAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_LOG_COLOR string \"ConsoleLogColor\" orxRENDER_KZ_CONFIG_CONSOLE_LOG_ALPHA string \"ConsoleLogAlpha\" orxRENDER_KZ_INPUT_SET string \"-=RenderSet=-\" orxRENDER_KZ_INPUT_PROFILER_TOGGLE_HISTORY string \"ProfilerToggleHistory\" orxRENDER_KZ_INPUT_PROFILER_PAUSE string \"ProfilerPause\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_FRAME string \"ProfilerPreviousFrame\" orxRENDER_KZ_INPUT_PROFILER_NEXT_FRAME string \"ProfilerNextFrame\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_DEPTH string \"ProfilerPreviousDepth\" orxRENDER_KZ_INPUT_PROFILER_NEXT_DEPTH string \"ProfilerNextDepth\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_THREAD string \"ProfilerPreviousThread\" orxRENDER_KZ_INPUT_PROFILER_NEXT_THREAD string \"ProfilerNextThread\" orxMATH_KF_SQRT_2 number orx2F(1.414213562f) orxMATH_KF_EPSILON number orx2F(0.0001f) orxMATH_KF_TINY_EPSILON number orx2F(1.0e-037f) orxMATH_KF_MAX number orx2F(3.402823466e+38F) orxMATH_KF_2_PI number orx2F(6.283185307f) orxMATH_KF_PI number orx2F(3.141592654f) orxMATH_KF_PI_BY_2 number orx2F(1.570796327f) orxMATH_KF_PI_BY_4 number orx2F(0.785398163f) orxMATH_KF_DEG_TO_RAD number orx2F(3.141592654f / 180.0f) orxMATH_KF_RAD_TO_DEG number orx2F(180.0f / 3.141592654f) orxDISPLAY_KZ_CONFIG_SECTION string \"Display\" orxDISPLAY_KZ_CONFIG_WIDTH string \"ScreenWidth\" orxDISPLAY_KZ_CONFIG_HEIGHT string \"ScreenHeight\" orxDISPLAY_KZ_CONFIG_DEPTH string \"ScreenDepth\" orxDISPLAY_KZ_CONFIG_POSITION string \"ScreenPosition\" orxDISPLAY_KZ_CONFIG_REFRESH_RATE string \"RefreshRate\" orxDISPLAY_KZ_CONFIG_FULLSCREEN string \"FullScreen\" orxDISPLAY_KZ_CONFIG_ALLOW_RESIZE string \"AllowResize\" orxDISPLAY_KZ_CONFIG_DECORATION string \"Decoration\" orxDISPLAY_KZ_CONFIG_TITLE string \"Title\" orxDISPLAY_KZ_CONFIG_SMOOTH string \"Smoothing\" orxDISPLAY_KZ_CONFIG_VSYNC string \"VSync\" orxDISPLAY_KZ_CONFIG_DEPTHBUFFER string \"DepthBuffer\" orxDISPLAY_KZ_CONFIG_SHADER_VERSION string \"ShaderVersion\" orxDISPLAY_KZ_CONFIG_SHADER_EXTENSION_LIST string \"ShaderExtensionList\" orxDISPLAY_KZ_CONFIG_MONITOR string \"Monitor\" orxDISPLAY_KZ_CONFIG_CURSOR string \"Cursor\" orxDISPLAY_KZ_CONFIG_ICON_LIST string \"IconList\" orxDISPLAY_KZ_CONFIG_FRAMEBUFFER_SIZE string \"FramebufferSize\" orxDISPLAY_KZ_CONFIG_TEXTURE_UNIT_NUMBER string \"TextureUnitNumber\" orxDISPLAY_KZ_CONFIG_DRAW_BUFFER_NUMBER string \"DrawBufferNumber\" orxDISPLAY_KZ_CONFIG_MAX_TEXTURE_SIZE string \"MaxTextureSize\" orxDISPLAY_KZ_CONFIG_DEBUG_OUTPUT string \"DebugOutput\" orxCOLOR_KZ_CONFIG_SECTION string \"Color\" orxDISPLAY_KZ_SHADER_SUFFIX_TOP string \"_top\" orxDISPLAY_KZ_SHADER_SUFFIX_LEFT string \"_left\" orxDISPLAY_KZ_SHADER_SUFFIX_BOTTOM string \"_bottom\" orxDISPLAY_KZ_SHADER_SUFFIX_RIGHT string \"_right\" orxDISPLAY_KC_SHADER_EXTENSION_ADD string '+' orxDISPLAY_KC_SHADER_EXTENSION_REMOVE string '-' orxSCREENSHOT_KZ_DEFAULT_DIRECTORY_NAME string \".\" orxSCREENSHOT_KZ_DEFAULT_BASE_NAME string \"screenshot-\" orxSCREENSHOT_KZ_DEFAULT_EXTENSION string \"tga\" orxSCREENSHOT_KU32_DEFAULT_DIGITS integer 4 orxFONT_KZ_DEFAULT_FONT_NAME string \"default\" orxTEXTURE_KZ_RESOURCE_GROUP string \"Texture\" orxTEXTURE_KZ_LOCALE_GROUP string \"Texture\" orxTEXTURE_KZ_SCREEN string \"screen\" orxTEXTURE_KZ_PIXEL string \"pixel\" orxTEXT_KZ_LOCALE_GROUP string \"Text\" orxGRAPHIC_KU32_FLAG_NONE integer 0x00000000 orxGRAPHIC_KU32_FLAG_2D integer 0x00000001 orxGRAPHIC_KU32_FLAG_TEXT integer 0x00000002 orxGRAPHIC_KU32_MASK_TYPE integer 0x00000003 orxGRAPHIC_KU32_FLAG_FLIP_X integer 0x00000004 orxGRAPHIC_KU32_FLAG_FLIP_Y integer 0x00000008 orxGRAPHIC_KU32_MASK_FLIP_BOTH integer 0x0000000C orxGRAPHIC_KU32_FLAG_ALIGN_CENTER integer 0x00000000 orxGRAPHIC_KU32_FLAG_ALIGN_LEFT integer 0x00000010 orxGRAPHIC_KU32_FLAG_ALIGN_RIGHT integer 0x00000020 orxGRAPHIC_KU32_FLAG_ALIGN_TOP integer 0x00000040 orxGRAPHIC_KU32_FLAG_ALIGN_BOTTOM integer 0x00000080 orxGRAPHIC_KU32_FLAG_ALIGN_TRUNCATE integer 0x00000100 orxGRAPHIC_KU32_FLAG_ALIGN_ROUND integer 0x00000200 orxGRAPHIC_KU32_MASK_ALIGN integer 0x000003F0 orxGRAPHIC_KU32_MASK_USER_ALL integer 0x00000FFF orxGRAPHIC_KZ_CONFIG_TEXTURE_NAME string \"Texture\" orxGRAPHIC_KZ_CONFIG_TEXTURE_ORIGIN string \"TextureOrigin\" orxGRAPHIC_KZ_CONFIG_TEXTURE_SIZE string \"TextureSize\" orxGRAPHIC_KZ_CONFIG_TEXT_NAME string \"Text\" orxGRAPHIC_KZ_CONFIG_PIVOT string \"Pivot\" orxGRAPHIC_KZ_CONFIG_COLOR string \"Color\" orxGRAPHIC_KZ_CONFIG_ALPHA string \"Alpha\" orxGRAPHIC_KZ_CONFIG_RGB string \"RGB\" orxGRAPHIC_KZ_CONFIG_HSL string \"HSL\" orxGRAPHIC_KZ_CONFIG_HSV string \"HSV\" orxGRAPHIC_KZ_CONFIG_FLIP string \"Flip\" orxGRAPHIC_KZ_CONFIG_REPEAT string \"Repeat\" orxGRAPHIC_KZ_CONFIG_SMOOTHING string \"Smoothing\" orxGRAPHIC_KZ_CONFIG_BLEND_MODE string \"BlendMode\" orxGRAPHIC_KZ_CONFIG_KEEP_IN_CACHE string \"KeepInCache\" orxANSI_KC_MARKER string 'x1b' orxANSI_KZ_COLOR_RESET string \"x1b[0m\" orxANSI_KZ_COLOR_BOLD_ON string \"x1b[1m\" orxANSI_KZ_COLOR_ITALICS_ON string \"x1b[3m\" orxANSI_KZ_COLOR_UNDERLINE_ON string \"x1b[4m\" orxANSI_KZ_COLOR_BLINK_ON string \"x1b[5m\" orxANSI_KZ_COLOR_INVERSE_ON string \"x1b[7m\" orxANSI_KZ_COLOR_STRIKETHROUGH_ON string \"x1b[9m\" orxANSI_KZ_COLOR_BOLD_OFF string \"x1b[22m\" orxANSI_KZ_COLOR_ITALICS_OFF string \"x1b[23m\" orxANSI_KZ_COLOR_UNDERLINE_OFF string \"x1b[24m\" orxANSI_KZ_COLOR_BLINK_OFF string \"x1b[25m\" orxANSI_KZ_COLOR_INVERSE_OFF string \"x1b[27m\" orxANSI_KZ_COLOR_STRIKETHROUGH_OFF string \"x1b[29m\" orxANSI_KZ_COLOR_FG_BLACK string \"x1b[30m\" orxANSI_KZ_COLOR_FG_RED string \"x1b[31m\" orxANSI_KZ_COLOR_FG_GREEN string \"x1b[32m\" orxANSI_KZ_COLOR_FG_YELLOW string \"x1b[33m\" orxANSI_KZ_COLOR_FG_BLUE string \"x1b[34m\" orxANSI_KZ_COLOR_FG_MAGENTA string \"x1b[35m\" orxANSI_KZ_COLOR_FG_CYAN string \"x1b[36m\" orxANSI_KZ_COLOR_FG_WHITE string \"x1b[37m\" orxANSI_KZ_COLOR_FG_DEFAULT string \"x1b[39m\" orxANSI_KZ_COLOR_BG_BLACK string \"x1b[40m\" orxANSI_KZ_COLOR_BG_RED string \"x1b[41m\" orxANSI_KZ_COLOR_BG_GREEN string \"x1b[42m\" orxANSI_KZ_COLOR_BG_YELLOW string \"x1b[43m\" orxANSI_KZ_COLOR_BG_BLUE string \"x1b[44m\" orxANSI_KZ_COLOR_BG_MAGENTA string \"x1b[45m\" orxANSI_KZ_COLOR_BG_CYAN string \"x1b[46m\" orxANSI_KZ_COLOR_BG_WHITE string \"x1b[47m\" orxANSI_KZ_COLOR_BG_DEFAULT string \"x1b[49m\" orxBODY_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_DEF_KU32_FLAG_2D integer 0x00000001 orxBODY_DEF_KU32_FLAG_DYNAMIC integer 0x00000002 orxBODY_DEF_KU32_FLAG_HIGH_SPEED integer 0x00000004 orxBODY_DEF_KU32_FLAG_FIXED_ROTATION integer 0x00000008 orxBODY_DEF_KU32_FLAG_CAN_MOVE integer 0x00000010 orxBODY_DEF_KU32_FLAG_ALLOW_SLEEP integer 0x00000020 orxBODY_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_PART_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_PART_DEF_KU32_FLAG_SPHERE integer 0x00000001 orxBODY_PART_DEF_KU32_FLAG_BOX integer 0x00000002 orxBODY_PART_DEF_KU32_FLAG_MESH integer 0x00000004 orxBODY_PART_DEF_KU32_FLAG_EDGE integer 0x00000008 orxBODY_PART_DEF_KU32_FLAG_CHAIN integer 0x00000010 orxBODY_PART_DEF_KU32_MASK_TYPE integer 0x0000001F orxBODY_PART_DEF_KU32_FLAG_SOLID integer 0x10000000 orxBODY_PART_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_JOINT_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_JOINT_DEF_KU32_FLAG_REVOLUTE integer 0x00000001 orxBODY_JOINT_DEF_KU32_FLAG_PRISMATIC integer 0x00000002 orxBODY_JOINT_DEF_KU32_FLAG_SPRING integer 0x00000004 orxBODY_JOINT_DEF_KU32_FLAG_ROPE integer 0x00000008 orxBODY_JOINT_DEF_KU32_FLAG_PULLEY integer 0x00000010 orxBODY_JOINT_DEF_KU32_FLAG_SUSPENSION integer 0x00000020 orxBODY_JOINT_DEF_KU32_FLAG_WELD integer 0x00000040 orxBODY_JOINT_DEF_KU32_FLAG_FRICTION integer 0x00000080 orxBODY_JOINT_DEF_KU32_FLAG_GEAR integer 0x00000100 orxBODY_JOINT_DEF_KU32_MASK_TYPE integer 0x00000FFF orxBODY_JOINT_DEF_KU32_FLAG_COLLIDE integer 0x10000000 orxBODY_JOINT_DEF_KU32_FLAG_ROTATION_LIMIT integer 0x20000000 orxBODY_JOINT_DEF_KU32_FLAG_MOTOR integer 0x40000000 orxBODY_JOINT_DEF_KU32_FLAG_TRANSLATION_LIMIT integer 0x80000000 orxBODY_JOINT_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_PART_DEF_KU32_MESH_VERTEX_NUMBER integer 8 orxPHYSICS_KZ_CONFIG_SECTION string \"Physics\" orxPHYSICS_KZ_CONFIG_GRAVITY string \"Gravity\" orxPHYSICS_KZ_CONFIG_ALLOW_SLEEP string \"AllowSleep\" orxPHYSICS_KZ_CONFIG_ITERATIONS string \"IterationsPerStep\" orxPHYSICS_KZ_CONFIG_RATIO string \"DimensionRatio\" orxPHYSICS_KZ_CONFIG_STEP_FREQUENCY string \"StepFrequency\" orxPHYSICS_KZ_CONFIG_SHOW_DEBUG string \"ShowDebug\" orxPHYSICS_KZ_CONFIG_COLLISION_FLAG_LIST string \"CollisionFlagList\" orxPHYSICS_KZ_CONFIG_INTERPOLATE string \"Interpolate\" orxSTRING_KC_VECTOR_START string '(' orxSTRING_KC_VECTOR_START_ALT string '{' orxSTRING_KC_VECTOR_SEPARATOR string ',' orxSTRING_KC_VECTOR_END string ')' orxSTRING_KC_VECTOR_END_ALT string '}' orxSOUNDSYSTEM_KZ_CONFIG_SECTION string \"SoundSystem\" orxSOUNDSYSTEM_KZ_CONFIG_RATIO string \"DimensionRatio\" orxSOUNDSYSTEM_KZ_CONFIG_MUTE_IN_BACKGROUND string \"MuteInBackground\" orxSOUNDSYSTEM_KZ_CONFIG_LISTENERS string \"Listeners\" orxSOUND_KZ_RESOURCE_GROUP string \"Sound\" orxSOUND_KZ_LOCALE_GROUP string \"Sound\" orxSOUND_KZ_MASTER_BUS string \"master\" orxSOUNDPOINTER_KU32_SOUND_NUMBER integer 4 orxSTRUCTURE_GUID_MAGIC_TAG_DELETED integer 0xDEFACED0DEADC0DEULL orxSTRUCTURE_GUID_MASK_STRUCTURE_ID integer 0x00000000000000FFULL orxSTRUCTURE_GUID_SHIFT_STRUCTURE_ID integer 0 orxSTRUCTURE_GUID_MASK_ITEM_ID integer 0x00000000FFFFFF00ULL orxSTRUCTURE_GUID_SHIFT_ITEM_ID integer 8 orxSTRUCTURE_GUID_MASK_INSTANCE_ID integer 0xFFFFFFFF00000000ULL orxSTRUCTURE_GUID_SHIFT_INSTANCE_ID integer 32 orxSPAWNER_KU32_FLAG_NONE integer 0x00000000 orxSPAWNER_KU32_FLAG_AUTO_DELETE integer 0x00000001 orxSPAWNER_KU32_FLAG_AUTO_RESET integer 0x00000002 orxSPAWNER_KU32_FLAG_USE_ALPHA integer 0x00000004 orxSPAWNER_KU32_FLAG_USE_COLOR integer 0x00000008 orxSPAWNER_KU32_FLAG_USE_ROTATION integer 0x00000010 orxSPAWNER_KU32_FLAG_USE_SCALE integer 0x00000020 orxSPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_OBJECT integer 0x00000040 orxSPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_SPAWNER integer 0x00000080 orxSPAWNER_KU32_MASK_USE_RELATIVE_SPEED integer 0x000000C0 orxSPAWNER_KU32_FLAG_USE_SELF_AS_PARENT integer 0x00000100 orxSPAWNER_KU32_FLAG_CLEAN_ON_DELETE integer 0x00000200 orxSPAWNER_KU32_FLAG_INTERPOLATE integer 0x00000400 orxSPAWNER_KU32_MASK_USER_ALL integer 0x000004FF orxFRAME_KU32_FLAG_NONE integer 0x00000000 orxFRAME_KU32_FLAG_SCROLL_X integer 0x00000001 orxFRAME_KU32_FLAG_SCROLL_Y integer 0x00000002 orxFRAME_KU32_MASK_SCROLL_BOTH integer 0x00000003 orxFRAME_KU32_FLAG_DEPTH_SCALE integer 0x00000004 orxFRAME_KU32_FLAG_FLIP_X integer 0x00000010 orxFRAME_KU32_FLAG_FLIP_Y integer 0x00000020 orxFRAME_KU32_MASK_FLIP_BOTH integer 0x00000030 orxFRAME_KU32_FLAG_IGNORE_NONE integer 0x00000000 orxFRAME_KU32_FLAG_IGNORE_ROTATION integer 0x00000100 orxFRAME_KU32_FLAG_IGNORE_SCALE_X integer 0x00000200 orxFRAME_KU32_FLAG_IGNORE_SCALE_Y integer 0x00000400 orxFRAME_KU32_FLAG_IGNORE_SCALE_Z integer 0x00000800 orxFRAME_KU32_MASK_IGNORE_SCALE integer 0x00000E00 orxFRAME_KU32_FLAG_IGNORE_POSITION_ROTATION integer 0x00001000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_X integer 0x00002000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Y integer 0x00004000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Z integer 0x00008000 orxFRAME_KU32_MASK_IGNORE_POSITION_SCALE integer 0x0000E000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_X integer 0x00010000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Y integer 0x00020000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Z integer 0x00040000 orxFRAME_KU32_MASK_IGNORE_POSITION_POSITION integer 0x00070000 orxFRAME_KU32_MASK_IGNORE_POSITION integer 0x0007F000 orxFRAME_KU32_MASK_IGNORE_ALL integer 0x0007FF00 orxFRAME_KU32_MASK_USER_ALL integer 0x0007FFFF orxFXPOINTER_KU32_FX_NUMBER integer 8 orxOBJECT_KZ_DEFAULT_GROUP string \"default\" orxFX_SLOT_KU32_FLAG_ABSOLUTE integer 0x00000100 orxFX_SLOT_KU32_FLAG_USE_ROTATION integer 0x00000200 orxFX_SLOT_KU32_FLAG_USE_SCALE integer 0x00000400 orxU64_UNDEFINED integer (orxU64)(-1) orxU32_UNDEFINED integer (orxU32)(-1) orxU16_UNDEFINED integer (orxU16)(-1) orxU8_UNDEFINED integer (orxU8)(-1) orxHANDLE_UNDEFINED orxHANDLE (orxHANDLE)(-1) orxSTRINGID_UNDEFINED integer (orxSTRINGID)(-1)","title":"Constants"},{"location":"constants.html#module-constants","text":"","title":"module constants"},{"location":"constants.html#constants","text":"name type value orxFILE_KU32_FLAG_INFO_NORMAL integer 0x00000001 orxFILE_KU32_FLAG_INFO_READONLY integer 0x00000002 orxFILE_KU32_FLAG_INFO_HIDDEN integer 0x00000004 orxFILE_KU32_FLAG_INFO_DIRECTORY integer 0x00000008 orxFILE_KU32_FLAG_OPEN_READ integer 0x10000000 orxFILE_KU32_FLAG_OPEN_WRITE integer 0x20000000 orxFILE_KU32_FLAG_OPEN_APPEND integer 0x40000000 orxFILE_KU32_FLAG_OPEN_BINARY integer 0x80000000 orxMOUSE_KZ_CONFIG_SECTION string \"Mouse\" orxMOUSE_KZ_CONFIG_SHOW_CURSOR string \"ShowCursor\" orxMOUSE_KZ_CONFIG_GRAB string \"Grab\" orxJOYSTICK_KU32_MIN_ID integer 1 orxJOYSTICK_KU32_MAX_ID integer (orxJOYSTICK_BUTTON_NUMBER / orxJOYSTICK_BUTTON_SINGLE_NUMBER) orxINPUT_KZ_CONFIG_SECTION string \"Input\" orxINPUT_KZ_CONFIG_DEFAULT_THRESHOLD string \"DefaultThreshold\" orxINPUT_KZ_CONFIG_DEFAULT_MULTIPLIER string \"DefaultMultiplier\" orxINPUT_KZ_CONFIG_COMBINE_LIST string \"CombineList\" orxINPUT_KZ_CONFIG_JOYSTICK_ID_LIST string \"JoyIDList\" orxINPUT_KU32_BINDING_NUMBER integer 16 orxINPUT_KZ_INTERNAL_SET_PREFIX string \"-=\" orxINPUT_KC_MODE_PREFIX_POSITIVE string '+' orxINPUT_KC_MODE_PREFIX_NEGATIVE string '-' orxINPUT_KU32_FLAG_TYPE_NONE integer 0x00000000 orxINPUT_KU32_MASK_TYPE_ALL integer 0x0000FFFF orxPROFILER_KU32_HISTORY_LENGTH integer 2 orxPROFILER_KS32_MARKER_ID_NONE integer -1 orxFPS_KZ_CLOCK_NAME string \"fps\" orxDEBUG_KU32_STATIC_FLAG_NONE integer 0x00000000 orxDEBUG_KU32_STATIC_FLAG_TIMESTAMP integer 0x00000001 orxDEBUG_KU32_STATIC_FLAG_FULL_TIMESTAMP integer 0x00000002 orxDEBUG_KU32_STATIC_FLAG_TYPE integer 0x00000004 orxDEBUG_KU32_STATIC_FLAG_TAGGED integer 0x00000008 orxDEBUG_KU32_STATIC_FLAG_FILE integer 0x00000010 orxDEBUG_KU32_STATIC_FLAG_TERMINAL integer 0x00000020 orxDEBUG_KU32_STATIC_FLAG_CONSOLE integer 0x00000040 orxDEBUG_KU32_STATIC_FLAG_CALLBACK integer 0x00000080 orxDEBUG_KU32_STATIC_MASK_DEFAULT integer 0x000000F5 orxDEBUG_KU32_STATIC_MASK_DEBUG integer 0x000000BD orxDEBUG_KU32_STATIC_MASK_USER_ALL integer 0x0FFFFFFF orxDEBUG_KZ_DEFAULT_DEBUG_FILE string \"orx-debug.log\" orxDEBUG_KZ_DEFAULT_LOG_FILE string \"orx.log\" orxDEBUG_KZ_DEFAULT_LOG_SUFFIX string \".log\" orxDEBUG_KZ_DEFAULT_DEBUG_SUFFIX string \"-debug.log\" orxDEBUG_KS32_BUFFER_OUTPUT_SIZE integer 2048 orxCOMMAND_KC_BLOCK_MARKER string '\"' orxCOMMAND_KC_PUSH_MARKER string '>' orxCOMMAND_KC_POP_MARKER string '<' orxCOMMAND_KC_GUID_MARKER string '^' orxCOMMAND_KC_SEPARATOR string ',' orxTHREAD_KU32_MAIN_THREAD_ID integer 0 orxTHREAD_KU32_MAX_THREAD_NUMBER integer 16 orxTHREAD_KU32_FLAG_NONE integer 0 orxTHREAD_KU32_MASK_ALL integer (((1 << orxTHREAD_KU32_MAX_THREAD_NUMBER) - 1) & ~(1 << orxTHREAD_KU32_MAIN_THREAD_ID)) orxCONFIG_KZ_RESOURCE_GROUP string \"Config\" orxCLOCK_KU32_CLOCK_BANK_SIZE integer 16 orxCLOCK_KU32_TIMER_BANK_SIZE integer 32 orxCLOCK_KU32_FUNCTION_BANK_SIZE integer 16 orxCLOCK_KZ_CONFIG_FREQUENCY string \"Frequency\" orxCLOCK_KZ_CONFIG_MODIFIER_LIST string \"ModifierList\" orxCLOCK_KZ_CORE string \"core\" orxRESOURCE_KC_LOCATION_SEPARATOR string ':' orxRESOURCE_KZ_DEFAULT_STORAGE string \".\" orxRESOURCE_KZ_TYPE_TAG_FILE string \"file\" orxEVENT_KU32_FLAG_ID_NONE integer 0x00000000 orxEVENT_KU32_MASK_ID_ALL integer 0xFFFFFFFF orxCONSOLE_KZ_INPUT_SET string \"-=ConsoleSet=-\" orxCONSOLE_KZ_INPUT_TOGGLE string \"Toggle\" orxCONSOLE_KZ_INPUT_AUTOCOMPLETE string \"AutoComplete\" orxCONSOLE_KZ_INPUT_DELETE string \"Delete\" orxCONSOLE_KZ_INPUT_DELETE_AFTER string \"DeleteAfter\" orxCONSOLE_KZ_INPUT_TOGGLE_MODE string \"ToggleMode\" orxCONSOLE_KZ_INPUT_ENTER string \"Enter\" orxCONSOLE_KZ_INPUT_PREVIOUS string \"Previous\" orxCONSOLE_KZ_INPUT_NEXT string \"Next\" orxCONSOLE_KZ_INPUT_LEFT string \"Left\" orxCONSOLE_KZ_INPUT_RIGHT string \"Right\" orxCONSOLE_KZ_INPUT_START string \"Start\" orxCONSOLE_KZ_INPUT_END string \"End\" orxCONSOLE_KZ_INPUT_PASTE string \"Paste\" orxCONSOLE_KZ_INPUT_SCROLL_DOWN string \"ScrollDown\" orxCONSOLE_KZ_INPUT_SCROLL_UP string \"ScrollUp\" orxCONSOLE_KZ_CONFIG_HISTORY_FILE_EXTENSION string \"cih\" orxANIMSET_KU32_FLAG_NONE integer 0x00000000 orxANIMSET_KU32_FLAG_REFERENCE_LOCK integer 0x00100000 orxANIMSET_KU32_FLAG_LINK_STATIC integer 0x00200000 orxANIMSET_KU32_LINK_FLAG_NONE integer 0x00000000 orxANIMSET_KU32_LINK_FLAG_LOOP_COUNT integer 0x10000000 orxANIMSET_KU32_LINK_FLAG_PRIORITY integer 0x20000000 orxANIMSET_KU32_LINK_FLAG_IMMEDIATE_CUT integer 0x40000000 orxANIMSET_KU32_LINK_FLAG_CLEAR_TARGET integer 0x80000000 orxANIMSET_KU32_MAX_ANIM_NUMBER integer 128 orxANIM_KU32_FLAG_NONE integer 0x00000000 orxANIM_KU32_FLAG_2D integer 0x00000001 orxANIM_KU32_MASK_USER_ALL integer 0x0000000F orxANIM_KU32_MASK_ALL integer 0xFFFFFFFF orxANIM_KU32_KEY_MAX_NUMBER integer 65535 orxANIM_KU32_EVENT_MAX_NUMBER integer 65535 orxSHADERPOINTER_KU32_SHADER_NUMBER integer 4 orxVIEWPORT_KU32_FLAG_ALIGN_CENTER integer 0x00000000 orxVIEWPORT_KU32_FLAG_ALIGN_LEFT integer 0x10000000 orxVIEWPORT_KU32_FLAG_ALIGN_RIGHT integer 0x20000000 orxVIEWPORT_KU32_FLAG_ALIGN_TOP integer 0x40000000 orxVIEWPORT_KU32_FLAG_ALIGN_BOTTOM integer 0x80000000 orxVIEWPORT_KU32_FLAG_NO_DEBUG integer 0x01000000 orxVIEWPORT_KU32_MAX_TEXTURE_NUMBER integer 8 orxCAMERA_KU32_FLAG_NONE integer 0x00000000 orxCAMERA_KU32_FLAG_2D integer 0x00000001 orxCAMERA_KU32_MASK_USER_ALL integer 0x000000FF orxCAMERA_KU32_GROUP_ID_NUMBER integer 16 orxRENDER_KZ_CONFIG_SECTION string \"Render\" orxRENDER_KZ_CONFIG_SHOW_FPS string \"ShowFPS\" orxRENDER_KZ_CONFIG_SHOW_PROFILER string \"ShowProfiler\" orxRENDER_KZ_CONFIG_MIN_FREQUENCY string \"MinFrequency\" orxRENDER_KZ_CONFIG_PROFILER_ORIENTATION string \"ProfilerOrientation\" orxRENDER_KZ_CONFIG_CONSOLE_COLOR string \"ConsoleColor\" orxRENDER_KZ_CONFIG_CONSOLE_ALPHA string \"ConsoleAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_BACKGROUND_COLOR string \"ConsoleBackgroundColor\" orxRENDER_KZ_CONFIG_CONSOLE_BACKGROUND_ALPHA string \"ConsoleBackgroundAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_SEPARATOR_COLOR string \"ConsoleSeparatorColor\" orxRENDER_KZ_CONFIG_CONSOLE_SEPARATOR_ALPHA string \"ConsoleSeparatorAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_INPUT_COLOR string \"ConsoleInputColor\" orxRENDER_KZ_CONFIG_CONSOLE_INPUT_ALPHA string \"ConsoleInputAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_COMPLETION_COLOR string \"ConsoleCompletionColor\" orxRENDER_KZ_CONFIG_CONSOLE_COMPLETION_ALPHA string \"ConsoleCompletionAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_LOG_COLOR string \"ConsoleLogColor\" orxRENDER_KZ_CONFIG_CONSOLE_LOG_ALPHA string \"ConsoleLogAlpha\" orxRENDER_KZ_INPUT_SET string \"-=RenderSet=-\" orxRENDER_KZ_INPUT_PROFILER_TOGGLE_HISTORY string \"ProfilerToggleHistory\" orxRENDER_KZ_INPUT_PROFILER_PAUSE string \"ProfilerPause\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_FRAME string \"ProfilerPreviousFrame\" orxRENDER_KZ_INPUT_PROFILER_NEXT_FRAME string \"ProfilerNextFrame\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_DEPTH string \"ProfilerPreviousDepth\" orxRENDER_KZ_INPUT_PROFILER_NEXT_DEPTH string \"ProfilerNextDepth\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_THREAD string \"ProfilerPreviousThread\" orxRENDER_KZ_INPUT_PROFILER_NEXT_THREAD string \"ProfilerNextThread\" orxMATH_KF_SQRT_2 number orx2F(1.414213562f) orxMATH_KF_EPSILON number orx2F(0.0001f) orxMATH_KF_TINY_EPSILON number orx2F(1.0e-037f) orxMATH_KF_MAX number orx2F(3.402823466e+38F) orxMATH_KF_2_PI number orx2F(6.283185307f) orxMATH_KF_PI number orx2F(3.141592654f) orxMATH_KF_PI_BY_2 number orx2F(1.570796327f) orxMATH_KF_PI_BY_4 number orx2F(0.785398163f) orxMATH_KF_DEG_TO_RAD number orx2F(3.141592654f / 180.0f) orxMATH_KF_RAD_TO_DEG number orx2F(180.0f / 3.141592654f) orxDISPLAY_KZ_CONFIG_SECTION string \"Display\" orxDISPLAY_KZ_CONFIG_WIDTH string \"ScreenWidth\" orxDISPLAY_KZ_CONFIG_HEIGHT string \"ScreenHeight\" orxDISPLAY_KZ_CONFIG_DEPTH string \"ScreenDepth\" orxDISPLAY_KZ_CONFIG_POSITION string \"ScreenPosition\" orxDISPLAY_KZ_CONFIG_REFRESH_RATE string \"RefreshRate\" orxDISPLAY_KZ_CONFIG_FULLSCREEN string \"FullScreen\" orxDISPLAY_KZ_CONFIG_ALLOW_RESIZE string \"AllowResize\" orxDISPLAY_KZ_CONFIG_DECORATION string \"Decoration\" orxDISPLAY_KZ_CONFIG_TITLE string \"Title\" orxDISPLAY_KZ_CONFIG_SMOOTH string \"Smoothing\" orxDISPLAY_KZ_CONFIG_VSYNC string \"VSync\" orxDISPLAY_KZ_CONFIG_DEPTHBUFFER string \"DepthBuffer\" orxDISPLAY_KZ_CONFIG_SHADER_VERSION string \"ShaderVersion\" orxDISPLAY_KZ_CONFIG_SHADER_EXTENSION_LIST string \"ShaderExtensionList\" orxDISPLAY_KZ_CONFIG_MONITOR string \"Monitor\" orxDISPLAY_KZ_CONFIG_CURSOR string \"Cursor\" orxDISPLAY_KZ_CONFIG_ICON_LIST string \"IconList\" orxDISPLAY_KZ_CONFIG_FRAMEBUFFER_SIZE string \"FramebufferSize\" orxDISPLAY_KZ_CONFIG_TEXTURE_UNIT_NUMBER string \"TextureUnitNumber\" orxDISPLAY_KZ_CONFIG_DRAW_BUFFER_NUMBER string \"DrawBufferNumber\" orxDISPLAY_KZ_CONFIG_MAX_TEXTURE_SIZE string \"MaxTextureSize\" orxDISPLAY_KZ_CONFIG_DEBUG_OUTPUT string \"DebugOutput\" orxCOLOR_KZ_CONFIG_SECTION string \"Color\" orxDISPLAY_KZ_SHADER_SUFFIX_TOP string \"_top\" orxDISPLAY_KZ_SHADER_SUFFIX_LEFT string \"_left\" orxDISPLAY_KZ_SHADER_SUFFIX_BOTTOM string \"_bottom\" orxDISPLAY_KZ_SHADER_SUFFIX_RIGHT string \"_right\" orxDISPLAY_KC_SHADER_EXTENSION_ADD string '+' orxDISPLAY_KC_SHADER_EXTENSION_REMOVE string '-' orxSCREENSHOT_KZ_DEFAULT_DIRECTORY_NAME string \".\" orxSCREENSHOT_KZ_DEFAULT_BASE_NAME string \"screenshot-\" orxSCREENSHOT_KZ_DEFAULT_EXTENSION string \"tga\" orxSCREENSHOT_KU32_DEFAULT_DIGITS integer 4 orxFONT_KZ_DEFAULT_FONT_NAME string \"default\" orxTEXTURE_KZ_RESOURCE_GROUP string \"Texture\" orxTEXTURE_KZ_LOCALE_GROUP string \"Texture\" orxTEXTURE_KZ_SCREEN string \"screen\" orxTEXTURE_KZ_PIXEL string \"pixel\" orxTEXT_KZ_LOCALE_GROUP string \"Text\" orxGRAPHIC_KU32_FLAG_NONE integer 0x00000000 orxGRAPHIC_KU32_FLAG_2D integer 0x00000001 orxGRAPHIC_KU32_FLAG_TEXT integer 0x00000002 orxGRAPHIC_KU32_MASK_TYPE integer 0x00000003 orxGRAPHIC_KU32_FLAG_FLIP_X integer 0x00000004 orxGRAPHIC_KU32_FLAG_FLIP_Y integer 0x00000008 orxGRAPHIC_KU32_MASK_FLIP_BOTH integer 0x0000000C orxGRAPHIC_KU32_FLAG_ALIGN_CENTER integer 0x00000000 orxGRAPHIC_KU32_FLAG_ALIGN_LEFT integer 0x00000010 orxGRAPHIC_KU32_FLAG_ALIGN_RIGHT integer 0x00000020 orxGRAPHIC_KU32_FLAG_ALIGN_TOP integer 0x00000040 orxGRAPHIC_KU32_FLAG_ALIGN_BOTTOM integer 0x00000080 orxGRAPHIC_KU32_FLAG_ALIGN_TRUNCATE integer 0x00000100 orxGRAPHIC_KU32_FLAG_ALIGN_ROUND integer 0x00000200 orxGRAPHIC_KU32_MASK_ALIGN integer 0x000003F0 orxGRAPHIC_KU32_MASK_USER_ALL integer 0x00000FFF orxGRAPHIC_KZ_CONFIG_TEXTURE_NAME string \"Texture\" orxGRAPHIC_KZ_CONFIG_TEXTURE_ORIGIN string \"TextureOrigin\" orxGRAPHIC_KZ_CONFIG_TEXTURE_SIZE string \"TextureSize\" orxGRAPHIC_KZ_CONFIG_TEXT_NAME string \"Text\" orxGRAPHIC_KZ_CONFIG_PIVOT string \"Pivot\" orxGRAPHIC_KZ_CONFIG_COLOR string \"Color\" orxGRAPHIC_KZ_CONFIG_ALPHA string \"Alpha\" orxGRAPHIC_KZ_CONFIG_RGB string \"RGB\" orxGRAPHIC_KZ_CONFIG_HSL string \"HSL\" orxGRAPHIC_KZ_CONFIG_HSV string \"HSV\" orxGRAPHIC_KZ_CONFIG_FLIP string \"Flip\" orxGRAPHIC_KZ_CONFIG_REPEAT string \"Repeat\" orxGRAPHIC_KZ_CONFIG_SMOOTHING string \"Smoothing\" orxGRAPHIC_KZ_CONFIG_BLEND_MODE string \"BlendMode\" orxGRAPHIC_KZ_CONFIG_KEEP_IN_CACHE string \"KeepInCache\" orxANSI_KC_MARKER string 'x1b' orxANSI_KZ_COLOR_RESET string \"x1b[0m\" orxANSI_KZ_COLOR_BOLD_ON string \"x1b[1m\" orxANSI_KZ_COLOR_ITALICS_ON string \"x1b[3m\" orxANSI_KZ_COLOR_UNDERLINE_ON string \"x1b[4m\" orxANSI_KZ_COLOR_BLINK_ON string \"x1b[5m\" orxANSI_KZ_COLOR_INVERSE_ON string \"x1b[7m\" orxANSI_KZ_COLOR_STRIKETHROUGH_ON string \"x1b[9m\" orxANSI_KZ_COLOR_BOLD_OFF string \"x1b[22m\" orxANSI_KZ_COLOR_ITALICS_OFF string \"x1b[23m\" orxANSI_KZ_COLOR_UNDERLINE_OFF string \"x1b[24m\" orxANSI_KZ_COLOR_BLINK_OFF string \"x1b[25m\" orxANSI_KZ_COLOR_INVERSE_OFF string \"x1b[27m\" orxANSI_KZ_COLOR_STRIKETHROUGH_OFF string \"x1b[29m\" orxANSI_KZ_COLOR_FG_BLACK string \"x1b[30m\" orxANSI_KZ_COLOR_FG_RED string \"x1b[31m\" orxANSI_KZ_COLOR_FG_GREEN string \"x1b[32m\" orxANSI_KZ_COLOR_FG_YELLOW string \"x1b[33m\" orxANSI_KZ_COLOR_FG_BLUE string \"x1b[34m\" orxANSI_KZ_COLOR_FG_MAGENTA string \"x1b[35m\" orxANSI_KZ_COLOR_FG_CYAN string \"x1b[36m\" orxANSI_KZ_COLOR_FG_WHITE string \"x1b[37m\" orxANSI_KZ_COLOR_FG_DEFAULT string \"x1b[39m\" orxANSI_KZ_COLOR_BG_BLACK string \"x1b[40m\" orxANSI_KZ_COLOR_BG_RED string \"x1b[41m\" orxANSI_KZ_COLOR_BG_GREEN string \"x1b[42m\" orxANSI_KZ_COLOR_BG_YELLOW string \"x1b[43m\" orxANSI_KZ_COLOR_BG_BLUE string \"x1b[44m\" orxANSI_KZ_COLOR_BG_MAGENTA string \"x1b[45m\" orxANSI_KZ_COLOR_BG_CYAN string \"x1b[46m\" orxANSI_KZ_COLOR_BG_WHITE string \"x1b[47m\" orxANSI_KZ_COLOR_BG_DEFAULT string \"x1b[49m\" orxBODY_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_DEF_KU32_FLAG_2D integer 0x00000001 orxBODY_DEF_KU32_FLAG_DYNAMIC integer 0x00000002 orxBODY_DEF_KU32_FLAG_HIGH_SPEED integer 0x00000004 orxBODY_DEF_KU32_FLAG_FIXED_ROTATION integer 0x00000008 orxBODY_DEF_KU32_FLAG_CAN_MOVE integer 0x00000010 orxBODY_DEF_KU32_FLAG_ALLOW_SLEEP integer 0x00000020 orxBODY_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_PART_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_PART_DEF_KU32_FLAG_SPHERE integer 0x00000001 orxBODY_PART_DEF_KU32_FLAG_BOX integer 0x00000002 orxBODY_PART_DEF_KU32_FLAG_MESH integer 0x00000004 orxBODY_PART_DEF_KU32_FLAG_EDGE integer 0x00000008 orxBODY_PART_DEF_KU32_FLAG_CHAIN integer 0x00000010 orxBODY_PART_DEF_KU32_MASK_TYPE integer 0x0000001F orxBODY_PART_DEF_KU32_FLAG_SOLID integer 0x10000000 orxBODY_PART_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_JOINT_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_JOINT_DEF_KU32_FLAG_REVOLUTE integer 0x00000001 orxBODY_JOINT_DEF_KU32_FLAG_PRISMATIC integer 0x00000002 orxBODY_JOINT_DEF_KU32_FLAG_SPRING integer 0x00000004 orxBODY_JOINT_DEF_KU32_FLAG_ROPE integer 0x00000008 orxBODY_JOINT_DEF_KU32_FLAG_PULLEY integer 0x00000010 orxBODY_JOINT_DEF_KU32_FLAG_SUSPENSION integer 0x00000020 orxBODY_JOINT_DEF_KU32_FLAG_WELD integer 0x00000040 orxBODY_JOINT_DEF_KU32_FLAG_FRICTION integer 0x00000080 orxBODY_JOINT_DEF_KU32_FLAG_GEAR integer 0x00000100 orxBODY_JOINT_DEF_KU32_MASK_TYPE integer 0x00000FFF orxBODY_JOINT_DEF_KU32_FLAG_COLLIDE integer 0x10000000 orxBODY_JOINT_DEF_KU32_FLAG_ROTATION_LIMIT integer 0x20000000 orxBODY_JOINT_DEF_KU32_FLAG_MOTOR integer 0x40000000 orxBODY_JOINT_DEF_KU32_FLAG_TRANSLATION_LIMIT integer 0x80000000 orxBODY_JOINT_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_PART_DEF_KU32_MESH_VERTEX_NUMBER integer 8 orxPHYSICS_KZ_CONFIG_SECTION string \"Physics\" orxPHYSICS_KZ_CONFIG_GRAVITY string \"Gravity\" orxPHYSICS_KZ_CONFIG_ALLOW_SLEEP string \"AllowSleep\" orxPHYSICS_KZ_CONFIG_ITERATIONS string \"IterationsPerStep\" orxPHYSICS_KZ_CONFIG_RATIO string \"DimensionRatio\" orxPHYSICS_KZ_CONFIG_STEP_FREQUENCY string \"StepFrequency\" orxPHYSICS_KZ_CONFIG_SHOW_DEBUG string \"ShowDebug\" orxPHYSICS_KZ_CONFIG_COLLISION_FLAG_LIST string \"CollisionFlagList\" orxPHYSICS_KZ_CONFIG_INTERPOLATE string \"Interpolate\" orxSTRING_KC_VECTOR_START string '(' orxSTRING_KC_VECTOR_START_ALT string '{' orxSTRING_KC_VECTOR_SEPARATOR string ',' orxSTRING_KC_VECTOR_END string ')' orxSTRING_KC_VECTOR_END_ALT string '}' orxSOUNDSYSTEM_KZ_CONFIG_SECTION string \"SoundSystem\" orxSOUNDSYSTEM_KZ_CONFIG_RATIO string \"DimensionRatio\" orxSOUNDSYSTEM_KZ_CONFIG_MUTE_IN_BACKGROUND string \"MuteInBackground\" orxSOUNDSYSTEM_KZ_CONFIG_LISTENERS string \"Listeners\" orxSOUND_KZ_RESOURCE_GROUP string \"Sound\" orxSOUND_KZ_LOCALE_GROUP string \"Sound\" orxSOUND_KZ_MASTER_BUS string \"master\" orxSOUNDPOINTER_KU32_SOUND_NUMBER integer 4 orxSTRUCTURE_GUID_MAGIC_TAG_DELETED integer 0xDEFACED0DEADC0DEULL orxSTRUCTURE_GUID_MASK_STRUCTURE_ID integer 0x00000000000000FFULL orxSTRUCTURE_GUID_SHIFT_STRUCTURE_ID integer 0 orxSTRUCTURE_GUID_MASK_ITEM_ID integer 0x00000000FFFFFF00ULL orxSTRUCTURE_GUID_SHIFT_ITEM_ID integer 8 orxSTRUCTURE_GUID_MASK_INSTANCE_ID integer 0xFFFFFFFF00000000ULL orxSTRUCTURE_GUID_SHIFT_INSTANCE_ID integer 32 orxSPAWNER_KU32_FLAG_NONE integer 0x00000000 orxSPAWNER_KU32_FLAG_AUTO_DELETE integer 0x00000001 orxSPAWNER_KU32_FLAG_AUTO_RESET integer 0x00000002 orxSPAWNER_KU32_FLAG_USE_ALPHA integer 0x00000004 orxSPAWNER_KU32_FLAG_USE_COLOR integer 0x00000008 orxSPAWNER_KU32_FLAG_USE_ROTATION integer 0x00000010 orxSPAWNER_KU32_FLAG_USE_SCALE integer 0x00000020 orxSPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_OBJECT integer 0x00000040 orxSPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_SPAWNER integer 0x00000080 orxSPAWNER_KU32_MASK_USE_RELATIVE_SPEED integer 0x000000C0 orxSPAWNER_KU32_FLAG_USE_SELF_AS_PARENT integer 0x00000100 orxSPAWNER_KU32_FLAG_CLEAN_ON_DELETE integer 0x00000200 orxSPAWNER_KU32_FLAG_INTERPOLATE integer 0x00000400 orxSPAWNER_KU32_MASK_USER_ALL integer 0x000004FF orxFRAME_KU32_FLAG_NONE integer 0x00000000 orxFRAME_KU32_FLAG_SCROLL_X integer 0x00000001 orxFRAME_KU32_FLAG_SCROLL_Y integer 0x00000002 orxFRAME_KU32_MASK_SCROLL_BOTH integer 0x00000003 orxFRAME_KU32_FLAG_DEPTH_SCALE integer 0x00000004 orxFRAME_KU32_FLAG_FLIP_X integer 0x00000010 orxFRAME_KU32_FLAG_FLIP_Y integer 0x00000020 orxFRAME_KU32_MASK_FLIP_BOTH integer 0x00000030 orxFRAME_KU32_FLAG_IGNORE_NONE integer 0x00000000 orxFRAME_KU32_FLAG_IGNORE_ROTATION integer 0x00000100 orxFRAME_KU32_FLAG_IGNORE_SCALE_X integer 0x00000200 orxFRAME_KU32_FLAG_IGNORE_SCALE_Y integer 0x00000400 orxFRAME_KU32_FLAG_IGNORE_SCALE_Z integer 0x00000800 orxFRAME_KU32_MASK_IGNORE_SCALE integer 0x00000E00 orxFRAME_KU32_FLAG_IGNORE_POSITION_ROTATION integer 0x00001000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_X integer 0x00002000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Y integer 0x00004000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Z integer 0x00008000 orxFRAME_KU32_MASK_IGNORE_POSITION_SCALE integer 0x0000E000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_X integer 0x00010000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Y integer 0x00020000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Z integer 0x00040000 orxFRAME_KU32_MASK_IGNORE_POSITION_POSITION integer 0x00070000 orxFRAME_KU32_MASK_IGNORE_POSITION integer 0x0007F000 orxFRAME_KU32_MASK_IGNORE_ALL integer 0x0007FF00 orxFRAME_KU32_MASK_USER_ALL integer 0x0007FFFF orxFXPOINTER_KU32_FX_NUMBER integer 8 orxOBJECT_KZ_DEFAULT_GROUP string \"default\" orxFX_SLOT_KU32_FLAG_ABSOLUTE integer 0x00000100 orxFX_SLOT_KU32_FLAG_USE_ROTATION integer 0x00000200 orxFX_SLOT_KU32_FLAG_USE_SCALE integer 0x00000400 orxU64_UNDEFINED integer (orxU64)(-1) orxU32_UNDEFINED integer (orxU32)(-1) orxU16_UNDEFINED integer (orxU16)(-1) orxU8_UNDEFINED integer (orxU8)(-1) orxHANDLE_UNDEFINED orxHANDLE (orxHANDLE)(-1) orxSTRINGID_UNDEFINED integer (orxSTRINGID)(-1)","title":"constants"},{"location":"enums.html","text":"orxANIM_EVENT # lua string orx enum start orxANIM_EVENT_START stop orxANIM_EVENT_STOP cut orxANIM_EVENT_CUT loop orxANIM_EVENT_LOOP update orxANIM_EVENT_UPDATE custom_event orxANIM_EVENT_CUSTOM_EVENT none orxANIM_EVENT_NONE orxCLOCK_EVENT # lua string orx enum restart orxCLOCK_EVENT_RESTART resync orxCLOCK_EVENT_RESYNC pause orxCLOCK_EVENT_PAUSE unpause orxCLOCK_EVENT_UNPAUSE none orxCLOCK_EVENT_NONE orxCLOCK_MODIFIER # lua string orx enum fixed orxCLOCK_MODIFIER_FIXED multiply orxCLOCK_MODIFIER_MULTIPLY maxed orxCLOCK_MODIFIER_MAXED average orxCLOCK_MODIFIER_AVERAGE none orxCLOCK_MODIFIER_NONE orxCLOCK_PRIORITY # lua string orx enum lowest orxCLOCK_PRIORITY_LOWEST lower orxCLOCK_PRIORITY_LOWER low orxCLOCK_PRIORITY_LOW normal orxCLOCK_PRIORITY_NORMAL high orxCLOCK_PRIORITY_HIGH higher orxCLOCK_PRIORITY_HIGHER highest orxCLOCK_PRIORITY_HIGHEST none orxCLOCK_PRIORITY_NONE orxCOMMAND_VAR_TYPE # lua string orx enum string orxCOMMAND_VAR_TYPE_STRING float orxCOMMAND_VAR_TYPE_FLOAT s32 orxCOMMAND_VAR_TYPE_S32 u32 orxCOMMAND_VAR_TYPE_U32 s64 orxCOMMAND_VAR_TYPE_S64 u64 orxCOMMAND_VAR_TYPE_U64 bool orxCOMMAND_VAR_TYPE_BOOL vector orxCOMMAND_VAR_TYPE_VECTOR numeric orxCOMMAND_VAR_TYPE_NUMERIC none orxCOMMAND_VAR_TYPE_NONE orxCONFIG_EVENT # lua string orx enum reload_start orxCONFIG_EVENT_RELOAD_START reload_stop orxCONFIG_EVENT_RELOAD_STOP none orxCONFIG_EVENT_NONE orxDEBUG_LEVEL # lua string orx enum anim orxDEBUG_LEVEL_ANIM config orxDEBUG_LEVEL_CONFIG clock orxDEBUG_LEVEL_CLOCK command orxDEBUG_LEVEL_COMMAND display orxDEBUG_LEVEL_DISPLAY file orxDEBUG_LEVEL_FILE input orxDEBUG_LEVEL_INPUT joystick orxDEBUG_LEVEL_JOYSTICK keyboard orxDEBUG_LEVEL_KEYBOARD memory orxDEBUG_LEVEL_MEMORY mouse orxDEBUG_LEVEL_MOUSE object orxDEBUG_LEVEL_OBJECT param orxDEBUG_LEVEL_PARAM physics orxDEBUG_LEVEL_PHYSICS plugin orxDEBUG_LEVEL_PLUGIN profiler orxDEBUG_LEVEL_PROFILER render orxDEBUG_LEVEL_RENDER screenshot orxDEBUG_LEVEL_SCREENSHOT sound orxDEBUG_LEVEL_SOUND system orxDEBUG_LEVEL_SYSTEM timer orxDEBUG_LEVEL_TIMER log orxDEBUG_LEVEL_LOG assert orxDEBUG_LEVEL_ASSERT user orxDEBUG_LEVEL_USER all orxDEBUG_LEVEL_ALL none orxDEBUG_LEVEL_NONE orxDISPLAY_BLEND_MODE # lua string orx enum alpha orxDISPLAY_BLEND_MODE_ALPHA multiply orxDISPLAY_BLEND_MODE_MULTIPLY add orxDISPLAY_BLEND_MODE_ADD premul orxDISPLAY_BLEND_MODE_PREMUL none orxDISPLAY_BLEND_MODE_NONE orxDISPLAY_EVENT # lua string orx enum set_video_mode orxDISPLAY_EVENT_SET_VIDEO_MODE load_bitmap orxDISPLAY_EVENT_LOAD_BITMAP none orxDISPLAY_EVENT_NONE orxDISPLAY_PRIMITIVE # lua string orx enum points orxDISPLAY_PRIMITIVE_POINTS lines orxDISPLAY_PRIMITIVE_LINES line_loop orxDISPLAY_PRIMITIVE_LINE_LOOP line_strip orxDISPLAY_PRIMITIVE_LINE_STRIP triangles orxDISPLAY_PRIMITIVE_TRIANGLES triangle_strip orxDISPLAY_PRIMITIVE_TRIANGLE_STRIP triangle_fan orxDISPLAY_PRIMITIVE_TRIANGLE_FAN none orxDISPLAY_PRIMITIVE_NONE orxDISPLAY_SMOOTHING # lua string orx enum default orxDISPLAY_SMOOTHING_DEFAULT on orxDISPLAY_SMOOTHING_ON off orxDISPLAY_SMOOTHING_OFF none orxDISPLAY_SMOOTHING_NONE orxEVENT_TYPE # lua string orx enum anim orxEVENT_TYPE_ANIM clock orxEVENT_TYPE_CLOCK config orxEVENT_TYPE_CONFIG display orxEVENT_TYPE_DISPLAY fx orxEVENT_TYPE_FX input orxEVENT_TYPE_INPUT locale orxEVENT_TYPE_LOCALE object orxEVENT_TYPE_OBJECT render orxEVENT_TYPE_RENDER physics orxEVENT_TYPE_PHYSICS resource orxEVENT_TYPE_RESOURCE shader orxEVENT_TYPE_SHADER sound orxEVENT_TYPE_SOUND spawner orxEVENT_TYPE_SPAWNER system orxEVENT_TYPE_SYSTEM texture orxEVENT_TYPE_TEXTURE timeline orxEVENT_TYPE_TIMELINE viewport orxEVENT_TYPE_VIEWPORT first_reserved orxEVENT_TYPE_FIRST_RESERVED last_reserved orxEVENT_TYPE_LAST_RESERVED user_defined orxEVENT_TYPE_USER_DEFINED none orxEVENT_TYPE_NONE orxFRAME_SPACE # lua string orx enum global orxFRAME_SPACE_GLOBAL local orxFRAME_SPACE_LOCAL none orxFRAME_SPACE_NONE orxFX_CURVE # lua string orx enum linear orxFX_CURVE_LINEAR smooth orxFX_CURVE_SMOOTH smoother orxFX_CURVE_SMOOTHER triangle orxFX_CURVE_TRIANGLE sine orxFX_CURVE_SINE square orxFX_CURVE_SQUARE none orxFX_CURVE_NONE orxFX_EVENT # lua string orx enum start orxFX_EVENT_START stop orxFX_EVENT_STOP add orxFX_EVENT_ADD remove orxFX_EVENT_REMOVE loop orxFX_EVENT_LOOP none orxFX_EVENT_NONE orxINPUT_EVENT # lua string orx enum on orxINPUT_EVENT_ON off orxINPUT_EVENT_OFF select_set orxINPUT_EVENT_SELECT_SET remove_set orxINPUT_EVENT_REMOVE_SET none orxINPUT_EVENT_NONE orxINPUT_MODE # lua string orx enum full orxINPUT_MODE_FULL positive orxINPUT_MODE_POSITIVE negative orxINPUT_MODE_NEGATIVE none orxINPUT_MODE_NONE orxINPUT_TYPE # lua string orx enum keyboard_key orxINPUT_TYPE_KEYBOARD_KEY mouse_button orxINPUT_TYPE_MOUSE_BUTTON mouse_axis orxINPUT_TYPE_MOUSE_AXIS joystick_button orxINPUT_TYPE_JOYSTICK_BUTTON joystick_axis orxINPUT_TYPE_JOYSTICK_AXIS external orxINPUT_TYPE_EXTERNAL none orxINPUT_TYPE_NONE orxJOYSTICK_AXIS # lua string orx enum lx_1 orxJOYSTICK_AXIS_LX_1 ly_1 orxJOYSTICK_AXIS_LY_1 rx_1 orxJOYSTICK_AXIS_RX_1 ry_1 orxJOYSTICK_AXIS_RY_1 ltrigger_1 orxJOYSTICK_AXIS_LTRIGGER_1 rtrigger_1 orxJOYSTICK_AXIS_RTRIGGER_1 lx_2 orxJOYSTICK_AXIS_LX_2 ly_2 orxJOYSTICK_AXIS_LY_2 rx_2 orxJOYSTICK_AXIS_RX_2 ry_2 orxJOYSTICK_AXIS_RY_2 ltrigger_2 orxJOYSTICK_AXIS_LTRIGGER_2 rtrigger_2 orxJOYSTICK_AXIS_RTRIGGER_2 lx_3 orxJOYSTICK_AXIS_LX_3 ly_3 orxJOYSTICK_AXIS_LY_3 rx_3 orxJOYSTICK_AXIS_RX_3 ry_3 orxJOYSTICK_AXIS_RY_3 ltrigger_3 orxJOYSTICK_AXIS_LTRIGGER_3 rtrigger_3 orxJOYSTICK_AXIS_RTRIGGER_3 lx_4 orxJOYSTICK_AXIS_LX_4 ly_4 orxJOYSTICK_AXIS_LY_4 rx_4 orxJOYSTICK_AXIS_RX_4 ry_4 orxJOYSTICK_AXIS_RY_4 ltrigger_4 orxJOYSTICK_AXIS_LTRIGGER_4 rtrigger_4 orxJOYSTICK_AXIS_RTRIGGER_4 lx_5 orxJOYSTICK_AXIS_LX_5 ly_5 orxJOYSTICK_AXIS_LY_5 rx_5 orxJOYSTICK_AXIS_RX_5 ry_5 orxJOYSTICK_AXIS_RY_5 ltrigger_5 orxJOYSTICK_AXIS_LTRIGGER_5 rtrigger_5 orxJOYSTICK_AXIS_RTRIGGER_5 lx_6 orxJOYSTICK_AXIS_LX_6 ly_6 orxJOYSTICK_AXIS_LY_6 rx_6 orxJOYSTICK_AXIS_RX_6 ry_6 orxJOYSTICK_AXIS_RY_6 ltrigger_6 orxJOYSTICK_AXIS_LTRIGGER_6 rtrigger_6 orxJOYSTICK_AXIS_RTRIGGER_6 lx_7 orxJOYSTICK_AXIS_LX_7 ly_7 orxJOYSTICK_AXIS_LY_7 rx_7 orxJOYSTICK_AXIS_RX_7 ry_7 orxJOYSTICK_AXIS_RY_7 ltrigger_7 orxJOYSTICK_AXIS_LTRIGGER_7 rtrigger_7 orxJOYSTICK_AXIS_RTRIGGER_7 lx_8 orxJOYSTICK_AXIS_LX_8 ly_8 orxJOYSTICK_AXIS_LY_8 rx_8 orxJOYSTICK_AXIS_RX_8 ry_8 orxJOYSTICK_AXIS_RY_8 ltrigger_8 orxJOYSTICK_AXIS_LTRIGGER_8 rtrigger_8 orxJOYSTICK_AXIS_RTRIGGER_8 lx_9 orxJOYSTICK_AXIS_LX_9 ly_9 orxJOYSTICK_AXIS_LY_9 rx_9 orxJOYSTICK_AXIS_RX_9 ry_9 orxJOYSTICK_AXIS_RY_9 ltrigger_9 orxJOYSTICK_AXIS_LTRIGGER_9 rtrigger_9 orxJOYSTICK_AXIS_RTRIGGER_9 lx_10 orxJOYSTICK_AXIS_LX_10 ly_10 orxJOYSTICK_AXIS_LY_10 rx_10 orxJOYSTICK_AXIS_RX_10 ry_10 orxJOYSTICK_AXIS_RY_10 ltrigger_10 orxJOYSTICK_AXIS_LTRIGGER_10 rtrigger_10 orxJOYSTICK_AXIS_RTRIGGER_10 lx_11 orxJOYSTICK_AXIS_LX_11 ly_11 orxJOYSTICK_AXIS_LY_11 rx_11 orxJOYSTICK_AXIS_RX_11 ry_11 orxJOYSTICK_AXIS_RY_11 ltrigger_11 orxJOYSTICK_AXIS_LTRIGGER_11 rtrigger_11 orxJOYSTICK_AXIS_RTRIGGER_11 lx_12 orxJOYSTICK_AXIS_LX_12 ly_12 orxJOYSTICK_AXIS_LY_12 rx_12 orxJOYSTICK_AXIS_RX_12 ry_12 orxJOYSTICK_AXIS_RY_12 ltrigger_12 orxJOYSTICK_AXIS_LTRIGGER_12 rtrigger_12 orxJOYSTICK_AXIS_RTRIGGER_12 lx_13 orxJOYSTICK_AXIS_LX_13 ly_13 orxJOYSTICK_AXIS_LY_13 rx_13 orxJOYSTICK_AXIS_RX_13 ry_13 orxJOYSTICK_AXIS_RY_13 ltrigger_13 orxJOYSTICK_AXIS_LTRIGGER_13 rtrigger_13 orxJOYSTICK_AXIS_RTRIGGER_13 lx_14 orxJOYSTICK_AXIS_LX_14 ly_14 orxJOYSTICK_AXIS_LY_14 rx_14 orxJOYSTICK_AXIS_RX_14 ry_14 orxJOYSTICK_AXIS_RY_14 ltrigger_14 orxJOYSTICK_AXIS_LTRIGGER_14 rtrigger_14 orxJOYSTICK_AXIS_RTRIGGER_14 lx_15 orxJOYSTICK_AXIS_LX_15 ly_15 orxJOYSTICK_AXIS_LY_15 rx_15 orxJOYSTICK_AXIS_RX_15 ry_15 orxJOYSTICK_AXIS_RY_15 ltrigger_15 orxJOYSTICK_AXIS_LTRIGGER_15 rtrigger_15 orxJOYSTICK_AXIS_RTRIGGER_15 lx_16 orxJOYSTICK_AXIS_LX_16 ly_16 orxJOYSTICK_AXIS_LY_16 rx_16 orxJOYSTICK_AXIS_RX_16 ry_16 orxJOYSTICK_AXIS_RY_16 ltrigger_16 orxJOYSTICK_AXIS_LTRIGGER_16 rtrigger_16 orxJOYSTICK_AXIS_RTRIGGER_16 none orxJOYSTICK_AXIS_NONE orxJOYSTICK_BUTTON # lua string orx enum a_1 orxJOYSTICK_BUTTON_A_1 b_1 orxJOYSTICK_BUTTON_B_1 x_1 orxJOYSTICK_BUTTON_X_1 y_1 orxJOYSTICK_BUTTON_Y_1 lbumper_1 orxJOYSTICK_BUTTON_LBUMPER_1 rbumper_1 orxJOYSTICK_BUTTON_RBUMPER_1 back_1 orxJOYSTICK_BUTTON_BACK_1 start_1 orxJOYSTICK_BUTTON_START_1 guide_1 orxJOYSTICK_BUTTON_GUIDE_1 lthumb_1 orxJOYSTICK_BUTTON_LTHUMB_1 rthumb_1 orxJOYSTICK_BUTTON_RTHUMB_1 up_1 orxJOYSTICK_BUTTON_UP_1 right_1 orxJOYSTICK_BUTTON_RIGHT_1 down_1 orxJOYSTICK_BUTTON_DOWN_1 left_1 orxJOYSTICK_BUTTON_LEFT_1 1_1 orxJOYSTICK_BUTTON_1_1 2_1 orxJOYSTICK_BUTTON_2_1 3_1 orxJOYSTICK_BUTTON_3_1 4_1 orxJOYSTICK_BUTTON_4_1 5_1 orxJOYSTICK_BUTTON_5_1 6_1 orxJOYSTICK_BUTTON_6_1 7_1 orxJOYSTICK_BUTTON_7_1 8_1 orxJOYSTICK_BUTTON_8_1 9_1 orxJOYSTICK_BUTTON_9_1 10_1 orxJOYSTICK_BUTTON_10_1 11_1 orxJOYSTICK_BUTTON_11_1 12_1 orxJOYSTICK_BUTTON_12_1 13_1 orxJOYSTICK_BUTTON_13_1 14_1 orxJOYSTICK_BUTTON_14_1 15_1 orxJOYSTICK_BUTTON_15_1 16_1 orxJOYSTICK_BUTTON_16_1 17_1 orxJOYSTICK_BUTTON_17_1 18_1 orxJOYSTICK_BUTTON_18_1 19_1 orxJOYSTICK_BUTTON_19_1 20_1 orxJOYSTICK_BUTTON_20_1 21_1 orxJOYSTICK_BUTTON_21_1 22_1 orxJOYSTICK_BUTTON_22_1 23_1 orxJOYSTICK_BUTTON_23_1 24_1 orxJOYSTICK_BUTTON_24_1 25_1 orxJOYSTICK_BUTTON_25_1 a_2 orxJOYSTICK_BUTTON_A_2 b_2 orxJOYSTICK_BUTTON_B_2 x_2 orxJOYSTICK_BUTTON_X_2 y_2 orxJOYSTICK_BUTTON_Y_2 lbumper_2 orxJOYSTICK_BUTTON_LBUMPER_2 rbumper_2 orxJOYSTICK_BUTTON_RBUMPER_2 back_2 orxJOYSTICK_BUTTON_BACK_2 start_2 orxJOYSTICK_BUTTON_START_2 guide_2 orxJOYSTICK_BUTTON_GUIDE_2 lthumb_2 orxJOYSTICK_BUTTON_LTHUMB_2 rthumb_2 orxJOYSTICK_BUTTON_RTHUMB_2 up_2 orxJOYSTICK_BUTTON_UP_2 right_2 orxJOYSTICK_BUTTON_RIGHT_2 down_2 orxJOYSTICK_BUTTON_DOWN_2 left_2 orxJOYSTICK_BUTTON_LEFT_2 1_2 orxJOYSTICK_BUTTON_1_2 2_2 orxJOYSTICK_BUTTON_2_2 3_2 orxJOYSTICK_BUTTON_3_2 4_2 orxJOYSTICK_BUTTON_4_2 5_2 orxJOYSTICK_BUTTON_5_2 6_2 orxJOYSTICK_BUTTON_6_2 7_2 orxJOYSTICK_BUTTON_7_2 8_2 orxJOYSTICK_BUTTON_8_2 9_2 orxJOYSTICK_BUTTON_9_2 10_2 orxJOYSTICK_BUTTON_10_2 11_2 orxJOYSTICK_BUTTON_11_2 12_2 orxJOYSTICK_BUTTON_12_2 13_2 orxJOYSTICK_BUTTON_13_2 14_2 orxJOYSTICK_BUTTON_14_2 15_2 orxJOYSTICK_BUTTON_15_2 16_2 orxJOYSTICK_BUTTON_16_2 17_2 orxJOYSTICK_BUTTON_17_2 18_2 orxJOYSTICK_BUTTON_18_2 19_2 orxJOYSTICK_BUTTON_19_2 20_2 orxJOYSTICK_BUTTON_20_2 21_2 orxJOYSTICK_BUTTON_21_2 22_2 orxJOYSTICK_BUTTON_22_2 23_2 orxJOYSTICK_BUTTON_23_2 24_2 orxJOYSTICK_BUTTON_24_2 25_2 orxJOYSTICK_BUTTON_25_2 a_3 orxJOYSTICK_BUTTON_A_3 b_3 orxJOYSTICK_BUTTON_B_3 x_3 orxJOYSTICK_BUTTON_X_3 y_3 orxJOYSTICK_BUTTON_Y_3 lbumper_3 orxJOYSTICK_BUTTON_LBUMPER_3 rbumper_3 orxJOYSTICK_BUTTON_RBUMPER_3 back_3 orxJOYSTICK_BUTTON_BACK_3 start_3 orxJOYSTICK_BUTTON_START_3 guide_3 orxJOYSTICK_BUTTON_GUIDE_3 lthumb_3 orxJOYSTICK_BUTTON_LTHUMB_3 rthumb_3 orxJOYSTICK_BUTTON_RTHUMB_3 up_3 orxJOYSTICK_BUTTON_UP_3 right_3 orxJOYSTICK_BUTTON_RIGHT_3 down_3 orxJOYSTICK_BUTTON_DOWN_3 left_3 orxJOYSTICK_BUTTON_LEFT_3 1_3 orxJOYSTICK_BUTTON_1_3 2_3 orxJOYSTICK_BUTTON_2_3 3_3 orxJOYSTICK_BUTTON_3_3 4_3 orxJOYSTICK_BUTTON_4_3 5_3 orxJOYSTICK_BUTTON_5_3 6_3 orxJOYSTICK_BUTTON_6_3 7_3 orxJOYSTICK_BUTTON_7_3 8_3 orxJOYSTICK_BUTTON_8_3 9_3 orxJOYSTICK_BUTTON_9_3 10_3 orxJOYSTICK_BUTTON_10_3 11_3 orxJOYSTICK_BUTTON_11_3 12_3 orxJOYSTICK_BUTTON_12_3 13_3 orxJOYSTICK_BUTTON_13_3 14_3 orxJOYSTICK_BUTTON_14_3 15_3 orxJOYSTICK_BUTTON_15_3 16_3 orxJOYSTICK_BUTTON_16_3 17_3 orxJOYSTICK_BUTTON_17_3 18_3 orxJOYSTICK_BUTTON_18_3 19_3 orxJOYSTICK_BUTTON_19_3 20_3 orxJOYSTICK_BUTTON_20_3 21_3 orxJOYSTICK_BUTTON_21_3 22_3 orxJOYSTICK_BUTTON_22_3 23_3 orxJOYSTICK_BUTTON_23_3 24_3 orxJOYSTICK_BUTTON_24_3 25_3 orxJOYSTICK_BUTTON_25_3 a_4 orxJOYSTICK_BUTTON_A_4 b_4 orxJOYSTICK_BUTTON_B_4 x_4 orxJOYSTICK_BUTTON_X_4 y_4 orxJOYSTICK_BUTTON_Y_4 lbumper_4 orxJOYSTICK_BUTTON_LBUMPER_4 rbumper_4 orxJOYSTICK_BUTTON_RBUMPER_4 back_4 orxJOYSTICK_BUTTON_BACK_4 start_4 orxJOYSTICK_BUTTON_START_4 guide_4 orxJOYSTICK_BUTTON_GUIDE_4 lthumb_4 orxJOYSTICK_BUTTON_LTHUMB_4 rthumb_4 orxJOYSTICK_BUTTON_RTHUMB_4 up_4 orxJOYSTICK_BUTTON_UP_4 right_4 orxJOYSTICK_BUTTON_RIGHT_4 down_4 orxJOYSTICK_BUTTON_DOWN_4 left_4 orxJOYSTICK_BUTTON_LEFT_4 1_4 orxJOYSTICK_BUTTON_1_4 2_4 orxJOYSTICK_BUTTON_2_4 3_4 orxJOYSTICK_BUTTON_3_4 4_4 orxJOYSTICK_BUTTON_4_4 5_4 orxJOYSTICK_BUTTON_5_4 6_4 orxJOYSTICK_BUTTON_6_4 7_4 orxJOYSTICK_BUTTON_7_4 8_4 orxJOYSTICK_BUTTON_8_4 9_4 orxJOYSTICK_BUTTON_9_4 10_4 orxJOYSTICK_BUTTON_10_4 11_4 orxJOYSTICK_BUTTON_11_4 12_4 orxJOYSTICK_BUTTON_12_4 13_4 orxJOYSTICK_BUTTON_13_4 14_4 orxJOYSTICK_BUTTON_14_4 15_4 orxJOYSTICK_BUTTON_15_4 16_4 orxJOYSTICK_BUTTON_16_4 17_4 orxJOYSTICK_BUTTON_17_4 18_4 orxJOYSTICK_BUTTON_18_4 19_4 orxJOYSTICK_BUTTON_19_4 20_4 orxJOYSTICK_BUTTON_20_4 21_4 orxJOYSTICK_BUTTON_21_4 22_4 orxJOYSTICK_BUTTON_22_4 23_4 orxJOYSTICK_BUTTON_23_4 24_4 orxJOYSTICK_BUTTON_24_4 25_4 orxJOYSTICK_BUTTON_25_4 a_5 orxJOYSTICK_BUTTON_A_5 b_5 orxJOYSTICK_BUTTON_B_5 x_5 orxJOYSTICK_BUTTON_X_5 y_5 orxJOYSTICK_BUTTON_Y_5 lbumper_5 orxJOYSTICK_BUTTON_LBUMPER_5 rbumper_5 orxJOYSTICK_BUTTON_RBUMPER_5 back_5 orxJOYSTICK_BUTTON_BACK_5 start_5 orxJOYSTICK_BUTTON_START_5 guide_5 orxJOYSTICK_BUTTON_GUIDE_5 lthumb_5 orxJOYSTICK_BUTTON_LTHUMB_5 rthumb_5 orxJOYSTICK_BUTTON_RTHUMB_5 up_5 orxJOYSTICK_BUTTON_UP_5 right_5 orxJOYSTICK_BUTTON_RIGHT_5 down_5 orxJOYSTICK_BUTTON_DOWN_5 left_5 orxJOYSTICK_BUTTON_LEFT_5 1_5 orxJOYSTICK_BUTTON_1_5 2_5 orxJOYSTICK_BUTTON_2_5 3_5 orxJOYSTICK_BUTTON_3_5 4_5 orxJOYSTICK_BUTTON_4_5 5_5 orxJOYSTICK_BUTTON_5_5 6_5 orxJOYSTICK_BUTTON_6_5 7_5 orxJOYSTICK_BUTTON_7_5 8_5 orxJOYSTICK_BUTTON_8_5 9_5 orxJOYSTICK_BUTTON_9_5 10_5 orxJOYSTICK_BUTTON_10_5 11_5 orxJOYSTICK_BUTTON_11_5 12_5 orxJOYSTICK_BUTTON_12_5 13_5 orxJOYSTICK_BUTTON_13_5 14_5 orxJOYSTICK_BUTTON_14_5 15_5 orxJOYSTICK_BUTTON_15_5 16_5 orxJOYSTICK_BUTTON_16_5 17_5 orxJOYSTICK_BUTTON_17_5 18_5 orxJOYSTICK_BUTTON_18_5 19_5 orxJOYSTICK_BUTTON_19_5 20_5 orxJOYSTICK_BUTTON_20_5 21_5 orxJOYSTICK_BUTTON_21_5 22_5 orxJOYSTICK_BUTTON_22_5 23_5 orxJOYSTICK_BUTTON_23_5 24_5 orxJOYSTICK_BUTTON_24_5 25_5 orxJOYSTICK_BUTTON_25_5 a_6 orxJOYSTICK_BUTTON_A_6 b_6 orxJOYSTICK_BUTTON_B_6 x_6 orxJOYSTICK_BUTTON_X_6 y_6 orxJOYSTICK_BUTTON_Y_6 lbumper_6 orxJOYSTICK_BUTTON_LBUMPER_6 rbumper_6 orxJOYSTICK_BUTTON_RBUMPER_6 back_6 orxJOYSTICK_BUTTON_BACK_6 start_6 orxJOYSTICK_BUTTON_START_6 guide_6 orxJOYSTICK_BUTTON_GUIDE_6 lthumb_6 orxJOYSTICK_BUTTON_LTHUMB_6 rthumb_6 orxJOYSTICK_BUTTON_RTHUMB_6 up_6 orxJOYSTICK_BUTTON_UP_6 right_6 orxJOYSTICK_BUTTON_RIGHT_6 down_6 orxJOYSTICK_BUTTON_DOWN_6 left_6 orxJOYSTICK_BUTTON_LEFT_6 1_6 orxJOYSTICK_BUTTON_1_6 2_6 orxJOYSTICK_BUTTON_2_6 3_6 orxJOYSTICK_BUTTON_3_6 4_6 orxJOYSTICK_BUTTON_4_6 5_6 orxJOYSTICK_BUTTON_5_6 6_6 orxJOYSTICK_BUTTON_6_6 7_6 orxJOYSTICK_BUTTON_7_6 8_6 orxJOYSTICK_BUTTON_8_6 9_6 orxJOYSTICK_BUTTON_9_6 10_6 orxJOYSTICK_BUTTON_10_6 11_6 orxJOYSTICK_BUTTON_11_6 12_6 orxJOYSTICK_BUTTON_12_6 13_6 orxJOYSTICK_BUTTON_13_6 14_6 orxJOYSTICK_BUTTON_14_6 15_6 orxJOYSTICK_BUTTON_15_6 16_6 orxJOYSTICK_BUTTON_16_6 17_6 orxJOYSTICK_BUTTON_17_6 18_6 orxJOYSTICK_BUTTON_18_6 19_6 orxJOYSTICK_BUTTON_19_6 20_6 orxJOYSTICK_BUTTON_20_6 21_6 orxJOYSTICK_BUTTON_21_6 22_6 orxJOYSTICK_BUTTON_22_6 23_6 orxJOYSTICK_BUTTON_23_6 24_6 orxJOYSTICK_BUTTON_24_6 25_6 orxJOYSTICK_BUTTON_25_6 a_7 orxJOYSTICK_BUTTON_A_7 b_7 orxJOYSTICK_BUTTON_B_7 x_7 orxJOYSTICK_BUTTON_X_7 y_7 orxJOYSTICK_BUTTON_Y_7 lbumper_7 orxJOYSTICK_BUTTON_LBUMPER_7 rbumper_7 orxJOYSTICK_BUTTON_RBUMPER_7 back_7 orxJOYSTICK_BUTTON_BACK_7 start_7 orxJOYSTICK_BUTTON_START_7 guide_7 orxJOYSTICK_BUTTON_GUIDE_7 lthumb_7 orxJOYSTICK_BUTTON_LTHUMB_7 rthumb_7 orxJOYSTICK_BUTTON_RTHUMB_7 up_7 orxJOYSTICK_BUTTON_UP_7 right_7 orxJOYSTICK_BUTTON_RIGHT_7 down_7 orxJOYSTICK_BUTTON_DOWN_7 left_7 orxJOYSTICK_BUTTON_LEFT_7 1_7 orxJOYSTICK_BUTTON_1_7 2_7 orxJOYSTICK_BUTTON_2_7 3_7 orxJOYSTICK_BUTTON_3_7 4_7 orxJOYSTICK_BUTTON_4_7 5_7 orxJOYSTICK_BUTTON_5_7 6_7 orxJOYSTICK_BUTTON_6_7 7_7 orxJOYSTICK_BUTTON_7_7 8_7 orxJOYSTICK_BUTTON_8_7 9_7 orxJOYSTICK_BUTTON_9_7 10_7 orxJOYSTICK_BUTTON_10_7 11_7 orxJOYSTICK_BUTTON_11_7 12_7 orxJOYSTICK_BUTTON_12_7 13_7 orxJOYSTICK_BUTTON_13_7 14_7 orxJOYSTICK_BUTTON_14_7 15_7 orxJOYSTICK_BUTTON_15_7 16_7 orxJOYSTICK_BUTTON_16_7 17_7 orxJOYSTICK_BUTTON_17_7 18_7 orxJOYSTICK_BUTTON_18_7 19_7 orxJOYSTICK_BUTTON_19_7 20_7 orxJOYSTICK_BUTTON_20_7 21_7 orxJOYSTICK_BUTTON_21_7 22_7 orxJOYSTICK_BUTTON_22_7 23_7 orxJOYSTICK_BUTTON_23_7 24_7 orxJOYSTICK_BUTTON_24_7 25_7 orxJOYSTICK_BUTTON_25_7 a_8 orxJOYSTICK_BUTTON_A_8 b_8 orxJOYSTICK_BUTTON_B_8 x_8 orxJOYSTICK_BUTTON_X_8 y_8 orxJOYSTICK_BUTTON_Y_8 lbumper_8 orxJOYSTICK_BUTTON_LBUMPER_8 rbumper_8 orxJOYSTICK_BUTTON_RBUMPER_8 back_8 orxJOYSTICK_BUTTON_BACK_8 start_8 orxJOYSTICK_BUTTON_START_8 guide_8 orxJOYSTICK_BUTTON_GUIDE_8 lthumb_8 orxJOYSTICK_BUTTON_LTHUMB_8 rthumb_8 orxJOYSTICK_BUTTON_RTHUMB_8 up_8 orxJOYSTICK_BUTTON_UP_8 right_8 orxJOYSTICK_BUTTON_RIGHT_8 down_8 orxJOYSTICK_BUTTON_DOWN_8 left_8 orxJOYSTICK_BUTTON_LEFT_8 1_8 orxJOYSTICK_BUTTON_1_8 2_8 orxJOYSTICK_BUTTON_2_8 3_8 orxJOYSTICK_BUTTON_3_8 4_8 orxJOYSTICK_BUTTON_4_8 5_8 orxJOYSTICK_BUTTON_5_8 6_8 orxJOYSTICK_BUTTON_6_8 7_8 orxJOYSTICK_BUTTON_7_8 8_8 orxJOYSTICK_BUTTON_8_8 9_8 orxJOYSTICK_BUTTON_9_8 10_8 orxJOYSTICK_BUTTON_10_8 11_8 orxJOYSTICK_BUTTON_11_8 12_8 orxJOYSTICK_BUTTON_12_8 13_8 orxJOYSTICK_BUTTON_13_8 14_8 orxJOYSTICK_BUTTON_14_8 15_8 orxJOYSTICK_BUTTON_15_8 16_8 orxJOYSTICK_BUTTON_16_8 17_8 orxJOYSTICK_BUTTON_17_8 18_8 orxJOYSTICK_BUTTON_18_8 19_8 orxJOYSTICK_BUTTON_19_8 20_8 orxJOYSTICK_BUTTON_20_8 21_8 orxJOYSTICK_BUTTON_21_8 22_8 orxJOYSTICK_BUTTON_22_8 23_8 orxJOYSTICK_BUTTON_23_8 24_8 orxJOYSTICK_BUTTON_24_8 25_8 orxJOYSTICK_BUTTON_25_8 a_9 orxJOYSTICK_BUTTON_A_9 b_9 orxJOYSTICK_BUTTON_B_9 x_9 orxJOYSTICK_BUTTON_X_9 y_9 orxJOYSTICK_BUTTON_Y_9 lbumper_9 orxJOYSTICK_BUTTON_LBUMPER_9 rbumper_9 orxJOYSTICK_BUTTON_RBUMPER_9 back_9 orxJOYSTICK_BUTTON_BACK_9 start_9 orxJOYSTICK_BUTTON_START_9 guide_9 orxJOYSTICK_BUTTON_GUIDE_9 lthumb_9 orxJOYSTICK_BUTTON_LTHUMB_9 rthumb_9 orxJOYSTICK_BUTTON_RTHUMB_9 up_9 orxJOYSTICK_BUTTON_UP_9 right_9 orxJOYSTICK_BUTTON_RIGHT_9 down_9 orxJOYSTICK_BUTTON_DOWN_9 left_9 orxJOYSTICK_BUTTON_LEFT_9 1_9 orxJOYSTICK_BUTTON_1_9 2_9 orxJOYSTICK_BUTTON_2_9 3_9 orxJOYSTICK_BUTTON_3_9 4_9 orxJOYSTICK_BUTTON_4_9 5_9 orxJOYSTICK_BUTTON_5_9 6_9 orxJOYSTICK_BUTTON_6_9 7_9 orxJOYSTICK_BUTTON_7_9 8_9 orxJOYSTICK_BUTTON_8_9 9_9 orxJOYSTICK_BUTTON_9_9 10_9 orxJOYSTICK_BUTTON_10_9 11_9 orxJOYSTICK_BUTTON_11_9 12_9 orxJOYSTICK_BUTTON_12_9 13_9 orxJOYSTICK_BUTTON_13_9 14_9 orxJOYSTICK_BUTTON_14_9 15_9 orxJOYSTICK_BUTTON_15_9 16_9 orxJOYSTICK_BUTTON_16_9 17_9 orxJOYSTICK_BUTTON_17_9 18_9 orxJOYSTICK_BUTTON_18_9 19_9 orxJOYSTICK_BUTTON_19_9 20_9 orxJOYSTICK_BUTTON_20_9 21_9 orxJOYSTICK_BUTTON_21_9 22_9 orxJOYSTICK_BUTTON_22_9 23_9 orxJOYSTICK_BUTTON_23_9 24_9 orxJOYSTICK_BUTTON_24_9 25_9 orxJOYSTICK_BUTTON_25_9 a_10 orxJOYSTICK_BUTTON_A_10 b_10 orxJOYSTICK_BUTTON_B_10 x_10 orxJOYSTICK_BUTTON_X_10 y_10 orxJOYSTICK_BUTTON_Y_10 lbumper_10 orxJOYSTICK_BUTTON_LBUMPER_10 rbumper_10 orxJOYSTICK_BUTTON_RBUMPER_10 back_10 orxJOYSTICK_BUTTON_BACK_10 start_10 orxJOYSTICK_BUTTON_START_10 guide_10 orxJOYSTICK_BUTTON_GUIDE_10 lthumb_10 orxJOYSTICK_BUTTON_LTHUMB_10 rthumb_10 orxJOYSTICK_BUTTON_RTHUMB_10 up_10 orxJOYSTICK_BUTTON_UP_10 right_10 orxJOYSTICK_BUTTON_RIGHT_10 down_10 orxJOYSTICK_BUTTON_DOWN_10 left_10 orxJOYSTICK_BUTTON_LEFT_10 1_10 orxJOYSTICK_BUTTON_1_10 2_10 orxJOYSTICK_BUTTON_2_10 3_10 orxJOYSTICK_BUTTON_3_10 4_10 orxJOYSTICK_BUTTON_4_10 5_10 orxJOYSTICK_BUTTON_5_10 6_10 orxJOYSTICK_BUTTON_6_10 7_10 orxJOYSTICK_BUTTON_7_10 8_10 orxJOYSTICK_BUTTON_8_10 9_10 orxJOYSTICK_BUTTON_9_10 10_10 orxJOYSTICK_BUTTON_10_10 11_10 orxJOYSTICK_BUTTON_11_10 12_10 orxJOYSTICK_BUTTON_12_10 13_10 orxJOYSTICK_BUTTON_13_10 14_10 orxJOYSTICK_BUTTON_14_10 15_10 orxJOYSTICK_BUTTON_15_10 16_10 orxJOYSTICK_BUTTON_16_10 17_10 orxJOYSTICK_BUTTON_17_10 18_10 orxJOYSTICK_BUTTON_18_10 19_10 orxJOYSTICK_BUTTON_19_10 20_10 orxJOYSTICK_BUTTON_20_10 21_10 orxJOYSTICK_BUTTON_21_10 22_10 orxJOYSTICK_BUTTON_22_10 23_10 orxJOYSTICK_BUTTON_23_10 24_10 orxJOYSTICK_BUTTON_24_10 25_10 orxJOYSTICK_BUTTON_25_10 a_11 orxJOYSTICK_BUTTON_A_11 b_11 orxJOYSTICK_BUTTON_B_11 x_11 orxJOYSTICK_BUTTON_X_11 y_11 orxJOYSTICK_BUTTON_Y_11 lbumper_11 orxJOYSTICK_BUTTON_LBUMPER_11 rbumper_11 orxJOYSTICK_BUTTON_RBUMPER_11 back_11 orxJOYSTICK_BUTTON_BACK_11 start_11 orxJOYSTICK_BUTTON_START_11 guide_11 orxJOYSTICK_BUTTON_GUIDE_11 lthumb_11 orxJOYSTICK_BUTTON_LTHUMB_11 rthumb_11 orxJOYSTICK_BUTTON_RTHUMB_11 up_11 orxJOYSTICK_BUTTON_UP_11 right_11 orxJOYSTICK_BUTTON_RIGHT_11 down_11 orxJOYSTICK_BUTTON_DOWN_11 left_11 orxJOYSTICK_BUTTON_LEFT_11 1_11 orxJOYSTICK_BUTTON_1_11 2_11 orxJOYSTICK_BUTTON_2_11 3_11 orxJOYSTICK_BUTTON_3_11 4_11 orxJOYSTICK_BUTTON_4_11 5_11 orxJOYSTICK_BUTTON_5_11 6_11 orxJOYSTICK_BUTTON_6_11 7_11 orxJOYSTICK_BUTTON_7_11 8_11 orxJOYSTICK_BUTTON_8_11 9_11 orxJOYSTICK_BUTTON_9_11 10_11 orxJOYSTICK_BUTTON_10_11 11_11 orxJOYSTICK_BUTTON_11_11 12_11 orxJOYSTICK_BUTTON_12_11 13_11 orxJOYSTICK_BUTTON_13_11 14_11 orxJOYSTICK_BUTTON_14_11 15_11 orxJOYSTICK_BUTTON_15_11 16_11 orxJOYSTICK_BUTTON_16_11 17_11 orxJOYSTICK_BUTTON_17_11 18_11 orxJOYSTICK_BUTTON_18_11 19_11 orxJOYSTICK_BUTTON_19_11 20_11 orxJOYSTICK_BUTTON_20_11 21_11 orxJOYSTICK_BUTTON_21_11 22_11 orxJOYSTICK_BUTTON_22_11 23_11 orxJOYSTICK_BUTTON_23_11 24_11 orxJOYSTICK_BUTTON_24_11 25_11 orxJOYSTICK_BUTTON_25_11 a_12 orxJOYSTICK_BUTTON_A_12 b_12 orxJOYSTICK_BUTTON_B_12 x_12 orxJOYSTICK_BUTTON_X_12 y_12 orxJOYSTICK_BUTTON_Y_12 lbumper_12 orxJOYSTICK_BUTTON_LBUMPER_12 rbumper_12 orxJOYSTICK_BUTTON_RBUMPER_12 back_12 orxJOYSTICK_BUTTON_BACK_12 start_12 orxJOYSTICK_BUTTON_START_12 guide_12 orxJOYSTICK_BUTTON_GUIDE_12 lthumb_12 orxJOYSTICK_BUTTON_LTHUMB_12 rthumb_12 orxJOYSTICK_BUTTON_RTHUMB_12 up_12 orxJOYSTICK_BUTTON_UP_12 right_12 orxJOYSTICK_BUTTON_RIGHT_12 down_12 orxJOYSTICK_BUTTON_DOWN_12 left_12 orxJOYSTICK_BUTTON_LEFT_12 1_12 orxJOYSTICK_BUTTON_1_12 2_12 orxJOYSTICK_BUTTON_2_12 3_12 orxJOYSTICK_BUTTON_3_12 4_12 orxJOYSTICK_BUTTON_4_12 5_12 orxJOYSTICK_BUTTON_5_12 6_12 orxJOYSTICK_BUTTON_6_12 7_12 orxJOYSTICK_BUTTON_7_12 8_12 orxJOYSTICK_BUTTON_8_12 9_12 orxJOYSTICK_BUTTON_9_12 10_12 orxJOYSTICK_BUTTON_10_12 11_12 orxJOYSTICK_BUTTON_11_12 12_12 orxJOYSTICK_BUTTON_12_12 13_12 orxJOYSTICK_BUTTON_13_12 14_12 orxJOYSTICK_BUTTON_14_12 15_12 orxJOYSTICK_BUTTON_15_12 16_12 orxJOYSTICK_BUTTON_16_12 17_12 orxJOYSTICK_BUTTON_17_12 18_12 orxJOYSTICK_BUTTON_18_12 19_12 orxJOYSTICK_BUTTON_19_12 20_12 orxJOYSTICK_BUTTON_20_12 21_12 orxJOYSTICK_BUTTON_21_12 22_12 orxJOYSTICK_BUTTON_22_12 23_12 orxJOYSTICK_BUTTON_23_12 24_12 orxJOYSTICK_BUTTON_24_12 25_12 orxJOYSTICK_BUTTON_25_12 a_13 orxJOYSTICK_BUTTON_A_13 b_13 orxJOYSTICK_BUTTON_B_13 x_13 orxJOYSTICK_BUTTON_X_13 y_13 orxJOYSTICK_BUTTON_Y_13 lbumper_13 orxJOYSTICK_BUTTON_LBUMPER_13 rbumper_13 orxJOYSTICK_BUTTON_RBUMPER_13 back_13 orxJOYSTICK_BUTTON_BACK_13 start_13 orxJOYSTICK_BUTTON_START_13 guide_13 orxJOYSTICK_BUTTON_GUIDE_13 lthumb_13 orxJOYSTICK_BUTTON_LTHUMB_13 rthumb_13 orxJOYSTICK_BUTTON_RTHUMB_13 up_13 orxJOYSTICK_BUTTON_UP_13 right_13 orxJOYSTICK_BUTTON_RIGHT_13 down_13 orxJOYSTICK_BUTTON_DOWN_13 left_13 orxJOYSTICK_BUTTON_LEFT_13 1_13 orxJOYSTICK_BUTTON_1_13 2_13 orxJOYSTICK_BUTTON_2_13 3_13 orxJOYSTICK_BUTTON_3_13 4_13 orxJOYSTICK_BUTTON_4_13 5_13 orxJOYSTICK_BUTTON_5_13 6_13 orxJOYSTICK_BUTTON_6_13 7_13 orxJOYSTICK_BUTTON_7_13 8_13 orxJOYSTICK_BUTTON_8_13 9_13 orxJOYSTICK_BUTTON_9_13 10_13 orxJOYSTICK_BUTTON_10_13 11_13 orxJOYSTICK_BUTTON_11_13 12_13 orxJOYSTICK_BUTTON_12_13 13_13 orxJOYSTICK_BUTTON_13_13 14_13 orxJOYSTICK_BUTTON_14_13 15_13 orxJOYSTICK_BUTTON_15_13 16_13 orxJOYSTICK_BUTTON_16_13 17_13 orxJOYSTICK_BUTTON_17_13 18_13 orxJOYSTICK_BUTTON_18_13 19_13 orxJOYSTICK_BUTTON_19_13 20_13 orxJOYSTICK_BUTTON_20_13 21_13 orxJOYSTICK_BUTTON_21_13 22_13 orxJOYSTICK_BUTTON_22_13 23_13 orxJOYSTICK_BUTTON_23_13 24_13 orxJOYSTICK_BUTTON_24_13 25_13 orxJOYSTICK_BUTTON_25_13 a_14 orxJOYSTICK_BUTTON_A_14 b_14 orxJOYSTICK_BUTTON_B_14 x_14 orxJOYSTICK_BUTTON_X_14 y_14 orxJOYSTICK_BUTTON_Y_14 lbumper_14 orxJOYSTICK_BUTTON_LBUMPER_14 rbumper_14 orxJOYSTICK_BUTTON_RBUMPER_14 back_14 orxJOYSTICK_BUTTON_BACK_14 start_14 orxJOYSTICK_BUTTON_START_14 guide_14 orxJOYSTICK_BUTTON_GUIDE_14 lthumb_14 orxJOYSTICK_BUTTON_LTHUMB_14 rthumb_14 orxJOYSTICK_BUTTON_RTHUMB_14 up_14 orxJOYSTICK_BUTTON_UP_14 right_14 orxJOYSTICK_BUTTON_RIGHT_14 down_14 orxJOYSTICK_BUTTON_DOWN_14 left_14 orxJOYSTICK_BUTTON_LEFT_14 1_14 orxJOYSTICK_BUTTON_1_14 2_14 orxJOYSTICK_BUTTON_2_14 3_14 orxJOYSTICK_BUTTON_3_14 4_14 orxJOYSTICK_BUTTON_4_14 5_14 orxJOYSTICK_BUTTON_5_14 6_14 orxJOYSTICK_BUTTON_6_14 7_14 orxJOYSTICK_BUTTON_7_14 8_14 orxJOYSTICK_BUTTON_8_14 9_14 orxJOYSTICK_BUTTON_9_14 10_14 orxJOYSTICK_BUTTON_10_14 11_14 orxJOYSTICK_BUTTON_11_14 12_14 orxJOYSTICK_BUTTON_12_14 13_14 orxJOYSTICK_BUTTON_13_14 14_14 orxJOYSTICK_BUTTON_14_14 15_14 orxJOYSTICK_BUTTON_15_14 16_14 orxJOYSTICK_BUTTON_16_14 17_14 orxJOYSTICK_BUTTON_17_14 18_14 orxJOYSTICK_BUTTON_18_14 19_14 orxJOYSTICK_BUTTON_19_14 20_14 orxJOYSTICK_BUTTON_20_14 21_14 orxJOYSTICK_BUTTON_21_14 22_14 orxJOYSTICK_BUTTON_22_14 23_14 orxJOYSTICK_BUTTON_23_14 24_14 orxJOYSTICK_BUTTON_24_14 25_14 orxJOYSTICK_BUTTON_25_14 a_15 orxJOYSTICK_BUTTON_A_15 b_15 orxJOYSTICK_BUTTON_B_15 x_15 orxJOYSTICK_BUTTON_X_15 y_15 orxJOYSTICK_BUTTON_Y_15 lbumper_15 orxJOYSTICK_BUTTON_LBUMPER_15 rbumper_15 orxJOYSTICK_BUTTON_RBUMPER_15 back_15 orxJOYSTICK_BUTTON_BACK_15 start_15 orxJOYSTICK_BUTTON_START_15 guide_15 orxJOYSTICK_BUTTON_GUIDE_15 lthumb_15 orxJOYSTICK_BUTTON_LTHUMB_15 rthumb_15 orxJOYSTICK_BUTTON_RTHUMB_15 up_15 orxJOYSTICK_BUTTON_UP_15 right_15 orxJOYSTICK_BUTTON_RIGHT_15 down_15 orxJOYSTICK_BUTTON_DOWN_15 left_15 orxJOYSTICK_BUTTON_LEFT_15 1_15 orxJOYSTICK_BUTTON_1_15 2_15 orxJOYSTICK_BUTTON_2_15 3_15 orxJOYSTICK_BUTTON_3_15 4_15 orxJOYSTICK_BUTTON_4_15 5_15 orxJOYSTICK_BUTTON_5_15 6_15 orxJOYSTICK_BUTTON_6_15 7_15 orxJOYSTICK_BUTTON_7_15 8_15 orxJOYSTICK_BUTTON_8_15 9_15 orxJOYSTICK_BUTTON_9_15 10_15 orxJOYSTICK_BUTTON_10_15 11_15 orxJOYSTICK_BUTTON_11_15 12_15 orxJOYSTICK_BUTTON_12_15 13_15 orxJOYSTICK_BUTTON_13_15 14_15 orxJOYSTICK_BUTTON_14_15 15_15 orxJOYSTICK_BUTTON_15_15 16_15 orxJOYSTICK_BUTTON_16_15 17_15 orxJOYSTICK_BUTTON_17_15 18_15 orxJOYSTICK_BUTTON_18_15 19_15 orxJOYSTICK_BUTTON_19_15 20_15 orxJOYSTICK_BUTTON_20_15 21_15 orxJOYSTICK_BUTTON_21_15 22_15 orxJOYSTICK_BUTTON_22_15 23_15 orxJOYSTICK_BUTTON_23_15 24_15 orxJOYSTICK_BUTTON_24_15 25_15 orxJOYSTICK_BUTTON_25_15 a_16 orxJOYSTICK_BUTTON_A_16 b_16 orxJOYSTICK_BUTTON_B_16 x_16 orxJOYSTICK_BUTTON_X_16 y_16 orxJOYSTICK_BUTTON_Y_16 lbumper_16 orxJOYSTICK_BUTTON_LBUMPER_16 rbumper_16 orxJOYSTICK_BUTTON_RBUMPER_16 back_16 orxJOYSTICK_BUTTON_BACK_16 start_16 orxJOYSTICK_BUTTON_START_16 guide_16 orxJOYSTICK_BUTTON_GUIDE_16 lthumb_16 orxJOYSTICK_BUTTON_LTHUMB_16 rthumb_16 orxJOYSTICK_BUTTON_RTHUMB_16 up_16 orxJOYSTICK_BUTTON_UP_16 right_16 orxJOYSTICK_BUTTON_RIGHT_16 down_16 orxJOYSTICK_BUTTON_DOWN_16 left_16 orxJOYSTICK_BUTTON_LEFT_16 1_16 orxJOYSTICK_BUTTON_1_16 2_16 orxJOYSTICK_BUTTON_2_16 3_16 orxJOYSTICK_BUTTON_3_16 4_16 orxJOYSTICK_BUTTON_4_16 5_16 orxJOYSTICK_BUTTON_5_16 6_16 orxJOYSTICK_BUTTON_6_16 7_16 orxJOYSTICK_BUTTON_7_16 8_16 orxJOYSTICK_BUTTON_8_16 9_16 orxJOYSTICK_BUTTON_9_16 10_16 orxJOYSTICK_BUTTON_10_16 11_16 orxJOYSTICK_BUTTON_11_16 12_16 orxJOYSTICK_BUTTON_12_16 13_16 orxJOYSTICK_BUTTON_13_16 14_16 orxJOYSTICK_BUTTON_14_16 15_16 orxJOYSTICK_BUTTON_15_16 16_16 orxJOYSTICK_BUTTON_16_16 17_16 orxJOYSTICK_BUTTON_17_16 18_16 orxJOYSTICK_BUTTON_18_16 19_16 orxJOYSTICK_BUTTON_19_16 20_16 orxJOYSTICK_BUTTON_20_16 21_16 orxJOYSTICK_BUTTON_21_16 22_16 orxJOYSTICK_BUTTON_22_16 23_16 orxJOYSTICK_BUTTON_23_16 24_16 orxJOYSTICK_BUTTON_24_16 25_16 orxJOYSTICK_BUTTON_25_16 none orxJOYSTICK_BUTTON_NONE orxKEYBOARD_KEY # lua string orx enum 0 orxKEYBOARD_KEY_0 1 orxKEYBOARD_KEY_1 2 orxKEYBOARD_KEY_2 3 orxKEYBOARD_KEY_3 4 orxKEYBOARD_KEY_4 5 orxKEYBOARD_KEY_5 6 orxKEYBOARD_KEY_6 7 orxKEYBOARD_KEY_7 8 orxKEYBOARD_KEY_8 9 orxKEYBOARD_KEY_9 a orxKEYBOARD_KEY_A b orxKEYBOARD_KEY_B c orxKEYBOARD_KEY_C d orxKEYBOARD_KEY_D e orxKEYBOARD_KEY_E f orxKEYBOARD_KEY_F g orxKEYBOARD_KEY_G h orxKEYBOARD_KEY_H i orxKEYBOARD_KEY_I j orxKEYBOARD_KEY_J k orxKEYBOARD_KEY_K l orxKEYBOARD_KEY_L m orxKEYBOARD_KEY_M n orxKEYBOARD_KEY_N o orxKEYBOARD_KEY_O p orxKEYBOARD_KEY_P q orxKEYBOARD_KEY_Q r orxKEYBOARD_KEY_R s orxKEYBOARD_KEY_S t orxKEYBOARD_KEY_T u orxKEYBOARD_KEY_U v orxKEYBOARD_KEY_V w orxKEYBOARD_KEY_W x orxKEYBOARD_KEY_X y orxKEYBOARD_KEY_Y z orxKEYBOARD_KEY_Z space orxKEYBOARD_KEY_SPACE quote orxKEYBOARD_KEY_QUOTE comma orxKEYBOARD_KEY_COMMA dash orxKEYBOARD_KEY_DASH period orxKEYBOARD_KEY_PERIOD slash orxKEYBOARD_KEY_SLASH semicolon orxKEYBOARD_KEY_SEMICOLON equal orxKEYBOARD_KEY_EQUAL lbracket orxKEYBOARD_KEY_LBRACKET backslash orxKEYBOARD_KEY_BACKSLASH rbracket orxKEYBOARD_KEY_RBRACKET backquote orxKEYBOARD_KEY_BACKQUOTE world_1 orxKEYBOARD_KEY_WORLD_1 world_2 orxKEYBOARD_KEY_WORLD_2 escape orxKEYBOARD_KEY_ESCAPE enter orxKEYBOARD_KEY_ENTER tab orxKEYBOARD_KEY_TAB backspace orxKEYBOARD_KEY_BACKSPACE insert orxKEYBOARD_KEY_INSERT delete orxKEYBOARD_KEY_DELETE right orxKEYBOARD_KEY_RIGHT left orxKEYBOARD_KEY_LEFT down orxKEYBOARD_KEY_DOWN up orxKEYBOARD_KEY_UP page_up orxKEYBOARD_KEY_PAGE_UP page_down orxKEYBOARD_KEY_PAGE_DOWN home orxKEYBOARD_KEY_HOME end orxKEYBOARD_KEY_END caps_lock orxKEYBOARD_KEY_CAPS_LOCK scroll_lock orxKEYBOARD_KEY_SCROLL_LOCK num_lock orxKEYBOARD_KEY_NUM_LOCK print_screen orxKEYBOARD_KEY_PRINT_SCREEN pause orxKEYBOARD_KEY_PAUSE volume_down orxKEYBOARD_KEY_VOLUME_DOWN volume_up orxKEYBOARD_KEY_VOLUME_UP f1 orxKEYBOARD_KEY_F1 f2 orxKEYBOARD_KEY_F2 f3 orxKEYBOARD_KEY_F3 f4 orxKEYBOARD_KEY_F4 f5 orxKEYBOARD_KEY_F5 f6 orxKEYBOARD_KEY_F6 f7 orxKEYBOARD_KEY_F7 f8 orxKEYBOARD_KEY_F8 f9 orxKEYBOARD_KEY_F9 f10 orxKEYBOARD_KEY_F10 f11 orxKEYBOARD_KEY_F11 f12 orxKEYBOARD_KEY_F12 f13 orxKEYBOARD_KEY_F13 f14 orxKEYBOARD_KEY_F14 f15 orxKEYBOARD_KEY_F15 f16 orxKEYBOARD_KEY_F16 f17 orxKEYBOARD_KEY_F17 f18 orxKEYBOARD_KEY_F18 f19 orxKEYBOARD_KEY_F19 f20 orxKEYBOARD_KEY_F20 f21 orxKEYBOARD_KEY_F21 f22 orxKEYBOARD_KEY_F22 f23 orxKEYBOARD_KEY_F23 f24 orxKEYBOARD_KEY_F24 f25 orxKEYBOARD_KEY_F25 numpad_0 orxKEYBOARD_KEY_NUMPAD_0 numpad_1 orxKEYBOARD_KEY_NUMPAD_1 numpad_2 orxKEYBOARD_KEY_NUMPAD_2 numpad_3 orxKEYBOARD_KEY_NUMPAD_3 numpad_4 orxKEYBOARD_KEY_NUMPAD_4 numpad_5 orxKEYBOARD_KEY_NUMPAD_5 numpad_6 orxKEYBOARD_KEY_NUMPAD_6 numpad_7 orxKEYBOARD_KEY_NUMPAD_7 numpad_8 orxKEYBOARD_KEY_NUMPAD_8 numpad_9 orxKEYBOARD_KEY_NUMPAD_9 numpad_decimal orxKEYBOARD_KEY_NUMPAD_DECIMAL numpad_divide orxKEYBOARD_KEY_NUMPAD_DIVIDE numpad_multiply orxKEYBOARD_KEY_NUMPAD_MULTIPLY numpad_subtract orxKEYBOARD_KEY_NUMPAD_SUBTRACT numpad_add orxKEYBOARD_KEY_NUMPAD_ADD numpad_enter orxKEYBOARD_KEY_NUMPAD_ENTER numpad_equal orxKEYBOARD_KEY_NUMPAD_EQUAL lshift orxKEYBOARD_KEY_LSHIFT lctrl orxKEYBOARD_KEY_LCTRL lalt orxKEYBOARD_KEY_LALT lsystem orxKEYBOARD_KEY_LSYSTEM rshift orxKEYBOARD_KEY_RSHIFT rctrl orxKEYBOARD_KEY_RCTRL ralt orxKEYBOARD_KEY_RALT rsystem orxKEYBOARD_KEY_RSYSTEM menu orxKEYBOARD_KEY_MENU none orxKEYBOARD_KEY_NONE orxLOCALE_EVENT # lua string orx enum select_language orxLOCALE_EVENT_SELECT_LANGUAGE set_string orxLOCALE_EVENT_SET_STRING none orxLOCALE_EVENT_NONE orxMODULE_ID # lua string orx enum anim orxMODULE_ID_ANIM animpointer orxMODULE_ID_ANIMPOINTER animset orxMODULE_ID_ANIMSET bank orxMODULE_ID_BANK body orxMODULE_ID_BODY camera orxMODULE_ID_CAMERA clock orxMODULE_ID_CLOCK command orxMODULE_ID_COMMAND config orxMODULE_ID_CONFIG console orxMODULE_ID_CONSOLE display orxMODULE_ID_DISPLAY event orxMODULE_ID_EVENT file orxMODULE_ID_FILE font orxMODULE_ID_FONT fps orxMODULE_ID_FPS frame orxMODULE_ID_FRAME fx orxMODULE_ID_FX fxpointer orxMODULE_ID_FXPOINTER graphic orxMODULE_ID_GRAPHIC input orxMODULE_ID_INPUT joystick orxMODULE_ID_JOYSTICK keyboard orxMODULE_ID_KEYBOARD locale orxMODULE_ID_LOCALE main orxMODULE_ID_MAIN memory orxMODULE_ID_MEMORY mouse orxMODULE_ID_MOUSE object orxMODULE_ID_OBJECT param orxMODULE_ID_PARAM physics orxMODULE_ID_PHYSICS plugin orxMODULE_ID_PLUGIN profiler orxMODULE_ID_PROFILER render orxMODULE_ID_RENDER resource orxMODULE_ID_RESOURCE screenshot orxMODULE_ID_SCREENSHOT shader orxMODULE_ID_SHADER shaderpointer orxMODULE_ID_SHADERPOINTER sound orxMODULE_ID_SOUND soundpointer orxMODULE_ID_SOUNDPOINTER soundsystem orxMODULE_ID_SOUNDSYSTEM spawner orxMODULE_ID_SPAWNER string orxMODULE_ID_STRING structure orxMODULE_ID_STRUCTURE system orxMODULE_ID_SYSTEM text orxMODULE_ID_TEXT texture orxMODULE_ID_TEXTURE thread orxMODULE_ID_THREAD timeline orxMODULE_ID_TIMELINE viewport orxMODULE_ID_VIEWPORT user_defined orxMODULE_ID_USER_DEFINED none orxMODULE_ID_NONE orxMOUSE_AXIS # lua string orx enum x orxMOUSE_AXIS_X y orxMOUSE_AXIS_Y none orxMOUSE_AXIS_NONE orxMOUSE_BUTTON # lua string orx enum left orxMOUSE_BUTTON_LEFT right orxMOUSE_BUTTON_RIGHT middle orxMOUSE_BUTTON_MIDDLE extra_1 orxMOUSE_BUTTON_EXTRA_1 extra_2 orxMOUSE_BUTTON_EXTRA_2 extra_3 orxMOUSE_BUTTON_EXTRA_3 extra_4 orxMOUSE_BUTTON_EXTRA_4 extra_5 orxMOUSE_BUTTON_EXTRA_5 wheel_up orxMOUSE_BUTTON_WHEEL_UP wheel_down orxMOUSE_BUTTON_WHEEL_DOWN none orxMOUSE_BUTTON_NONE orxOBJECT_EVENT # lua string orx enum create orxOBJECT_EVENT_CREATE delete orxOBJECT_EVENT_DELETE prepare orxOBJECT_EVENT_PREPARE enable orxOBJECT_EVENT_ENABLE disable orxOBJECT_EVENT_DISABLE pause orxOBJECT_EVENT_PAUSE unpause orxOBJECT_EVENT_UNPAUSE none orxOBJECT_EVENT_NONE orxPHYSICS_EVENT # lua string orx enum contact_add orxPHYSICS_EVENT_CONTACT_ADD contact_remove orxPHYSICS_EVENT_CONTACT_REMOVE none orxPHYSICS_EVENT_NONE orxRENDER_EVENT # lua string orx enum start orxRENDER_EVENT_START stop orxRENDER_EVENT_STOP viewport_start orxRENDER_EVENT_VIEWPORT_START viewport_stop orxRENDER_EVENT_VIEWPORT_STOP object_start orxRENDER_EVENT_OBJECT_START object_stop orxRENDER_EVENT_OBJECT_STOP console_start orxRENDER_EVENT_CONSOLE_START console_stop orxRENDER_EVENT_CONSOLE_STOP profiler_start orxRENDER_EVENT_PROFILER_START profiler_stop orxRENDER_EVENT_PROFILER_STOP none orxRENDER_EVENT_NONE orxRESOURCE_EVENT # lua string orx enum update orxRESOURCE_EVENT_UPDATE add orxRESOURCE_EVENT_ADD remove orxRESOURCE_EVENT_REMOVE none orxRESOURCE_EVENT_NONE orxSEEK_OFFSET_WHENCE # lua string orx enum start orxSEEK_OFFSET_WHENCE_START current orxSEEK_OFFSET_WHENCE_CURRENT end orxSEEK_OFFSET_WHENCE_END none orxSEEK_OFFSET_WHENCE_NONE orxSHADER_EVENT # lua string orx enum set_param orxSHADER_EVENT_SET_PARAM none orxSHADER_EVENT_NONE orxSHADER_PARAM_TYPE # lua string orx enum float orxSHADER_PARAM_TYPE_FLOAT texture orxSHADER_PARAM_TYPE_TEXTURE vector orxSHADER_PARAM_TYPE_VECTOR time orxSHADER_PARAM_TYPE_TIME none orxSHADER_PARAM_TYPE_NONE orxSOUNDSYSTEM_STATUS # lua string orx enum play orxSOUNDSYSTEM_STATUS_PLAY pause orxSOUNDSYSTEM_STATUS_PAUSE stop orxSOUNDSYSTEM_STATUS_STOP none orxSOUNDSYSTEM_STATUS_NONE orxSOUND_EVENT # lua string orx enum start orxSOUND_EVENT_START stop orxSOUND_EVENT_STOP add orxSOUND_EVENT_ADD remove orxSOUND_EVENT_REMOVE packet orxSOUND_EVENT_PACKET recording_start orxSOUND_EVENT_RECORDING_START recording_stop orxSOUND_EVENT_RECORDING_STOP recording_packet orxSOUND_EVENT_RECORDING_PACKET set_filter_param orxSOUND_EVENT_SET_FILTER_PARAM none orxSOUND_EVENT_NONE orxSOUND_FILTER_TYPE # lua string orx enum biquad orxSOUND_FILTER_TYPE_BIQUAD low_pass orxSOUND_FILTER_TYPE_LOW_PASS high_pass orxSOUND_FILTER_TYPE_HIGH_PASS band_pass orxSOUND_FILTER_TYPE_BAND_PASS low_shelf orxSOUND_FILTER_TYPE_LOW_SHELF high_shelf orxSOUND_FILTER_TYPE_HIGH_SHELF notch orxSOUND_FILTER_TYPE_NOTCH peaking orxSOUND_FILTER_TYPE_PEAKING delay orxSOUND_FILTER_TYPE_DELAY custom orxSOUND_FILTER_TYPE_CUSTOM none orxSOUND_FILTER_TYPE_NONE orxSOUND_STATUS # lua string orx enum play orxSOUND_STATUS_PLAY pause orxSOUND_STATUS_PAUSE stop orxSOUND_STATUS_STOP none orxSOUND_STATUS_NONE orxSPAWNER_EVENT # lua string orx enum spawn orxSPAWNER_EVENT_SPAWN create orxSPAWNER_EVENT_CREATE delete orxSPAWNER_EVENT_DELETE reset orxSPAWNER_EVENT_RESET empty orxSPAWNER_EVENT_EMPTY wave_start orxSPAWNER_EVENT_WAVE_START wave_stop orxSPAWNER_EVENT_WAVE_STOP none orxSPAWNER_EVENT_NONE orxSTATUS # lua string orx enum failure orxSTATUS_FAILURE success orxSTATUS_SUCCESS none orxSTATUS_NONE orxSTRUCTURE_ID # lua string orx enum animpointer orxSTRUCTURE_ID_ANIMPOINTER body orxSTRUCTURE_ID_BODY clock orxSTRUCTURE_ID_CLOCK frame orxSTRUCTURE_ID_FRAME fxpointer orxSTRUCTURE_ID_FXPOINTER graphic orxSTRUCTURE_ID_GRAPHIC shaderpointer orxSTRUCTURE_ID_SHADERPOINTER soundpointer orxSTRUCTURE_ID_SOUNDPOINTER spawner orxSTRUCTURE_ID_SPAWNER timeline orxSTRUCTURE_ID_TIMELINE anim orxSTRUCTURE_ID_ANIM animset orxSTRUCTURE_ID_ANIMSET camera orxSTRUCTURE_ID_CAMERA font orxSTRUCTURE_ID_FONT fx orxSTRUCTURE_ID_FX object orxSTRUCTURE_ID_OBJECT shader orxSTRUCTURE_ID_SHADER sound orxSTRUCTURE_ID_SOUND text orxSTRUCTURE_ID_TEXT texture orxSTRUCTURE_ID_TEXTURE viewport orxSTRUCTURE_ID_VIEWPORT none orxSTRUCTURE_ID_NONE orxSTRUCTURE_STORAGE_TYPE # lua string orx enum linklist orxSTRUCTURE_STORAGE_TYPE_LINKLIST tree orxSTRUCTURE_STORAGE_TYPE_TREE none orxSTRUCTURE_STORAGE_TYPE_NONE orxSYSTEM_EVENT # lua string orx enum close orxSYSTEM_EVENT_CLOSE focus_gained orxSYSTEM_EVENT_FOCUS_GAINED focus_lost orxSYSTEM_EVENT_FOCUS_LOST background orxSYSTEM_EVENT_BACKGROUND foreground orxSYSTEM_EVENT_FOREGROUND game_loop_start orxSYSTEM_EVENT_GAME_LOOP_START game_loop_stop orxSYSTEM_EVENT_GAME_LOOP_STOP touch_begin orxSYSTEM_EVENT_TOUCH_BEGIN touch_move orxSYSTEM_EVENT_TOUCH_MOVE touch_end orxSYSTEM_EVENT_TOUCH_END accelerate orxSYSTEM_EVENT_ACCELERATE motion_shake orxSYSTEM_EVENT_MOTION_SHAKE drop orxSYSTEM_EVENT_DROP clipboard orxSYSTEM_EVENT_CLIPBOARD none orxSYSTEM_EVENT_NONE orxTEXTURE_EVENT # lua string orx enum create orxTEXTURE_EVENT_CREATE delete orxTEXTURE_EVENT_DELETE load orxTEXTURE_EVENT_LOAD none orxTEXTURE_EVENT_NONE orxTIMELINE_EVENT # lua string orx enum track_start orxTIMELINE_EVENT_TRACK_START track_stop orxTIMELINE_EVENT_TRACK_STOP track_add orxTIMELINE_EVENT_TRACK_ADD track_remove orxTIMELINE_EVENT_TRACK_REMOVE loop orxTIMELINE_EVENT_LOOP trigger orxTIMELINE_EVENT_TRIGGER none orxTIMELINE_EVENT_NONE orxVIEWPORT_EVENT # lua string orx enum resize orxVIEWPORT_EVENT_RESIZE none orxVIEWPORT_EVENT_NONE","title":"Enums"},{"location":"enums.html#orxanim_event","text":"lua string orx enum start orxANIM_EVENT_START stop orxANIM_EVENT_STOP cut orxANIM_EVENT_CUT loop orxANIM_EVENT_LOOP update orxANIM_EVENT_UPDATE custom_event orxANIM_EVENT_CUSTOM_EVENT none orxANIM_EVENT_NONE","title":"orxANIM_EVENT"},{"location":"enums.html#orxclock_event","text":"lua string orx enum restart orxCLOCK_EVENT_RESTART resync orxCLOCK_EVENT_RESYNC pause orxCLOCK_EVENT_PAUSE unpause orxCLOCK_EVENT_UNPAUSE none orxCLOCK_EVENT_NONE","title":"orxCLOCK_EVENT"},{"location":"enums.html#orxclock_modifier","text":"lua string orx enum fixed orxCLOCK_MODIFIER_FIXED multiply orxCLOCK_MODIFIER_MULTIPLY maxed orxCLOCK_MODIFIER_MAXED average orxCLOCK_MODIFIER_AVERAGE none orxCLOCK_MODIFIER_NONE","title":"orxCLOCK_MODIFIER"},{"location":"enums.html#orxclock_priority","text":"lua string orx enum lowest orxCLOCK_PRIORITY_LOWEST lower orxCLOCK_PRIORITY_LOWER low orxCLOCK_PRIORITY_LOW normal orxCLOCK_PRIORITY_NORMAL high orxCLOCK_PRIORITY_HIGH higher orxCLOCK_PRIORITY_HIGHER highest orxCLOCK_PRIORITY_HIGHEST none orxCLOCK_PRIORITY_NONE","title":"orxCLOCK_PRIORITY"},{"location":"enums.html#orxcommand_var_type","text":"lua string orx enum string orxCOMMAND_VAR_TYPE_STRING float orxCOMMAND_VAR_TYPE_FLOAT s32 orxCOMMAND_VAR_TYPE_S32 u32 orxCOMMAND_VAR_TYPE_U32 s64 orxCOMMAND_VAR_TYPE_S64 u64 orxCOMMAND_VAR_TYPE_U64 bool orxCOMMAND_VAR_TYPE_BOOL vector orxCOMMAND_VAR_TYPE_VECTOR numeric orxCOMMAND_VAR_TYPE_NUMERIC none orxCOMMAND_VAR_TYPE_NONE","title":"orxCOMMAND_VAR_TYPE"},{"location":"enums.html#orxconfig_event","text":"lua string orx enum reload_start orxCONFIG_EVENT_RELOAD_START reload_stop orxCONFIG_EVENT_RELOAD_STOP none orxCONFIG_EVENT_NONE","title":"orxCONFIG_EVENT"},{"location":"enums.html#orxdebug_level","text":"lua string orx enum anim orxDEBUG_LEVEL_ANIM config orxDEBUG_LEVEL_CONFIG clock orxDEBUG_LEVEL_CLOCK command orxDEBUG_LEVEL_COMMAND display orxDEBUG_LEVEL_DISPLAY file orxDEBUG_LEVEL_FILE input orxDEBUG_LEVEL_INPUT joystick orxDEBUG_LEVEL_JOYSTICK keyboard orxDEBUG_LEVEL_KEYBOARD memory orxDEBUG_LEVEL_MEMORY mouse orxDEBUG_LEVEL_MOUSE object orxDEBUG_LEVEL_OBJECT param orxDEBUG_LEVEL_PARAM physics orxDEBUG_LEVEL_PHYSICS plugin orxDEBUG_LEVEL_PLUGIN profiler orxDEBUG_LEVEL_PROFILER render orxDEBUG_LEVEL_RENDER screenshot orxDEBUG_LEVEL_SCREENSHOT sound orxDEBUG_LEVEL_SOUND system orxDEBUG_LEVEL_SYSTEM timer orxDEBUG_LEVEL_TIMER log orxDEBUG_LEVEL_LOG assert orxDEBUG_LEVEL_ASSERT user orxDEBUG_LEVEL_USER all orxDEBUG_LEVEL_ALL none orxDEBUG_LEVEL_NONE","title":"orxDEBUG_LEVEL"},{"location":"enums.html#orxdisplay_blend_mode","text":"lua string orx enum alpha orxDISPLAY_BLEND_MODE_ALPHA multiply orxDISPLAY_BLEND_MODE_MULTIPLY add orxDISPLAY_BLEND_MODE_ADD premul orxDISPLAY_BLEND_MODE_PREMUL none orxDISPLAY_BLEND_MODE_NONE","title":"orxDISPLAY_BLEND_MODE"},{"location":"enums.html#orxdisplay_event","text":"lua string orx enum set_video_mode orxDISPLAY_EVENT_SET_VIDEO_MODE load_bitmap orxDISPLAY_EVENT_LOAD_BITMAP none orxDISPLAY_EVENT_NONE","title":"orxDISPLAY_EVENT"},{"location":"enums.html#orxdisplay_primitive","text":"lua string orx enum points orxDISPLAY_PRIMITIVE_POINTS lines orxDISPLAY_PRIMITIVE_LINES line_loop orxDISPLAY_PRIMITIVE_LINE_LOOP line_strip orxDISPLAY_PRIMITIVE_LINE_STRIP triangles orxDISPLAY_PRIMITIVE_TRIANGLES triangle_strip orxDISPLAY_PRIMITIVE_TRIANGLE_STRIP triangle_fan orxDISPLAY_PRIMITIVE_TRIANGLE_FAN none orxDISPLAY_PRIMITIVE_NONE","title":"orxDISPLAY_PRIMITIVE"},{"location":"enums.html#orxdisplay_smoothing","text":"lua string orx enum default orxDISPLAY_SMOOTHING_DEFAULT on orxDISPLAY_SMOOTHING_ON off orxDISPLAY_SMOOTHING_OFF none orxDISPLAY_SMOOTHING_NONE","title":"orxDISPLAY_SMOOTHING"},{"location":"enums.html#orxevent_type","text":"lua string orx enum anim orxEVENT_TYPE_ANIM clock orxEVENT_TYPE_CLOCK config orxEVENT_TYPE_CONFIG display orxEVENT_TYPE_DISPLAY fx orxEVENT_TYPE_FX input orxEVENT_TYPE_INPUT locale orxEVENT_TYPE_LOCALE object orxEVENT_TYPE_OBJECT render orxEVENT_TYPE_RENDER physics orxEVENT_TYPE_PHYSICS resource orxEVENT_TYPE_RESOURCE shader orxEVENT_TYPE_SHADER sound orxEVENT_TYPE_SOUND spawner orxEVENT_TYPE_SPAWNER system orxEVENT_TYPE_SYSTEM texture orxEVENT_TYPE_TEXTURE timeline orxEVENT_TYPE_TIMELINE viewport orxEVENT_TYPE_VIEWPORT first_reserved orxEVENT_TYPE_FIRST_RESERVED last_reserved orxEVENT_TYPE_LAST_RESERVED user_defined orxEVENT_TYPE_USER_DEFINED none orxEVENT_TYPE_NONE","title":"orxEVENT_TYPE"},{"location":"enums.html#orxframe_space","text":"lua string orx enum global orxFRAME_SPACE_GLOBAL local orxFRAME_SPACE_LOCAL none orxFRAME_SPACE_NONE","title":"orxFRAME_SPACE"},{"location":"enums.html#orxfx_curve","text":"lua string orx enum linear orxFX_CURVE_LINEAR smooth orxFX_CURVE_SMOOTH smoother orxFX_CURVE_SMOOTHER triangle orxFX_CURVE_TRIANGLE sine orxFX_CURVE_SINE square orxFX_CURVE_SQUARE none orxFX_CURVE_NONE","title":"orxFX_CURVE"},{"location":"enums.html#orxfx_event","text":"lua string orx enum start orxFX_EVENT_START stop orxFX_EVENT_STOP add orxFX_EVENT_ADD remove orxFX_EVENT_REMOVE loop orxFX_EVENT_LOOP none orxFX_EVENT_NONE","title":"orxFX_EVENT"},{"location":"enums.html#orxinput_event","text":"lua string orx enum on orxINPUT_EVENT_ON off orxINPUT_EVENT_OFF select_set orxINPUT_EVENT_SELECT_SET remove_set orxINPUT_EVENT_REMOVE_SET none orxINPUT_EVENT_NONE","title":"orxINPUT_EVENT"},{"location":"enums.html#orxinput_mode","text":"lua string orx enum full orxINPUT_MODE_FULL positive orxINPUT_MODE_POSITIVE negative orxINPUT_MODE_NEGATIVE none orxINPUT_MODE_NONE","title":"orxINPUT_MODE"},{"location":"enums.html#orxinput_type","text":"lua string orx enum keyboard_key orxINPUT_TYPE_KEYBOARD_KEY mouse_button orxINPUT_TYPE_MOUSE_BUTTON mouse_axis orxINPUT_TYPE_MOUSE_AXIS joystick_button orxINPUT_TYPE_JOYSTICK_BUTTON joystick_axis orxINPUT_TYPE_JOYSTICK_AXIS external orxINPUT_TYPE_EXTERNAL none orxINPUT_TYPE_NONE","title":"orxINPUT_TYPE"},{"location":"enums.html#orxjoystick_axis","text":"lua string orx enum lx_1 orxJOYSTICK_AXIS_LX_1 ly_1 orxJOYSTICK_AXIS_LY_1 rx_1 orxJOYSTICK_AXIS_RX_1 ry_1 orxJOYSTICK_AXIS_RY_1 ltrigger_1 orxJOYSTICK_AXIS_LTRIGGER_1 rtrigger_1 orxJOYSTICK_AXIS_RTRIGGER_1 lx_2 orxJOYSTICK_AXIS_LX_2 ly_2 orxJOYSTICK_AXIS_LY_2 rx_2 orxJOYSTICK_AXIS_RX_2 ry_2 orxJOYSTICK_AXIS_RY_2 ltrigger_2 orxJOYSTICK_AXIS_LTRIGGER_2 rtrigger_2 orxJOYSTICK_AXIS_RTRIGGER_2 lx_3 orxJOYSTICK_AXIS_LX_3 ly_3 orxJOYSTICK_AXIS_LY_3 rx_3 orxJOYSTICK_AXIS_RX_3 ry_3 orxJOYSTICK_AXIS_RY_3 ltrigger_3 orxJOYSTICK_AXIS_LTRIGGER_3 rtrigger_3 orxJOYSTICK_AXIS_RTRIGGER_3 lx_4 orxJOYSTICK_AXIS_LX_4 ly_4 orxJOYSTICK_AXIS_LY_4 rx_4 orxJOYSTICK_AXIS_RX_4 ry_4 orxJOYSTICK_AXIS_RY_4 ltrigger_4 orxJOYSTICK_AXIS_LTRIGGER_4 rtrigger_4 orxJOYSTICK_AXIS_RTRIGGER_4 lx_5 orxJOYSTICK_AXIS_LX_5 ly_5 orxJOYSTICK_AXIS_LY_5 rx_5 orxJOYSTICK_AXIS_RX_5 ry_5 orxJOYSTICK_AXIS_RY_5 ltrigger_5 orxJOYSTICK_AXIS_LTRIGGER_5 rtrigger_5 orxJOYSTICK_AXIS_RTRIGGER_5 lx_6 orxJOYSTICK_AXIS_LX_6 ly_6 orxJOYSTICK_AXIS_LY_6 rx_6 orxJOYSTICK_AXIS_RX_6 ry_6 orxJOYSTICK_AXIS_RY_6 ltrigger_6 orxJOYSTICK_AXIS_LTRIGGER_6 rtrigger_6 orxJOYSTICK_AXIS_RTRIGGER_6 lx_7 orxJOYSTICK_AXIS_LX_7 ly_7 orxJOYSTICK_AXIS_LY_7 rx_7 orxJOYSTICK_AXIS_RX_7 ry_7 orxJOYSTICK_AXIS_RY_7 ltrigger_7 orxJOYSTICK_AXIS_LTRIGGER_7 rtrigger_7 orxJOYSTICK_AXIS_RTRIGGER_7 lx_8 orxJOYSTICK_AXIS_LX_8 ly_8 orxJOYSTICK_AXIS_LY_8 rx_8 orxJOYSTICK_AXIS_RX_8 ry_8 orxJOYSTICK_AXIS_RY_8 ltrigger_8 orxJOYSTICK_AXIS_LTRIGGER_8 rtrigger_8 orxJOYSTICK_AXIS_RTRIGGER_8 lx_9 orxJOYSTICK_AXIS_LX_9 ly_9 orxJOYSTICK_AXIS_LY_9 rx_9 orxJOYSTICK_AXIS_RX_9 ry_9 orxJOYSTICK_AXIS_RY_9 ltrigger_9 orxJOYSTICK_AXIS_LTRIGGER_9 rtrigger_9 orxJOYSTICK_AXIS_RTRIGGER_9 lx_10 orxJOYSTICK_AXIS_LX_10 ly_10 orxJOYSTICK_AXIS_LY_10 rx_10 orxJOYSTICK_AXIS_RX_10 ry_10 orxJOYSTICK_AXIS_RY_10 ltrigger_10 orxJOYSTICK_AXIS_LTRIGGER_10 rtrigger_10 orxJOYSTICK_AXIS_RTRIGGER_10 lx_11 orxJOYSTICK_AXIS_LX_11 ly_11 orxJOYSTICK_AXIS_LY_11 rx_11 orxJOYSTICK_AXIS_RX_11 ry_11 orxJOYSTICK_AXIS_RY_11 ltrigger_11 orxJOYSTICK_AXIS_LTRIGGER_11 rtrigger_11 orxJOYSTICK_AXIS_RTRIGGER_11 lx_12 orxJOYSTICK_AXIS_LX_12 ly_12 orxJOYSTICK_AXIS_LY_12 rx_12 orxJOYSTICK_AXIS_RX_12 ry_12 orxJOYSTICK_AXIS_RY_12 ltrigger_12 orxJOYSTICK_AXIS_LTRIGGER_12 rtrigger_12 orxJOYSTICK_AXIS_RTRIGGER_12 lx_13 orxJOYSTICK_AXIS_LX_13 ly_13 orxJOYSTICK_AXIS_LY_13 rx_13 orxJOYSTICK_AXIS_RX_13 ry_13 orxJOYSTICK_AXIS_RY_13 ltrigger_13 orxJOYSTICK_AXIS_LTRIGGER_13 rtrigger_13 orxJOYSTICK_AXIS_RTRIGGER_13 lx_14 orxJOYSTICK_AXIS_LX_14 ly_14 orxJOYSTICK_AXIS_LY_14 rx_14 orxJOYSTICK_AXIS_RX_14 ry_14 orxJOYSTICK_AXIS_RY_14 ltrigger_14 orxJOYSTICK_AXIS_LTRIGGER_14 rtrigger_14 orxJOYSTICK_AXIS_RTRIGGER_14 lx_15 orxJOYSTICK_AXIS_LX_15 ly_15 orxJOYSTICK_AXIS_LY_15 rx_15 orxJOYSTICK_AXIS_RX_15 ry_15 orxJOYSTICK_AXIS_RY_15 ltrigger_15 orxJOYSTICK_AXIS_LTRIGGER_15 rtrigger_15 orxJOYSTICK_AXIS_RTRIGGER_15 lx_16 orxJOYSTICK_AXIS_LX_16 ly_16 orxJOYSTICK_AXIS_LY_16 rx_16 orxJOYSTICK_AXIS_RX_16 ry_16 orxJOYSTICK_AXIS_RY_16 ltrigger_16 orxJOYSTICK_AXIS_LTRIGGER_16 rtrigger_16 orxJOYSTICK_AXIS_RTRIGGER_16 none orxJOYSTICK_AXIS_NONE","title":"orxJOYSTICK_AXIS"},{"location":"enums.html#orxjoystick_button","text":"lua string orx enum a_1 orxJOYSTICK_BUTTON_A_1 b_1 orxJOYSTICK_BUTTON_B_1 x_1 orxJOYSTICK_BUTTON_X_1 y_1 orxJOYSTICK_BUTTON_Y_1 lbumper_1 orxJOYSTICK_BUTTON_LBUMPER_1 rbumper_1 orxJOYSTICK_BUTTON_RBUMPER_1 back_1 orxJOYSTICK_BUTTON_BACK_1 start_1 orxJOYSTICK_BUTTON_START_1 guide_1 orxJOYSTICK_BUTTON_GUIDE_1 lthumb_1 orxJOYSTICK_BUTTON_LTHUMB_1 rthumb_1 orxJOYSTICK_BUTTON_RTHUMB_1 up_1 orxJOYSTICK_BUTTON_UP_1 right_1 orxJOYSTICK_BUTTON_RIGHT_1 down_1 orxJOYSTICK_BUTTON_DOWN_1 left_1 orxJOYSTICK_BUTTON_LEFT_1 1_1 orxJOYSTICK_BUTTON_1_1 2_1 orxJOYSTICK_BUTTON_2_1 3_1 orxJOYSTICK_BUTTON_3_1 4_1 orxJOYSTICK_BUTTON_4_1 5_1 orxJOYSTICK_BUTTON_5_1 6_1 orxJOYSTICK_BUTTON_6_1 7_1 orxJOYSTICK_BUTTON_7_1 8_1 orxJOYSTICK_BUTTON_8_1 9_1 orxJOYSTICK_BUTTON_9_1 10_1 orxJOYSTICK_BUTTON_10_1 11_1 orxJOYSTICK_BUTTON_11_1 12_1 orxJOYSTICK_BUTTON_12_1 13_1 orxJOYSTICK_BUTTON_13_1 14_1 orxJOYSTICK_BUTTON_14_1 15_1 orxJOYSTICK_BUTTON_15_1 16_1 orxJOYSTICK_BUTTON_16_1 17_1 orxJOYSTICK_BUTTON_17_1 18_1 orxJOYSTICK_BUTTON_18_1 19_1 orxJOYSTICK_BUTTON_19_1 20_1 orxJOYSTICK_BUTTON_20_1 21_1 orxJOYSTICK_BUTTON_21_1 22_1 orxJOYSTICK_BUTTON_22_1 23_1 orxJOYSTICK_BUTTON_23_1 24_1 orxJOYSTICK_BUTTON_24_1 25_1 orxJOYSTICK_BUTTON_25_1 a_2 orxJOYSTICK_BUTTON_A_2 b_2 orxJOYSTICK_BUTTON_B_2 x_2 orxJOYSTICK_BUTTON_X_2 y_2 orxJOYSTICK_BUTTON_Y_2 lbumper_2 orxJOYSTICK_BUTTON_LBUMPER_2 rbumper_2 orxJOYSTICK_BUTTON_RBUMPER_2 back_2 orxJOYSTICK_BUTTON_BACK_2 start_2 orxJOYSTICK_BUTTON_START_2 guide_2 orxJOYSTICK_BUTTON_GUIDE_2 lthumb_2 orxJOYSTICK_BUTTON_LTHUMB_2 rthumb_2 orxJOYSTICK_BUTTON_RTHUMB_2 up_2 orxJOYSTICK_BUTTON_UP_2 right_2 orxJOYSTICK_BUTTON_RIGHT_2 down_2 orxJOYSTICK_BUTTON_DOWN_2 left_2 orxJOYSTICK_BUTTON_LEFT_2 1_2 orxJOYSTICK_BUTTON_1_2 2_2 orxJOYSTICK_BUTTON_2_2 3_2 orxJOYSTICK_BUTTON_3_2 4_2 orxJOYSTICK_BUTTON_4_2 5_2 orxJOYSTICK_BUTTON_5_2 6_2 orxJOYSTICK_BUTTON_6_2 7_2 orxJOYSTICK_BUTTON_7_2 8_2 orxJOYSTICK_BUTTON_8_2 9_2 orxJOYSTICK_BUTTON_9_2 10_2 orxJOYSTICK_BUTTON_10_2 11_2 orxJOYSTICK_BUTTON_11_2 12_2 orxJOYSTICK_BUTTON_12_2 13_2 orxJOYSTICK_BUTTON_13_2 14_2 orxJOYSTICK_BUTTON_14_2 15_2 orxJOYSTICK_BUTTON_15_2 16_2 orxJOYSTICK_BUTTON_16_2 17_2 orxJOYSTICK_BUTTON_17_2 18_2 orxJOYSTICK_BUTTON_18_2 19_2 orxJOYSTICK_BUTTON_19_2 20_2 orxJOYSTICK_BUTTON_20_2 21_2 orxJOYSTICK_BUTTON_21_2 22_2 orxJOYSTICK_BUTTON_22_2 23_2 orxJOYSTICK_BUTTON_23_2 24_2 orxJOYSTICK_BUTTON_24_2 25_2 orxJOYSTICK_BUTTON_25_2 a_3 orxJOYSTICK_BUTTON_A_3 b_3 orxJOYSTICK_BUTTON_B_3 x_3 orxJOYSTICK_BUTTON_X_3 y_3 orxJOYSTICK_BUTTON_Y_3 lbumper_3 orxJOYSTICK_BUTTON_LBUMPER_3 rbumper_3 orxJOYSTICK_BUTTON_RBUMPER_3 back_3 orxJOYSTICK_BUTTON_BACK_3 start_3 orxJOYSTICK_BUTTON_START_3 guide_3 orxJOYSTICK_BUTTON_GUIDE_3 lthumb_3 orxJOYSTICK_BUTTON_LTHUMB_3 rthumb_3 orxJOYSTICK_BUTTON_RTHUMB_3 up_3 orxJOYSTICK_BUTTON_UP_3 right_3 orxJOYSTICK_BUTTON_RIGHT_3 down_3 orxJOYSTICK_BUTTON_DOWN_3 left_3 orxJOYSTICK_BUTTON_LEFT_3 1_3 orxJOYSTICK_BUTTON_1_3 2_3 orxJOYSTICK_BUTTON_2_3 3_3 orxJOYSTICK_BUTTON_3_3 4_3 orxJOYSTICK_BUTTON_4_3 5_3 orxJOYSTICK_BUTTON_5_3 6_3 orxJOYSTICK_BUTTON_6_3 7_3 orxJOYSTICK_BUTTON_7_3 8_3 orxJOYSTICK_BUTTON_8_3 9_3 orxJOYSTICK_BUTTON_9_3 10_3 orxJOYSTICK_BUTTON_10_3 11_3 orxJOYSTICK_BUTTON_11_3 12_3 orxJOYSTICK_BUTTON_12_3 13_3 orxJOYSTICK_BUTTON_13_3 14_3 orxJOYSTICK_BUTTON_14_3 15_3 orxJOYSTICK_BUTTON_15_3 16_3 orxJOYSTICK_BUTTON_16_3 17_3 orxJOYSTICK_BUTTON_17_3 18_3 orxJOYSTICK_BUTTON_18_3 19_3 orxJOYSTICK_BUTTON_19_3 20_3 orxJOYSTICK_BUTTON_20_3 21_3 orxJOYSTICK_BUTTON_21_3 22_3 orxJOYSTICK_BUTTON_22_3 23_3 orxJOYSTICK_BUTTON_23_3 24_3 orxJOYSTICK_BUTTON_24_3 25_3 orxJOYSTICK_BUTTON_25_3 a_4 orxJOYSTICK_BUTTON_A_4 b_4 orxJOYSTICK_BUTTON_B_4 x_4 orxJOYSTICK_BUTTON_X_4 y_4 orxJOYSTICK_BUTTON_Y_4 lbumper_4 orxJOYSTICK_BUTTON_LBUMPER_4 rbumper_4 orxJOYSTICK_BUTTON_RBUMPER_4 back_4 orxJOYSTICK_BUTTON_BACK_4 start_4 orxJOYSTICK_BUTTON_START_4 guide_4 orxJOYSTICK_BUTTON_GUIDE_4 lthumb_4 orxJOYSTICK_BUTTON_LTHUMB_4 rthumb_4 orxJOYSTICK_BUTTON_RTHUMB_4 up_4 orxJOYSTICK_BUTTON_UP_4 right_4 orxJOYSTICK_BUTTON_RIGHT_4 down_4 orxJOYSTICK_BUTTON_DOWN_4 left_4 orxJOYSTICK_BUTTON_LEFT_4 1_4 orxJOYSTICK_BUTTON_1_4 2_4 orxJOYSTICK_BUTTON_2_4 3_4 orxJOYSTICK_BUTTON_3_4 4_4 orxJOYSTICK_BUTTON_4_4 5_4 orxJOYSTICK_BUTTON_5_4 6_4 orxJOYSTICK_BUTTON_6_4 7_4 orxJOYSTICK_BUTTON_7_4 8_4 orxJOYSTICK_BUTTON_8_4 9_4 orxJOYSTICK_BUTTON_9_4 10_4 orxJOYSTICK_BUTTON_10_4 11_4 orxJOYSTICK_BUTTON_11_4 12_4 orxJOYSTICK_BUTTON_12_4 13_4 orxJOYSTICK_BUTTON_13_4 14_4 orxJOYSTICK_BUTTON_14_4 15_4 orxJOYSTICK_BUTTON_15_4 16_4 orxJOYSTICK_BUTTON_16_4 17_4 orxJOYSTICK_BUTTON_17_4 18_4 orxJOYSTICK_BUTTON_18_4 19_4 orxJOYSTICK_BUTTON_19_4 20_4 orxJOYSTICK_BUTTON_20_4 21_4 orxJOYSTICK_BUTTON_21_4 22_4 orxJOYSTICK_BUTTON_22_4 23_4 orxJOYSTICK_BUTTON_23_4 24_4 orxJOYSTICK_BUTTON_24_4 25_4 orxJOYSTICK_BUTTON_25_4 a_5 orxJOYSTICK_BUTTON_A_5 b_5 orxJOYSTICK_BUTTON_B_5 x_5 orxJOYSTICK_BUTTON_X_5 y_5 orxJOYSTICK_BUTTON_Y_5 lbumper_5 orxJOYSTICK_BUTTON_LBUMPER_5 rbumper_5 orxJOYSTICK_BUTTON_RBUMPER_5 back_5 orxJOYSTICK_BUTTON_BACK_5 start_5 orxJOYSTICK_BUTTON_START_5 guide_5 orxJOYSTICK_BUTTON_GUIDE_5 lthumb_5 orxJOYSTICK_BUTTON_LTHUMB_5 rthumb_5 orxJOYSTICK_BUTTON_RTHUMB_5 up_5 orxJOYSTICK_BUTTON_UP_5 right_5 orxJOYSTICK_BUTTON_RIGHT_5 down_5 orxJOYSTICK_BUTTON_DOWN_5 left_5 orxJOYSTICK_BUTTON_LEFT_5 1_5 orxJOYSTICK_BUTTON_1_5 2_5 orxJOYSTICK_BUTTON_2_5 3_5 orxJOYSTICK_BUTTON_3_5 4_5 orxJOYSTICK_BUTTON_4_5 5_5 orxJOYSTICK_BUTTON_5_5 6_5 orxJOYSTICK_BUTTON_6_5 7_5 orxJOYSTICK_BUTTON_7_5 8_5 orxJOYSTICK_BUTTON_8_5 9_5 orxJOYSTICK_BUTTON_9_5 10_5 orxJOYSTICK_BUTTON_10_5 11_5 orxJOYSTICK_BUTTON_11_5 12_5 orxJOYSTICK_BUTTON_12_5 13_5 orxJOYSTICK_BUTTON_13_5 14_5 orxJOYSTICK_BUTTON_14_5 15_5 orxJOYSTICK_BUTTON_15_5 16_5 orxJOYSTICK_BUTTON_16_5 17_5 orxJOYSTICK_BUTTON_17_5 18_5 orxJOYSTICK_BUTTON_18_5 19_5 orxJOYSTICK_BUTTON_19_5 20_5 orxJOYSTICK_BUTTON_20_5 21_5 orxJOYSTICK_BUTTON_21_5 22_5 orxJOYSTICK_BUTTON_22_5 23_5 orxJOYSTICK_BUTTON_23_5 24_5 orxJOYSTICK_BUTTON_24_5 25_5 orxJOYSTICK_BUTTON_25_5 a_6 orxJOYSTICK_BUTTON_A_6 b_6 orxJOYSTICK_BUTTON_B_6 x_6 orxJOYSTICK_BUTTON_X_6 y_6 orxJOYSTICK_BUTTON_Y_6 lbumper_6 orxJOYSTICK_BUTTON_LBUMPER_6 rbumper_6 orxJOYSTICK_BUTTON_RBUMPER_6 back_6 orxJOYSTICK_BUTTON_BACK_6 start_6 orxJOYSTICK_BUTTON_START_6 guide_6 orxJOYSTICK_BUTTON_GUIDE_6 lthumb_6 orxJOYSTICK_BUTTON_LTHUMB_6 rthumb_6 orxJOYSTICK_BUTTON_RTHUMB_6 up_6 orxJOYSTICK_BUTTON_UP_6 right_6 orxJOYSTICK_BUTTON_RIGHT_6 down_6 orxJOYSTICK_BUTTON_DOWN_6 left_6 orxJOYSTICK_BUTTON_LEFT_6 1_6 orxJOYSTICK_BUTTON_1_6 2_6 orxJOYSTICK_BUTTON_2_6 3_6 orxJOYSTICK_BUTTON_3_6 4_6 orxJOYSTICK_BUTTON_4_6 5_6 orxJOYSTICK_BUTTON_5_6 6_6 orxJOYSTICK_BUTTON_6_6 7_6 orxJOYSTICK_BUTTON_7_6 8_6 orxJOYSTICK_BUTTON_8_6 9_6 orxJOYSTICK_BUTTON_9_6 10_6 orxJOYSTICK_BUTTON_10_6 11_6 orxJOYSTICK_BUTTON_11_6 12_6 orxJOYSTICK_BUTTON_12_6 13_6 orxJOYSTICK_BUTTON_13_6 14_6 orxJOYSTICK_BUTTON_14_6 15_6 orxJOYSTICK_BUTTON_15_6 16_6 orxJOYSTICK_BUTTON_16_6 17_6 orxJOYSTICK_BUTTON_17_6 18_6 orxJOYSTICK_BUTTON_18_6 19_6 orxJOYSTICK_BUTTON_19_6 20_6 orxJOYSTICK_BUTTON_20_6 21_6 orxJOYSTICK_BUTTON_21_6 22_6 orxJOYSTICK_BUTTON_22_6 23_6 orxJOYSTICK_BUTTON_23_6 24_6 orxJOYSTICK_BUTTON_24_6 25_6 orxJOYSTICK_BUTTON_25_6 a_7 orxJOYSTICK_BUTTON_A_7 b_7 orxJOYSTICK_BUTTON_B_7 x_7 orxJOYSTICK_BUTTON_X_7 y_7 orxJOYSTICK_BUTTON_Y_7 lbumper_7 orxJOYSTICK_BUTTON_LBUMPER_7 rbumper_7 orxJOYSTICK_BUTTON_RBUMPER_7 back_7 orxJOYSTICK_BUTTON_BACK_7 start_7 orxJOYSTICK_BUTTON_START_7 guide_7 orxJOYSTICK_BUTTON_GUIDE_7 lthumb_7 orxJOYSTICK_BUTTON_LTHUMB_7 rthumb_7 orxJOYSTICK_BUTTON_RTHUMB_7 up_7 orxJOYSTICK_BUTTON_UP_7 right_7 orxJOYSTICK_BUTTON_RIGHT_7 down_7 orxJOYSTICK_BUTTON_DOWN_7 left_7 orxJOYSTICK_BUTTON_LEFT_7 1_7 orxJOYSTICK_BUTTON_1_7 2_7 orxJOYSTICK_BUTTON_2_7 3_7 orxJOYSTICK_BUTTON_3_7 4_7 orxJOYSTICK_BUTTON_4_7 5_7 orxJOYSTICK_BUTTON_5_7 6_7 orxJOYSTICK_BUTTON_6_7 7_7 orxJOYSTICK_BUTTON_7_7 8_7 orxJOYSTICK_BUTTON_8_7 9_7 orxJOYSTICK_BUTTON_9_7 10_7 orxJOYSTICK_BUTTON_10_7 11_7 orxJOYSTICK_BUTTON_11_7 12_7 orxJOYSTICK_BUTTON_12_7 13_7 orxJOYSTICK_BUTTON_13_7 14_7 orxJOYSTICK_BUTTON_14_7 15_7 orxJOYSTICK_BUTTON_15_7 16_7 orxJOYSTICK_BUTTON_16_7 17_7 orxJOYSTICK_BUTTON_17_7 18_7 orxJOYSTICK_BUTTON_18_7 19_7 orxJOYSTICK_BUTTON_19_7 20_7 orxJOYSTICK_BUTTON_20_7 21_7 orxJOYSTICK_BUTTON_21_7 22_7 orxJOYSTICK_BUTTON_22_7 23_7 orxJOYSTICK_BUTTON_23_7 24_7 orxJOYSTICK_BUTTON_24_7 25_7 orxJOYSTICK_BUTTON_25_7 a_8 orxJOYSTICK_BUTTON_A_8 b_8 orxJOYSTICK_BUTTON_B_8 x_8 orxJOYSTICK_BUTTON_X_8 y_8 orxJOYSTICK_BUTTON_Y_8 lbumper_8 orxJOYSTICK_BUTTON_LBUMPER_8 rbumper_8 orxJOYSTICK_BUTTON_RBUMPER_8 back_8 orxJOYSTICK_BUTTON_BACK_8 start_8 orxJOYSTICK_BUTTON_START_8 guide_8 orxJOYSTICK_BUTTON_GUIDE_8 lthumb_8 orxJOYSTICK_BUTTON_LTHUMB_8 rthumb_8 orxJOYSTICK_BUTTON_RTHUMB_8 up_8 orxJOYSTICK_BUTTON_UP_8 right_8 orxJOYSTICK_BUTTON_RIGHT_8 down_8 orxJOYSTICK_BUTTON_DOWN_8 left_8 orxJOYSTICK_BUTTON_LEFT_8 1_8 orxJOYSTICK_BUTTON_1_8 2_8 orxJOYSTICK_BUTTON_2_8 3_8 orxJOYSTICK_BUTTON_3_8 4_8 orxJOYSTICK_BUTTON_4_8 5_8 orxJOYSTICK_BUTTON_5_8 6_8 orxJOYSTICK_BUTTON_6_8 7_8 orxJOYSTICK_BUTTON_7_8 8_8 orxJOYSTICK_BUTTON_8_8 9_8 orxJOYSTICK_BUTTON_9_8 10_8 orxJOYSTICK_BUTTON_10_8 11_8 orxJOYSTICK_BUTTON_11_8 12_8 orxJOYSTICK_BUTTON_12_8 13_8 orxJOYSTICK_BUTTON_13_8 14_8 orxJOYSTICK_BUTTON_14_8 15_8 orxJOYSTICK_BUTTON_15_8 16_8 orxJOYSTICK_BUTTON_16_8 17_8 orxJOYSTICK_BUTTON_17_8 18_8 orxJOYSTICK_BUTTON_18_8 19_8 orxJOYSTICK_BUTTON_19_8 20_8 orxJOYSTICK_BUTTON_20_8 21_8 orxJOYSTICK_BUTTON_21_8 22_8 orxJOYSTICK_BUTTON_22_8 23_8 orxJOYSTICK_BUTTON_23_8 24_8 orxJOYSTICK_BUTTON_24_8 25_8 orxJOYSTICK_BUTTON_25_8 a_9 orxJOYSTICK_BUTTON_A_9 b_9 orxJOYSTICK_BUTTON_B_9 x_9 orxJOYSTICK_BUTTON_X_9 y_9 orxJOYSTICK_BUTTON_Y_9 lbumper_9 orxJOYSTICK_BUTTON_LBUMPER_9 rbumper_9 orxJOYSTICK_BUTTON_RBUMPER_9 back_9 orxJOYSTICK_BUTTON_BACK_9 start_9 orxJOYSTICK_BUTTON_START_9 guide_9 orxJOYSTICK_BUTTON_GUIDE_9 lthumb_9 orxJOYSTICK_BUTTON_LTHUMB_9 rthumb_9 orxJOYSTICK_BUTTON_RTHUMB_9 up_9 orxJOYSTICK_BUTTON_UP_9 right_9 orxJOYSTICK_BUTTON_RIGHT_9 down_9 orxJOYSTICK_BUTTON_DOWN_9 left_9 orxJOYSTICK_BUTTON_LEFT_9 1_9 orxJOYSTICK_BUTTON_1_9 2_9 orxJOYSTICK_BUTTON_2_9 3_9 orxJOYSTICK_BUTTON_3_9 4_9 orxJOYSTICK_BUTTON_4_9 5_9 orxJOYSTICK_BUTTON_5_9 6_9 orxJOYSTICK_BUTTON_6_9 7_9 orxJOYSTICK_BUTTON_7_9 8_9 orxJOYSTICK_BUTTON_8_9 9_9 orxJOYSTICK_BUTTON_9_9 10_9 orxJOYSTICK_BUTTON_10_9 11_9 orxJOYSTICK_BUTTON_11_9 12_9 orxJOYSTICK_BUTTON_12_9 13_9 orxJOYSTICK_BUTTON_13_9 14_9 orxJOYSTICK_BUTTON_14_9 15_9 orxJOYSTICK_BUTTON_15_9 16_9 orxJOYSTICK_BUTTON_16_9 17_9 orxJOYSTICK_BUTTON_17_9 18_9 orxJOYSTICK_BUTTON_18_9 19_9 orxJOYSTICK_BUTTON_19_9 20_9 orxJOYSTICK_BUTTON_20_9 21_9 orxJOYSTICK_BUTTON_21_9 22_9 orxJOYSTICK_BUTTON_22_9 23_9 orxJOYSTICK_BUTTON_23_9 24_9 orxJOYSTICK_BUTTON_24_9 25_9 orxJOYSTICK_BUTTON_25_9 a_10 orxJOYSTICK_BUTTON_A_10 b_10 orxJOYSTICK_BUTTON_B_10 x_10 orxJOYSTICK_BUTTON_X_10 y_10 orxJOYSTICK_BUTTON_Y_10 lbumper_10 orxJOYSTICK_BUTTON_LBUMPER_10 rbumper_10 orxJOYSTICK_BUTTON_RBUMPER_10 back_10 orxJOYSTICK_BUTTON_BACK_10 start_10 orxJOYSTICK_BUTTON_START_10 guide_10 orxJOYSTICK_BUTTON_GUIDE_10 lthumb_10 orxJOYSTICK_BUTTON_LTHUMB_10 rthumb_10 orxJOYSTICK_BUTTON_RTHUMB_10 up_10 orxJOYSTICK_BUTTON_UP_10 right_10 orxJOYSTICK_BUTTON_RIGHT_10 down_10 orxJOYSTICK_BUTTON_DOWN_10 left_10 orxJOYSTICK_BUTTON_LEFT_10 1_10 orxJOYSTICK_BUTTON_1_10 2_10 orxJOYSTICK_BUTTON_2_10 3_10 orxJOYSTICK_BUTTON_3_10 4_10 orxJOYSTICK_BUTTON_4_10 5_10 orxJOYSTICK_BUTTON_5_10 6_10 orxJOYSTICK_BUTTON_6_10 7_10 orxJOYSTICK_BUTTON_7_10 8_10 orxJOYSTICK_BUTTON_8_10 9_10 orxJOYSTICK_BUTTON_9_10 10_10 orxJOYSTICK_BUTTON_10_10 11_10 orxJOYSTICK_BUTTON_11_10 12_10 orxJOYSTICK_BUTTON_12_10 13_10 orxJOYSTICK_BUTTON_13_10 14_10 orxJOYSTICK_BUTTON_14_10 15_10 orxJOYSTICK_BUTTON_15_10 16_10 orxJOYSTICK_BUTTON_16_10 17_10 orxJOYSTICK_BUTTON_17_10 18_10 orxJOYSTICK_BUTTON_18_10 19_10 orxJOYSTICK_BUTTON_19_10 20_10 orxJOYSTICK_BUTTON_20_10 21_10 orxJOYSTICK_BUTTON_21_10 22_10 orxJOYSTICK_BUTTON_22_10 23_10 orxJOYSTICK_BUTTON_23_10 24_10 orxJOYSTICK_BUTTON_24_10 25_10 orxJOYSTICK_BUTTON_25_10 a_11 orxJOYSTICK_BUTTON_A_11 b_11 orxJOYSTICK_BUTTON_B_11 x_11 orxJOYSTICK_BUTTON_X_11 y_11 orxJOYSTICK_BUTTON_Y_11 lbumper_11 orxJOYSTICK_BUTTON_LBUMPER_11 rbumper_11 orxJOYSTICK_BUTTON_RBUMPER_11 back_11 orxJOYSTICK_BUTTON_BACK_11 start_11 orxJOYSTICK_BUTTON_START_11 guide_11 orxJOYSTICK_BUTTON_GUIDE_11 lthumb_11 orxJOYSTICK_BUTTON_LTHUMB_11 rthumb_11 orxJOYSTICK_BUTTON_RTHUMB_11 up_11 orxJOYSTICK_BUTTON_UP_11 right_11 orxJOYSTICK_BUTTON_RIGHT_11 down_11 orxJOYSTICK_BUTTON_DOWN_11 left_11 orxJOYSTICK_BUTTON_LEFT_11 1_11 orxJOYSTICK_BUTTON_1_11 2_11 orxJOYSTICK_BUTTON_2_11 3_11 orxJOYSTICK_BUTTON_3_11 4_11 orxJOYSTICK_BUTTON_4_11 5_11 orxJOYSTICK_BUTTON_5_11 6_11 orxJOYSTICK_BUTTON_6_11 7_11 orxJOYSTICK_BUTTON_7_11 8_11 orxJOYSTICK_BUTTON_8_11 9_11 orxJOYSTICK_BUTTON_9_11 10_11 orxJOYSTICK_BUTTON_10_11 11_11 orxJOYSTICK_BUTTON_11_11 12_11 orxJOYSTICK_BUTTON_12_11 13_11 orxJOYSTICK_BUTTON_13_11 14_11 orxJOYSTICK_BUTTON_14_11 15_11 orxJOYSTICK_BUTTON_15_11 16_11 orxJOYSTICK_BUTTON_16_11 17_11 orxJOYSTICK_BUTTON_17_11 18_11 orxJOYSTICK_BUTTON_18_11 19_11 orxJOYSTICK_BUTTON_19_11 20_11 orxJOYSTICK_BUTTON_20_11 21_11 orxJOYSTICK_BUTTON_21_11 22_11 orxJOYSTICK_BUTTON_22_11 23_11 orxJOYSTICK_BUTTON_23_11 24_11 orxJOYSTICK_BUTTON_24_11 25_11 orxJOYSTICK_BUTTON_25_11 a_12 orxJOYSTICK_BUTTON_A_12 b_12 orxJOYSTICK_BUTTON_B_12 x_12 orxJOYSTICK_BUTTON_X_12 y_12 orxJOYSTICK_BUTTON_Y_12 lbumper_12 orxJOYSTICK_BUTTON_LBUMPER_12 rbumper_12 orxJOYSTICK_BUTTON_RBUMPER_12 back_12 orxJOYSTICK_BUTTON_BACK_12 start_12 orxJOYSTICK_BUTTON_START_12 guide_12 orxJOYSTICK_BUTTON_GUIDE_12 lthumb_12 orxJOYSTICK_BUTTON_LTHUMB_12 rthumb_12 orxJOYSTICK_BUTTON_RTHUMB_12 up_12 orxJOYSTICK_BUTTON_UP_12 right_12 orxJOYSTICK_BUTTON_RIGHT_12 down_12 orxJOYSTICK_BUTTON_DOWN_12 left_12 orxJOYSTICK_BUTTON_LEFT_12 1_12 orxJOYSTICK_BUTTON_1_12 2_12 orxJOYSTICK_BUTTON_2_12 3_12 orxJOYSTICK_BUTTON_3_12 4_12 orxJOYSTICK_BUTTON_4_12 5_12 orxJOYSTICK_BUTTON_5_12 6_12 orxJOYSTICK_BUTTON_6_12 7_12 orxJOYSTICK_BUTTON_7_12 8_12 orxJOYSTICK_BUTTON_8_12 9_12 orxJOYSTICK_BUTTON_9_12 10_12 orxJOYSTICK_BUTTON_10_12 11_12 orxJOYSTICK_BUTTON_11_12 12_12 orxJOYSTICK_BUTTON_12_12 13_12 orxJOYSTICK_BUTTON_13_12 14_12 orxJOYSTICK_BUTTON_14_12 15_12 orxJOYSTICK_BUTTON_15_12 16_12 orxJOYSTICK_BUTTON_16_12 17_12 orxJOYSTICK_BUTTON_17_12 18_12 orxJOYSTICK_BUTTON_18_12 19_12 orxJOYSTICK_BUTTON_19_12 20_12 orxJOYSTICK_BUTTON_20_12 21_12 orxJOYSTICK_BUTTON_21_12 22_12 orxJOYSTICK_BUTTON_22_12 23_12 orxJOYSTICK_BUTTON_23_12 24_12 orxJOYSTICK_BUTTON_24_12 25_12 orxJOYSTICK_BUTTON_25_12 a_13 orxJOYSTICK_BUTTON_A_13 b_13 orxJOYSTICK_BUTTON_B_13 x_13 orxJOYSTICK_BUTTON_X_13 y_13 orxJOYSTICK_BUTTON_Y_13 lbumper_13 orxJOYSTICK_BUTTON_LBUMPER_13 rbumper_13 orxJOYSTICK_BUTTON_RBUMPER_13 back_13 orxJOYSTICK_BUTTON_BACK_13 start_13 orxJOYSTICK_BUTTON_START_13 guide_13 orxJOYSTICK_BUTTON_GUIDE_13 lthumb_13 orxJOYSTICK_BUTTON_LTHUMB_13 rthumb_13 orxJOYSTICK_BUTTON_RTHUMB_13 up_13 orxJOYSTICK_BUTTON_UP_13 right_13 orxJOYSTICK_BUTTON_RIGHT_13 down_13 orxJOYSTICK_BUTTON_DOWN_13 left_13 orxJOYSTICK_BUTTON_LEFT_13 1_13 orxJOYSTICK_BUTTON_1_13 2_13 orxJOYSTICK_BUTTON_2_13 3_13 orxJOYSTICK_BUTTON_3_13 4_13 orxJOYSTICK_BUTTON_4_13 5_13 orxJOYSTICK_BUTTON_5_13 6_13 orxJOYSTICK_BUTTON_6_13 7_13 orxJOYSTICK_BUTTON_7_13 8_13 orxJOYSTICK_BUTTON_8_13 9_13 orxJOYSTICK_BUTTON_9_13 10_13 orxJOYSTICK_BUTTON_10_13 11_13 orxJOYSTICK_BUTTON_11_13 12_13 orxJOYSTICK_BUTTON_12_13 13_13 orxJOYSTICK_BUTTON_13_13 14_13 orxJOYSTICK_BUTTON_14_13 15_13 orxJOYSTICK_BUTTON_15_13 16_13 orxJOYSTICK_BUTTON_16_13 17_13 orxJOYSTICK_BUTTON_17_13 18_13 orxJOYSTICK_BUTTON_18_13 19_13 orxJOYSTICK_BUTTON_19_13 20_13 orxJOYSTICK_BUTTON_20_13 21_13 orxJOYSTICK_BUTTON_21_13 22_13 orxJOYSTICK_BUTTON_22_13 23_13 orxJOYSTICK_BUTTON_23_13 24_13 orxJOYSTICK_BUTTON_24_13 25_13 orxJOYSTICK_BUTTON_25_13 a_14 orxJOYSTICK_BUTTON_A_14 b_14 orxJOYSTICK_BUTTON_B_14 x_14 orxJOYSTICK_BUTTON_X_14 y_14 orxJOYSTICK_BUTTON_Y_14 lbumper_14 orxJOYSTICK_BUTTON_LBUMPER_14 rbumper_14 orxJOYSTICK_BUTTON_RBUMPER_14 back_14 orxJOYSTICK_BUTTON_BACK_14 start_14 orxJOYSTICK_BUTTON_START_14 guide_14 orxJOYSTICK_BUTTON_GUIDE_14 lthumb_14 orxJOYSTICK_BUTTON_LTHUMB_14 rthumb_14 orxJOYSTICK_BUTTON_RTHUMB_14 up_14 orxJOYSTICK_BUTTON_UP_14 right_14 orxJOYSTICK_BUTTON_RIGHT_14 down_14 orxJOYSTICK_BUTTON_DOWN_14 left_14 orxJOYSTICK_BUTTON_LEFT_14 1_14 orxJOYSTICK_BUTTON_1_14 2_14 orxJOYSTICK_BUTTON_2_14 3_14 orxJOYSTICK_BUTTON_3_14 4_14 orxJOYSTICK_BUTTON_4_14 5_14 orxJOYSTICK_BUTTON_5_14 6_14 orxJOYSTICK_BUTTON_6_14 7_14 orxJOYSTICK_BUTTON_7_14 8_14 orxJOYSTICK_BUTTON_8_14 9_14 orxJOYSTICK_BUTTON_9_14 10_14 orxJOYSTICK_BUTTON_10_14 11_14 orxJOYSTICK_BUTTON_11_14 12_14 orxJOYSTICK_BUTTON_12_14 13_14 orxJOYSTICK_BUTTON_13_14 14_14 orxJOYSTICK_BUTTON_14_14 15_14 orxJOYSTICK_BUTTON_15_14 16_14 orxJOYSTICK_BUTTON_16_14 17_14 orxJOYSTICK_BUTTON_17_14 18_14 orxJOYSTICK_BUTTON_18_14 19_14 orxJOYSTICK_BUTTON_19_14 20_14 orxJOYSTICK_BUTTON_20_14 21_14 orxJOYSTICK_BUTTON_21_14 22_14 orxJOYSTICK_BUTTON_22_14 23_14 orxJOYSTICK_BUTTON_23_14 24_14 orxJOYSTICK_BUTTON_24_14 25_14 orxJOYSTICK_BUTTON_25_14 a_15 orxJOYSTICK_BUTTON_A_15 b_15 orxJOYSTICK_BUTTON_B_15 x_15 orxJOYSTICK_BUTTON_X_15 y_15 orxJOYSTICK_BUTTON_Y_15 lbumper_15 orxJOYSTICK_BUTTON_LBUMPER_15 rbumper_15 orxJOYSTICK_BUTTON_RBUMPER_15 back_15 orxJOYSTICK_BUTTON_BACK_15 start_15 orxJOYSTICK_BUTTON_START_15 guide_15 orxJOYSTICK_BUTTON_GUIDE_15 lthumb_15 orxJOYSTICK_BUTTON_LTHUMB_15 rthumb_15 orxJOYSTICK_BUTTON_RTHUMB_15 up_15 orxJOYSTICK_BUTTON_UP_15 right_15 orxJOYSTICK_BUTTON_RIGHT_15 down_15 orxJOYSTICK_BUTTON_DOWN_15 left_15 orxJOYSTICK_BUTTON_LEFT_15 1_15 orxJOYSTICK_BUTTON_1_15 2_15 orxJOYSTICK_BUTTON_2_15 3_15 orxJOYSTICK_BUTTON_3_15 4_15 orxJOYSTICK_BUTTON_4_15 5_15 orxJOYSTICK_BUTTON_5_15 6_15 orxJOYSTICK_BUTTON_6_15 7_15 orxJOYSTICK_BUTTON_7_15 8_15 orxJOYSTICK_BUTTON_8_15 9_15 orxJOYSTICK_BUTTON_9_15 10_15 orxJOYSTICK_BUTTON_10_15 11_15 orxJOYSTICK_BUTTON_11_15 12_15 orxJOYSTICK_BUTTON_12_15 13_15 orxJOYSTICK_BUTTON_13_15 14_15 orxJOYSTICK_BUTTON_14_15 15_15 orxJOYSTICK_BUTTON_15_15 16_15 orxJOYSTICK_BUTTON_16_15 17_15 orxJOYSTICK_BUTTON_17_15 18_15 orxJOYSTICK_BUTTON_18_15 19_15 orxJOYSTICK_BUTTON_19_15 20_15 orxJOYSTICK_BUTTON_20_15 21_15 orxJOYSTICK_BUTTON_21_15 22_15 orxJOYSTICK_BUTTON_22_15 23_15 orxJOYSTICK_BUTTON_23_15 24_15 orxJOYSTICK_BUTTON_24_15 25_15 orxJOYSTICK_BUTTON_25_15 a_16 orxJOYSTICK_BUTTON_A_16 b_16 orxJOYSTICK_BUTTON_B_16 x_16 orxJOYSTICK_BUTTON_X_16 y_16 orxJOYSTICK_BUTTON_Y_16 lbumper_16 orxJOYSTICK_BUTTON_LBUMPER_16 rbumper_16 orxJOYSTICK_BUTTON_RBUMPER_16 back_16 orxJOYSTICK_BUTTON_BACK_16 start_16 orxJOYSTICK_BUTTON_START_16 guide_16 orxJOYSTICK_BUTTON_GUIDE_16 lthumb_16 orxJOYSTICK_BUTTON_LTHUMB_16 rthumb_16 orxJOYSTICK_BUTTON_RTHUMB_16 up_16 orxJOYSTICK_BUTTON_UP_16 right_16 orxJOYSTICK_BUTTON_RIGHT_16 down_16 orxJOYSTICK_BUTTON_DOWN_16 left_16 orxJOYSTICK_BUTTON_LEFT_16 1_16 orxJOYSTICK_BUTTON_1_16 2_16 orxJOYSTICK_BUTTON_2_16 3_16 orxJOYSTICK_BUTTON_3_16 4_16 orxJOYSTICK_BUTTON_4_16 5_16 orxJOYSTICK_BUTTON_5_16 6_16 orxJOYSTICK_BUTTON_6_16 7_16 orxJOYSTICK_BUTTON_7_16 8_16 orxJOYSTICK_BUTTON_8_16 9_16 orxJOYSTICK_BUTTON_9_16 10_16 orxJOYSTICK_BUTTON_10_16 11_16 orxJOYSTICK_BUTTON_11_16 12_16 orxJOYSTICK_BUTTON_12_16 13_16 orxJOYSTICK_BUTTON_13_16 14_16 orxJOYSTICK_BUTTON_14_16 15_16 orxJOYSTICK_BUTTON_15_16 16_16 orxJOYSTICK_BUTTON_16_16 17_16 orxJOYSTICK_BUTTON_17_16 18_16 orxJOYSTICK_BUTTON_18_16 19_16 orxJOYSTICK_BUTTON_19_16 20_16 orxJOYSTICK_BUTTON_20_16 21_16 orxJOYSTICK_BUTTON_21_16 22_16 orxJOYSTICK_BUTTON_22_16 23_16 orxJOYSTICK_BUTTON_23_16 24_16 orxJOYSTICK_BUTTON_24_16 25_16 orxJOYSTICK_BUTTON_25_16 none orxJOYSTICK_BUTTON_NONE","title":"orxJOYSTICK_BUTTON"},{"location":"enums.html#orxkeyboard_key","text":"lua string orx enum 0 orxKEYBOARD_KEY_0 1 orxKEYBOARD_KEY_1 2 orxKEYBOARD_KEY_2 3 orxKEYBOARD_KEY_3 4 orxKEYBOARD_KEY_4 5 orxKEYBOARD_KEY_5 6 orxKEYBOARD_KEY_6 7 orxKEYBOARD_KEY_7 8 orxKEYBOARD_KEY_8 9 orxKEYBOARD_KEY_9 a orxKEYBOARD_KEY_A b orxKEYBOARD_KEY_B c orxKEYBOARD_KEY_C d orxKEYBOARD_KEY_D e orxKEYBOARD_KEY_E f orxKEYBOARD_KEY_F g orxKEYBOARD_KEY_G h orxKEYBOARD_KEY_H i orxKEYBOARD_KEY_I j orxKEYBOARD_KEY_J k orxKEYBOARD_KEY_K l orxKEYBOARD_KEY_L m orxKEYBOARD_KEY_M n orxKEYBOARD_KEY_N o orxKEYBOARD_KEY_O p orxKEYBOARD_KEY_P q orxKEYBOARD_KEY_Q r orxKEYBOARD_KEY_R s orxKEYBOARD_KEY_S t orxKEYBOARD_KEY_T u orxKEYBOARD_KEY_U v orxKEYBOARD_KEY_V w orxKEYBOARD_KEY_W x orxKEYBOARD_KEY_X y orxKEYBOARD_KEY_Y z orxKEYBOARD_KEY_Z space orxKEYBOARD_KEY_SPACE quote orxKEYBOARD_KEY_QUOTE comma orxKEYBOARD_KEY_COMMA dash orxKEYBOARD_KEY_DASH period orxKEYBOARD_KEY_PERIOD slash orxKEYBOARD_KEY_SLASH semicolon orxKEYBOARD_KEY_SEMICOLON equal orxKEYBOARD_KEY_EQUAL lbracket orxKEYBOARD_KEY_LBRACKET backslash orxKEYBOARD_KEY_BACKSLASH rbracket orxKEYBOARD_KEY_RBRACKET backquote orxKEYBOARD_KEY_BACKQUOTE world_1 orxKEYBOARD_KEY_WORLD_1 world_2 orxKEYBOARD_KEY_WORLD_2 escape orxKEYBOARD_KEY_ESCAPE enter orxKEYBOARD_KEY_ENTER tab orxKEYBOARD_KEY_TAB backspace orxKEYBOARD_KEY_BACKSPACE insert orxKEYBOARD_KEY_INSERT delete orxKEYBOARD_KEY_DELETE right orxKEYBOARD_KEY_RIGHT left orxKEYBOARD_KEY_LEFT down orxKEYBOARD_KEY_DOWN up orxKEYBOARD_KEY_UP page_up orxKEYBOARD_KEY_PAGE_UP page_down orxKEYBOARD_KEY_PAGE_DOWN home orxKEYBOARD_KEY_HOME end orxKEYBOARD_KEY_END caps_lock orxKEYBOARD_KEY_CAPS_LOCK scroll_lock orxKEYBOARD_KEY_SCROLL_LOCK num_lock orxKEYBOARD_KEY_NUM_LOCK print_screen orxKEYBOARD_KEY_PRINT_SCREEN pause orxKEYBOARD_KEY_PAUSE volume_down orxKEYBOARD_KEY_VOLUME_DOWN volume_up orxKEYBOARD_KEY_VOLUME_UP f1 orxKEYBOARD_KEY_F1 f2 orxKEYBOARD_KEY_F2 f3 orxKEYBOARD_KEY_F3 f4 orxKEYBOARD_KEY_F4 f5 orxKEYBOARD_KEY_F5 f6 orxKEYBOARD_KEY_F6 f7 orxKEYBOARD_KEY_F7 f8 orxKEYBOARD_KEY_F8 f9 orxKEYBOARD_KEY_F9 f10 orxKEYBOARD_KEY_F10 f11 orxKEYBOARD_KEY_F11 f12 orxKEYBOARD_KEY_F12 f13 orxKEYBOARD_KEY_F13 f14 orxKEYBOARD_KEY_F14 f15 orxKEYBOARD_KEY_F15 f16 orxKEYBOARD_KEY_F16 f17 orxKEYBOARD_KEY_F17 f18 orxKEYBOARD_KEY_F18 f19 orxKEYBOARD_KEY_F19 f20 orxKEYBOARD_KEY_F20 f21 orxKEYBOARD_KEY_F21 f22 orxKEYBOARD_KEY_F22 f23 orxKEYBOARD_KEY_F23 f24 orxKEYBOARD_KEY_F24 f25 orxKEYBOARD_KEY_F25 numpad_0 orxKEYBOARD_KEY_NUMPAD_0 numpad_1 orxKEYBOARD_KEY_NUMPAD_1 numpad_2 orxKEYBOARD_KEY_NUMPAD_2 numpad_3 orxKEYBOARD_KEY_NUMPAD_3 numpad_4 orxKEYBOARD_KEY_NUMPAD_4 numpad_5 orxKEYBOARD_KEY_NUMPAD_5 numpad_6 orxKEYBOARD_KEY_NUMPAD_6 numpad_7 orxKEYBOARD_KEY_NUMPAD_7 numpad_8 orxKEYBOARD_KEY_NUMPAD_8 numpad_9 orxKEYBOARD_KEY_NUMPAD_9 numpad_decimal orxKEYBOARD_KEY_NUMPAD_DECIMAL numpad_divide orxKEYBOARD_KEY_NUMPAD_DIVIDE numpad_multiply orxKEYBOARD_KEY_NUMPAD_MULTIPLY numpad_subtract orxKEYBOARD_KEY_NUMPAD_SUBTRACT numpad_add orxKEYBOARD_KEY_NUMPAD_ADD numpad_enter orxKEYBOARD_KEY_NUMPAD_ENTER numpad_equal orxKEYBOARD_KEY_NUMPAD_EQUAL lshift orxKEYBOARD_KEY_LSHIFT lctrl orxKEYBOARD_KEY_LCTRL lalt orxKEYBOARD_KEY_LALT lsystem orxKEYBOARD_KEY_LSYSTEM rshift orxKEYBOARD_KEY_RSHIFT rctrl orxKEYBOARD_KEY_RCTRL ralt orxKEYBOARD_KEY_RALT rsystem orxKEYBOARD_KEY_RSYSTEM menu orxKEYBOARD_KEY_MENU none orxKEYBOARD_KEY_NONE","title":"orxKEYBOARD_KEY"},{"location":"enums.html#orxlocale_event","text":"lua string orx enum select_language orxLOCALE_EVENT_SELECT_LANGUAGE set_string orxLOCALE_EVENT_SET_STRING none orxLOCALE_EVENT_NONE","title":"orxLOCALE_EVENT"},{"location":"enums.html#orxmodule_id","text":"lua string orx enum anim orxMODULE_ID_ANIM animpointer orxMODULE_ID_ANIMPOINTER animset orxMODULE_ID_ANIMSET bank orxMODULE_ID_BANK body orxMODULE_ID_BODY camera orxMODULE_ID_CAMERA clock orxMODULE_ID_CLOCK command orxMODULE_ID_COMMAND config orxMODULE_ID_CONFIG console orxMODULE_ID_CONSOLE display orxMODULE_ID_DISPLAY event orxMODULE_ID_EVENT file orxMODULE_ID_FILE font orxMODULE_ID_FONT fps orxMODULE_ID_FPS frame orxMODULE_ID_FRAME fx orxMODULE_ID_FX fxpointer orxMODULE_ID_FXPOINTER graphic orxMODULE_ID_GRAPHIC input orxMODULE_ID_INPUT joystick orxMODULE_ID_JOYSTICK keyboard orxMODULE_ID_KEYBOARD locale orxMODULE_ID_LOCALE main orxMODULE_ID_MAIN memory orxMODULE_ID_MEMORY mouse orxMODULE_ID_MOUSE object orxMODULE_ID_OBJECT param orxMODULE_ID_PARAM physics orxMODULE_ID_PHYSICS plugin orxMODULE_ID_PLUGIN profiler orxMODULE_ID_PROFILER render orxMODULE_ID_RENDER resource orxMODULE_ID_RESOURCE screenshot orxMODULE_ID_SCREENSHOT shader orxMODULE_ID_SHADER shaderpointer orxMODULE_ID_SHADERPOINTER sound orxMODULE_ID_SOUND soundpointer orxMODULE_ID_SOUNDPOINTER soundsystem orxMODULE_ID_SOUNDSYSTEM spawner orxMODULE_ID_SPAWNER string orxMODULE_ID_STRING structure orxMODULE_ID_STRUCTURE system orxMODULE_ID_SYSTEM text orxMODULE_ID_TEXT texture orxMODULE_ID_TEXTURE thread orxMODULE_ID_THREAD timeline orxMODULE_ID_TIMELINE viewport orxMODULE_ID_VIEWPORT user_defined orxMODULE_ID_USER_DEFINED none orxMODULE_ID_NONE","title":"orxMODULE_ID"},{"location":"enums.html#orxmouse_axis","text":"lua string orx enum x orxMOUSE_AXIS_X y orxMOUSE_AXIS_Y none orxMOUSE_AXIS_NONE","title":"orxMOUSE_AXIS"},{"location":"enums.html#orxmouse_button","text":"lua string orx enum left orxMOUSE_BUTTON_LEFT right orxMOUSE_BUTTON_RIGHT middle orxMOUSE_BUTTON_MIDDLE extra_1 orxMOUSE_BUTTON_EXTRA_1 extra_2 orxMOUSE_BUTTON_EXTRA_2 extra_3 orxMOUSE_BUTTON_EXTRA_3 extra_4 orxMOUSE_BUTTON_EXTRA_4 extra_5 orxMOUSE_BUTTON_EXTRA_5 wheel_up orxMOUSE_BUTTON_WHEEL_UP wheel_down orxMOUSE_BUTTON_WHEEL_DOWN none orxMOUSE_BUTTON_NONE","title":"orxMOUSE_BUTTON"},{"location":"enums.html#orxobject_event","text":"lua string orx enum create orxOBJECT_EVENT_CREATE delete orxOBJECT_EVENT_DELETE prepare orxOBJECT_EVENT_PREPARE enable orxOBJECT_EVENT_ENABLE disable orxOBJECT_EVENT_DISABLE pause orxOBJECT_EVENT_PAUSE unpause orxOBJECT_EVENT_UNPAUSE none orxOBJECT_EVENT_NONE","title":"orxOBJECT_EVENT"},{"location":"enums.html#orxphysics_event","text":"lua string orx enum contact_add orxPHYSICS_EVENT_CONTACT_ADD contact_remove orxPHYSICS_EVENT_CONTACT_REMOVE none orxPHYSICS_EVENT_NONE","title":"orxPHYSICS_EVENT"},{"location":"enums.html#orxrender_event","text":"lua string orx enum start orxRENDER_EVENT_START stop orxRENDER_EVENT_STOP viewport_start orxRENDER_EVENT_VIEWPORT_START viewport_stop orxRENDER_EVENT_VIEWPORT_STOP object_start orxRENDER_EVENT_OBJECT_START object_stop orxRENDER_EVENT_OBJECT_STOP console_start orxRENDER_EVENT_CONSOLE_START console_stop orxRENDER_EVENT_CONSOLE_STOP profiler_start orxRENDER_EVENT_PROFILER_START profiler_stop orxRENDER_EVENT_PROFILER_STOP none orxRENDER_EVENT_NONE","title":"orxRENDER_EVENT"},{"location":"enums.html#orxresource_event","text":"lua string orx enum update orxRESOURCE_EVENT_UPDATE add orxRESOURCE_EVENT_ADD remove orxRESOURCE_EVENT_REMOVE none orxRESOURCE_EVENT_NONE","title":"orxRESOURCE_EVENT"},{"location":"enums.html#orxseek_offset_whence","text":"lua string orx enum start orxSEEK_OFFSET_WHENCE_START current orxSEEK_OFFSET_WHENCE_CURRENT end orxSEEK_OFFSET_WHENCE_END none orxSEEK_OFFSET_WHENCE_NONE","title":"orxSEEK_OFFSET_WHENCE"},{"location":"enums.html#orxshader_event","text":"lua string orx enum set_param orxSHADER_EVENT_SET_PARAM none orxSHADER_EVENT_NONE","title":"orxSHADER_EVENT"},{"location":"enums.html#orxshader_param_type","text":"lua string orx enum float orxSHADER_PARAM_TYPE_FLOAT texture orxSHADER_PARAM_TYPE_TEXTURE vector orxSHADER_PARAM_TYPE_VECTOR time orxSHADER_PARAM_TYPE_TIME none orxSHADER_PARAM_TYPE_NONE","title":"orxSHADER_PARAM_TYPE"},{"location":"enums.html#orxsoundsystem_status","text":"lua string orx enum play orxSOUNDSYSTEM_STATUS_PLAY pause orxSOUNDSYSTEM_STATUS_PAUSE stop orxSOUNDSYSTEM_STATUS_STOP none orxSOUNDSYSTEM_STATUS_NONE","title":"orxSOUNDSYSTEM_STATUS"},{"location":"enums.html#orxsound_event","text":"lua string orx enum start orxSOUND_EVENT_START stop orxSOUND_EVENT_STOP add orxSOUND_EVENT_ADD remove orxSOUND_EVENT_REMOVE packet orxSOUND_EVENT_PACKET recording_start orxSOUND_EVENT_RECORDING_START recording_stop orxSOUND_EVENT_RECORDING_STOP recording_packet orxSOUND_EVENT_RECORDING_PACKET set_filter_param orxSOUND_EVENT_SET_FILTER_PARAM none orxSOUND_EVENT_NONE","title":"orxSOUND_EVENT"},{"location":"enums.html#orxsound_filter_type","text":"lua string orx enum biquad orxSOUND_FILTER_TYPE_BIQUAD low_pass orxSOUND_FILTER_TYPE_LOW_PASS high_pass orxSOUND_FILTER_TYPE_HIGH_PASS band_pass orxSOUND_FILTER_TYPE_BAND_PASS low_shelf orxSOUND_FILTER_TYPE_LOW_SHELF high_shelf orxSOUND_FILTER_TYPE_HIGH_SHELF notch orxSOUND_FILTER_TYPE_NOTCH peaking orxSOUND_FILTER_TYPE_PEAKING delay orxSOUND_FILTER_TYPE_DELAY custom orxSOUND_FILTER_TYPE_CUSTOM none orxSOUND_FILTER_TYPE_NONE","title":"orxSOUND_FILTER_TYPE"},{"location":"enums.html#orxsound_status","text":"lua string orx enum play orxSOUND_STATUS_PLAY pause orxSOUND_STATUS_PAUSE stop orxSOUND_STATUS_STOP none orxSOUND_STATUS_NONE","title":"orxSOUND_STATUS"},{"location":"enums.html#orxspawner_event","text":"lua string orx enum spawn orxSPAWNER_EVENT_SPAWN create orxSPAWNER_EVENT_CREATE delete orxSPAWNER_EVENT_DELETE reset orxSPAWNER_EVENT_RESET empty orxSPAWNER_EVENT_EMPTY wave_start orxSPAWNER_EVENT_WAVE_START wave_stop orxSPAWNER_EVENT_WAVE_STOP none orxSPAWNER_EVENT_NONE","title":"orxSPAWNER_EVENT"},{"location":"enums.html#orxstatus","text":"lua string orx enum failure orxSTATUS_FAILURE success orxSTATUS_SUCCESS none orxSTATUS_NONE","title":"orxSTATUS"},{"location":"enums.html#orxstructure_id","text":"lua string orx enum animpointer orxSTRUCTURE_ID_ANIMPOINTER body orxSTRUCTURE_ID_BODY clock orxSTRUCTURE_ID_CLOCK frame orxSTRUCTURE_ID_FRAME fxpointer orxSTRUCTURE_ID_FXPOINTER graphic orxSTRUCTURE_ID_GRAPHIC shaderpointer orxSTRUCTURE_ID_SHADERPOINTER soundpointer orxSTRUCTURE_ID_SOUNDPOINTER spawner orxSTRUCTURE_ID_SPAWNER timeline orxSTRUCTURE_ID_TIMELINE anim orxSTRUCTURE_ID_ANIM animset orxSTRUCTURE_ID_ANIMSET camera orxSTRUCTURE_ID_CAMERA font orxSTRUCTURE_ID_FONT fx orxSTRUCTURE_ID_FX object orxSTRUCTURE_ID_OBJECT shader orxSTRUCTURE_ID_SHADER sound orxSTRUCTURE_ID_SOUND text orxSTRUCTURE_ID_TEXT texture orxSTRUCTURE_ID_TEXTURE viewport orxSTRUCTURE_ID_VIEWPORT none orxSTRUCTURE_ID_NONE","title":"orxSTRUCTURE_ID"},{"location":"enums.html#orxstructure_storage_type","text":"lua string orx enum linklist orxSTRUCTURE_STORAGE_TYPE_LINKLIST tree orxSTRUCTURE_STORAGE_TYPE_TREE none orxSTRUCTURE_STORAGE_TYPE_NONE","title":"orxSTRUCTURE_STORAGE_TYPE"},{"location":"enums.html#orxsystem_event","text":"lua string orx enum close orxSYSTEM_EVENT_CLOSE focus_gained orxSYSTEM_EVENT_FOCUS_GAINED focus_lost orxSYSTEM_EVENT_FOCUS_LOST background orxSYSTEM_EVENT_BACKGROUND foreground orxSYSTEM_EVENT_FOREGROUND game_loop_start orxSYSTEM_EVENT_GAME_LOOP_START game_loop_stop orxSYSTEM_EVENT_GAME_LOOP_STOP touch_begin orxSYSTEM_EVENT_TOUCH_BEGIN touch_move orxSYSTEM_EVENT_TOUCH_MOVE touch_end orxSYSTEM_EVENT_TOUCH_END accelerate orxSYSTEM_EVENT_ACCELERATE motion_shake orxSYSTEM_EVENT_MOTION_SHAKE drop orxSYSTEM_EVENT_DROP clipboard orxSYSTEM_EVENT_CLIPBOARD none orxSYSTEM_EVENT_NONE","title":"orxSYSTEM_EVENT"},{"location":"enums.html#orxtexture_event","text":"lua string orx enum create orxTEXTURE_EVENT_CREATE delete orxTEXTURE_EVENT_DELETE load orxTEXTURE_EVENT_LOAD none orxTEXTURE_EVENT_NONE","title":"orxTEXTURE_EVENT"},{"location":"enums.html#orxtimeline_event","text":"lua string orx enum track_start orxTIMELINE_EVENT_TRACK_START track_stop orxTIMELINE_EVENT_TRACK_STOP track_add orxTIMELINE_EVENT_TRACK_ADD track_remove orxTIMELINE_EVENT_TRACK_REMOVE loop orxTIMELINE_EVENT_LOOP trigger orxTIMELINE_EVENT_TRIGGER none orxTIMELINE_EVENT_NONE","title":"orxTIMELINE_EVENT"},{"location":"enums.html#orxviewport_event","text":"lua string orx enum resize orxVIEWPORT_EVENT_RESIZE none orxVIEWPORT_EVENT_NONE","title":"orxVIEWPORT_EVENT"},{"location":"root.html","text":"root module (lorx.*) # functions # execute # Signature: execute ( init , update , exit ) Description: Run the Orx engine, similar to orxExecute. The difference been that instead of a 'run' callback, this function asks for an 'update' callback. Params: name type description init lorxINIT_CALLBACK init callback to be called when Orx is initalizing update lorxUPDATE_CALLBACK update callback to be called on every frame exit lorxEXIT_CALLBACK exit callback to be called when Orx is exiting Returns: stop # Signature: stop () Description: Stop the Orx engine (cause normal exit) Params: Returns: getVersion # Signature: r1 = getVersion () Description: Get Lorx version Params: Returns: type description string Lorx version string getOrxVersion # Signature: r1 = getOrxVersion () Description: Get runtime Orx Version Params: Returns: type description string runtime Orx version string getBindOrxVersion # Signature: r1 = getBindOrxVersion () Description: Get bind Orx Version Params: Returns: type description string bind Orx version string registerUpdate # Signature: registerUpdate ( update ) Description: Register the update callback. (will discard the previous one). Params: name type description update lorxUPDATE_CALLBACK new update callback Returns: unregisterUpdate # Signature: r1 = unregisterUpdate () Description: Unregister current update callback Params: Returns: type description boolean false if the callback was not yet set registerAnimHandler # Signature: r1 = registerAnimHandler ( handler ) Description: Register a callback to handle anim events. (The previous one will be discarded) Params: name type description handler lorxANIM_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerClockHandler # Signature: r1 = registerClockHandler ( handler ) Description: Register a callback to handle clock events. (The previous one will be discarded) Params: name type description handler lorxCLOCK_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerConfigHandler # Signature: r1 = registerConfigHandler ( handler ) Description: Register a callback to handle config events. (The previous one will be discarded) Params: name type description handler lorxCONFIG_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerDisplayHandler # Signature: r1 = registerDisplayHandler ( handler ) Description: Register a callback to handle display events. (The previous one will be discarded) Params: name type description handler lorxDISPLAY_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerFXHandler # Signature: r1 = registerFXHandler ( handler ) Description: Register a callback to handle fx events. (The previous one will be discarded) Params: name type description handler lorxFX_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerInputHandler # Signature: r1 = registerInputHandler ( handler ) Description: Register a callback to handle input events. (The previous one will be discarded) Params: name type description handler lorxINPUT_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerLocaleHandler # Signature: r1 = registerLocaleHandler ( handler ) Description: Register a callback to handle locale events. (The previous one will be discarded) Params: name type description handler lorxLOCALE_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerObjectHandler # Signature: r1 = registerObjectHandler ( handler ) Description: Register a callback to handle object events. (The previous one will be discarded) Params: name type description handler lorxOBJECT_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerRenderHandler # Signature: r1 = registerRenderHandler ( handler ) Description: Register a callback to handle render events. (The previous one will be discarded) Params: name type description handler lorxRENDER_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerViewportHandler # Signature: r1 = registerViewportHandler ( handler ) Description: Register a callback to handle viewport events. (The previous one will be discarded) Params: name type description handler lorxVIEWPORT_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerTimelineHandler # Signature: r1 = registerTimelineHandler ( handler ) Description: Register a callback to handle timeline events. (The previous one will be discarded) Params: name type description handler lorxTIMELINE_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerTextureHandler # Signature: r1 = registerTextureHandler ( handler ) Description: Register a callback to handle texture events. (The previous one will be discarded) Params: name type description handler lorxTEXTURE_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerSystemHandler # Signature: r1 = registerSystemHandler ( handler ) Description: Register a callback to handle system events. (The previous one will be discarded) Params: name type description handler lorxSYSTEM_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerShaderHandler # Signature: r1 = registerShaderHandler ( handler ) Description: Register a callback to handle shader events. (The previous one will be discarded) Params: name type description handler lorxSHADER_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerSpawnerHandler # Signature: r1 = registerSpawnerHandler ( handler ) Description: Register a callback to handle spawner events. (The previous one will be discarded) Params: name type description handler lorxSPAWNER_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerSoundHandler # Signature: r1 = registerSoundHandler ( handler ) Description: Register a callback to handle sound events. (The previous one will be discarded) Params: name type description handler lorxSOUND_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerResourceHandler # Signature: r1 = registerResourceHandler ( handler ) Description: Register a callback to handle resource events. (The previous one will be discarded) Params: name type description handler lorxRESOURCE_EVENT_HANDLER - Returns: type description orxSTATUS success / failure registerPhysicsHandler # Signature: r1 = registerPhysicsHandler ( handler ) Description: Register a callback to handle physics events. (The previous one will be discarded) Params: name type description handler lorxPHYSICS_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"Root Module"},{"location":"root.html#root-module-lorx","text":"","title":"root module (lorx.*)"},{"location":"root.html#functions","text":"","title":"functions"},{"location":"root.html#execute","text":"Signature: execute ( init , update , exit ) Description: Run the Orx engine, similar to orxExecute. The difference been that instead of a 'run' callback, this function asks for an 'update' callback. Params: name type description init lorxINIT_CALLBACK init callback to be called when Orx is initalizing update lorxUPDATE_CALLBACK update callback to be called on every frame exit lorxEXIT_CALLBACK exit callback to be called when Orx is exiting Returns:","title":"execute"},{"location":"root.html#stop","text":"Signature: stop () Description: Stop the Orx engine (cause normal exit) Params: Returns:","title":"stop"},{"location":"root.html#getversion","text":"Signature: r1 = getVersion () Description: Get Lorx version Params: Returns: type description string Lorx version string","title":"getVersion"},{"location":"root.html#getorxversion","text":"Signature: r1 = getOrxVersion () Description: Get runtime Orx Version Params: Returns: type description string runtime Orx version string","title":"getOrxVersion"},{"location":"root.html#getbindorxversion","text":"Signature: r1 = getBindOrxVersion () Description: Get bind Orx Version Params: Returns: type description string bind Orx version string","title":"getBindOrxVersion"},{"location":"root.html#registerupdate","text":"Signature: registerUpdate ( update ) Description: Register the update callback. (will discard the previous one). Params: name type description update lorxUPDATE_CALLBACK new update callback Returns:","title":"registerUpdate"},{"location":"root.html#unregisterupdate","text":"Signature: r1 = unregisterUpdate () Description: Unregister current update callback Params: Returns: type description boolean false if the callback was not yet set","title":"unregisterUpdate"},{"location":"root.html#registeranimhandler","text":"Signature: r1 = registerAnimHandler ( handler ) Description: Register a callback to handle anim events. (The previous one will be discarded) Params: name type description handler lorxANIM_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerAnimHandler"},{"location":"root.html#registerclockhandler","text":"Signature: r1 = registerClockHandler ( handler ) Description: Register a callback to handle clock events. (The previous one will be discarded) Params: name type description handler lorxCLOCK_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerClockHandler"},{"location":"root.html#registerconfighandler","text":"Signature: r1 = registerConfigHandler ( handler ) Description: Register a callback to handle config events. (The previous one will be discarded) Params: name type description handler lorxCONFIG_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerConfigHandler"},{"location":"root.html#registerdisplayhandler","text":"Signature: r1 = registerDisplayHandler ( handler ) Description: Register a callback to handle display events. (The previous one will be discarded) Params: name type description handler lorxDISPLAY_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerDisplayHandler"},{"location":"root.html#registerfxhandler","text":"Signature: r1 = registerFXHandler ( handler ) Description: Register a callback to handle fx events. (The previous one will be discarded) Params: name type description handler lorxFX_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerFXHandler"},{"location":"root.html#registerinputhandler","text":"Signature: r1 = registerInputHandler ( handler ) Description: Register a callback to handle input events. (The previous one will be discarded) Params: name type description handler lorxINPUT_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerInputHandler"},{"location":"root.html#registerlocalehandler","text":"Signature: r1 = registerLocaleHandler ( handler ) Description: Register a callback to handle locale events. (The previous one will be discarded) Params: name type description handler lorxLOCALE_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerLocaleHandler"},{"location":"root.html#registerobjecthandler","text":"Signature: r1 = registerObjectHandler ( handler ) Description: Register a callback to handle object events. (The previous one will be discarded) Params: name type description handler lorxOBJECT_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerObjectHandler"},{"location":"root.html#registerrenderhandler","text":"Signature: r1 = registerRenderHandler ( handler ) Description: Register a callback to handle render events. (The previous one will be discarded) Params: name type description handler lorxRENDER_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerRenderHandler"},{"location":"root.html#registerviewporthandler","text":"Signature: r1 = registerViewportHandler ( handler ) Description: Register a callback to handle viewport events. (The previous one will be discarded) Params: name type description handler lorxVIEWPORT_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerViewportHandler"},{"location":"root.html#registertimelinehandler","text":"Signature: r1 = registerTimelineHandler ( handler ) Description: Register a callback to handle timeline events. (The previous one will be discarded) Params: name type description handler lorxTIMELINE_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerTimelineHandler"},{"location":"root.html#registertexturehandler","text":"Signature: r1 = registerTextureHandler ( handler ) Description: Register a callback to handle texture events. (The previous one will be discarded) Params: name type description handler lorxTEXTURE_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerTextureHandler"},{"location":"root.html#registersystemhandler","text":"Signature: r1 = registerSystemHandler ( handler ) Description: Register a callback to handle system events. (The previous one will be discarded) Params: name type description handler lorxSYSTEM_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerSystemHandler"},{"location":"root.html#registershaderhandler","text":"Signature: r1 = registerShaderHandler ( handler ) Description: Register a callback to handle shader events. (The previous one will be discarded) Params: name type description handler lorxSHADER_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerShaderHandler"},{"location":"root.html#registerspawnerhandler","text":"Signature: r1 = registerSpawnerHandler ( handler ) Description: Register a callback to handle spawner events. (The previous one will be discarded) Params: name type description handler lorxSPAWNER_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerSpawnerHandler"},{"location":"root.html#registersoundhandler","text":"Signature: r1 = registerSoundHandler ( handler ) Description: Register a callback to handle sound events. (The previous one will be discarded) Params: name type description handler lorxSOUND_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerSoundHandler"},{"location":"root.html#registerresourcehandler","text":"Signature: r1 = registerResourceHandler ( handler ) Description: Register a callback to handle resource events. (The previous one will be discarded) Params: name type description handler lorxRESOURCE_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerResourceHandler"},{"location":"root.html#registerphysicshandler","text":"Signature: r1 = registerPhysicsHandler ( handler ) Description: Register a callback to handle physics events. (The previous one will be discarded) Params: name type description handler lorxPHYSICS_EVENT_HANDLER - Returns: type description orxSTATUS success / failure","title":"registerPhysicsHandler"},{"location":"modules/aabox.html","text":"module aabox # functions # aabox # Signature: r1 = aabox ( vTL , vBR ) Description: Create a new orxAABOX Params: name type description vTL orxVECTOR vBR orxVECTOR Returns: type description orxAABOX The new instance","title":"aabox"},{"location":"modules/aabox.html#module-aabox","text":"","title":"module aabox"},{"location":"modules/aabox.html#functions","text":"","title":"functions"},{"location":"modules/aabox.html#aabox","text":"Signature: r1 = aabox ( vTL , vBR ) Description: Create a new orxAABOX Params: name type description vTL orxVECTOR vBR orxVECTOR Returns: type description orxAABOX The new instance","title":"aabox"},{"location":"modules/anim.html","text":"module anim # functions # animCustomEvent # Signature: r1 = animCustomEvent () Description: Create a new orxANIM_CUSTOM_EVENT Params: Returns: type description orxANIM_CUSTOM_EVENT The new instance create # Signature: r1 = create ( flags , keynumber , eventnumber ) Description: Creates an empty animation Params: name type description flags integer Flags for created animation keynumber integer Number of keys for this animation eventnumber integer Number of events for this animation Returns: type description orxANIM Created orxANIM / nil C signature: orxANIM * orxAnim_Create ( orxU32 _u32Flags , orxU32 _u32KeyNumber , orxU32 _u32EventNumber ) exit # Signature: exit () Description: Exits from the Anim module Params: Returns: C signature: void orxAnim_Exit () init # Signature: r1 = init () Description: Inits the Anim module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxAnim_Init () setup # Signature: setup () Description: Anim module setup Params: Returns: C signature: void orxAnim_Setup ()","title":"anim"},{"location":"modules/anim.html#module-anim","text":"","title":"module anim"},{"location":"modules/anim.html#functions","text":"","title":"functions"},{"location":"modules/anim.html#animcustomevent","text":"Signature: r1 = animCustomEvent () Description: Create a new orxANIM_CUSTOM_EVENT Params: Returns: type description orxANIM_CUSTOM_EVENT The new instance","title":"animCustomEvent"},{"location":"modules/anim.html#create","text":"Signature: r1 = create ( flags , keynumber , eventnumber ) Description: Creates an empty animation Params: name type description flags integer Flags for created animation keynumber integer Number of keys for this animation eventnumber integer Number of events for this animation Returns: type description orxANIM Created orxANIM / nil C signature: orxANIM * orxAnim_Create ( orxU32 _u32Flags , orxU32 _u32KeyNumber , orxU32 _u32EventNumber )","title":"create"},{"location":"modules/anim.html#exit","text":"Signature: exit () Description: Exits from the Anim module Params: Returns: C signature: void orxAnim_Exit ()","title":"exit"},{"location":"modules/anim.html#init","text":"Signature: r1 = init () Description: Inits the Anim module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxAnim_Init ()","title":"init"},{"location":"modules/anim.html#setup","text":"Signature: setup () Description: Anim module setup Params: Returns: C signature: void orxAnim_Setup ()","title":"setup"},{"location":"modules/animpointer.html","text":"module animpointer # functions # create # Signature: r1 = create ( animset ) Description: Creates an empty AnimPointer Params: name type description animset orxANIMSET AnimSet reference Returns: type description orxANIMPOINTER orxANIMPOINTER / nil C signature: orxANIMPOINTER * orxAnimPointer_Create ( orxANIMSET * _pstAnimSet ) createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates an animation pointer from config Params: name type description configid string Config ID Returns: type description orxANIMPOINTER orxANIMPOINTER / nil C signature: orxANIMPOINTER * orxAnimPointer_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the AnimPointer module Params: Returns: C signature: void orxAnimPointer_Exit () init # Signature: r1 = init () Description: Inits the AnimPointer module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_Init () setup # Signature: setup () Description: AnimPointer module setup Params: Returns: C signature: void orxAnimPointer_Setup ()","title":"animpointer"},{"location":"modules/animpointer.html#module-animpointer","text":"","title":"module animpointer"},{"location":"modules/animpointer.html#functions","text":"","title":"functions"},{"location":"modules/animpointer.html#create","text":"Signature: r1 = create ( animset ) Description: Creates an empty AnimPointer Params: name type description animset orxANIMSET AnimSet reference Returns: type description orxANIMPOINTER orxANIMPOINTER / nil C signature: orxANIMPOINTER * orxAnimPointer_Create ( orxANIMSET * _pstAnimSet )","title":"create"},{"location":"modules/animpointer.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates an animation pointer from config Params: name type description configid string Config ID Returns: type description orxANIMPOINTER orxANIMPOINTER / nil C signature: orxANIMPOINTER * orxAnimPointer_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/animpointer.html#exit","text":"Signature: exit () Description: Exits from the AnimPointer module Params: Returns: C signature: void orxAnimPointer_Exit ()","title":"exit"},{"location":"modules/animpointer.html#init","text":"Signature: r1 = init () Description: Inits the AnimPointer module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_Init ()","title":"init"},{"location":"modules/animpointer.html#setup","text":"Signature: setup () Description: AnimPointer module setup Params: Returns: C signature: void orxAnimPointer_Setup ()","title":"setup"},{"location":"modules/animset.html","text":"module animset # functions # clearCache # Signature: r1 = clearCache () Description: Clears cache (if any animset is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_ClearCache () create # Signature: r1 = create ( size ) Description: Creates an empty AnimSet Params: name type description size integer Storage size Returns: type description orxANIMSET C signature: orxANIMSET * orxAnimSet_Create ( orxU32 _u32Size ) createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates an animation set from config Params: name type description configid string Config ID Returns: type description orxANIMSET orxANIMSET / nil C signature: orxANIMSET * orxAnimSet_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the AnimSet module Params: Returns: C signature: void orxAnimSet_Exit () init # Signature: r1 = init () Description: Inits the AnimSet module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_Init () setup # Signature: setup () Description: AnimSet module setup Params: Returns: C signature: void orxAnimSet_Setup ()","title":"animset"},{"location":"modules/animset.html#module-animset","text":"","title":"module animset"},{"location":"modules/animset.html#functions","text":"","title":"functions"},{"location":"modules/animset.html#clearcache","text":"Signature: r1 = clearCache () Description: Clears cache (if any animset is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_ClearCache ()","title":"clearCache"},{"location":"modules/animset.html#create","text":"Signature: r1 = create ( size ) Description: Creates an empty AnimSet Params: name type description size integer Storage size Returns: type description orxANIMSET C signature: orxANIMSET * orxAnimSet_Create ( orxU32 _u32Size )","title":"create"},{"location":"modules/animset.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates an animation set from config Params: name type description configid string Config ID Returns: type description orxANIMSET orxANIMSET / nil C signature: orxANIMSET * orxAnimSet_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/animset.html#exit","text":"Signature: exit () Description: Exits from the AnimSet module Params: Returns: C signature: void orxAnimSet_Exit ()","title":"exit"},{"location":"modules/animset.html#init","text":"Signature: r1 = init () Description: Inits the AnimSet module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_Init ()","title":"init"},{"location":"modules/animset.html#setup","text":"Signature: setup () Description: AnimSet module setup Params: Returns: C signature: void orxAnimSet_Setup ()","title":"setup"},{"location":"modules/body.html","text":"module body # functions # boxPick # Signature: r1 = boxPick ( box , selfflags , checkmask , bodylist , number ) Description: Picks bodies in contact with the given axis aligned box. Params: name type description box orxAABOX# Box used for picking selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) bodylist table of orxBODY List of bodies to fill number integer Number of bodies Returns: type description integer Count of actual found bodies. It might be larger than the given array, in which case you'd need to pass a larger array to retrieve them all. C signature: orxU32 orxBody_BoxPick ( const orxAABOX * _pstBox , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxBODY * _apstBodyList [], orxU32 _u32Number ) createFromConfig # Signature: r1 = createFromConfig ( owner , configid ) Description: Creates a body from config Params: name type description owner orxSTRUCTURE# Body's owner used for collision callbacks (usually an orxOBJECT) configid string Body config ID Returns: type description orxBODY Created orxGRAPHIC / nil C signature: orxBODY * orxBody_CreateFromConfig ( const orxSTRUCTURE * _pstOwner , const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the Body module Params: Returns: C signature: void orxBody_Exit () init # Signature: r1 = init () Description: Inits the Body module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxBody_Init () raycast # Signature: r1 = raycast ( begin , end , selfflags , checkmask , earlyexit , contact , normal ) Description: Issues a raycast to test for potential bodies in the way Params: name type description begin orxVECTOR# Beginning of raycast end orxVECTOR# End of raycast selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) earlyexit boolean Should stop as soon as an object has been hit (which might not be the closest) contact orxVECTOR If non-nil and a contact is found it will be stored here normal orxVECTOR If non-nil and a contact is found, its normal will be stored here Returns: type description orxBODY Colliding orxBODY / nil C signature: orxBODY * orxBody_Raycast ( const orxVECTOR * _pvBegin , const orxVECTOR * _pvEnd , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxBOOL _bEarlyExit , orxVECTOR * _pvContact , orxVECTOR * _pvNormal ) setup # Signature: setup () Description: Body module setup Params: Returns: C signature: void orxBody_Setup ()","title":"body"},{"location":"modules/body.html#module-body","text":"","title":"module body"},{"location":"modules/body.html#functions","text":"","title":"functions"},{"location":"modules/body.html#boxpick","text":"Signature: r1 = boxPick ( box , selfflags , checkmask , bodylist , number ) Description: Picks bodies in contact with the given axis aligned box. Params: name type description box orxAABOX# Box used for picking selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) bodylist table of orxBODY List of bodies to fill number integer Number of bodies Returns: type description integer Count of actual found bodies. It might be larger than the given array, in which case you'd need to pass a larger array to retrieve them all. C signature: orxU32 orxBody_BoxPick ( const orxAABOX * _pstBox , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxBODY * _apstBodyList [], orxU32 _u32Number )","title":"boxPick"},{"location":"modules/body.html#createfromconfig","text":"Signature: r1 = createFromConfig ( owner , configid ) Description: Creates a body from config Params: name type description owner orxSTRUCTURE# Body's owner used for collision callbacks (usually an orxOBJECT) configid string Body config ID Returns: type description orxBODY Created orxGRAPHIC / nil C signature: orxBODY * orxBody_CreateFromConfig ( const orxSTRUCTURE * _pstOwner , const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/body.html#exit","text":"Signature: exit () Description: Exits from the Body module Params: Returns: C signature: void orxBody_Exit ()","title":"exit"},{"location":"modules/body.html#init","text":"Signature: r1 = init () Description: Inits the Body module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxBody_Init ()","title":"init"},{"location":"modules/body.html#raycast","text":"Signature: r1 = raycast ( begin , end , selfflags , checkmask , earlyexit , contact , normal ) Description: Issues a raycast to test for potential bodies in the way Params: name type description begin orxVECTOR# Beginning of raycast end orxVECTOR# End of raycast selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) earlyexit boolean Should stop as soon as an object has been hit (which might not be the closest) contact orxVECTOR If non-nil and a contact is found it will be stored here normal orxVECTOR If non-nil and a contact is found, its normal will be stored here Returns: type description orxBODY Colliding orxBODY / nil C signature: orxBODY * orxBody_Raycast ( const orxVECTOR * _pvBegin , const orxVECTOR * _pvEnd , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxBOOL _bEarlyExit , orxVECTOR * _pvContact , orxVECTOR * _pvNormal )","title":"raycast"},{"location":"modules/body.html#setup","text":"Signature: setup () Description: Body module setup Params: Returns: C signature: void orxBody_Setup ()","title":"setup"},{"location":"modules/camera.html","text":"module camera # functions # create # Signature: r1 = create ( flags ) Description: Creates a camera Params: name type description flags integer Camera flags (2D / ...) Returns: type description orxCAMERA Created orxCAMERA / nil C signature: orxCAMERA * orxCamera_Create ( orxU32 _u32Flags ) createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates a camera from config Params: name type description configid string Config ID Returns: type description orxCAMERA orxCAMERA / nil C signature: orxCAMERA * orxCamera_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the Camera module Params: Returns: C signature: void orxCamera_Exit () get # Signature: r1 = get ( name ) Description: Gets camera given its name Params: name type description name string Camera name Returns: type description orxCAMERA orxCAMERA / nil C signature: orxCAMERA * orxCamera_Get ( const orxSTRING _zName ) init # Signature: r1 = init () Description: Inits the Camera module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxCamera_Init () setup # Signature: setup () Description: Camera module setup Params: Returns: C signature: void orxCamera_Setup ()","title":"camera"},{"location":"modules/camera.html#module-camera","text":"","title":"module camera"},{"location":"modules/camera.html#functions","text":"","title":"functions"},{"location":"modules/camera.html#create","text":"Signature: r1 = create ( flags ) Description: Creates a camera Params: name type description flags integer Camera flags (2D / ...) Returns: type description orxCAMERA Created orxCAMERA / nil C signature: orxCAMERA * orxCamera_Create ( orxU32 _u32Flags )","title":"create"},{"location":"modules/camera.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates a camera from config Params: name type description configid string Config ID Returns: type description orxCAMERA orxCAMERA / nil C signature: orxCAMERA * orxCamera_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/camera.html#exit","text":"Signature: exit () Description: Exits from the Camera module Params: Returns: C signature: void orxCamera_Exit ()","title":"exit"},{"location":"modules/camera.html#get","text":"Signature: r1 = get ( name ) Description: Gets camera given its name Params: name type description name string Camera name Returns: type description orxCAMERA orxCAMERA / nil C signature: orxCAMERA * orxCamera_Get ( const orxSTRING _zName )","title":"get"},{"location":"modules/camera.html#init","text":"Signature: r1 = init () Description: Inits the Camera module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxCamera_Init ()","title":"init"},{"location":"modules/camera.html#setup","text":"Signature: setup () Description: Camera module setup Params: Returns: C signature: void orxCamera_Setup ()","title":"setup"},{"location":"modules/clock.html","text":"module clock # functions # addGlobalTimer # Signature: r1 = addGlobalTimer ( timercb , delay , repetition ) Description: Add a global timer function (ie. using the main core clock) Params: name type description timercb lorxCLOCK_CALLBACK Concerned timer callback delay number Timer's delay between 2 calls, must be strictly positive repetition integer Number of times this timer should be called before removed, -1 for infinite Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_AddGlobalTimer ( const orxCLOCK_FUNCTION _pfnCallback , orxFLOAT _fDelay , orxS32 _s32Repetition , void * _pContext ) create # Signature: r1 = create ( ticksize ) Description: Creates a clock Params: name type description ticksize number Tick size for the clock (in seconds) Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_Create ( orxFLOAT _fTickSize ) createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates a clock from config Params: name type description configid string Config ID Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the clock module Params: Returns: C signature: void orxClock_Exit () get # Signature: r1 = get ( name ) Description: Gets clock given its name Params: name type description name string Clock name Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_Get ( const orxSTRING _zName ) getFromInfo # Signature: r1 = getFromInfo ( clockinfo ) Description: Gets clock from its info Params: name type description clockinfo orxCLOCK_INFO# Concerned clock info Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_GetFromInfo ( const orxCLOCK_INFO * _pstClockInfo ) init # Signature: r1 = init () Description: Inits the clock module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Init () removeGlobalTimer # Signature: r1 = removeGlobalTimer ( timercb , delay ) Description: Removes a global timer function (ie. from the main core clock) Params: name type description timercb lorxCLOCK_CALLBACK Concerned timer callback delay number Timer's delay between 2 calls, must be strictly positive Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_RemoveGlobalTimer ( const orxCLOCK_FUNCTION _pfnCallback , orxFLOAT _fDelay , void * _pContext ) resyncAll # Signature: r1 = resyncAll () Description: Resyncs all clocks (accumulated DT => 0) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_ResyncAll () setup # Signature: setup () Description: Clock module setup Params: Returns: C signature: void orxClock_Setup () update # Signature: r1 = update () Description: Updates the clock system Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Update ()","title":"clock"},{"location":"modules/clock.html#module-clock","text":"","title":"module clock"},{"location":"modules/clock.html#functions","text":"","title":"functions"},{"location":"modules/clock.html#addglobaltimer","text":"Signature: r1 = addGlobalTimer ( timercb , delay , repetition ) Description: Add a global timer function (ie. using the main core clock) Params: name type description timercb lorxCLOCK_CALLBACK Concerned timer callback delay number Timer's delay between 2 calls, must be strictly positive repetition integer Number of times this timer should be called before removed, -1 for infinite Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_AddGlobalTimer ( const orxCLOCK_FUNCTION _pfnCallback , orxFLOAT _fDelay , orxS32 _s32Repetition , void * _pContext )","title":"addGlobalTimer"},{"location":"modules/clock.html#create","text":"Signature: r1 = create ( ticksize ) Description: Creates a clock Params: name type description ticksize number Tick size for the clock (in seconds) Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_Create ( orxFLOAT _fTickSize )","title":"create"},{"location":"modules/clock.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates a clock from config Params: name type description configid string Config ID Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/clock.html#exit","text":"Signature: exit () Description: Exits from the clock module Params: Returns: C signature: void orxClock_Exit ()","title":"exit"},{"location":"modules/clock.html#get","text":"Signature: r1 = get ( name ) Description: Gets clock given its name Params: name type description name string Clock name Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_Get ( const orxSTRING _zName )","title":"get"},{"location":"modules/clock.html#getfrominfo","text":"Signature: r1 = getFromInfo ( clockinfo ) Description: Gets clock from its info Params: name type description clockinfo orxCLOCK_INFO# Concerned clock info Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_GetFromInfo ( const orxCLOCK_INFO * _pstClockInfo )","title":"getFromInfo"},{"location":"modules/clock.html#init","text":"Signature: r1 = init () Description: Inits the clock module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Init ()","title":"init"},{"location":"modules/clock.html#removeglobaltimer","text":"Signature: r1 = removeGlobalTimer ( timercb , delay ) Description: Removes a global timer function (ie. from the main core clock) Params: name type description timercb lorxCLOCK_CALLBACK Concerned timer callback delay number Timer's delay between 2 calls, must be strictly positive Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_RemoveGlobalTimer ( const orxCLOCK_FUNCTION _pfnCallback , orxFLOAT _fDelay , void * _pContext )","title":"removeGlobalTimer"},{"location":"modules/clock.html#resyncall","text":"Signature: r1 = resyncAll () Description: Resyncs all clocks (accumulated DT => 0) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_ResyncAll ()","title":"resyncAll"},{"location":"modules/clock.html#setup","text":"Signature: setup () Description: Clock module setup Params: Returns: C signature: void orxClock_Setup ()","title":"setup"},{"location":"modules/clock.html#update","text":"Signature: r1 = update () Description: Updates the clock system Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Update ()","title":"update"},{"location":"modules/command.html","text":"module command # functions # addAlias # Signature: r1 = addAlias ( alias , command , args ) Description: Adds a command alias Params: name type description alias string Command alias command string Command name args string Command argument, nil for none Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCommand_AddAlias ( const orxSTRING _zAlias , const orxSTRING _zCommand , const orxSTRING _zArgs ) commandVar # Signature: r1 = commandVar () Description: Create a new orxCOMMAND_VAR Params: Returns: type description orxCOMMAND_VAR The new instance evaluate # Signature: r1 = evaluate ( commandline ) Description: Evaluates a command Params: name type description commandline string Command name + arguments Returns: type description orxCOMMAND_VAR Command result if found, nil otherwise C signature: orxCOMMAND_VAR * orxCommand_Evaluate ( const orxSTRING _zCommandLine , orxCOMMAND_VAR * _pstResult ) evaluateWithGUID # Signature: r1 = evaluateWithGUID ( commandline , guid ) Description: Evaluates a command with a specific GUID Params: name type description commandline string Command name + arguments guid integer GUID to use in place of the GUID markers in the command Returns: type description orxCOMMAND_VAR Command result if found, nil otherwise C signature: orxCOMMAND_VAR * orxCommand_EvaluateWithGUID ( const orxSTRING _zCommandLine , orxU64 _u64GUID , orxCOMMAND_VAR * _pstResult ) execute # Signature: r1 = execute ( command , argnumber , arglist ) Description: Executes a command Params: name type description command string Command name argnumber integer Number of arguments sent to the command arglist table of orxCOMMAND_VAR List of arguments sent to the command Returns: type description orxCOMMAND_VAR Command result if found, nil otherwise C signature: orxCOMMAND_VAR * orxCommand_Execute ( const orxSTRING _zCommand , orxU32 _u32ArgNumber , const orxCOMMAND_VAR * _astArgList , orxCOMMAND_VAR * _pstResult ) exit # Signature: exit () Description: Exits from the command module Params: Returns: C signature: void orxCommand_Exit () getNext # Signature: r1 , r2 = getNext ( base , previous ) Description: Gets next command using an optional base Params: name type description base string Base name, can be set to nil for no base previous string Previous command, nil to get the first command Returns: type description string Next command found, nil if none integer Length of the common prefix of all potential results, nil to ignore C signature: const orxSTRING orxCommand_GetNext ( const orxSTRING _zBase , const orxSTRING _zPrevious , orxU32 * _pu32CommonLength ) getPrototype # Signature: r1 = getPrototype ( command ) Description: Gets a command's (text) prototype (beware: result won't persist from one call to the other) Params: name type description command string Command name Returns: type description string Command prototype / empty string C signature: const orxSTRING orxCommand_GetPrototype ( const orxSTRING _zCommand ) init # Signature: r1 = init () Description: Inits the command module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCommand_Init () isAlias # Signature: r1 = isAlias ( alias ) Description: Is a command alias? Params: name type description alias string Command alias Returns: type description boolean true / false C signature: orxBOOL orxCommand_IsAlias ( const orxSTRING _zAlias ) isRegistered # Signature: r1 = isRegistered ( command ) Description: Is a command registered? Params: name type description command string Command name Returns: type description boolean true / false C signature: orxBOOL orxCommand_IsRegistered ( const orxSTRING _zCommand ) parseNumericalArguments # Signature: r1 , r2 = parseNumericalArguments ( argnumber , arglist ) Description: Parses numerical arguments, string arguments will be evaluated to vectors or float when possible Params: name type description argnumber integer Number of arguments to parse arglist table of orxCOMMAND_VAR List of arguments to parse Returns: type description orxSTATUS success if all numerical arguments have been correctly interpreted, failure otherwise table of orxCOMMAND_VAR List of parsed arguments C signature: orxSTATUS orxCommand_ParseNumericalArguments ( orxU32 _u32ArgNumber , const orxCOMMAND_VAR * _astArgList , orxCOMMAND_VAR * _astOperandList ) removeAlias # Signature: r1 = removeAlias ( alias ) Description: Removes a command alias Params: name type description alias string Command alias Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCommand_RemoveAlias ( const orxSTRING _zAlias ) sComment # Signature: r1 = sComment ( name , description , ret , ...) Description: Comment on a Lorx sub-command Params: name type description name string Sub-command name description string description ret string Returning name ... string arg name, must be specified multiple times to match with the number of args Returns: type description boolean false if the sub-command is not yet registered sIsRegistered # Signature: r1 = sIsRegistered ( name ) Description: Query if a Lorx sub-command is registered or not Params: name type description name string Sub-command name Returns: type description boolean true or false sRegister # Signature: r1 = sRegister ( func , name , rtype , reqargs , optargs , ...) Description: Register a Lorx sub-command Params: name type description func function command function, just like any common lua functions, but conforms to registering prototype name string Sub-command name rtype orxCOMMAND_VAR_TYPE returning type reqargs integer number of required args optargs integer number of optional args ... orxCOMMAND_VAR_TYPE arg type, must be specified multiple times to match with reqargs + optargs Returns: type description boolean true on success, false on failure (e.g. if a sub-command with the specified name has already been registered) sUnregister # Signature: r1 = sUnregister ( name ) Description: Unregister a Lorx sub-command Params: name type description name string Sub-command name Returns: type description boolean true on success, false on failure (e.g. if the sub-command is not yet registered) setup # Signature: setup () Description: Command module setup Params: Returns: C signature: void orxCommand_Setup () unregister # Signature: r1 = unregister ( command ) Description: Unregisters a command Params: name type description command string Command name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCommand_Unregister ( const orxSTRING _zCommand )","title":"command"},{"location":"modules/command.html#module-command","text":"","title":"module command"},{"location":"modules/command.html#functions","text":"","title":"functions"},{"location":"modules/command.html#addalias","text":"Signature: r1 = addAlias ( alias , command , args ) Description: Adds a command alias Params: name type description alias string Command alias command string Command name args string Command argument, nil for none Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCommand_AddAlias ( const orxSTRING _zAlias , const orxSTRING _zCommand , const orxSTRING _zArgs )","title":"addAlias"},{"location":"modules/command.html#commandvar","text":"Signature: r1 = commandVar () Description: Create a new orxCOMMAND_VAR Params: Returns: type description orxCOMMAND_VAR The new instance","title":"commandVar"},{"location":"modules/command.html#evaluate","text":"Signature: r1 = evaluate ( commandline ) Description: Evaluates a command Params: name type description commandline string Command name + arguments Returns: type description orxCOMMAND_VAR Command result if found, nil otherwise C signature: orxCOMMAND_VAR * orxCommand_Evaluate ( const orxSTRING _zCommandLine , orxCOMMAND_VAR * _pstResult )","title":"evaluate"},{"location":"modules/command.html#evaluatewithguid","text":"Signature: r1 = evaluateWithGUID ( commandline , guid ) Description: Evaluates a command with a specific GUID Params: name type description commandline string Command name + arguments guid integer GUID to use in place of the GUID markers in the command Returns: type description orxCOMMAND_VAR Command result if found, nil otherwise C signature: orxCOMMAND_VAR * orxCommand_EvaluateWithGUID ( const orxSTRING _zCommandLine , orxU64 _u64GUID , orxCOMMAND_VAR * _pstResult )","title":"evaluateWithGUID"},{"location":"modules/command.html#execute","text":"Signature: r1 = execute ( command , argnumber , arglist ) Description: Executes a command Params: name type description command string Command name argnumber integer Number of arguments sent to the command arglist table of orxCOMMAND_VAR List of arguments sent to the command Returns: type description orxCOMMAND_VAR Command result if found, nil otherwise C signature: orxCOMMAND_VAR * orxCommand_Execute ( const orxSTRING _zCommand , orxU32 _u32ArgNumber , const orxCOMMAND_VAR * _astArgList , orxCOMMAND_VAR * _pstResult )","title":"execute"},{"location":"modules/command.html#exit","text":"Signature: exit () Description: Exits from the command module Params: Returns: C signature: void orxCommand_Exit ()","title":"exit"},{"location":"modules/command.html#getnext","text":"Signature: r1 , r2 = getNext ( base , previous ) Description: Gets next command using an optional base Params: name type description base string Base name, can be set to nil for no base previous string Previous command, nil to get the first command Returns: type description string Next command found, nil if none integer Length of the common prefix of all potential results, nil to ignore C signature: const orxSTRING orxCommand_GetNext ( const orxSTRING _zBase , const orxSTRING _zPrevious , orxU32 * _pu32CommonLength )","title":"getNext"},{"location":"modules/command.html#getprototype","text":"Signature: r1 = getPrototype ( command ) Description: Gets a command's (text) prototype (beware: result won't persist from one call to the other) Params: name type description command string Command name Returns: type description string Command prototype / empty string C signature: const orxSTRING orxCommand_GetPrototype ( const orxSTRING _zCommand )","title":"getPrototype"},{"location":"modules/command.html#init","text":"Signature: r1 = init () Description: Inits the command module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCommand_Init ()","title":"init"},{"location":"modules/command.html#isalias","text":"Signature: r1 = isAlias ( alias ) Description: Is a command alias? Params: name type description alias string Command alias Returns: type description boolean true / false C signature: orxBOOL orxCommand_IsAlias ( const orxSTRING _zAlias )","title":"isAlias"},{"location":"modules/command.html#isregistered","text":"Signature: r1 = isRegistered ( command ) Description: Is a command registered? Params: name type description command string Command name Returns: type description boolean true / false C signature: orxBOOL orxCommand_IsRegistered ( const orxSTRING _zCommand )","title":"isRegistered"},{"location":"modules/command.html#parsenumericalarguments","text":"Signature: r1 , r2 = parseNumericalArguments ( argnumber , arglist ) Description: Parses numerical arguments, string arguments will be evaluated to vectors or float when possible Params: name type description argnumber integer Number of arguments to parse arglist table of orxCOMMAND_VAR List of arguments to parse Returns: type description orxSTATUS success if all numerical arguments have been correctly interpreted, failure otherwise table of orxCOMMAND_VAR List of parsed arguments C signature: orxSTATUS orxCommand_ParseNumericalArguments ( orxU32 _u32ArgNumber , const orxCOMMAND_VAR * _astArgList , orxCOMMAND_VAR * _astOperandList )","title":"parseNumericalArguments"},{"location":"modules/command.html#removealias","text":"Signature: r1 = removeAlias ( alias ) Description: Removes a command alias Params: name type description alias string Command alias Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCommand_RemoveAlias ( const orxSTRING _zAlias )","title":"removeAlias"},{"location":"modules/command.html#scomment","text":"Signature: r1 = sComment ( name , description , ret , ...) Description: Comment on a Lorx sub-command Params: name type description name string Sub-command name description string description ret string Returning name ... string arg name, must be specified multiple times to match with the number of args Returns: type description boolean false if the sub-command is not yet registered","title":"sComment"},{"location":"modules/command.html#sisregistered","text":"Signature: r1 = sIsRegistered ( name ) Description: Query if a Lorx sub-command is registered or not Params: name type description name string Sub-command name Returns: type description boolean true or false","title":"sIsRegistered"},{"location":"modules/command.html#sregister","text":"Signature: r1 = sRegister ( func , name , rtype , reqargs , optargs , ...) Description: Register a Lorx sub-command Params: name type description func function command function, just like any common lua functions, but conforms to registering prototype name string Sub-command name rtype orxCOMMAND_VAR_TYPE returning type reqargs integer number of required args optargs integer number of optional args ... orxCOMMAND_VAR_TYPE arg type, must be specified multiple times to match with reqargs + optargs Returns: type description boolean true on success, false on failure (e.g. if a sub-command with the specified name has already been registered)","title":"sRegister"},{"location":"modules/command.html#sunregister","text":"Signature: r1 = sUnregister ( name ) Description: Unregister a Lorx sub-command Params: name type description name string Sub-command name Returns: type description boolean true on success, false on failure (e.g. if the sub-command is not yet registered)","title":"sUnregister"},{"location":"modules/command.html#setup","text":"Signature: setup () Description: Command module setup Params: Returns: C signature: void orxCommand_Setup ()","title":"setup"},{"location":"modules/command.html#unregister","text":"Signature: r1 = unregister ( command ) Description: Unregisters a command Params: name type description command string Command name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCommand_Unregister ( const orxSTRING _zCommand )","title":"unregister"},{"location":"modules/config.html","text":"module config # functions # appendListString # Signature: r1 = appendListString ( key , value , number ) Description: Appends string values to a config list (will create a new entry if not already present) Params: name type description key string Key name value table of string Values number integer Number of values Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_AppendListString ( const orxSTRING _zKey , const orxSTRING _azValue [], orxU32 _u32Number ) clear # Signature: r1 = clear ([ func ]) Description: Clear all config info (set the lorx.tmpcfgclear callback to filter) Params: name type description [func] lorxCFGCLEAR_CALLBACK Callback used to filter sections/keys to clear. If null, all sections/keys will be cleared Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFASTCALL orxConfig_Clear ( const orxCONFIG_CLEAR_FUNCTION _pfnClearCallback ) clearSection # Signature: r1 = clearSection ( sectionname ) Description: Clears section Params: name type description sectionname string Section name to clear Returns: type description orxSTATUS C signature: orxSTATUS orxConfig_ClearSection ( const orxSTRING _zSectionName ) clearValue # Signature: r1 = clearValue ( key ) Description: Clears a value from current selected section Params: name type description key string Key name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_ClearValue ( const orxSTRING _zKey ) copyFile # Signature: r1 = copyFile ( dstfilename , srcfilename , encryptionkey ) Description: Copies a file with optional encryption Params: name type description dstfilename string Name of the destination file srcfilename string Name of the source file encryptionkey string Encryption key to use when writing destination file, nil for no encryption Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_CopyFile ( const orxSTRING _zDstFileName , const orxSTRING _zSrcFileName , const orxSTRING _zEncryptionKey ) duplicateRawValue # Signature: r1 = duplicateRawValue ( key ) Description: Duplicates a raw value (string) from config Params: name type description key string Key name Returns: type description string The value. If non-null, needs to be deleted by the caller with orxString_Delete() C signature: orxSTRING orxConfig_DuplicateRawValue ( const orxSTRING _zKey ) exit # Signature: exit () Description: Exits from the Config Module Params: Returns: C signature: void orxConfig_Exit () getBool # Signature: r1 = getBool ( key ) Description: Reads a boolean value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description boolean The value C signature: orxBOOL orxConfig_GetBool ( const orxSTRING _zKey ) getCurrentSection # Signature: r1 = getCurrentSection () Description: Gets current working section Params: Returns: type description string Current selected section C signature: const orxSTRING orxConfig_GetCurrentSection () getEncryptionKey # Signature: r1 = getEncryptionKey () Description: Gets encryption key Params: Returns: type description string Current encryption key / empty string C signature: const orxSTRING orxConfig_GetEncryptionKey () getFloat # Signature: r1 = getFloat ( key ) Description: Reads a float value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description number The value C signature: orxFLOAT orxConfig_GetFloat ( const orxSTRING _zKey ) getKey # Signature: r1 = getKey ( keyindex ) Description: Gets key for the current section at the given index Params: name type description keyindex integer Index of the desired key Returns: type description string string if exist, empty string otherwise C signature: const orxSTRING orxConfig_GetKey ( orxU32 _u32KeyIndex ) getKeyCount # Signature: r1 = getKeyCount () Description: Gets key count of the current section Params: Returns: type description integer Key count of the current section if valid, 0 otherwise C signature: orxU32 orxConfig_GetKeyCount () getListBool # Signature: r1 = getListBool ( key , listindex ) Description: Reads a boolean value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description boolean The value C signature: orxBOOL orxConfig_GetListBool ( const orxSTRING _zKey , orxS32 _s32ListIndex ) getListCount # Signature: r1 = getListCount ( key ) Description: Gets list count for a given key Params: name type description key string Key name Returns: type description integer List count if it's a valid list, 0 otherwise C signature: orxS32 orxConfig_GetListCount ( const orxSTRING _zKey ) getListFloat # Signature: r1 = getListFloat ( key , listindex ) Description: Reads a float value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description number The value C signature: orxFLOAT orxConfig_GetListFloat ( const orxSTRING _zKey , orxS32 _s32ListIndex ) getListS32 # Signature: r1 = getListS32 ( key , listindex ) Description: Reads a signed integer value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description integer The value C signature: orxS32 orxConfig_GetListS32 ( const orxSTRING _zKey , orxS32 _s32ListIndex ) getListS64 # Signature: r1 = getListS64 ( key , listindex ) Description: Reads a signed integer value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description integer The value C signature: orxS64 orxConfig_GetListS64 ( const orxSTRING _zKey , orxS32 _s32ListIndex ) getListString # Signature: r1 = getListString ( key , listindex ) Description: Reads a string value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description string The value C signature: const orxSTRING orxConfig_GetListString ( const orxSTRING _zKey , orxS32 _s32ListIndex ) getListU32 # Signature: r1 = getListU32 ( key , listindex ) Description: Reads an unsigned integer value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description integer The value C signature: orxU32 orxConfig_GetListU32 ( const orxSTRING _zKey , orxS32 _s32ListIndex ) getListU64 # Signature: r1 = getListU64 ( key , listindex ) Description: Reads an unsigned integer value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description integer The value C signature: orxU64 orxConfig_GetListU64 ( const orxSTRING _zKey , orxS32 _s32ListIndex ) getListVector # Signature: r1 = getListVector ( key , listindex ) Description: Reads a vector value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description orxVECTOR The value C signature: orxVECTOR * orxConfig_GetListVector ( const orxSTRING _zKey , orxS32 _s32ListIndex , orxVECTOR * _pvVector ) getMainFileName # Signature: r1 = getMainFileName () Description: Gets config main file name Params: Returns: type description string Config main file name / empty string C signature: const orxSTRING orxConfig_GetMainFileName () getOrigin # Signature: r1 = getOrigin ( sectionname ) Description: Gets section origin (ie. the file where it was defined for the first time or orxSTRING_EMPTY if not defined via a file) Params: name type description sectionname string Concerned section name Returns: type description string string if found, empty string otherwise C signature: const orxSTRING orxConfig_GetOrigin ( const orxSTRING _zSectionName ) getOriginID # Signature: r1 = getOriginID ( sectionname ) Description: Gets section origin ID (ie. the file where it was defined for the first time or orxSTRING_EMPTY if not defined via a file) Params: name type description sectionname string Concerned section name Returns: type description integer String ID if found, orxSTRINGID_UNDEFINED otherwise C signature: orxSTRINGID orxConfig_GetOriginID ( const orxSTRING _zSectionName ) getParent # Signature: r1 = getParent ( sectionname ) Description: Gets a section's parent Params: name type description sectionname string Concerned section Returns: type description string Section's parent name if set or empty string if no parent has been forced, nil otherwise C signature: const orxSTRING orxConfig_GetParent ( const orxSTRING _zSectionName ) getS32 # Signature: r1 = getS32 ( key ) Description: Reads a signed integer value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description integer The value C signature: orxS32 orxConfig_GetS32 ( const orxSTRING _zKey ) getS64 # Signature: r1 = getS64 ( key ) Description: Reads a signed integer value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description integer The value C signature: orxS64 orxConfig_GetS64 ( const orxSTRING _zKey ) getSection # Signature: r1 = getSection ( sectionindex ) Description: Gets section at the given index Params: name type description sectionindex integer Index of the desired section Returns: type description string string if exist, empty string otherwise C signature: const orxSTRING orxConfig_GetSection ( orxU32 _u32SectionIndex ) getSectionCount # Signature: r1 = getSectionCount () Description: Gets section count Params: Returns: type description integer Section count C signature: orxU32 orxConfig_GetSectionCount () getString # Signature: r1 = getString ( key ) Description: Reads a string value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description string The value C signature: const orxSTRING orxConfig_GetString ( const orxSTRING _zKey ) getU32 # Signature: r1 = getU32 ( key ) Description: Reads an unsigned integer value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description integer The value C signature: orxU32 orxConfig_GetU32 ( const orxSTRING _zKey ) getU64 # Signature: r1 = getU64 ( key ) Description: Reads an unsigned integer value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description integer The value C signature: orxU64 orxConfig_GetU64 ( const orxSTRING _zKey ) getValueSource # Signature: r1 = getValueSource ( key ) Description: Gets a value's source section (ie. the section where the value is explicitly defined), only considering section inheritance, not local one Params: name type description key string Key name Returns: type description string Name of the section that explicitly contains the value, empty string if not found C signature: const orxSTRING orxConfig_GetValueSource ( const orxSTRING _zKey ) getVector # Signature: r1 = getVector ( key ) Description: Reads a vector value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description orxVECTOR The value if valid, nil otherwise C signature: orxVECTOR * orxConfig_GetVector ( const orxSTRING _zKey , orxVECTOR * _pvVector ) hasSection # Signature: r1 = hasSection ( sectionname ) Description: Has section for the given section name? Params: name type description sectionname string Section name Returns: type description boolean true / false C signature: orxBOOL orxConfig_HasSection ( const orxSTRING _zSectionName ) hasValue # Signature: r1 = hasValue ( key ) Description: Has specified value for the given key? Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_HasValue ( const orxSTRING _zKey ) init # Signature: r1 = init () Description: Initializes the Config Module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_Init () isCommandValue # Signature: r1 = isCommandValue ( key ) Description: Is this a command value? (ie. lazily evaluated command: %...) Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsCommandValue ( const orxSTRING _zKey ) isDynamicValue # Signature: r1 = isDynamicValue ( key ) Description: Is this value dynamic? (ie. random and/or a list or command) Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsDynamicValue ( const orxSTRING _zKey ) isInheritedValue # Signature: r1 = isInheritedValue ( key ) Description: Is this value inherited from another one (either locally or at section level)? Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsInheritedValue ( const orxSTRING _zKey ) isList # Signature: r1 = isList ( key ) Description: Is value a list for the given key? Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsList ( const orxSTRING _zKey ) isLocallyInheritedValue # Signature: r1 = isLocallyInheritedValue ( key ) Description: Is this value locally inherited from another one (ie. with a Value = @... syntax)? Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsLocallyInheritedValue ( const orxSTRING _zKey ) isRandomValue # Signature: r1 = isRandomValue ( key ) Description: Is this value random? (ie. using '~' character, within or without a list) Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsRandomValue ( const orxSTRING _zKey ) load # Signature: r1 = load ( filename ) Description: Loads config file from source Params: name type description filename string File name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_Load ( const orxSTRING _zFileName ) loadFromMemory # Signature: r1 = loadFromMemory ( buffer , buffersize ) Description: Loads config data from a memory buffer. NB: the buffer will be modified during processing! Params: name type description buffer string (length-limited) Buffer to process, will be modified during processing buffersize integer Size of the buffer Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_LoadFromMemory ( orxCHAR * _acBuffer , orxU32 _u32BufferSize ) mergeFiles # Signature: r1 = mergeFiles ( dstfilename , srcfilename , number , encryptionkey ) Description: Merges multiple files into a single one, with optional encryption Params: name type description dstfilename string Name of the destination file srcfilename table of string List of the names of the source files number integer Number of source file names encryptionkey string Encryption key to use when writing destination file, nil for no encryption Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_MergeFiles ( const orxSTRING _zDstFileName , const orxSTRING * _azSrcFileName , orxU32 _u32Number , const orxSTRING _zEncryptionKey ) popSection # Signature: r1 = popSection () Description: Pops last section from section stack Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_PopSection () protectSection # Signature: r1 = protectSection ( sectionname , protect ) Description: Protects/unprotects a section from deletion (content might still be changed or deleted, but the section itself will resist delete/clear calls) Params: name type description sectionname string Section name to protect protect boolean true for protecting the section, false to remove the protection Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_ProtectSection ( const orxSTRING _zSectionName , orxBOOL _bProtect ) pushSection # Signature: r1 = pushSection ( sectionname ) Description: Pushes a section (storing the current one on section stack) Params: name type description sectionname string Section name to push Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_PushSection ( const orxSTRING _zSectionName ) reloadHistory # Signature: r1 = reloadHistory () Description: Reloads config files from history Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_ReloadHistory () renameSection # Signature: r1 = renameSection ( sectionname , newsectionname ) Description: Renames a section Params: name type description sectionname string Section to rename newsectionname string New name for the section Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_RenameSection ( const orxSTRING _zSectionName , const orxSTRING _zNewSectionName ) save # Signature: r1 = save ( filename , useencryption , [ func ]) Description: Save all config info (set the lorx.tmpcfgsave callback to filter) Params: name type description filename string File name, if null or empty the default file name will be used useencryption boolean Use file encryption to make it human non-readable? [func] lorxCFGSAVE_CALLBACK Callback used to filter sections/keys to save. If null, all sections/keys will be saved Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_Save ( const orxSTRING _zFileName , orxBOOL _bUseEncryption , const orxCONFIG_SAVE_FUNCTION _pfnSaveCallback ) selectSection # Signature: r1 = selectSection ( sectionname ) Description: Selects current working section Params: name type description sectionname string Section name to select Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SelectSection ( const orxSTRING _zSectionName ) setBaseName # Signature: r1 = setBaseName ( basename ) Description: Sets config base name Params: name type description basename string Base name used for default config file Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetBaseName ( const orxSTRING _zBaseName ) setBool # Signature: r1 = setBool ( key , value ) Description: Writes a boolean value to config Params: name type description key string Key name value boolean Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetBool ( const orxSTRING _zKey , orxBOOL _bValue ) setDefaultParent # Signature: r1 = setDefaultParent ( sectionname ) Description: Sets default parent for all sections Params: name type description sectionname string Section name that will be used as an implicit default parent section for all config sections, if nil is provided, default parent will be removed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetDefaultParent ( const orxSTRING _zSectionName ) setEncryptionKey # Signature: r1 = setEncryptionKey ( encryptionkey ) Description: Sets encryption key Params: name type description encryptionkey string Encryption key to use, nil to clear Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetEncryptionKey ( const orxSTRING _zEncryptionKey ) setFloat # Signature: r1 = setFloat ( key , value ) Description: Writes a float value to config Params: name type description key string Key name value number Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetFloat ( const orxSTRING _zKey , orxFLOAT _fValue ) setListString # Signature: r1 = setListString ( key , value , number ) Description: Writes a list of string values to config Params: name type description key string Key name value table of string Values number integer Number of values Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetListString ( const orxSTRING _zKey , const orxSTRING _azValue [], orxU32 _u32Number ) setParent # Signature: r1 = setParent ( sectionname , parentname ) Description: Sets a section's parent Params: name type description sectionname string Concerned section, if the section doesn't exist, it will be created parentname string Parent section's name, if the section doesn't exist, it will be created, if nil is provided, the former parent will be erased, if empty string is provided, \"no default parent\" will be enforced Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetParent ( const orxSTRING _zSectionName , const orxSTRING _zParentName ) setS32 # Signature: r1 = setS32 ( key , value ) Description: Writes a signed integer value to config Params: name type description key string Key name value integer Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetS32 ( const orxSTRING _zKey , orxS32 _s32Value ) setS64 # Signature: r1 = setS64 ( key , value ) Description: Writes a signed integer value to config Params: name type description key string Key name value integer Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetS64 ( const orxSTRING _zKey , orxS64 _s64Value ) setString # Signature: r1 = setString ( key , value ) Description: Writes a string value to config Params: name type description key string Key name value string Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetString ( const orxSTRING _zKey , const orxSTRING _zValue ) setStringBlock # Signature: r1 = setStringBlock ( key , value ) Description: Writes a string value to config, in block mode Params: name type description key string Key name value string Value to write in block mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetStringBlock ( const orxSTRING _zKey , const orxSTRING _zValue ) setU32 # Signature: r1 = setU32 ( key , value ) Description: Writes an unsigned integer value to config Params: name type description key string Key name value integer Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetU32 ( const orxSTRING _zKey , orxU32 _u32Value ) setU64 # Signature: r1 = setU64 ( key , value ) Description: Writes an unsigned integer value to config Params: name type description key string Key name value integer Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetU64 ( const orxSTRING _zKey , orxU64 _u64Value ) setVector # Signature: r1 = setVector ( key , value ) Description: Writes a vector value to config Params: name type description key string Key name value orxVECTOR# Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetVector ( const orxSTRING _zKey , const orxVECTOR * _pvValue ) setup # Signature: setup () Description: Config module setup Params: Returns: C signature: void orxConfig_Setup ()","title":"config"},{"location":"modules/config.html#module-config","text":"","title":"module config"},{"location":"modules/config.html#functions","text":"","title":"functions"},{"location":"modules/config.html#appendliststring","text":"Signature: r1 = appendListString ( key , value , number ) Description: Appends string values to a config list (will create a new entry if not already present) Params: name type description key string Key name value table of string Values number integer Number of values Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_AppendListString ( const orxSTRING _zKey , const orxSTRING _azValue [], orxU32 _u32Number )","title":"appendListString"},{"location":"modules/config.html#clear","text":"Signature: r1 = clear ([ func ]) Description: Clear all config info (set the lorx.tmpcfgclear callback to filter) Params: name type description [func] lorxCFGCLEAR_CALLBACK Callback used to filter sections/keys to clear. If null, all sections/keys will be cleared Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFASTCALL orxConfig_Clear ( const orxCONFIG_CLEAR_FUNCTION _pfnClearCallback )","title":"clear"},{"location":"modules/config.html#clearsection","text":"Signature: r1 = clearSection ( sectionname ) Description: Clears section Params: name type description sectionname string Section name to clear Returns: type description orxSTATUS C signature: orxSTATUS orxConfig_ClearSection ( const orxSTRING _zSectionName )","title":"clearSection"},{"location":"modules/config.html#clearvalue","text":"Signature: r1 = clearValue ( key ) Description: Clears a value from current selected section Params: name type description key string Key name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_ClearValue ( const orxSTRING _zKey )","title":"clearValue"},{"location":"modules/config.html#copyfile","text":"Signature: r1 = copyFile ( dstfilename , srcfilename , encryptionkey ) Description: Copies a file with optional encryption Params: name type description dstfilename string Name of the destination file srcfilename string Name of the source file encryptionkey string Encryption key to use when writing destination file, nil for no encryption Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_CopyFile ( const orxSTRING _zDstFileName , const orxSTRING _zSrcFileName , const orxSTRING _zEncryptionKey )","title":"copyFile"},{"location":"modules/config.html#duplicaterawvalue","text":"Signature: r1 = duplicateRawValue ( key ) Description: Duplicates a raw value (string) from config Params: name type description key string Key name Returns: type description string The value. If non-null, needs to be deleted by the caller with orxString_Delete() C signature: orxSTRING orxConfig_DuplicateRawValue ( const orxSTRING _zKey )","title":"duplicateRawValue"},{"location":"modules/config.html#exit","text":"Signature: exit () Description: Exits from the Config Module Params: Returns: C signature: void orxConfig_Exit ()","title":"exit"},{"location":"modules/config.html#getbool","text":"Signature: r1 = getBool ( key ) Description: Reads a boolean value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description boolean The value C signature: orxBOOL orxConfig_GetBool ( const orxSTRING _zKey )","title":"getBool"},{"location":"modules/config.html#getcurrentsection","text":"Signature: r1 = getCurrentSection () Description: Gets current working section Params: Returns: type description string Current selected section C signature: const orxSTRING orxConfig_GetCurrentSection ()","title":"getCurrentSection"},{"location":"modules/config.html#getencryptionkey","text":"Signature: r1 = getEncryptionKey () Description: Gets encryption key Params: Returns: type description string Current encryption key / empty string C signature: const orxSTRING orxConfig_GetEncryptionKey ()","title":"getEncryptionKey"},{"location":"modules/config.html#getfloat","text":"Signature: r1 = getFloat ( key ) Description: Reads a float value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description number The value C signature: orxFLOAT orxConfig_GetFloat ( const orxSTRING _zKey )","title":"getFloat"},{"location":"modules/config.html#getkey","text":"Signature: r1 = getKey ( keyindex ) Description: Gets key for the current section at the given index Params: name type description keyindex integer Index of the desired key Returns: type description string string if exist, empty string otherwise C signature: const orxSTRING orxConfig_GetKey ( orxU32 _u32KeyIndex )","title":"getKey"},{"location":"modules/config.html#getkeycount","text":"Signature: r1 = getKeyCount () Description: Gets key count of the current section Params: Returns: type description integer Key count of the current section if valid, 0 otherwise C signature: orxU32 orxConfig_GetKeyCount ()","title":"getKeyCount"},{"location":"modules/config.html#getlistbool","text":"Signature: r1 = getListBool ( key , listindex ) Description: Reads a boolean value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description boolean The value C signature: orxBOOL orxConfig_GetListBool ( const orxSTRING _zKey , orxS32 _s32ListIndex )","title":"getListBool"},{"location":"modules/config.html#getlistcount","text":"Signature: r1 = getListCount ( key ) Description: Gets list count for a given key Params: name type description key string Key name Returns: type description integer List count if it's a valid list, 0 otherwise C signature: orxS32 orxConfig_GetListCount ( const orxSTRING _zKey )","title":"getListCount"},{"location":"modules/config.html#getlistfloat","text":"Signature: r1 = getListFloat ( key , listindex ) Description: Reads a float value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description number The value C signature: orxFLOAT orxConfig_GetListFloat ( const orxSTRING _zKey , orxS32 _s32ListIndex )","title":"getListFloat"},{"location":"modules/config.html#getlists32","text":"Signature: r1 = getListS32 ( key , listindex ) Description: Reads a signed integer value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description integer The value C signature: orxS32 orxConfig_GetListS32 ( const orxSTRING _zKey , orxS32 _s32ListIndex )","title":"getListS32"},{"location":"modules/config.html#getlists64","text":"Signature: r1 = getListS64 ( key , listindex ) Description: Reads a signed integer value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description integer The value C signature: orxS64 orxConfig_GetListS64 ( const orxSTRING _zKey , orxS32 _s32ListIndex )","title":"getListS64"},{"location":"modules/config.html#getliststring","text":"Signature: r1 = getListString ( key , listindex ) Description: Reads a string value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description string The value C signature: const orxSTRING orxConfig_GetListString ( const orxSTRING _zKey , orxS32 _s32ListIndex )","title":"getListString"},{"location":"modules/config.html#getlistu32","text":"Signature: r1 = getListU32 ( key , listindex ) Description: Reads an unsigned integer value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description integer The value C signature: orxU32 orxConfig_GetListU32 ( const orxSTRING _zKey , orxS32 _s32ListIndex )","title":"getListU32"},{"location":"modules/config.html#getlistu64","text":"Signature: r1 = getListU64 ( key , listindex ) Description: Reads an unsigned integer value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description integer The value C signature: orxU64 orxConfig_GetListU64 ( const orxSTRING _zKey , orxS32 _s32ListIndex )","title":"getListU64"},{"location":"modules/config.html#getlistvector","text":"Signature: r1 = getListVector ( key , listindex ) Description: Reads a vector value from config list Params: name type description key string Key name listindex integer Index of desired item in list / -1 for random Returns: type description orxVECTOR The value C signature: orxVECTOR * orxConfig_GetListVector ( const orxSTRING _zKey , orxS32 _s32ListIndex , orxVECTOR * _pvVector )","title":"getListVector"},{"location":"modules/config.html#getmainfilename","text":"Signature: r1 = getMainFileName () Description: Gets config main file name Params: Returns: type description string Config main file name / empty string C signature: const orxSTRING orxConfig_GetMainFileName ()","title":"getMainFileName"},{"location":"modules/config.html#getorigin","text":"Signature: r1 = getOrigin ( sectionname ) Description: Gets section origin (ie. the file where it was defined for the first time or orxSTRING_EMPTY if not defined via a file) Params: name type description sectionname string Concerned section name Returns: type description string string if found, empty string otherwise C signature: const orxSTRING orxConfig_GetOrigin ( const orxSTRING _zSectionName )","title":"getOrigin"},{"location":"modules/config.html#getoriginid","text":"Signature: r1 = getOriginID ( sectionname ) Description: Gets section origin ID (ie. the file where it was defined for the first time or orxSTRING_EMPTY if not defined via a file) Params: name type description sectionname string Concerned section name Returns: type description integer String ID if found, orxSTRINGID_UNDEFINED otherwise C signature: orxSTRINGID orxConfig_GetOriginID ( const orxSTRING _zSectionName )","title":"getOriginID"},{"location":"modules/config.html#getparent","text":"Signature: r1 = getParent ( sectionname ) Description: Gets a section's parent Params: name type description sectionname string Concerned section Returns: type description string Section's parent name if set or empty string if no parent has been forced, nil otherwise C signature: const orxSTRING orxConfig_GetParent ( const orxSTRING _zSectionName )","title":"getParent"},{"location":"modules/config.html#gets32","text":"Signature: r1 = getS32 ( key ) Description: Reads a signed integer value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description integer The value C signature: orxS32 orxConfig_GetS32 ( const orxSTRING _zKey )","title":"getS32"},{"location":"modules/config.html#gets64","text":"Signature: r1 = getS64 ( key ) Description: Reads a signed integer value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description integer The value C signature: orxS64 orxConfig_GetS64 ( const orxSTRING _zKey )","title":"getS64"},{"location":"modules/config.html#getsection","text":"Signature: r1 = getSection ( sectionindex ) Description: Gets section at the given index Params: name type description sectionindex integer Index of the desired section Returns: type description string string if exist, empty string otherwise C signature: const orxSTRING orxConfig_GetSection ( orxU32 _u32SectionIndex )","title":"getSection"},{"location":"modules/config.html#getsectioncount","text":"Signature: r1 = getSectionCount () Description: Gets section count Params: Returns: type description integer Section count C signature: orxU32 orxConfig_GetSectionCount ()","title":"getSectionCount"},{"location":"modules/config.html#getstring","text":"Signature: r1 = getString ( key ) Description: Reads a string value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description string The value C signature: const orxSTRING orxConfig_GetString ( const orxSTRING _zKey )","title":"getString"},{"location":"modules/config.html#getu32","text":"Signature: r1 = getU32 ( key ) Description: Reads an unsigned integer value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description integer The value C signature: orxU32 orxConfig_GetU32 ( const orxSTRING _zKey )","title":"getU32"},{"location":"modules/config.html#getu64","text":"Signature: r1 = getU64 ( key ) Description: Reads an unsigned integer value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description integer The value C signature: orxU64 orxConfig_GetU64 ( const orxSTRING _zKey )","title":"getU64"},{"location":"modules/config.html#getvaluesource","text":"Signature: r1 = getValueSource ( key ) Description: Gets a value's source section (ie. the section where the value is explicitly defined), only considering section inheritance, not local one Params: name type description key string Key name Returns: type description string Name of the section that explicitly contains the value, empty string if not found C signature: const orxSTRING orxConfig_GetValueSource ( const orxSTRING _zKey )","title":"getValueSource"},{"location":"modules/config.html#getvector","text":"Signature: r1 = getVector ( key ) Description: Reads a vector value from config (will take a random value if a list is provided for this key) Params: name type description key string Key name Returns: type description orxVECTOR The value if valid, nil otherwise C signature: orxVECTOR * orxConfig_GetVector ( const orxSTRING _zKey , orxVECTOR * _pvVector )","title":"getVector"},{"location":"modules/config.html#hassection","text":"Signature: r1 = hasSection ( sectionname ) Description: Has section for the given section name? Params: name type description sectionname string Section name Returns: type description boolean true / false C signature: orxBOOL orxConfig_HasSection ( const orxSTRING _zSectionName )","title":"hasSection"},{"location":"modules/config.html#hasvalue","text":"Signature: r1 = hasValue ( key ) Description: Has specified value for the given key? Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_HasValue ( const orxSTRING _zKey )","title":"hasValue"},{"location":"modules/config.html#init","text":"Signature: r1 = init () Description: Initializes the Config Module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_Init ()","title":"init"},{"location":"modules/config.html#iscommandvalue","text":"Signature: r1 = isCommandValue ( key ) Description: Is this a command value? (ie. lazily evaluated command: %...) Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsCommandValue ( const orxSTRING _zKey )","title":"isCommandValue"},{"location":"modules/config.html#isdynamicvalue","text":"Signature: r1 = isDynamicValue ( key ) Description: Is this value dynamic? (ie. random and/or a list or command) Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsDynamicValue ( const orxSTRING _zKey )","title":"isDynamicValue"},{"location":"modules/config.html#isinheritedvalue","text":"Signature: r1 = isInheritedValue ( key ) Description: Is this value inherited from another one (either locally or at section level)? Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsInheritedValue ( const orxSTRING _zKey )","title":"isInheritedValue"},{"location":"modules/config.html#islist","text":"Signature: r1 = isList ( key ) Description: Is value a list for the given key? Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsList ( const orxSTRING _zKey )","title":"isList"},{"location":"modules/config.html#islocallyinheritedvalue","text":"Signature: r1 = isLocallyInheritedValue ( key ) Description: Is this value locally inherited from another one (ie. with a Value = @... syntax)? Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsLocallyInheritedValue ( const orxSTRING _zKey )","title":"isLocallyInheritedValue"},{"location":"modules/config.html#israndomvalue","text":"Signature: r1 = isRandomValue ( key ) Description: Is this value random? (ie. using '~' character, within or without a list) Params: name type description key string Key name Returns: type description boolean true / false C signature: orxBOOL orxConfig_IsRandomValue ( const orxSTRING _zKey )","title":"isRandomValue"},{"location":"modules/config.html#load","text":"Signature: r1 = load ( filename ) Description: Loads config file from source Params: name type description filename string File name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_Load ( const orxSTRING _zFileName )","title":"load"},{"location":"modules/config.html#loadfrommemory","text":"Signature: r1 = loadFromMemory ( buffer , buffersize ) Description: Loads config data from a memory buffer. NB: the buffer will be modified during processing! Params: name type description buffer string (length-limited) Buffer to process, will be modified during processing buffersize integer Size of the buffer Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_LoadFromMemory ( orxCHAR * _acBuffer , orxU32 _u32BufferSize )","title":"loadFromMemory"},{"location":"modules/config.html#mergefiles","text":"Signature: r1 = mergeFiles ( dstfilename , srcfilename , number , encryptionkey ) Description: Merges multiple files into a single one, with optional encryption Params: name type description dstfilename string Name of the destination file srcfilename table of string List of the names of the source files number integer Number of source file names encryptionkey string Encryption key to use when writing destination file, nil for no encryption Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_MergeFiles ( const orxSTRING _zDstFileName , const orxSTRING * _azSrcFileName , orxU32 _u32Number , const orxSTRING _zEncryptionKey )","title":"mergeFiles"},{"location":"modules/config.html#popsection","text":"Signature: r1 = popSection () Description: Pops last section from section stack Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_PopSection ()","title":"popSection"},{"location":"modules/config.html#protectsection","text":"Signature: r1 = protectSection ( sectionname , protect ) Description: Protects/unprotects a section from deletion (content might still be changed or deleted, but the section itself will resist delete/clear calls) Params: name type description sectionname string Section name to protect protect boolean true for protecting the section, false to remove the protection Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_ProtectSection ( const orxSTRING _zSectionName , orxBOOL _bProtect )","title":"protectSection"},{"location":"modules/config.html#pushsection","text":"Signature: r1 = pushSection ( sectionname ) Description: Pushes a section (storing the current one on section stack) Params: name type description sectionname string Section name to push Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_PushSection ( const orxSTRING _zSectionName )","title":"pushSection"},{"location":"modules/config.html#reloadhistory","text":"Signature: r1 = reloadHistory () Description: Reloads config files from history Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_ReloadHistory ()","title":"reloadHistory"},{"location":"modules/config.html#renamesection","text":"Signature: r1 = renameSection ( sectionname , newsectionname ) Description: Renames a section Params: name type description sectionname string Section to rename newsectionname string New name for the section Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_RenameSection ( const orxSTRING _zSectionName , const orxSTRING _zNewSectionName )","title":"renameSection"},{"location":"modules/config.html#save","text":"Signature: r1 = save ( filename , useencryption , [ func ]) Description: Save all config info (set the lorx.tmpcfgsave callback to filter) Params: name type description filename string File name, if null or empty the default file name will be used useencryption boolean Use file encryption to make it human non-readable? [func] lorxCFGSAVE_CALLBACK Callback used to filter sections/keys to save. If null, all sections/keys will be saved Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_Save ( const orxSTRING _zFileName , orxBOOL _bUseEncryption , const orxCONFIG_SAVE_FUNCTION _pfnSaveCallback )","title":"save"},{"location":"modules/config.html#selectsection","text":"Signature: r1 = selectSection ( sectionname ) Description: Selects current working section Params: name type description sectionname string Section name to select Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SelectSection ( const orxSTRING _zSectionName )","title":"selectSection"},{"location":"modules/config.html#setbasename","text":"Signature: r1 = setBaseName ( basename ) Description: Sets config base name Params: name type description basename string Base name used for default config file Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetBaseName ( const orxSTRING _zBaseName )","title":"setBaseName"},{"location":"modules/config.html#setbool","text":"Signature: r1 = setBool ( key , value ) Description: Writes a boolean value to config Params: name type description key string Key name value boolean Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetBool ( const orxSTRING _zKey , orxBOOL _bValue )","title":"setBool"},{"location":"modules/config.html#setdefaultparent","text":"Signature: r1 = setDefaultParent ( sectionname ) Description: Sets default parent for all sections Params: name type description sectionname string Section name that will be used as an implicit default parent section for all config sections, if nil is provided, default parent will be removed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetDefaultParent ( const orxSTRING _zSectionName )","title":"setDefaultParent"},{"location":"modules/config.html#setencryptionkey","text":"Signature: r1 = setEncryptionKey ( encryptionkey ) Description: Sets encryption key Params: name type description encryptionkey string Encryption key to use, nil to clear Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetEncryptionKey ( const orxSTRING _zEncryptionKey )","title":"setEncryptionKey"},{"location":"modules/config.html#setfloat","text":"Signature: r1 = setFloat ( key , value ) Description: Writes a float value to config Params: name type description key string Key name value number Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetFloat ( const orxSTRING _zKey , orxFLOAT _fValue )","title":"setFloat"},{"location":"modules/config.html#setliststring","text":"Signature: r1 = setListString ( key , value , number ) Description: Writes a list of string values to config Params: name type description key string Key name value table of string Values number integer Number of values Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetListString ( const orxSTRING _zKey , const orxSTRING _azValue [], orxU32 _u32Number )","title":"setListString"},{"location":"modules/config.html#setparent","text":"Signature: r1 = setParent ( sectionname , parentname ) Description: Sets a section's parent Params: name type description sectionname string Concerned section, if the section doesn't exist, it will be created parentname string Parent section's name, if the section doesn't exist, it will be created, if nil is provided, the former parent will be erased, if empty string is provided, \"no default parent\" will be enforced Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetParent ( const orxSTRING _zSectionName , const orxSTRING _zParentName )","title":"setParent"},{"location":"modules/config.html#sets32","text":"Signature: r1 = setS32 ( key , value ) Description: Writes a signed integer value to config Params: name type description key string Key name value integer Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetS32 ( const orxSTRING _zKey , orxS32 _s32Value )","title":"setS32"},{"location":"modules/config.html#sets64","text":"Signature: r1 = setS64 ( key , value ) Description: Writes a signed integer value to config Params: name type description key string Key name value integer Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetS64 ( const orxSTRING _zKey , orxS64 _s64Value )","title":"setS64"},{"location":"modules/config.html#setstring","text":"Signature: r1 = setString ( key , value ) Description: Writes a string value to config Params: name type description key string Key name value string Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetString ( const orxSTRING _zKey , const orxSTRING _zValue )","title":"setString"},{"location":"modules/config.html#setstringblock","text":"Signature: r1 = setStringBlock ( key , value ) Description: Writes a string value to config, in block mode Params: name type description key string Key name value string Value to write in block mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetStringBlock ( const orxSTRING _zKey , const orxSTRING _zValue )","title":"setStringBlock"},{"location":"modules/config.html#setu32","text":"Signature: r1 = setU32 ( key , value ) Description: Writes an unsigned integer value to config Params: name type description key string Key name value integer Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetU32 ( const orxSTRING _zKey , orxU32 _u32Value )","title":"setU32"},{"location":"modules/config.html#setu64","text":"Signature: r1 = setU64 ( key , value ) Description: Writes an unsigned integer value to config Params: name type description key string Key name value integer Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetU64 ( const orxSTRING _zKey , orxU64 _u64Value )","title":"setU64"},{"location":"modules/config.html#setvector","text":"Signature: r1 = setVector ( key , value ) Description: Writes a vector value to config Params: name type description key string Key name value orxVECTOR# Value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConfig_SetVector ( const orxSTRING _zKey , const orxVECTOR * _pvValue )","title":"setVector"},{"location":"modules/config.html#setup","text":"Signature: setup () Description: Config module setup Params: Returns: C signature: void orxConfig_Setup ()","title":"setup"},{"location":"modules/console.html","text":"module console # functions # enable # Signature: enable ( enable ) Description: Enables/disables the console Params: name type description enable boolean Enable / disable Returns: C signature: void orxConsole_Enable ( orxBOOL _bEnable ) exit # Signature: exit () Description: Exits from the console module Params: Returns: C signature: void orxConsole_Exit () getCompletion # Signature: r1 , r2 = getCompletion ( index ) Description: Gets completion Params: name type description index integer Index of the active completion Returns: type description string Completion string if found, empty string otherwise boolean Is completion active, nil to ignore C signature: const orxSTRING orxConsole_GetCompletion ( orxU32 _u32Index , orxBOOL * _pbActive ) getCompletionCount # Signature: r1 , r2 = getCompletionCount () Description: Gets current completions count Params: Returns: type description integer Current completions count integer Max completion length, nil to ignore C signature: orxU32 orxConsole_GetCompletionCount ( orxU32 * _pu32MaxLength ) getFontConst # Signature: r1 = getFontConst () Description: Gets the console font Params: Returns: type description orxFONT# Current in-use font, nil C signature: const orxFONT * orxConsole_GetFont () getInput # Signature: r1 , r2 = getInput () Description: Gets input text Params: Returns: type description string orxTRING / empty string integer Index (ie. character position) of the cursor (any character past it has not been validated) C signature: const orxSTRING orxConsole_GetInput ( orxU32 * _pu32CursorIndex ) getLogLineLength # Signature: r1 = getLogLineLength () Description: Gets the console log line length Params: Returns: type description integer Console log line length C signature: orxU32 orxConsole_GetLogLineLength () getTrailLogLine # Signature: r1 = getTrailLogLine ( traillineindex ) Description: Gets log line from the end (trail), using internal offset Params: name type description traillineindex integer Index of the line starting from end Returns: type description string orxTRING / empty string C signature: const orxSTRING orxConsole_GetTrailLogLine ( orxU32 _u32TrailLineIndex ) getTrailLogLineOffset # Signature: r1 = getTrailLogLineOffset () Description: Gets log line offset from the end Params: Returns: type description integer Log line offset from the end C signature: orxU32 orxConsole_GetTrailLogLineOffset () init # Signature: r1 = init () Description: Inits the console module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_Init () isEnabled # Signature: r1 = isEnabled () Description: Is the console enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxConsole_IsEnabled () isInsertMode # Signature: r1 = isInsertMode () Description: Is the console input in insert mode? Params: Returns: type description boolean true if insert mode, false otherwise (overwrite mode) C signature: orxBOOL orxConsole_IsInsertMode () log # Signature: r1 = log ( text ) Description: Logs to the console Params: name type description text string Text to log Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_Log ( const orxSTRING _zText ) setFont # Signature: r1 = setFont ( font ) Description: Sets the console font Params: name type description font orxFONT# Font to use Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_SetFont ( const orxFONT * _pstFont ) setLogLineLength # Signature: r1 = setLogLineLength ( linelength ) Description: Sets the console log line length Params: name type description linelength integer Line length to use Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_SetLogLineLength ( orxU32 _u32LineLength ) setToggle # Signature: r1 = setToggle ( inputtype , inputid , inputmode ) Description: Sets the console toggle Params: name type description inputtype orxINPUT_TYPE Type of input peripheral inputid string ID of button/key/axis inputmode orxINPUT_MODE Mode of input Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_SetToggle ( orxINPUT_TYPE _eInputType , orxENUM _eInputID , orxINPUT_MODE _eInputMode ) setup # Signature: setup () Description: Console module setup Params: Returns: C signature: void orxConsole_Setup ()","title":"console"},{"location":"modules/console.html#module-console","text":"","title":"module console"},{"location":"modules/console.html#functions","text":"","title":"functions"},{"location":"modules/console.html#enable","text":"Signature: enable ( enable ) Description: Enables/disables the console Params: name type description enable boolean Enable / disable Returns: C signature: void orxConsole_Enable ( orxBOOL _bEnable )","title":"enable"},{"location":"modules/console.html#exit","text":"Signature: exit () Description: Exits from the console module Params: Returns: C signature: void orxConsole_Exit ()","title":"exit"},{"location":"modules/console.html#getcompletion","text":"Signature: r1 , r2 = getCompletion ( index ) Description: Gets completion Params: name type description index integer Index of the active completion Returns: type description string Completion string if found, empty string otherwise boolean Is completion active, nil to ignore C signature: const orxSTRING orxConsole_GetCompletion ( orxU32 _u32Index , orxBOOL * _pbActive )","title":"getCompletion"},{"location":"modules/console.html#getcompletioncount","text":"Signature: r1 , r2 = getCompletionCount () Description: Gets current completions count Params: Returns: type description integer Current completions count integer Max completion length, nil to ignore C signature: orxU32 orxConsole_GetCompletionCount ( orxU32 * _pu32MaxLength )","title":"getCompletionCount"},{"location":"modules/console.html#getfontconst","text":"Signature: r1 = getFontConst () Description: Gets the console font Params: Returns: type description orxFONT# Current in-use font, nil C signature: const orxFONT * orxConsole_GetFont ()","title":"getFontConst"},{"location":"modules/console.html#getinput","text":"Signature: r1 , r2 = getInput () Description: Gets input text Params: Returns: type description string orxTRING / empty string integer Index (ie. character position) of the cursor (any character past it has not been validated) C signature: const orxSTRING orxConsole_GetInput ( orxU32 * _pu32CursorIndex )","title":"getInput"},{"location":"modules/console.html#getloglinelength","text":"Signature: r1 = getLogLineLength () Description: Gets the console log line length Params: Returns: type description integer Console log line length C signature: orxU32 orxConsole_GetLogLineLength ()","title":"getLogLineLength"},{"location":"modules/console.html#gettraillogline","text":"Signature: r1 = getTrailLogLine ( traillineindex ) Description: Gets log line from the end (trail), using internal offset Params: name type description traillineindex integer Index of the line starting from end Returns: type description string orxTRING / empty string C signature: const orxSTRING orxConsole_GetTrailLogLine ( orxU32 _u32TrailLineIndex )","title":"getTrailLogLine"},{"location":"modules/console.html#gettrailloglineoffset","text":"Signature: r1 = getTrailLogLineOffset () Description: Gets log line offset from the end Params: Returns: type description integer Log line offset from the end C signature: orxU32 orxConsole_GetTrailLogLineOffset ()","title":"getTrailLogLineOffset"},{"location":"modules/console.html#init","text":"Signature: r1 = init () Description: Inits the console module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_Init ()","title":"init"},{"location":"modules/console.html#isenabled","text":"Signature: r1 = isEnabled () Description: Is the console enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxConsole_IsEnabled ()","title":"isEnabled"},{"location":"modules/console.html#isinsertmode","text":"Signature: r1 = isInsertMode () Description: Is the console input in insert mode? Params: Returns: type description boolean true if insert mode, false otherwise (overwrite mode) C signature: orxBOOL orxConsole_IsInsertMode ()","title":"isInsertMode"},{"location":"modules/console.html#log","text":"Signature: r1 = log ( text ) Description: Logs to the console Params: name type description text string Text to log Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_Log ( const orxSTRING _zText )","title":"log"},{"location":"modules/console.html#setfont","text":"Signature: r1 = setFont ( font ) Description: Sets the console font Params: name type description font orxFONT# Font to use Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_SetFont ( const orxFONT * _pstFont )","title":"setFont"},{"location":"modules/console.html#setloglinelength","text":"Signature: r1 = setLogLineLength ( linelength ) Description: Sets the console log line length Params: name type description linelength integer Line length to use Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_SetLogLineLength ( orxU32 _u32LineLength )","title":"setLogLineLength"},{"location":"modules/console.html#settoggle","text":"Signature: r1 = setToggle ( inputtype , inputid , inputmode ) Description: Sets the console toggle Params: name type description inputtype orxINPUT_TYPE Type of input peripheral inputid string ID of button/key/axis inputmode orxINPUT_MODE Mode of input Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxConsole_SetToggle ( orxINPUT_TYPE _eInputType , orxENUM _eInputID , orxINPUT_MODE _eInputMode )","title":"setToggle"},{"location":"modules/console.html#setup","text":"Signature: setup () Description: Console module setup Params: Returns: C signature: void orxConsole_Setup ()","title":"setup"},{"location":"modules/constants.html","text":"module constants # constants # name type value orxFILE_KU32_FLAG_INFO_NORMAL integer 0x00000001 orxFILE_KU32_FLAG_INFO_READONLY integer 0x00000002 orxFILE_KU32_FLAG_INFO_HIDDEN integer 0x00000004 orxFILE_KU32_FLAG_INFO_DIRECTORY integer 0x00000008 orxFILE_KU32_FLAG_OPEN_READ integer 0x10000000 orxFILE_KU32_FLAG_OPEN_WRITE integer 0x20000000 orxFILE_KU32_FLAG_OPEN_APPEND integer 0x40000000 orxFILE_KU32_FLAG_OPEN_BINARY integer 0x80000000 orxMOUSE_KZ_CONFIG_SECTION string \"Mouse\" orxMOUSE_KZ_CONFIG_SHOW_CURSOR string \"ShowCursor\" orxMOUSE_KZ_CONFIG_GRAB string \"Grab\" orxJOYSTICK_KU32_MIN_ID integer 1 orxJOYSTICK_KU32_MAX_ID integer (orxJOYSTICK_BUTTON_NUMBER / orxJOYSTICK_BUTTON_SINGLE_NUMBER) orxINPUT_KZ_CONFIG_SECTION string \"Input\" orxINPUT_KZ_CONFIG_DEFAULT_THRESHOLD string \"DefaultThreshold\" orxINPUT_KZ_CONFIG_DEFAULT_MULTIPLIER string \"DefaultMultiplier\" orxINPUT_KZ_CONFIG_COMBINE_LIST string \"CombineList\" orxINPUT_KZ_CONFIG_JOYSTICK_ID_LIST string \"JoyIDList\" orxINPUT_KU32_BINDING_NUMBER integer 16 orxINPUT_KZ_INTERNAL_SET_PREFIX string \"-=\" orxINPUT_KC_MODE_PREFIX_POSITIVE string '+' orxINPUT_KC_MODE_PREFIX_NEGATIVE string '-' orxINPUT_KU32_FLAG_TYPE_NONE integer 0x00000000 orxINPUT_KU32_MASK_TYPE_ALL integer 0x0000FFFF orxPROFILER_KU32_HISTORY_LENGTH integer 2 orxPROFILER_KS32_MARKER_ID_NONE integer -1 orxFPS_KZ_CLOCK_NAME string \"fps\" orxDEBUG_KU32_STATIC_FLAG_NONE integer 0x00000000 orxDEBUG_KU32_STATIC_FLAG_TIMESTAMP integer 0x00000001 orxDEBUG_KU32_STATIC_FLAG_FULL_TIMESTAMP integer 0x00000002 orxDEBUG_KU32_STATIC_FLAG_TYPE integer 0x00000004 orxDEBUG_KU32_STATIC_FLAG_TAGGED integer 0x00000008 orxDEBUG_KU32_STATIC_FLAG_FILE integer 0x00000010 orxDEBUG_KU32_STATIC_FLAG_TERMINAL integer 0x00000020 orxDEBUG_KU32_STATIC_FLAG_CONSOLE integer 0x00000040 orxDEBUG_KU32_STATIC_FLAG_CALLBACK integer 0x00000080 orxDEBUG_KU32_STATIC_MASK_DEFAULT integer 0x000000F5 orxDEBUG_KU32_STATIC_MASK_DEBUG integer 0x000000BD orxDEBUG_KU32_STATIC_MASK_USER_ALL integer 0x0FFFFFFF orxDEBUG_KZ_DEFAULT_DEBUG_FILE string \"orx-debug.log\" orxDEBUG_KZ_DEFAULT_LOG_FILE string \"orx.log\" orxDEBUG_KZ_DEFAULT_LOG_SUFFIX string \".log\" orxDEBUG_KZ_DEFAULT_DEBUG_SUFFIX string \"-debug.log\" orxDEBUG_KS32_BUFFER_OUTPUT_SIZE integer 2048 orxCOMMAND_KC_BLOCK_MARKER string '\"' orxCOMMAND_KC_PUSH_MARKER string '>' orxCOMMAND_KC_POP_MARKER string '<' orxCOMMAND_KC_GUID_MARKER string '^' orxCOMMAND_KC_SEPARATOR string ',' orxTHREAD_KU32_MAIN_THREAD_ID integer 0 orxTHREAD_KU32_MAX_THREAD_NUMBER integer 16 orxTHREAD_KU32_FLAG_NONE integer 0 orxTHREAD_KU32_MASK_ALL integer (((1 << orxTHREAD_KU32_MAX_THREAD_NUMBER) - 1) & ~(1 << orxTHREAD_KU32_MAIN_THREAD_ID)) orxCONFIG_KZ_RESOURCE_GROUP string \"Config\" orxCLOCK_KU32_CLOCK_BANK_SIZE integer 16 orxCLOCK_KU32_TIMER_BANK_SIZE integer 32 orxCLOCK_KU32_FUNCTION_BANK_SIZE integer 16 orxCLOCK_KZ_CONFIG_FREQUENCY string \"Frequency\" orxCLOCK_KZ_CONFIG_MODIFIER_LIST string \"ModifierList\" orxCLOCK_KZ_CORE string \"core\" orxRESOURCE_KC_LOCATION_SEPARATOR string ':' orxRESOURCE_KZ_DEFAULT_STORAGE string \".\" orxRESOURCE_KZ_TYPE_TAG_FILE string \"file\" orxEVENT_KU32_FLAG_ID_NONE integer 0x00000000 orxEVENT_KU32_MASK_ID_ALL integer 0xFFFFFFFF orxCONSOLE_KZ_INPUT_SET string \"-=ConsoleSet=-\" orxCONSOLE_KZ_INPUT_TOGGLE string \"Toggle\" orxCONSOLE_KZ_INPUT_AUTOCOMPLETE string \"AutoComplete\" orxCONSOLE_KZ_INPUT_DELETE string \"Delete\" orxCONSOLE_KZ_INPUT_DELETE_AFTER string \"DeleteAfter\" orxCONSOLE_KZ_INPUT_TOGGLE_MODE string \"ToggleMode\" orxCONSOLE_KZ_INPUT_ENTER string \"Enter\" orxCONSOLE_KZ_INPUT_PREVIOUS string \"Previous\" orxCONSOLE_KZ_INPUT_NEXT string \"Next\" orxCONSOLE_KZ_INPUT_LEFT string \"Left\" orxCONSOLE_KZ_INPUT_RIGHT string \"Right\" orxCONSOLE_KZ_INPUT_START string \"Start\" orxCONSOLE_KZ_INPUT_END string \"End\" orxCONSOLE_KZ_INPUT_PASTE string \"Paste\" orxCONSOLE_KZ_INPUT_SCROLL_DOWN string \"ScrollDown\" orxCONSOLE_KZ_INPUT_SCROLL_UP string \"ScrollUp\" orxCONSOLE_KZ_CONFIG_HISTORY_FILE_EXTENSION string \"cih\" orxANIMSET_KU32_FLAG_NONE integer 0x00000000 orxANIMSET_KU32_FLAG_REFERENCE_LOCK integer 0x00100000 orxANIMSET_KU32_FLAG_LINK_STATIC integer 0x00200000 orxANIMSET_KU32_LINK_FLAG_NONE integer 0x00000000 orxANIMSET_KU32_LINK_FLAG_LOOP_COUNT integer 0x10000000 orxANIMSET_KU32_LINK_FLAG_PRIORITY integer 0x20000000 orxANIMSET_KU32_LINK_FLAG_IMMEDIATE_CUT integer 0x40000000 orxANIMSET_KU32_LINK_FLAG_CLEAR_TARGET integer 0x80000000 orxANIMSET_KU32_MAX_ANIM_NUMBER integer 128 orxANIM_KU32_FLAG_NONE integer 0x00000000 orxANIM_KU32_FLAG_2D integer 0x00000001 orxANIM_KU32_MASK_USER_ALL integer 0x0000000F orxANIM_KU32_MASK_ALL integer 0xFFFFFFFF orxANIM_KU32_KEY_MAX_NUMBER integer 65535 orxANIM_KU32_EVENT_MAX_NUMBER integer 65535 orxSHADERPOINTER_KU32_SHADER_NUMBER integer 4 orxVIEWPORT_KU32_FLAG_ALIGN_CENTER integer 0x00000000 orxVIEWPORT_KU32_FLAG_ALIGN_LEFT integer 0x10000000 orxVIEWPORT_KU32_FLAG_ALIGN_RIGHT integer 0x20000000 orxVIEWPORT_KU32_FLAG_ALIGN_TOP integer 0x40000000 orxVIEWPORT_KU32_FLAG_ALIGN_BOTTOM integer 0x80000000 orxVIEWPORT_KU32_FLAG_NO_DEBUG integer 0x01000000 orxVIEWPORT_KU32_MAX_TEXTURE_NUMBER integer 8 orxCAMERA_KU32_FLAG_NONE integer 0x00000000 orxCAMERA_KU32_FLAG_2D integer 0x00000001 orxCAMERA_KU32_MASK_USER_ALL integer 0x000000FF orxCAMERA_KU32_GROUP_ID_NUMBER integer 16 orxRENDER_KZ_CONFIG_SECTION string \"Render\" orxRENDER_KZ_CONFIG_SHOW_FPS string \"ShowFPS\" orxRENDER_KZ_CONFIG_SHOW_PROFILER string \"ShowProfiler\" orxRENDER_KZ_CONFIG_MIN_FREQUENCY string \"MinFrequency\" orxRENDER_KZ_CONFIG_PROFILER_ORIENTATION string \"ProfilerOrientation\" orxRENDER_KZ_CONFIG_CONSOLE_COLOR string \"ConsoleColor\" orxRENDER_KZ_CONFIG_CONSOLE_ALPHA string \"ConsoleAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_BACKGROUND_COLOR string \"ConsoleBackgroundColor\" orxRENDER_KZ_CONFIG_CONSOLE_BACKGROUND_ALPHA string \"ConsoleBackgroundAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_SEPARATOR_COLOR string \"ConsoleSeparatorColor\" orxRENDER_KZ_CONFIG_CONSOLE_SEPARATOR_ALPHA string \"ConsoleSeparatorAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_INPUT_COLOR string \"ConsoleInputColor\" orxRENDER_KZ_CONFIG_CONSOLE_INPUT_ALPHA string \"ConsoleInputAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_COMPLETION_COLOR string \"ConsoleCompletionColor\" orxRENDER_KZ_CONFIG_CONSOLE_COMPLETION_ALPHA string \"ConsoleCompletionAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_LOG_COLOR string \"ConsoleLogColor\" orxRENDER_KZ_CONFIG_CONSOLE_LOG_ALPHA string \"ConsoleLogAlpha\" orxRENDER_KZ_INPUT_SET string \"-=RenderSet=-\" orxRENDER_KZ_INPUT_PROFILER_TOGGLE_HISTORY string \"ProfilerToggleHistory\" orxRENDER_KZ_INPUT_PROFILER_PAUSE string \"ProfilerPause\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_FRAME string \"ProfilerPreviousFrame\" orxRENDER_KZ_INPUT_PROFILER_NEXT_FRAME string \"ProfilerNextFrame\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_DEPTH string \"ProfilerPreviousDepth\" orxRENDER_KZ_INPUT_PROFILER_NEXT_DEPTH string \"ProfilerNextDepth\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_THREAD string \"ProfilerPreviousThread\" orxRENDER_KZ_INPUT_PROFILER_NEXT_THREAD string \"ProfilerNextThread\" orxMATH_KF_SQRT_2 number orx2F(1.414213562f) orxMATH_KF_EPSILON number orx2F(0.0001f) orxMATH_KF_TINY_EPSILON number orx2F(1.0e-037f) orxMATH_KF_MAX number orx2F(3.402823466e+38F) orxMATH_KF_2_PI number orx2F(6.283185307f) orxMATH_KF_PI number orx2F(3.141592654f) orxMATH_KF_PI_BY_2 number orx2F(1.570796327f) orxMATH_KF_PI_BY_4 number orx2F(0.785398163f) orxMATH_KF_DEG_TO_RAD number orx2F(3.141592654f / 180.0f) orxMATH_KF_RAD_TO_DEG number orx2F(180.0f / 3.141592654f) orxDISPLAY_KZ_CONFIG_SECTION string \"Display\" orxDISPLAY_KZ_CONFIG_WIDTH string \"ScreenWidth\" orxDISPLAY_KZ_CONFIG_HEIGHT string \"ScreenHeight\" orxDISPLAY_KZ_CONFIG_DEPTH string \"ScreenDepth\" orxDISPLAY_KZ_CONFIG_POSITION string \"ScreenPosition\" orxDISPLAY_KZ_CONFIG_REFRESH_RATE string \"RefreshRate\" orxDISPLAY_KZ_CONFIG_FULLSCREEN string \"FullScreen\" orxDISPLAY_KZ_CONFIG_ALLOW_RESIZE string \"AllowResize\" orxDISPLAY_KZ_CONFIG_DECORATION string \"Decoration\" orxDISPLAY_KZ_CONFIG_TITLE string \"Title\" orxDISPLAY_KZ_CONFIG_SMOOTH string \"Smoothing\" orxDISPLAY_KZ_CONFIG_VSYNC string \"VSync\" orxDISPLAY_KZ_CONFIG_DEPTHBUFFER string \"DepthBuffer\" orxDISPLAY_KZ_CONFIG_SHADER_VERSION string \"ShaderVersion\" orxDISPLAY_KZ_CONFIG_SHADER_EXTENSION_LIST string \"ShaderExtensionList\" orxDISPLAY_KZ_CONFIG_MONITOR string \"Monitor\" orxDISPLAY_KZ_CONFIG_CURSOR string \"Cursor\" orxDISPLAY_KZ_CONFIG_ICON_LIST string \"IconList\" orxDISPLAY_KZ_CONFIG_FRAMEBUFFER_SIZE string \"FramebufferSize\" orxDISPLAY_KZ_CONFIG_TEXTURE_UNIT_NUMBER string \"TextureUnitNumber\" orxDISPLAY_KZ_CONFIG_DRAW_BUFFER_NUMBER string \"DrawBufferNumber\" orxDISPLAY_KZ_CONFIG_MAX_TEXTURE_SIZE string \"MaxTextureSize\" orxDISPLAY_KZ_CONFIG_DEBUG_OUTPUT string \"DebugOutput\" orxCOLOR_KZ_CONFIG_SECTION string \"Color\" orxDISPLAY_KZ_SHADER_SUFFIX_TOP string \"_top\" orxDISPLAY_KZ_SHADER_SUFFIX_LEFT string \"_left\" orxDISPLAY_KZ_SHADER_SUFFIX_BOTTOM string \"_bottom\" orxDISPLAY_KZ_SHADER_SUFFIX_RIGHT string \"_right\" orxDISPLAY_KC_SHADER_EXTENSION_ADD string '+' orxDISPLAY_KC_SHADER_EXTENSION_REMOVE string '-' orxSCREENSHOT_KZ_DEFAULT_DIRECTORY_NAME string \".\" orxSCREENSHOT_KZ_DEFAULT_BASE_NAME string \"screenshot-\" orxSCREENSHOT_KZ_DEFAULT_EXTENSION string \"tga\" orxSCREENSHOT_KU32_DEFAULT_DIGITS integer 4 orxFONT_KZ_DEFAULT_FONT_NAME string \"default\" orxTEXTURE_KZ_RESOURCE_GROUP string \"Texture\" orxTEXTURE_KZ_LOCALE_GROUP string \"Texture\" orxTEXTURE_KZ_SCREEN string \"screen\" orxTEXTURE_KZ_PIXEL string \"pixel\" orxTEXT_KZ_LOCALE_GROUP string \"Text\" orxGRAPHIC_KU32_FLAG_NONE integer 0x00000000 orxGRAPHIC_KU32_FLAG_2D integer 0x00000001 orxGRAPHIC_KU32_FLAG_TEXT integer 0x00000002 orxGRAPHIC_KU32_MASK_TYPE integer 0x00000003 orxGRAPHIC_KU32_FLAG_FLIP_X integer 0x00000004 orxGRAPHIC_KU32_FLAG_FLIP_Y integer 0x00000008 orxGRAPHIC_KU32_MASK_FLIP_BOTH integer 0x0000000C orxGRAPHIC_KU32_FLAG_ALIGN_CENTER integer 0x00000000 orxGRAPHIC_KU32_FLAG_ALIGN_LEFT integer 0x00000010 orxGRAPHIC_KU32_FLAG_ALIGN_RIGHT integer 0x00000020 orxGRAPHIC_KU32_FLAG_ALIGN_TOP integer 0x00000040 orxGRAPHIC_KU32_FLAG_ALIGN_BOTTOM integer 0x00000080 orxGRAPHIC_KU32_FLAG_ALIGN_TRUNCATE integer 0x00000100 orxGRAPHIC_KU32_FLAG_ALIGN_ROUND integer 0x00000200 orxGRAPHIC_KU32_MASK_ALIGN integer 0x000003F0 orxGRAPHIC_KU32_MASK_USER_ALL integer 0x00000FFF orxGRAPHIC_KZ_CONFIG_TEXTURE_NAME string \"Texture\" orxGRAPHIC_KZ_CONFIG_TEXTURE_ORIGIN string \"TextureOrigin\" orxGRAPHIC_KZ_CONFIG_TEXTURE_SIZE string \"TextureSize\" orxGRAPHIC_KZ_CONFIG_TEXT_NAME string \"Text\" orxGRAPHIC_KZ_CONFIG_PIVOT string \"Pivot\" orxGRAPHIC_KZ_CONFIG_COLOR string \"Color\" orxGRAPHIC_KZ_CONFIG_ALPHA string \"Alpha\" orxGRAPHIC_KZ_CONFIG_RGB string \"RGB\" orxGRAPHIC_KZ_CONFIG_HSL string \"HSL\" orxGRAPHIC_KZ_CONFIG_HSV string \"HSV\" orxGRAPHIC_KZ_CONFIG_FLIP string \"Flip\" orxGRAPHIC_KZ_CONFIG_REPEAT string \"Repeat\" orxGRAPHIC_KZ_CONFIG_SMOOTHING string \"Smoothing\" orxGRAPHIC_KZ_CONFIG_BLEND_MODE string \"BlendMode\" orxGRAPHIC_KZ_CONFIG_KEEP_IN_CACHE string \"KeepInCache\" orxANSI_KC_MARKER string 'x1b' orxANSI_KZ_COLOR_RESET string \"x1b[0m\" orxANSI_KZ_COLOR_BOLD_ON string \"x1b[1m\" orxANSI_KZ_COLOR_ITALICS_ON string \"x1b[3m\" orxANSI_KZ_COLOR_UNDERLINE_ON string \"x1b[4m\" orxANSI_KZ_COLOR_BLINK_ON string \"x1b[5m\" orxANSI_KZ_COLOR_INVERSE_ON string \"x1b[7m\" orxANSI_KZ_COLOR_STRIKETHROUGH_ON string \"x1b[9m\" orxANSI_KZ_COLOR_BOLD_OFF string \"x1b[22m\" orxANSI_KZ_COLOR_ITALICS_OFF string \"x1b[23m\" orxANSI_KZ_COLOR_UNDERLINE_OFF string \"x1b[24m\" orxANSI_KZ_COLOR_BLINK_OFF string \"x1b[25m\" orxANSI_KZ_COLOR_INVERSE_OFF string \"x1b[27m\" orxANSI_KZ_COLOR_STRIKETHROUGH_OFF string \"x1b[29m\" orxANSI_KZ_COLOR_FG_BLACK string \"x1b[30m\" orxANSI_KZ_COLOR_FG_RED string \"x1b[31m\" orxANSI_KZ_COLOR_FG_GREEN string \"x1b[32m\" orxANSI_KZ_COLOR_FG_YELLOW string \"x1b[33m\" orxANSI_KZ_COLOR_FG_BLUE string \"x1b[34m\" orxANSI_KZ_COLOR_FG_MAGENTA string \"x1b[35m\" orxANSI_KZ_COLOR_FG_CYAN string \"x1b[36m\" orxANSI_KZ_COLOR_FG_WHITE string \"x1b[37m\" orxANSI_KZ_COLOR_FG_DEFAULT string \"x1b[39m\" orxANSI_KZ_COLOR_BG_BLACK string \"x1b[40m\" orxANSI_KZ_COLOR_BG_RED string \"x1b[41m\" orxANSI_KZ_COLOR_BG_GREEN string \"x1b[42m\" orxANSI_KZ_COLOR_BG_YELLOW string \"x1b[43m\" orxANSI_KZ_COLOR_BG_BLUE string \"x1b[44m\" orxANSI_KZ_COLOR_BG_MAGENTA string \"x1b[45m\" orxANSI_KZ_COLOR_BG_CYAN string \"x1b[46m\" orxANSI_KZ_COLOR_BG_WHITE string \"x1b[47m\" orxANSI_KZ_COLOR_BG_DEFAULT string \"x1b[49m\" orxBODY_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_DEF_KU32_FLAG_2D integer 0x00000001 orxBODY_DEF_KU32_FLAG_DYNAMIC integer 0x00000002 orxBODY_DEF_KU32_FLAG_HIGH_SPEED integer 0x00000004 orxBODY_DEF_KU32_FLAG_FIXED_ROTATION integer 0x00000008 orxBODY_DEF_KU32_FLAG_CAN_MOVE integer 0x00000010 orxBODY_DEF_KU32_FLAG_ALLOW_SLEEP integer 0x00000020 orxBODY_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_PART_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_PART_DEF_KU32_FLAG_SPHERE integer 0x00000001 orxBODY_PART_DEF_KU32_FLAG_BOX integer 0x00000002 orxBODY_PART_DEF_KU32_FLAG_MESH integer 0x00000004 orxBODY_PART_DEF_KU32_FLAG_EDGE integer 0x00000008 orxBODY_PART_DEF_KU32_FLAG_CHAIN integer 0x00000010 orxBODY_PART_DEF_KU32_MASK_TYPE integer 0x0000001F orxBODY_PART_DEF_KU32_FLAG_SOLID integer 0x10000000 orxBODY_PART_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_JOINT_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_JOINT_DEF_KU32_FLAG_REVOLUTE integer 0x00000001 orxBODY_JOINT_DEF_KU32_FLAG_PRISMATIC integer 0x00000002 orxBODY_JOINT_DEF_KU32_FLAG_SPRING integer 0x00000004 orxBODY_JOINT_DEF_KU32_FLAG_ROPE integer 0x00000008 orxBODY_JOINT_DEF_KU32_FLAG_PULLEY integer 0x00000010 orxBODY_JOINT_DEF_KU32_FLAG_SUSPENSION integer 0x00000020 orxBODY_JOINT_DEF_KU32_FLAG_WELD integer 0x00000040 orxBODY_JOINT_DEF_KU32_FLAG_FRICTION integer 0x00000080 orxBODY_JOINT_DEF_KU32_FLAG_GEAR integer 0x00000100 orxBODY_JOINT_DEF_KU32_MASK_TYPE integer 0x00000FFF orxBODY_JOINT_DEF_KU32_FLAG_COLLIDE integer 0x10000000 orxBODY_JOINT_DEF_KU32_FLAG_ROTATION_LIMIT integer 0x20000000 orxBODY_JOINT_DEF_KU32_FLAG_MOTOR integer 0x40000000 orxBODY_JOINT_DEF_KU32_FLAG_TRANSLATION_LIMIT integer 0x80000000 orxBODY_JOINT_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_PART_DEF_KU32_MESH_VERTEX_NUMBER integer 8 orxPHYSICS_KZ_CONFIG_SECTION string \"Physics\" orxPHYSICS_KZ_CONFIG_GRAVITY string \"Gravity\" orxPHYSICS_KZ_CONFIG_ALLOW_SLEEP string \"AllowSleep\" orxPHYSICS_KZ_CONFIG_ITERATIONS string \"IterationsPerStep\" orxPHYSICS_KZ_CONFIG_RATIO string \"DimensionRatio\" orxPHYSICS_KZ_CONFIG_STEP_FREQUENCY string \"StepFrequency\" orxPHYSICS_KZ_CONFIG_SHOW_DEBUG string \"ShowDebug\" orxPHYSICS_KZ_CONFIG_COLLISION_FLAG_LIST string \"CollisionFlagList\" orxPHYSICS_KZ_CONFIG_INTERPOLATE string \"Interpolate\" orxSTRING_KC_VECTOR_START string '(' orxSTRING_KC_VECTOR_START_ALT string '{' orxSTRING_KC_VECTOR_SEPARATOR string ',' orxSTRING_KC_VECTOR_END string ')' orxSTRING_KC_VECTOR_END_ALT string '}' orxSOUNDSYSTEM_KZ_CONFIG_SECTION string \"SoundSystem\" orxSOUNDSYSTEM_KZ_CONFIG_RATIO string \"DimensionRatio\" orxSOUNDSYSTEM_KZ_CONFIG_MUTE_IN_BACKGROUND string \"MuteInBackground\" orxSOUNDSYSTEM_KZ_CONFIG_LISTENERS string \"Listeners\" orxSOUND_KZ_RESOURCE_GROUP string \"Sound\" orxSOUND_KZ_LOCALE_GROUP string \"Sound\" orxSOUND_KZ_MASTER_BUS string \"master\" orxSOUNDPOINTER_KU32_SOUND_NUMBER integer 4 orxSTRUCTURE_GUID_MAGIC_TAG_DELETED integer 0xDEFACED0DEADC0DEULL orxSTRUCTURE_GUID_MASK_STRUCTURE_ID integer 0x00000000000000FFULL orxSTRUCTURE_GUID_SHIFT_STRUCTURE_ID integer 0 orxSTRUCTURE_GUID_MASK_ITEM_ID integer 0x00000000FFFFFF00ULL orxSTRUCTURE_GUID_SHIFT_ITEM_ID integer 8 orxSTRUCTURE_GUID_MASK_INSTANCE_ID integer 0xFFFFFFFF00000000ULL orxSTRUCTURE_GUID_SHIFT_INSTANCE_ID integer 32 orxSPAWNER_KU32_FLAG_NONE integer 0x00000000 orxSPAWNER_KU32_FLAG_AUTO_DELETE integer 0x00000001 orxSPAWNER_KU32_FLAG_AUTO_RESET integer 0x00000002 orxSPAWNER_KU32_FLAG_USE_ALPHA integer 0x00000004 orxSPAWNER_KU32_FLAG_USE_COLOR integer 0x00000008 orxSPAWNER_KU32_FLAG_USE_ROTATION integer 0x00000010 orxSPAWNER_KU32_FLAG_USE_SCALE integer 0x00000020 orxSPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_OBJECT integer 0x00000040 orxSPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_SPAWNER integer 0x00000080 orxSPAWNER_KU32_MASK_USE_RELATIVE_SPEED integer 0x000000C0 orxSPAWNER_KU32_FLAG_USE_SELF_AS_PARENT integer 0x00000100 orxSPAWNER_KU32_FLAG_CLEAN_ON_DELETE integer 0x00000200 orxSPAWNER_KU32_FLAG_INTERPOLATE integer 0x00000400 orxSPAWNER_KU32_MASK_USER_ALL integer 0x000004FF orxFRAME_KU32_FLAG_NONE integer 0x00000000 orxFRAME_KU32_FLAG_SCROLL_X integer 0x00000001 orxFRAME_KU32_FLAG_SCROLL_Y integer 0x00000002 orxFRAME_KU32_MASK_SCROLL_BOTH integer 0x00000003 orxFRAME_KU32_FLAG_DEPTH_SCALE integer 0x00000004 orxFRAME_KU32_FLAG_FLIP_X integer 0x00000010 orxFRAME_KU32_FLAG_FLIP_Y integer 0x00000020 orxFRAME_KU32_MASK_FLIP_BOTH integer 0x00000030 orxFRAME_KU32_FLAG_IGNORE_NONE integer 0x00000000 orxFRAME_KU32_FLAG_IGNORE_ROTATION integer 0x00000100 orxFRAME_KU32_FLAG_IGNORE_SCALE_X integer 0x00000200 orxFRAME_KU32_FLAG_IGNORE_SCALE_Y integer 0x00000400 orxFRAME_KU32_FLAG_IGNORE_SCALE_Z integer 0x00000800 orxFRAME_KU32_MASK_IGNORE_SCALE integer 0x00000E00 orxFRAME_KU32_FLAG_IGNORE_POSITION_ROTATION integer 0x00001000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_X integer 0x00002000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Y integer 0x00004000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Z integer 0x00008000 orxFRAME_KU32_MASK_IGNORE_POSITION_SCALE integer 0x0000E000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_X integer 0x00010000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Y integer 0x00020000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Z integer 0x00040000 orxFRAME_KU32_MASK_IGNORE_POSITION_POSITION integer 0x00070000 orxFRAME_KU32_MASK_IGNORE_POSITION integer 0x0007F000 orxFRAME_KU32_MASK_IGNORE_ALL integer 0x0007FF00 orxFRAME_KU32_MASK_USER_ALL integer 0x0007FFFF orxFXPOINTER_KU32_FX_NUMBER integer 8 orxOBJECT_KZ_DEFAULT_GROUP string \"default\" orxFX_SLOT_KU32_FLAG_ABSOLUTE integer 0x00000100 orxFX_SLOT_KU32_FLAG_USE_ROTATION integer 0x00000200 orxFX_SLOT_KU32_FLAG_USE_SCALE integer 0x00000400 orxU64_UNDEFINED integer (orxU64)(-1) orxU32_UNDEFINED integer (orxU32)(-1) orxU16_UNDEFINED integer (orxU16)(-1) orxU8_UNDEFINED integer (orxU8)(-1) orxHANDLE_UNDEFINED orxHANDLE (orxHANDLE)(-1) orxSTRINGID_UNDEFINED integer (orxSTRINGID)(-1)","title":"constants"},{"location":"modules/constants.html#module-constants","text":"","title":"module constants"},{"location":"modules/constants.html#constants","text":"name type value orxFILE_KU32_FLAG_INFO_NORMAL integer 0x00000001 orxFILE_KU32_FLAG_INFO_READONLY integer 0x00000002 orxFILE_KU32_FLAG_INFO_HIDDEN integer 0x00000004 orxFILE_KU32_FLAG_INFO_DIRECTORY integer 0x00000008 orxFILE_KU32_FLAG_OPEN_READ integer 0x10000000 orxFILE_KU32_FLAG_OPEN_WRITE integer 0x20000000 orxFILE_KU32_FLAG_OPEN_APPEND integer 0x40000000 orxFILE_KU32_FLAG_OPEN_BINARY integer 0x80000000 orxMOUSE_KZ_CONFIG_SECTION string \"Mouse\" orxMOUSE_KZ_CONFIG_SHOW_CURSOR string \"ShowCursor\" orxMOUSE_KZ_CONFIG_GRAB string \"Grab\" orxJOYSTICK_KU32_MIN_ID integer 1 orxJOYSTICK_KU32_MAX_ID integer (orxJOYSTICK_BUTTON_NUMBER / orxJOYSTICK_BUTTON_SINGLE_NUMBER) orxINPUT_KZ_CONFIG_SECTION string \"Input\" orxINPUT_KZ_CONFIG_DEFAULT_THRESHOLD string \"DefaultThreshold\" orxINPUT_KZ_CONFIG_DEFAULT_MULTIPLIER string \"DefaultMultiplier\" orxINPUT_KZ_CONFIG_COMBINE_LIST string \"CombineList\" orxINPUT_KZ_CONFIG_JOYSTICK_ID_LIST string \"JoyIDList\" orxINPUT_KU32_BINDING_NUMBER integer 16 orxINPUT_KZ_INTERNAL_SET_PREFIX string \"-=\" orxINPUT_KC_MODE_PREFIX_POSITIVE string '+' orxINPUT_KC_MODE_PREFIX_NEGATIVE string '-' orxINPUT_KU32_FLAG_TYPE_NONE integer 0x00000000 orxINPUT_KU32_MASK_TYPE_ALL integer 0x0000FFFF orxPROFILER_KU32_HISTORY_LENGTH integer 2 orxPROFILER_KS32_MARKER_ID_NONE integer -1 orxFPS_KZ_CLOCK_NAME string \"fps\" orxDEBUG_KU32_STATIC_FLAG_NONE integer 0x00000000 orxDEBUG_KU32_STATIC_FLAG_TIMESTAMP integer 0x00000001 orxDEBUG_KU32_STATIC_FLAG_FULL_TIMESTAMP integer 0x00000002 orxDEBUG_KU32_STATIC_FLAG_TYPE integer 0x00000004 orxDEBUG_KU32_STATIC_FLAG_TAGGED integer 0x00000008 orxDEBUG_KU32_STATIC_FLAG_FILE integer 0x00000010 orxDEBUG_KU32_STATIC_FLAG_TERMINAL integer 0x00000020 orxDEBUG_KU32_STATIC_FLAG_CONSOLE integer 0x00000040 orxDEBUG_KU32_STATIC_FLAG_CALLBACK integer 0x00000080 orxDEBUG_KU32_STATIC_MASK_DEFAULT integer 0x000000F5 orxDEBUG_KU32_STATIC_MASK_DEBUG integer 0x000000BD orxDEBUG_KU32_STATIC_MASK_USER_ALL integer 0x0FFFFFFF orxDEBUG_KZ_DEFAULT_DEBUG_FILE string \"orx-debug.log\" orxDEBUG_KZ_DEFAULT_LOG_FILE string \"orx.log\" orxDEBUG_KZ_DEFAULT_LOG_SUFFIX string \".log\" orxDEBUG_KZ_DEFAULT_DEBUG_SUFFIX string \"-debug.log\" orxDEBUG_KS32_BUFFER_OUTPUT_SIZE integer 2048 orxCOMMAND_KC_BLOCK_MARKER string '\"' orxCOMMAND_KC_PUSH_MARKER string '>' orxCOMMAND_KC_POP_MARKER string '<' orxCOMMAND_KC_GUID_MARKER string '^' orxCOMMAND_KC_SEPARATOR string ',' orxTHREAD_KU32_MAIN_THREAD_ID integer 0 orxTHREAD_KU32_MAX_THREAD_NUMBER integer 16 orxTHREAD_KU32_FLAG_NONE integer 0 orxTHREAD_KU32_MASK_ALL integer (((1 << orxTHREAD_KU32_MAX_THREAD_NUMBER) - 1) & ~(1 << orxTHREAD_KU32_MAIN_THREAD_ID)) orxCONFIG_KZ_RESOURCE_GROUP string \"Config\" orxCLOCK_KU32_CLOCK_BANK_SIZE integer 16 orxCLOCK_KU32_TIMER_BANK_SIZE integer 32 orxCLOCK_KU32_FUNCTION_BANK_SIZE integer 16 orxCLOCK_KZ_CONFIG_FREQUENCY string \"Frequency\" orxCLOCK_KZ_CONFIG_MODIFIER_LIST string \"ModifierList\" orxCLOCK_KZ_CORE string \"core\" orxRESOURCE_KC_LOCATION_SEPARATOR string ':' orxRESOURCE_KZ_DEFAULT_STORAGE string \".\" orxRESOURCE_KZ_TYPE_TAG_FILE string \"file\" orxEVENT_KU32_FLAG_ID_NONE integer 0x00000000 orxEVENT_KU32_MASK_ID_ALL integer 0xFFFFFFFF orxCONSOLE_KZ_INPUT_SET string \"-=ConsoleSet=-\" orxCONSOLE_KZ_INPUT_TOGGLE string \"Toggle\" orxCONSOLE_KZ_INPUT_AUTOCOMPLETE string \"AutoComplete\" orxCONSOLE_KZ_INPUT_DELETE string \"Delete\" orxCONSOLE_KZ_INPUT_DELETE_AFTER string \"DeleteAfter\" orxCONSOLE_KZ_INPUT_TOGGLE_MODE string \"ToggleMode\" orxCONSOLE_KZ_INPUT_ENTER string \"Enter\" orxCONSOLE_KZ_INPUT_PREVIOUS string \"Previous\" orxCONSOLE_KZ_INPUT_NEXT string \"Next\" orxCONSOLE_KZ_INPUT_LEFT string \"Left\" orxCONSOLE_KZ_INPUT_RIGHT string \"Right\" orxCONSOLE_KZ_INPUT_START string \"Start\" orxCONSOLE_KZ_INPUT_END string \"End\" orxCONSOLE_KZ_INPUT_PASTE string \"Paste\" orxCONSOLE_KZ_INPUT_SCROLL_DOWN string \"ScrollDown\" orxCONSOLE_KZ_INPUT_SCROLL_UP string \"ScrollUp\" orxCONSOLE_KZ_CONFIG_HISTORY_FILE_EXTENSION string \"cih\" orxANIMSET_KU32_FLAG_NONE integer 0x00000000 orxANIMSET_KU32_FLAG_REFERENCE_LOCK integer 0x00100000 orxANIMSET_KU32_FLAG_LINK_STATIC integer 0x00200000 orxANIMSET_KU32_LINK_FLAG_NONE integer 0x00000000 orxANIMSET_KU32_LINK_FLAG_LOOP_COUNT integer 0x10000000 orxANIMSET_KU32_LINK_FLAG_PRIORITY integer 0x20000000 orxANIMSET_KU32_LINK_FLAG_IMMEDIATE_CUT integer 0x40000000 orxANIMSET_KU32_LINK_FLAG_CLEAR_TARGET integer 0x80000000 orxANIMSET_KU32_MAX_ANIM_NUMBER integer 128 orxANIM_KU32_FLAG_NONE integer 0x00000000 orxANIM_KU32_FLAG_2D integer 0x00000001 orxANIM_KU32_MASK_USER_ALL integer 0x0000000F orxANIM_KU32_MASK_ALL integer 0xFFFFFFFF orxANIM_KU32_KEY_MAX_NUMBER integer 65535 orxANIM_KU32_EVENT_MAX_NUMBER integer 65535 orxSHADERPOINTER_KU32_SHADER_NUMBER integer 4 orxVIEWPORT_KU32_FLAG_ALIGN_CENTER integer 0x00000000 orxVIEWPORT_KU32_FLAG_ALIGN_LEFT integer 0x10000000 orxVIEWPORT_KU32_FLAG_ALIGN_RIGHT integer 0x20000000 orxVIEWPORT_KU32_FLAG_ALIGN_TOP integer 0x40000000 orxVIEWPORT_KU32_FLAG_ALIGN_BOTTOM integer 0x80000000 orxVIEWPORT_KU32_FLAG_NO_DEBUG integer 0x01000000 orxVIEWPORT_KU32_MAX_TEXTURE_NUMBER integer 8 orxCAMERA_KU32_FLAG_NONE integer 0x00000000 orxCAMERA_KU32_FLAG_2D integer 0x00000001 orxCAMERA_KU32_MASK_USER_ALL integer 0x000000FF orxCAMERA_KU32_GROUP_ID_NUMBER integer 16 orxRENDER_KZ_CONFIG_SECTION string \"Render\" orxRENDER_KZ_CONFIG_SHOW_FPS string \"ShowFPS\" orxRENDER_KZ_CONFIG_SHOW_PROFILER string \"ShowProfiler\" orxRENDER_KZ_CONFIG_MIN_FREQUENCY string \"MinFrequency\" orxRENDER_KZ_CONFIG_PROFILER_ORIENTATION string \"ProfilerOrientation\" orxRENDER_KZ_CONFIG_CONSOLE_COLOR string \"ConsoleColor\" orxRENDER_KZ_CONFIG_CONSOLE_ALPHA string \"ConsoleAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_BACKGROUND_COLOR string \"ConsoleBackgroundColor\" orxRENDER_KZ_CONFIG_CONSOLE_BACKGROUND_ALPHA string \"ConsoleBackgroundAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_SEPARATOR_COLOR string \"ConsoleSeparatorColor\" orxRENDER_KZ_CONFIG_CONSOLE_SEPARATOR_ALPHA string \"ConsoleSeparatorAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_INPUT_COLOR string \"ConsoleInputColor\" orxRENDER_KZ_CONFIG_CONSOLE_INPUT_ALPHA string \"ConsoleInputAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_COMPLETION_COLOR string \"ConsoleCompletionColor\" orxRENDER_KZ_CONFIG_CONSOLE_COMPLETION_ALPHA string \"ConsoleCompletionAlpha\" orxRENDER_KZ_CONFIG_CONSOLE_LOG_COLOR string \"ConsoleLogColor\" orxRENDER_KZ_CONFIG_CONSOLE_LOG_ALPHA string \"ConsoleLogAlpha\" orxRENDER_KZ_INPUT_SET string \"-=RenderSet=-\" orxRENDER_KZ_INPUT_PROFILER_TOGGLE_HISTORY string \"ProfilerToggleHistory\" orxRENDER_KZ_INPUT_PROFILER_PAUSE string \"ProfilerPause\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_FRAME string \"ProfilerPreviousFrame\" orxRENDER_KZ_INPUT_PROFILER_NEXT_FRAME string \"ProfilerNextFrame\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_DEPTH string \"ProfilerPreviousDepth\" orxRENDER_KZ_INPUT_PROFILER_NEXT_DEPTH string \"ProfilerNextDepth\" orxRENDER_KZ_INPUT_PROFILER_PREVIOUS_THREAD string \"ProfilerPreviousThread\" orxRENDER_KZ_INPUT_PROFILER_NEXT_THREAD string \"ProfilerNextThread\" orxMATH_KF_SQRT_2 number orx2F(1.414213562f) orxMATH_KF_EPSILON number orx2F(0.0001f) orxMATH_KF_TINY_EPSILON number orx2F(1.0e-037f) orxMATH_KF_MAX number orx2F(3.402823466e+38F) orxMATH_KF_2_PI number orx2F(6.283185307f) orxMATH_KF_PI number orx2F(3.141592654f) orxMATH_KF_PI_BY_2 number orx2F(1.570796327f) orxMATH_KF_PI_BY_4 number orx2F(0.785398163f) orxMATH_KF_DEG_TO_RAD number orx2F(3.141592654f / 180.0f) orxMATH_KF_RAD_TO_DEG number orx2F(180.0f / 3.141592654f) orxDISPLAY_KZ_CONFIG_SECTION string \"Display\" orxDISPLAY_KZ_CONFIG_WIDTH string \"ScreenWidth\" orxDISPLAY_KZ_CONFIG_HEIGHT string \"ScreenHeight\" orxDISPLAY_KZ_CONFIG_DEPTH string \"ScreenDepth\" orxDISPLAY_KZ_CONFIG_POSITION string \"ScreenPosition\" orxDISPLAY_KZ_CONFIG_REFRESH_RATE string \"RefreshRate\" orxDISPLAY_KZ_CONFIG_FULLSCREEN string \"FullScreen\" orxDISPLAY_KZ_CONFIG_ALLOW_RESIZE string \"AllowResize\" orxDISPLAY_KZ_CONFIG_DECORATION string \"Decoration\" orxDISPLAY_KZ_CONFIG_TITLE string \"Title\" orxDISPLAY_KZ_CONFIG_SMOOTH string \"Smoothing\" orxDISPLAY_KZ_CONFIG_VSYNC string \"VSync\" orxDISPLAY_KZ_CONFIG_DEPTHBUFFER string \"DepthBuffer\" orxDISPLAY_KZ_CONFIG_SHADER_VERSION string \"ShaderVersion\" orxDISPLAY_KZ_CONFIG_SHADER_EXTENSION_LIST string \"ShaderExtensionList\" orxDISPLAY_KZ_CONFIG_MONITOR string \"Monitor\" orxDISPLAY_KZ_CONFIG_CURSOR string \"Cursor\" orxDISPLAY_KZ_CONFIG_ICON_LIST string \"IconList\" orxDISPLAY_KZ_CONFIG_FRAMEBUFFER_SIZE string \"FramebufferSize\" orxDISPLAY_KZ_CONFIG_TEXTURE_UNIT_NUMBER string \"TextureUnitNumber\" orxDISPLAY_KZ_CONFIG_DRAW_BUFFER_NUMBER string \"DrawBufferNumber\" orxDISPLAY_KZ_CONFIG_MAX_TEXTURE_SIZE string \"MaxTextureSize\" orxDISPLAY_KZ_CONFIG_DEBUG_OUTPUT string \"DebugOutput\" orxCOLOR_KZ_CONFIG_SECTION string \"Color\" orxDISPLAY_KZ_SHADER_SUFFIX_TOP string \"_top\" orxDISPLAY_KZ_SHADER_SUFFIX_LEFT string \"_left\" orxDISPLAY_KZ_SHADER_SUFFIX_BOTTOM string \"_bottom\" orxDISPLAY_KZ_SHADER_SUFFIX_RIGHT string \"_right\" orxDISPLAY_KC_SHADER_EXTENSION_ADD string '+' orxDISPLAY_KC_SHADER_EXTENSION_REMOVE string '-' orxSCREENSHOT_KZ_DEFAULT_DIRECTORY_NAME string \".\" orxSCREENSHOT_KZ_DEFAULT_BASE_NAME string \"screenshot-\" orxSCREENSHOT_KZ_DEFAULT_EXTENSION string \"tga\" orxSCREENSHOT_KU32_DEFAULT_DIGITS integer 4 orxFONT_KZ_DEFAULT_FONT_NAME string \"default\" orxTEXTURE_KZ_RESOURCE_GROUP string \"Texture\" orxTEXTURE_KZ_LOCALE_GROUP string \"Texture\" orxTEXTURE_KZ_SCREEN string \"screen\" orxTEXTURE_KZ_PIXEL string \"pixel\" orxTEXT_KZ_LOCALE_GROUP string \"Text\" orxGRAPHIC_KU32_FLAG_NONE integer 0x00000000 orxGRAPHIC_KU32_FLAG_2D integer 0x00000001 orxGRAPHIC_KU32_FLAG_TEXT integer 0x00000002 orxGRAPHIC_KU32_MASK_TYPE integer 0x00000003 orxGRAPHIC_KU32_FLAG_FLIP_X integer 0x00000004 orxGRAPHIC_KU32_FLAG_FLIP_Y integer 0x00000008 orxGRAPHIC_KU32_MASK_FLIP_BOTH integer 0x0000000C orxGRAPHIC_KU32_FLAG_ALIGN_CENTER integer 0x00000000 orxGRAPHIC_KU32_FLAG_ALIGN_LEFT integer 0x00000010 orxGRAPHIC_KU32_FLAG_ALIGN_RIGHT integer 0x00000020 orxGRAPHIC_KU32_FLAG_ALIGN_TOP integer 0x00000040 orxGRAPHIC_KU32_FLAG_ALIGN_BOTTOM integer 0x00000080 orxGRAPHIC_KU32_FLAG_ALIGN_TRUNCATE integer 0x00000100 orxGRAPHIC_KU32_FLAG_ALIGN_ROUND integer 0x00000200 orxGRAPHIC_KU32_MASK_ALIGN integer 0x000003F0 orxGRAPHIC_KU32_MASK_USER_ALL integer 0x00000FFF orxGRAPHIC_KZ_CONFIG_TEXTURE_NAME string \"Texture\" orxGRAPHIC_KZ_CONFIG_TEXTURE_ORIGIN string \"TextureOrigin\" orxGRAPHIC_KZ_CONFIG_TEXTURE_SIZE string \"TextureSize\" orxGRAPHIC_KZ_CONFIG_TEXT_NAME string \"Text\" orxGRAPHIC_KZ_CONFIG_PIVOT string \"Pivot\" orxGRAPHIC_KZ_CONFIG_COLOR string \"Color\" orxGRAPHIC_KZ_CONFIG_ALPHA string \"Alpha\" orxGRAPHIC_KZ_CONFIG_RGB string \"RGB\" orxGRAPHIC_KZ_CONFIG_HSL string \"HSL\" orxGRAPHIC_KZ_CONFIG_HSV string \"HSV\" orxGRAPHIC_KZ_CONFIG_FLIP string \"Flip\" orxGRAPHIC_KZ_CONFIG_REPEAT string \"Repeat\" orxGRAPHIC_KZ_CONFIG_SMOOTHING string \"Smoothing\" orxGRAPHIC_KZ_CONFIG_BLEND_MODE string \"BlendMode\" orxGRAPHIC_KZ_CONFIG_KEEP_IN_CACHE string \"KeepInCache\" orxANSI_KC_MARKER string 'x1b' orxANSI_KZ_COLOR_RESET string \"x1b[0m\" orxANSI_KZ_COLOR_BOLD_ON string \"x1b[1m\" orxANSI_KZ_COLOR_ITALICS_ON string \"x1b[3m\" orxANSI_KZ_COLOR_UNDERLINE_ON string \"x1b[4m\" orxANSI_KZ_COLOR_BLINK_ON string \"x1b[5m\" orxANSI_KZ_COLOR_INVERSE_ON string \"x1b[7m\" orxANSI_KZ_COLOR_STRIKETHROUGH_ON string \"x1b[9m\" orxANSI_KZ_COLOR_BOLD_OFF string \"x1b[22m\" orxANSI_KZ_COLOR_ITALICS_OFF string \"x1b[23m\" orxANSI_KZ_COLOR_UNDERLINE_OFF string \"x1b[24m\" orxANSI_KZ_COLOR_BLINK_OFF string \"x1b[25m\" orxANSI_KZ_COLOR_INVERSE_OFF string \"x1b[27m\" orxANSI_KZ_COLOR_STRIKETHROUGH_OFF string \"x1b[29m\" orxANSI_KZ_COLOR_FG_BLACK string \"x1b[30m\" orxANSI_KZ_COLOR_FG_RED string \"x1b[31m\" orxANSI_KZ_COLOR_FG_GREEN string \"x1b[32m\" orxANSI_KZ_COLOR_FG_YELLOW string \"x1b[33m\" orxANSI_KZ_COLOR_FG_BLUE string \"x1b[34m\" orxANSI_KZ_COLOR_FG_MAGENTA string \"x1b[35m\" orxANSI_KZ_COLOR_FG_CYAN string \"x1b[36m\" orxANSI_KZ_COLOR_FG_WHITE string \"x1b[37m\" orxANSI_KZ_COLOR_FG_DEFAULT string \"x1b[39m\" orxANSI_KZ_COLOR_BG_BLACK string \"x1b[40m\" orxANSI_KZ_COLOR_BG_RED string \"x1b[41m\" orxANSI_KZ_COLOR_BG_GREEN string \"x1b[42m\" orxANSI_KZ_COLOR_BG_YELLOW string \"x1b[43m\" orxANSI_KZ_COLOR_BG_BLUE string \"x1b[44m\" orxANSI_KZ_COLOR_BG_MAGENTA string \"x1b[45m\" orxANSI_KZ_COLOR_BG_CYAN string \"x1b[46m\" orxANSI_KZ_COLOR_BG_WHITE string \"x1b[47m\" orxANSI_KZ_COLOR_BG_DEFAULT string \"x1b[49m\" orxBODY_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_DEF_KU32_FLAG_2D integer 0x00000001 orxBODY_DEF_KU32_FLAG_DYNAMIC integer 0x00000002 orxBODY_DEF_KU32_FLAG_HIGH_SPEED integer 0x00000004 orxBODY_DEF_KU32_FLAG_FIXED_ROTATION integer 0x00000008 orxBODY_DEF_KU32_FLAG_CAN_MOVE integer 0x00000010 orxBODY_DEF_KU32_FLAG_ALLOW_SLEEP integer 0x00000020 orxBODY_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_PART_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_PART_DEF_KU32_FLAG_SPHERE integer 0x00000001 orxBODY_PART_DEF_KU32_FLAG_BOX integer 0x00000002 orxBODY_PART_DEF_KU32_FLAG_MESH integer 0x00000004 orxBODY_PART_DEF_KU32_FLAG_EDGE integer 0x00000008 orxBODY_PART_DEF_KU32_FLAG_CHAIN integer 0x00000010 orxBODY_PART_DEF_KU32_MASK_TYPE integer 0x0000001F orxBODY_PART_DEF_KU32_FLAG_SOLID integer 0x10000000 orxBODY_PART_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_JOINT_DEF_KU32_FLAG_NONE integer 0x00000000 orxBODY_JOINT_DEF_KU32_FLAG_REVOLUTE integer 0x00000001 orxBODY_JOINT_DEF_KU32_FLAG_PRISMATIC integer 0x00000002 orxBODY_JOINT_DEF_KU32_FLAG_SPRING integer 0x00000004 orxBODY_JOINT_DEF_KU32_FLAG_ROPE integer 0x00000008 orxBODY_JOINT_DEF_KU32_FLAG_PULLEY integer 0x00000010 orxBODY_JOINT_DEF_KU32_FLAG_SUSPENSION integer 0x00000020 orxBODY_JOINT_DEF_KU32_FLAG_WELD integer 0x00000040 orxBODY_JOINT_DEF_KU32_FLAG_FRICTION integer 0x00000080 orxBODY_JOINT_DEF_KU32_FLAG_GEAR integer 0x00000100 orxBODY_JOINT_DEF_KU32_MASK_TYPE integer 0x00000FFF orxBODY_JOINT_DEF_KU32_FLAG_COLLIDE integer 0x10000000 orxBODY_JOINT_DEF_KU32_FLAG_ROTATION_LIMIT integer 0x20000000 orxBODY_JOINT_DEF_KU32_FLAG_MOTOR integer 0x40000000 orxBODY_JOINT_DEF_KU32_FLAG_TRANSLATION_LIMIT integer 0x80000000 orxBODY_JOINT_DEF_KU32_MASK_ALL integer 0xFFFFFFFF orxBODY_PART_DEF_KU32_MESH_VERTEX_NUMBER integer 8 orxPHYSICS_KZ_CONFIG_SECTION string \"Physics\" orxPHYSICS_KZ_CONFIG_GRAVITY string \"Gravity\" orxPHYSICS_KZ_CONFIG_ALLOW_SLEEP string \"AllowSleep\" orxPHYSICS_KZ_CONFIG_ITERATIONS string \"IterationsPerStep\" orxPHYSICS_KZ_CONFIG_RATIO string \"DimensionRatio\" orxPHYSICS_KZ_CONFIG_STEP_FREQUENCY string \"StepFrequency\" orxPHYSICS_KZ_CONFIG_SHOW_DEBUG string \"ShowDebug\" orxPHYSICS_KZ_CONFIG_COLLISION_FLAG_LIST string \"CollisionFlagList\" orxPHYSICS_KZ_CONFIG_INTERPOLATE string \"Interpolate\" orxSTRING_KC_VECTOR_START string '(' orxSTRING_KC_VECTOR_START_ALT string '{' orxSTRING_KC_VECTOR_SEPARATOR string ',' orxSTRING_KC_VECTOR_END string ')' orxSTRING_KC_VECTOR_END_ALT string '}' orxSOUNDSYSTEM_KZ_CONFIG_SECTION string \"SoundSystem\" orxSOUNDSYSTEM_KZ_CONFIG_RATIO string \"DimensionRatio\" orxSOUNDSYSTEM_KZ_CONFIG_MUTE_IN_BACKGROUND string \"MuteInBackground\" orxSOUNDSYSTEM_KZ_CONFIG_LISTENERS string \"Listeners\" orxSOUND_KZ_RESOURCE_GROUP string \"Sound\" orxSOUND_KZ_LOCALE_GROUP string \"Sound\" orxSOUND_KZ_MASTER_BUS string \"master\" orxSOUNDPOINTER_KU32_SOUND_NUMBER integer 4 orxSTRUCTURE_GUID_MAGIC_TAG_DELETED integer 0xDEFACED0DEADC0DEULL orxSTRUCTURE_GUID_MASK_STRUCTURE_ID integer 0x00000000000000FFULL orxSTRUCTURE_GUID_SHIFT_STRUCTURE_ID integer 0 orxSTRUCTURE_GUID_MASK_ITEM_ID integer 0x00000000FFFFFF00ULL orxSTRUCTURE_GUID_SHIFT_ITEM_ID integer 8 orxSTRUCTURE_GUID_MASK_INSTANCE_ID integer 0xFFFFFFFF00000000ULL orxSTRUCTURE_GUID_SHIFT_INSTANCE_ID integer 32 orxSPAWNER_KU32_FLAG_NONE integer 0x00000000 orxSPAWNER_KU32_FLAG_AUTO_DELETE integer 0x00000001 orxSPAWNER_KU32_FLAG_AUTO_RESET integer 0x00000002 orxSPAWNER_KU32_FLAG_USE_ALPHA integer 0x00000004 orxSPAWNER_KU32_FLAG_USE_COLOR integer 0x00000008 orxSPAWNER_KU32_FLAG_USE_ROTATION integer 0x00000010 orxSPAWNER_KU32_FLAG_USE_SCALE integer 0x00000020 orxSPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_OBJECT integer 0x00000040 orxSPAWNER_KU32_FLAG_USE_RELATIVE_SPEED_SPAWNER integer 0x00000080 orxSPAWNER_KU32_MASK_USE_RELATIVE_SPEED integer 0x000000C0 orxSPAWNER_KU32_FLAG_USE_SELF_AS_PARENT integer 0x00000100 orxSPAWNER_KU32_FLAG_CLEAN_ON_DELETE integer 0x00000200 orxSPAWNER_KU32_FLAG_INTERPOLATE integer 0x00000400 orxSPAWNER_KU32_MASK_USER_ALL integer 0x000004FF orxFRAME_KU32_FLAG_NONE integer 0x00000000 orxFRAME_KU32_FLAG_SCROLL_X integer 0x00000001 orxFRAME_KU32_FLAG_SCROLL_Y integer 0x00000002 orxFRAME_KU32_MASK_SCROLL_BOTH integer 0x00000003 orxFRAME_KU32_FLAG_DEPTH_SCALE integer 0x00000004 orxFRAME_KU32_FLAG_FLIP_X integer 0x00000010 orxFRAME_KU32_FLAG_FLIP_Y integer 0x00000020 orxFRAME_KU32_MASK_FLIP_BOTH integer 0x00000030 orxFRAME_KU32_FLAG_IGNORE_NONE integer 0x00000000 orxFRAME_KU32_FLAG_IGNORE_ROTATION integer 0x00000100 orxFRAME_KU32_FLAG_IGNORE_SCALE_X integer 0x00000200 orxFRAME_KU32_FLAG_IGNORE_SCALE_Y integer 0x00000400 orxFRAME_KU32_FLAG_IGNORE_SCALE_Z integer 0x00000800 orxFRAME_KU32_MASK_IGNORE_SCALE integer 0x00000E00 orxFRAME_KU32_FLAG_IGNORE_POSITION_ROTATION integer 0x00001000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_X integer 0x00002000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Y integer 0x00004000 orxFRAME_KU32_FLAG_IGNORE_POSITION_SCALE_Z integer 0x00008000 orxFRAME_KU32_MASK_IGNORE_POSITION_SCALE integer 0x0000E000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_X integer 0x00010000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Y integer 0x00020000 orxFRAME_KU32_FLAG_IGNORE_POSITION_POSITION_Z integer 0x00040000 orxFRAME_KU32_MASK_IGNORE_POSITION_POSITION integer 0x00070000 orxFRAME_KU32_MASK_IGNORE_POSITION integer 0x0007F000 orxFRAME_KU32_MASK_IGNORE_ALL integer 0x0007FF00 orxFRAME_KU32_MASK_USER_ALL integer 0x0007FFFF orxFXPOINTER_KU32_FX_NUMBER integer 8 orxOBJECT_KZ_DEFAULT_GROUP string \"default\" orxFX_SLOT_KU32_FLAG_ABSOLUTE integer 0x00000100 orxFX_SLOT_KU32_FLAG_USE_ROTATION integer 0x00000200 orxFX_SLOT_KU32_FLAG_USE_SCALE integer 0x00000400 orxU64_UNDEFINED integer (orxU64)(-1) orxU32_UNDEFINED integer (orxU32)(-1) orxU16_UNDEFINED integer (orxU16)(-1) orxU8_UNDEFINED integer (orxU8)(-1) orxHANDLE_UNDEFINED orxHANDLE (orxHANDLE)(-1) orxSTRINGID_UNDEFINED integer (orxSTRINGID)(-1)","title":"constants"},{"location":"modules/debug.html","text":"module debug # functions # _break # Signature: _break () Description: Params: Returns: C signature: void _orxDebug_Break () enableLevel # Signature: enableLevel ( level , enable ) Description: Enables/disables a given log level Params: name type description level orxDEBUG_LEVEL Debug level to enable/disable enable boolean Enable / disable Returns: C signature: void _orxDebug_EnableLevel ( orxDEBUG_LEVEL _eLevel , orxBOOL _bEnable ) exit # Signature: exit () Description: Params: Returns: C signature: void _orxDebug_Exit () getFlags # Signature: r1 = getFlags () Description: Gets current debug flags Params: Returns: type description integer Current debug flags C signature: orxU32 _orxDebug_GetFlags () init # Signature: r1 = init () Description: Inits the debug module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS _orxDebug_Init () isLevelEnabled # Signature: r1 = isLevelEnabled ( level ) Description: Is a given log level enabled? Params: name type description level orxDEBUG_LEVEL Concerned debug level Returns: type description boolean C signature: orxBOOL _orxDebug_IsLevelEnabled ( orxDEBUG_LEVEL _eLevel ) log # Signature: log ( level , function , file , line , format ) Description: Logs given debug text Params: name type description level orxDEBUG_LEVEL Debug level associated with this output function string Calling function name file string Calling file name line integer Calling file line format string Printf formatted text Returns: C signature: void _orxDebug_Log ( orxDEBUG_LEVEL _eLevel , const orxSTRING _zFunction , const orxSTRING _zFile , orxU32 _u32Line , const orxSTRING _zFormat , ...) setDebugFile # Signature: setDebugFile ( filename ) Description: Sets debug file name Params: name type description filename string Debug file name Returns: C signature: void _orxDebug_SetDebugFile ( const orxSTRING _zFileName ) setFlags # Signature: setFlags ( add , remove ) Description: Sets current debug flags Params: name type description add integer Flags to add remove integer Flags to remove Returns: C signature: void _orxDebug_SetFlags ( orxU32 _u32Add , orxU32 _u32Remove ) setLogCallback # Signature: setLogCallback ( func ) Description: Sets log callback function, if the callback returns failure, the log entry will be entirely inhibited Params: name type description func lorxLOG_CALLBACK log callback function Returns: setLogFile # Signature: setLogFile ( filename ) Description: Sets log file name Params: name type description filename string Log file name Returns: C signature: void _orxDebug_SetLogFile ( const orxSTRING _zFileName )","title":"debug"},{"location":"modules/debug.html#module-debug","text":"","title":"module debug"},{"location":"modules/debug.html#functions","text":"","title":"functions"},{"location":"modules/debug.html#_break","text":"Signature: _break () Description: Params: Returns: C signature: void _orxDebug_Break ()","title":"_break"},{"location":"modules/debug.html#enablelevel","text":"Signature: enableLevel ( level , enable ) Description: Enables/disables a given log level Params: name type description level orxDEBUG_LEVEL Debug level to enable/disable enable boolean Enable / disable Returns: C signature: void _orxDebug_EnableLevel ( orxDEBUG_LEVEL _eLevel , orxBOOL _bEnable )","title":"enableLevel"},{"location":"modules/debug.html#exit","text":"Signature: exit () Description: Params: Returns: C signature: void _orxDebug_Exit ()","title":"exit"},{"location":"modules/debug.html#getflags","text":"Signature: r1 = getFlags () Description: Gets current debug flags Params: Returns: type description integer Current debug flags C signature: orxU32 _orxDebug_GetFlags ()","title":"getFlags"},{"location":"modules/debug.html#init","text":"Signature: r1 = init () Description: Inits the debug module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS _orxDebug_Init ()","title":"init"},{"location":"modules/debug.html#islevelenabled","text":"Signature: r1 = isLevelEnabled ( level ) Description: Is a given log level enabled? Params: name type description level orxDEBUG_LEVEL Concerned debug level Returns: type description boolean C signature: orxBOOL _orxDebug_IsLevelEnabled ( orxDEBUG_LEVEL _eLevel )","title":"isLevelEnabled"},{"location":"modules/debug.html#log","text":"Signature: log ( level , function , file , line , format ) Description: Logs given debug text Params: name type description level orxDEBUG_LEVEL Debug level associated with this output function string Calling function name file string Calling file name line integer Calling file line format string Printf formatted text Returns: C signature: void _orxDebug_Log ( orxDEBUG_LEVEL _eLevel , const orxSTRING _zFunction , const orxSTRING _zFile , orxU32 _u32Line , const orxSTRING _zFormat , ...)","title":"log"},{"location":"modules/debug.html#setdebugfile","text":"Signature: setDebugFile ( filename ) Description: Sets debug file name Params: name type description filename string Debug file name Returns: C signature: void _orxDebug_SetDebugFile ( const orxSTRING _zFileName )","title":"setDebugFile"},{"location":"modules/debug.html#setflags","text":"Signature: setFlags ( add , remove ) Description: Sets current debug flags Params: name type description add integer Flags to add remove integer Flags to remove Returns: C signature: void _orxDebug_SetFlags ( orxU32 _u32Add , orxU32 _u32Remove )","title":"setFlags"},{"location":"modules/debug.html#setlogcallback","text":"Signature: setLogCallback ( func ) Description: Sets log callback function, if the callback returns failure, the log entry will be entirely inhibited Params: name type description func lorxLOG_CALLBACK log callback function Returns:","title":"setLogCallback"},{"location":"modules/debug.html#setlogfile","text":"Signature: setLogFile ( filename ) Description: Sets log file name Params: name type description filename string Log file name Returns: C signature: void _orxDebug_SetLogFile ( const orxSTRING _zFileName )","title":"setLogFile"},{"location":"modules/display.html","text":"module display # functions # characterGlyph # Signature: r1 = characterGlyph ( fX , fY , fWidth ) Description: Create a new orxCHARACTER_GLYPH Params: name type description fX number fY number fWidth number Returns: type description orxCHARACTER_GLYPH The new instance clearBitmap # Signature: r1 = clearBitmap ( bitmap , color ) Description: Clears a bitmap Params: name type description bitmap orxBITMAP Concerned bitmap, if nil all the current destination bitmaps will be cleared instead color orxRGBA Color to clear the bitmap with Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_ClearBitmap ( orxBITMAP * _pstBitmap , orxRGBA _stColor ) color # Signature: r1 = color ( vRGB , fAlpha ) Description: Create a new orxCOLOR Params: name type description vRGB orxVECTOR fAlpha number Returns: type description orxCOLOR The new instance createBitmap # Signature: r1 = createBitmap ( width , height ) Description: Creates a bitmap Params: name type description width integer Bitmap width height integer Bitmap height Returns: type description orxBITMAP orxBITMAP / nil C signature: orxBITMAP * orxDisplay_CreateBitmap ( orxU32 _u32Width , orxU32 _u32Height ) deleteShader # Signature: deleteShader ( shader ) Description: Deletes a compiled shader Params: name type description shader orxHANDLE Shader to delete Returns: C signature: void orxDisplay_DeleteShader ( orxHANDLE _hShader ) displayTransform # Signature: r1 = displayTransform ( fSrcX , fSrcY , fDstX , fDstY , fRepeatX , fRepeatY , fScaleX , fScaleY , fRotation ) Description: Create a new orxDISPLAY_TRANSFORM Params: name type description fSrcX number fSrcY number fDstX number fDstY number fRepeatX number fRepeatY number fScaleX number fScaleY number fRotation number Returns: type description orxDISPLAY_TRANSFORM The new instance displayVideoMode # Signature: r1 = displayVideoMode ( u32Width , u32Height , u32Depth , u32RefreshRate , bFullScreen ) Description: Create a new orxDISPLAY_VIDEO_MODE Params: name type description u32Width integer u32Height integer u32Depth integer u32RefreshRate integer bFullScreen boolean Returns: type description orxDISPLAY_VIDEO_MODE The new instance drawCircle # Signature: r1 = drawCircle ( center , radius , color , fill ) Description: Draws a circle Params: name type description center orxVECTOR# Center radius number Radius color orxRGBA Color fill boolean If true, the polygon will be filled otherwise only its outline will be drawn Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawCircle ( const orxVECTOR * _pvCenter , orxFLOAT _fRadius , orxRGBA _stColor , orxBOOL _bFill ) drawLine # Signature: r1 = drawLine ( start , end , color ) Description: Draws a line Params: name type description start orxVECTOR# Start point end orxVECTOR# End point color orxRGBA Color Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawLine ( const orxVECTOR * _pvStart , const orxVECTOR * _pvEnd , orxRGBA _stColor ) drawMesh # Signature: r1 = drawMesh ( mesh , bitmap , smoothing , blendmode ) Description: Draws a textured mesh Params: name type description mesh orxDISPLAY_MESH# Mesh to draw, if no primitive and no index buffer is given, separate quads arrangement will be assumed bitmap orxBITMAP# Bitmap to use for texturing, nil to use the current one smoothing orxDISPLAY_SMOOTHING Bitmap smoothing type blendmode orxDISPLAY_BLEND_MODE Blend mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawMesh ( const orxDISPLAY_MESH * _pstMesh , const orxBITMAP * _pstBitmap , orxDISPLAY_SMOOTHING _eSmoothing , orxDISPLAY_BLEND_MODE _eBlendMode ) drawOBox # Signature: r1 = drawOBox ( box , color , fill ) Description: Draws an oriented box Params: name type description box orxOBOX# Box to draw color orxRGBA Color fill boolean If true, the polygon will be filled otherwise only its outline will be drawn Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawOBox ( const orxOBOX * _pstBox , orxRGBA _stColor , orxBOOL _bFill ) drawPolygon # Signature: r1 = drawPolygon ( vertexlist , vertexnumber , color , fill ) Description: Draws a (closed) polygon; filled polygons *need* to be either convex or star-shaped concave with the first vertex part of the polygon's kernel Params: name type description vertexlist table of orxVECTOR List of vertices vertexnumber integer Number of vertices in the list color orxRGBA Color fill boolean If true, the polygon will be filled otherwise only its outline will be drawn Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawPolygon ( const orxVECTOR * _avVertexList , orxU32 _u32VertexNumber , orxRGBA _stColor , orxBOOL _bFill ) drawPolyline # Signature: r1 = drawPolyline ( vertexlist , vertexnumber , color ) Description: Draws a polyline (aka open polygon) Params: name type description vertexlist table of orxVECTOR List of vertices vertexnumber integer Number of vertices in the list color orxRGBA Color Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawPolyline ( const orxVECTOR * _avVertexList , orxU32 _u32VertexNumber , orxRGBA _stColor ) enableVSync # Signature: r1 = enableVSync ( enable ) Description: Enables / disables vertical synchro Params: name type description enable boolean Enable / disable Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_EnableVSync ( orxBOOL _bEnable ) exit # Signature: exit () Description: Exits from the display module Params: Returns: C signature: void orxDisplay_Exit () getBlendModeFromString # Signature: r1 = getBlendModeFromString ( blendmode ) Description: Gets blend mode from a string Params: name type description blendmode string String to evaluate Returns: type description orxDISPLAY_BLEND_MODE orxDISPLAY_BLEND_MODE C signature: orxDISPLAY_BLEND_MODE orxDisplay_GetBlendModeFromString ( const orxSTRING _zBlendMode ) getParameterID # Signature: r1 = getParameterID ( shader , param , index , istexture ) Description: Gets a shader parameter's ID Params: name type description shader orxHANDLE Concerned shader param string Parameter name index integer Parameter index, -1 for non-array types istexture boolean Is parameter a texture? Returns: type description integer Parameter ID C signature: orxS32 orxDisplay_GetParameterID ( orxHANDLE _hShader , const orxSTRING _zParam , orxS32 _s32Index , orxBOOL _bIsTexture ) getScreenBitmap # Signature: r1 = getScreenBitmap () Description: Gets screen bitmap Params: Returns: type description orxBITMAP orxBITMAP / nil C signature: orxBITMAP * orxDisplay_GetScreenBitmap () getScreenSize # Signature: r1 , r2 , r3 = getScreenSize () Description: Gets screen size Params: Returns: type description orxSTATUS success / failure number Screen width number Screen height C signature: orxSTATUS orxDisplay_GetScreenSize ( orxFLOAT * _pfWidth , orxFLOAT * _pfHeight ) getShaderID # Signature: r1 = getShaderID ( shader ) Description: Gets a shader (internal) ID Params: name type description shader orxHANDLE Concerned bitmap Returns: type description integer integer (u32) C signature: orxU32 orxDisplay_GetShaderID ( const orxHANDLE _hShader ) getTempBitmapConst # Signature: r1 = getTempBitmapConst () Description: Gets current temp bitmap Params: Returns: type description orxBITMAP# orxBITMAP, if non-null, load operations are currently asynchronous, otherwise they're synchronous C signature: const orxBITMAP * orxDisplay_GetTempBitmap () getVideoMode # Signature: r1 = getVideoMode ( index ) Description: Gets an available video mode Params: name type description index integer Video mode index, pass _u32Index < orxDisplay_GetVideoModeCount() for an available listed mode, orxU32_UNDEFINED for the the default (desktop) mode and any other value for current mode Returns: type description orxDISPLAY_VIDEO_MODE orxDISPLAY_VIDEO_MODE / nil if invalid C signature: orxDISPLAY_VIDEO_MODE * orxDisplay_GetVideoMode ( orxU32 _u32Index , orxDISPLAY_VIDEO_MODE * _pstVideoMode ) getVideoModeCount # Signature: r1 = getVideoModeCount () Description: Gets available video mode count Params: Returns: type description integer Available video mode count C signature: orxU32 orxDisplay_GetVideoModeCount () hasShaderSupport # Signature: r1 = hasShaderSupport () Description: Has shader support? Params: Returns: type description boolean true / false C signature: orxBOOL orxDisplay_HasShaderSupport () init # Signature: r1 = init () Description: Inits the display module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_Init () isFullScreen # Signature: r1 = isFullScreen () Description: Is in full screen mode? Params: Returns: type description boolean true if full screen, false otherwise C signature: orxBOOL orxDisplay_IsFullScreen () isVSyncEnabled # Signature: r1 = isVSyncEnabled () Description: Is vertical synchro enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxDisplay_IsVSyncEnabled () isVideoModeAvailable # Signature: r1 = isVideoModeAvailable ( videomode ) Description: Is video mode available Params: name type description videomode orxDISPLAY_VIDEO_MODE# Video mode to test Returns: type description boolean true is available, false otherwise C signature: orxBOOL orxDisplay_IsVideoModeAvailable ( const orxDISPLAY_VIDEO_MODE * _pstVideoMode ) loadBitmap # Signature: r1 = loadBitmap ( filename ) Description: Loads a bitmap from file (an event of ID orxDISPLAY_EVENT_BITMAP_LOAD will be sent upon completion, whether the loading is asynchronous or not) Params: name type description filename string Name of the file to load Returns: type description orxBITMAP orxBITMAP * / nil C signature: orxBITMAP * orxDisplay_LoadBitmap ( const orxSTRING _zFileName ) rgba # Signature: r1 = rgba ( u8R , u8G , u8B , u8A ) Description: Create a new orxRGBA Params: name type description u8R integer u8G integer u8B integer u8A integer Returns: type description orxRGBA The new instance rgbaSet # Signature: r1 = rgbaSet ( r , g , b , a ) Description: Sets all components of an orxRGBA Params: name type description r integer Red value to set g integer Green value to set b integer Blue value to set a integer Alpha value to set Returns: type description orxRGBA orxRGBA C signature: orxRGBA orxRGBA_Set ( orxU8 _u8R , orxU8 _u8G , orxU8 _u8B , orxU8 _u8A ) setBitmapClipping # Signature: r1 = setBitmapClipping ( bitmap , tlx , tly , brx , bry ) Description: Sets a bitmap clipping for blitting (both as source and destination) Params: name type description bitmap orxBITMAP Concerned bitmap, nil to target the first destination bitmap tlx integer Top left X coord in pixels tly integer Top left Y coord in pixels brx integer Bottom right X coord in pixels bry integer Bottom right Y coord in pixels Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetBitmapClipping ( orxBITMAP * _pstBitmap , orxU32 _u32TLX , orxU32 _u32TLY , orxU32 _u32BRX , orxU32 _u32BRY ) setBlendMode # Signature: r1 = setBlendMode ( blendmode ) Description: Sets current blend mode Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetBlendMode ( orxDISPLAY_BLEND_MODE _eBlendMode ) setDestinationBitmaps # Signature: r1 = setDestinationBitmaps ( bitmaplist , number ) Description: Sets destination bitmaps Params: name type description bitmaplist table of orxBITMAP Destination bitmap list number integer Number of destination bitmaps Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetDestinationBitmaps ( orxBITMAP ** _apstBitmapList , orxU32 _u32Number ) setFullScreen # Signature: r1 = setFullScreen ( fullscreen ) Description: Sets full screen mode Params: name type description fullscreen boolean true / false Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetFullScreen ( orxBOOL _bFullScreen ) setShaderBitmap # Signature: r1 = setShaderBitmap ( shader , id , value ) Description: Sets a shader parameter (orxBITMAP) Params: name type description shader orxHANDLE Concerned shader id integer ID of parameter to set value orxBITMAP# Value (orxBITMAP) for this parameter Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetShaderBitmap ( orxHANDLE _hShader , orxS32 _s32ID , const orxBITMAP * _pstValue ) setShaderFloat # Signature: r1 = setShaderFloat ( shader , id , value ) Description: Sets a shader parameter (orxFLOAT) Params: name type description shader orxHANDLE Concerned shader id integer ID of parameter to set value number Value (orxFLOAT) for this parameter Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetShaderFloat ( orxHANDLE _hShader , orxS32 _s32ID , orxFLOAT _fValue ) setShaderVector # Signature: r1 = setShaderVector ( shader , id , value ) Description: Sets a shader parameter (orxVECTOR) Params: name type description shader orxHANDLE Concerned shader id integer ID of parameter to set value orxVECTOR# Value (orxVECTOR) for this parameter Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetShaderVector ( orxHANDLE _hShader , orxS32 _s32ID , const orxVECTOR * _pvValue ) setTempBitmap # Signature: r1 = setTempBitmap ( bitmap ) Description: Sets temp bitmap, if a valid temp bitmap is given, load operations will be asynchronous Params: name type description bitmap orxBITMAP# Concerned bitmap, nil for forcing synchronous load operations Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetTempBitmap ( const orxBITMAP * _pstBitmap ) setVideoMode # Signature: r1 = setVideoMode ( videomode ) Description: Sets a video mode Params: name type description videomode orxDISPLAY_VIDEO_MODE# Video mode to set, if width, height, depth or refresh rate are 0, the monitor's default values will be used instead Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetVideoMode ( const orxDISPLAY_VIDEO_MODE * _pstVideoMode ) setup # Signature: setup () Description: Display module setup Params: Returns: C signature: void orxDisplay_Setup () startShader # Signature: r1 = startShader ( shader ) Description: Starts a shader rendering Params: name type description shader orxHANDLE Shader to start Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_StartShader ( const orxHANDLE _hShader ) stopShader # Signature: r1 = stopShader ( shader ) Description: Stops a shader rendering Params: name type description shader orxHANDLE Shader to stop Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_StopShader ( const orxHANDLE _hShader ) swap # Signature: r1 = swap () Description: Swaps/flips bufers (display on screen the current frame) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_Swap () transformBitmap # Signature: r1 = transformBitmap ( src , transform , color , smoothing , blendmode ) Description: Transforms (and blits onto another) a bitmap Params: name type description src orxBITMAP# Bitmap to transform and draw transform orxDISPLAY_TRANSFORM# Transformation info (position, scale, rotation, ...) color orxRGBA Color smoothing orxDISPLAY_SMOOTHING Bitmap smoothing type blendmode orxDISPLAY_BLEND_MODE Blend mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_TransformBitmap ( const orxBITMAP * _pstSrc , const orxDISPLAY_TRANSFORM * _pstTransform , orxRGBA _stColor , orxDISPLAY_SMOOTHING _eSmoothing , orxDISPLAY_BLEND_MODE _eBlendMode ) transformText # Signature: r1 = transformText ( string , font , map , transform , color , smoothing , blendmode ) Description: Transforms a text (onto a bitmap) Params: name type description string string String to display font orxBITMAP# Font bitmap map orxCHARACTER_MAP# Character map transform orxDISPLAY_TRANSFORM# Transformation info (position, scale, rotation, ...) color orxRGBA Color smoothing orxDISPLAY_SMOOTHING Bitmap smoothing type blendmode orxDISPLAY_BLEND_MODE Blend mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_TransformText ( const orxSTRING _zString , const orxBITMAP * _pstFont , const orxCHARACTER_MAP * _pstMap , const orxDISPLAY_TRANSFORM * _pstTransform , orxRGBA _stColor , orxDISPLAY_SMOOTHING _eSmoothing , orxDISPLAY_BLEND_MODE _eBlendMode )","title":"display"},{"location":"modules/display.html#module-display","text":"","title":"module display"},{"location":"modules/display.html#functions","text":"","title":"functions"},{"location":"modules/display.html#characterglyph","text":"Signature: r1 = characterGlyph ( fX , fY , fWidth ) Description: Create a new orxCHARACTER_GLYPH Params: name type description fX number fY number fWidth number Returns: type description orxCHARACTER_GLYPH The new instance","title":"characterGlyph"},{"location":"modules/display.html#clearbitmap","text":"Signature: r1 = clearBitmap ( bitmap , color ) Description: Clears a bitmap Params: name type description bitmap orxBITMAP Concerned bitmap, if nil all the current destination bitmaps will be cleared instead color orxRGBA Color to clear the bitmap with Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_ClearBitmap ( orxBITMAP * _pstBitmap , orxRGBA _stColor )","title":"clearBitmap"},{"location":"modules/display.html#color","text":"Signature: r1 = color ( vRGB , fAlpha ) Description: Create a new orxCOLOR Params: name type description vRGB orxVECTOR fAlpha number Returns: type description orxCOLOR The new instance","title":"color"},{"location":"modules/display.html#createbitmap","text":"Signature: r1 = createBitmap ( width , height ) Description: Creates a bitmap Params: name type description width integer Bitmap width height integer Bitmap height Returns: type description orxBITMAP orxBITMAP / nil C signature: orxBITMAP * orxDisplay_CreateBitmap ( orxU32 _u32Width , orxU32 _u32Height )","title":"createBitmap"},{"location":"modules/display.html#deleteshader","text":"Signature: deleteShader ( shader ) Description: Deletes a compiled shader Params: name type description shader orxHANDLE Shader to delete Returns: C signature: void orxDisplay_DeleteShader ( orxHANDLE _hShader )","title":"deleteShader"},{"location":"modules/display.html#displaytransform","text":"Signature: r1 = displayTransform ( fSrcX , fSrcY , fDstX , fDstY , fRepeatX , fRepeatY , fScaleX , fScaleY , fRotation ) Description: Create a new orxDISPLAY_TRANSFORM Params: name type description fSrcX number fSrcY number fDstX number fDstY number fRepeatX number fRepeatY number fScaleX number fScaleY number fRotation number Returns: type description orxDISPLAY_TRANSFORM The new instance","title":"displayTransform"},{"location":"modules/display.html#displayvideomode","text":"Signature: r1 = displayVideoMode ( u32Width , u32Height , u32Depth , u32RefreshRate , bFullScreen ) Description: Create a new orxDISPLAY_VIDEO_MODE Params: name type description u32Width integer u32Height integer u32Depth integer u32RefreshRate integer bFullScreen boolean Returns: type description orxDISPLAY_VIDEO_MODE The new instance","title":"displayVideoMode"},{"location":"modules/display.html#drawcircle","text":"Signature: r1 = drawCircle ( center , radius , color , fill ) Description: Draws a circle Params: name type description center orxVECTOR# Center radius number Radius color orxRGBA Color fill boolean If true, the polygon will be filled otherwise only its outline will be drawn Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawCircle ( const orxVECTOR * _pvCenter , orxFLOAT _fRadius , orxRGBA _stColor , orxBOOL _bFill )","title":"drawCircle"},{"location":"modules/display.html#drawline","text":"Signature: r1 = drawLine ( start , end , color ) Description: Draws a line Params: name type description start orxVECTOR# Start point end orxVECTOR# End point color orxRGBA Color Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawLine ( const orxVECTOR * _pvStart , const orxVECTOR * _pvEnd , orxRGBA _stColor )","title":"drawLine"},{"location":"modules/display.html#drawmesh","text":"Signature: r1 = drawMesh ( mesh , bitmap , smoothing , blendmode ) Description: Draws a textured mesh Params: name type description mesh orxDISPLAY_MESH# Mesh to draw, if no primitive and no index buffer is given, separate quads arrangement will be assumed bitmap orxBITMAP# Bitmap to use for texturing, nil to use the current one smoothing orxDISPLAY_SMOOTHING Bitmap smoothing type blendmode orxDISPLAY_BLEND_MODE Blend mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawMesh ( const orxDISPLAY_MESH * _pstMesh , const orxBITMAP * _pstBitmap , orxDISPLAY_SMOOTHING _eSmoothing , orxDISPLAY_BLEND_MODE _eBlendMode )","title":"drawMesh"},{"location":"modules/display.html#drawobox","text":"Signature: r1 = drawOBox ( box , color , fill ) Description: Draws an oriented box Params: name type description box orxOBOX# Box to draw color orxRGBA Color fill boolean If true, the polygon will be filled otherwise only its outline will be drawn Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawOBox ( const orxOBOX * _pstBox , orxRGBA _stColor , orxBOOL _bFill )","title":"drawOBox"},{"location":"modules/display.html#drawpolygon","text":"Signature: r1 = drawPolygon ( vertexlist , vertexnumber , color , fill ) Description: Draws a (closed) polygon; filled polygons *need* to be either convex or star-shaped concave with the first vertex part of the polygon's kernel Params: name type description vertexlist table of orxVECTOR List of vertices vertexnumber integer Number of vertices in the list color orxRGBA Color fill boolean If true, the polygon will be filled otherwise only its outline will be drawn Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawPolygon ( const orxVECTOR * _avVertexList , orxU32 _u32VertexNumber , orxRGBA _stColor , orxBOOL _bFill )","title":"drawPolygon"},{"location":"modules/display.html#drawpolyline","text":"Signature: r1 = drawPolyline ( vertexlist , vertexnumber , color ) Description: Draws a polyline (aka open polygon) Params: name type description vertexlist table of orxVECTOR List of vertices vertexnumber integer Number of vertices in the list color orxRGBA Color Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_DrawPolyline ( const orxVECTOR * _avVertexList , orxU32 _u32VertexNumber , orxRGBA _stColor )","title":"drawPolyline"},{"location":"modules/display.html#enablevsync","text":"Signature: r1 = enableVSync ( enable ) Description: Enables / disables vertical synchro Params: name type description enable boolean Enable / disable Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_EnableVSync ( orxBOOL _bEnable )","title":"enableVSync"},{"location":"modules/display.html#exit","text":"Signature: exit () Description: Exits from the display module Params: Returns: C signature: void orxDisplay_Exit ()","title":"exit"},{"location":"modules/display.html#getblendmodefromstring","text":"Signature: r1 = getBlendModeFromString ( blendmode ) Description: Gets blend mode from a string Params: name type description blendmode string String to evaluate Returns: type description orxDISPLAY_BLEND_MODE orxDISPLAY_BLEND_MODE C signature: orxDISPLAY_BLEND_MODE orxDisplay_GetBlendModeFromString ( const orxSTRING _zBlendMode )","title":"getBlendModeFromString"},{"location":"modules/display.html#getparameterid","text":"Signature: r1 = getParameterID ( shader , param , index , istexture ) Description: Gets a shader parameter's ID Params: name type description shader orxHANDLE Concerned shader param string Parameter name index integer Parameter index, -1 for non-array types istexture boolean Is parameter a texture? Returns: type description integer Parameter ID C signature: orxS32 orxDisplay_GetParameterID ( orxHANDLE _hShader , const orxSTRING _zParam , orxS32 _s32Index , orxBOOL _bIsTexture )","title":"getParameterID"},{"location":"modules/display.html#getscreenbitmap","text":"Signature: r1 = getScreenBitmap () Description: Gets screen bitmap Params: Returns: type description orxBITMAP orxBITMAP / nil C signature: orxBITMAP * orxDisplay_GetScreenBitmap ()","title":"getScreenBitmap"},{"location":"modules/display.html#getscreensize","text":"Signature: r1 , r2 , r3 = getScreenSize () Description: Gets screen size Params: Returns: type description orxSTATUS success / failure number Screen width number Screen height C signature: orxSTATUS orxDisplay_GetScreenSize ( orxFLOAT * _pfWidth , orxFLOAT * _pfHeight )","title":"getScreenSize"},{"location":"modules/display.html#getshaderid","text":"Signature: r1 = getShaderID ( shader ) Description: Gets a shader (internal) ID Params: name type description shader orxHANDLE Concerned bitmap Returns: type description integer integer (u32) C signature: orxU32 orxDisplay_GetShaderID ( const orxHANDLE _hShader )","title":"getShaderID"},{"location":"modules/display.html#gettempbitmapconst","text":"Signature: r1 = getTempBitmapConst () Description: Gets current temp bitmap Params: Returns: type description orxBITMAP# orxBITMAP, if non-null, load operations are currently asynchronous, otherwise they're synchronous C signature: const orxBITMAP * orxDisplay_GetTempBitmap ()","title":"getTempBitmapConst"},{"location":"modules/display.html#getvideomode","text":"Signature: r1 = getVideoMode ( index ) Description: Gets an available video mode Params: name type description index integer Video mode index, pass _u32Index < orxDisplay_GetVideoModeCount() for an available listed mode, orxU32_UNDEFINED for the the default (desktop) mode and any other value for current mode Returns: type description orxDISPLAY_VIDEO_MODE orxDISPLAY_VIDEO_MODE / nil if invalid C signature: orxDISPLAY_VIDEO_MODE * orxDisplay_GetVideoMode ( orxU32 _u32Index , orxDISPLAY_VIDEO_MODE * _pstVideoMode )","title":"getVideoMode"},{"location":"modules/display.html#getvideomodecount","text":"Signature: r1 = getVideoModeCount () Description: Gets available video mode count Params: Returns: type description integer Available video mode count C signature: orxU32 orxDisplay_GetVideoModeCount ()","title":"getVideoModeCount"},{"location":"modules/display.html#hasshadersupport","text":"Signature: r1 = hasShaderSupport () Description: Has shader support? Params: Returns: type description boolean true / false C signature: orxBOOL orxDisplay_HasShaderSupport ()","title":"hasShaderSupport"},{"location":"modules/display.html#init","text":"Signature: r1 = init () Description: Inits the display module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_Init ()","title":"init"},{"location":"modules/display.html#isfullscreen","text":"Signature: r1 = isFullScreen () Description: Is in full screen mode? Params: Returns: type description boolean true if full screen, false otherwise C signature: orxBOOL orxDisplay_IsFullScreen ()","title":"isFullScreen"},{"location":"modules/display.html#isvsyncenabled","text":"Signature: r1 = isVSyncEnabled () Description: Is vertical synchro enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxDisplay_IsVSyncEnabled ()","title":"isVSyncEnabled"},{"location":"modules/display.html#isvideomodeavailable","text":"Signature: r1 = isVideoModeAvailable ( videomode ) Description: Is video mode available Params: name type description videomode orxDISPLAY_VIDEO_MODE# Video mode to test Returns: type description boolean true is available, false otherwise C signature: orxBOOL orxDisplay_IsVideoModeAvailable ( const orxDISPLAY_VIDEO_MODE * _pstVideoMode )","title":"isVideoModeAvailable"},{"location":"modules/display.html#loadbitmap","text":"Signature: r1 = loadBitmap ( filename ) Description: Loads a bitmap from file (an event of ID orxDISPLAY_EVENT_BITMAP_LOAD will be sent upon completion, whether the loading is asynchronous or not) Params: name type description filename string Name of the file to load Returns: type description orxBITMAP orxBITMAP * / nil C signature: orxBITMAP * orxDisplay_LoadBitmap ( const orxSTRING _zFileName )","title":"loadBitmap"},{"location":"modules/display.html#rgba","text":"Signature: r1 = rgba ( u8R , u8G , u8B , u8A ) Description: Create a new orxRGBA Params: name type description u8R integer u8G integer u8B integer u8A integer Returns: type description orxRGBA The new instance","title":"rgba"},{"location":"modules/display.html#rgbaset","text":"Signature: r1 = rgbaSet ( r , g , b , a ) Description: Sets all components of an orxRGBA Params: name type description r integer Red value to set g integer Green value to set b integer Blue value to set a integer Alpha value to set Returns: type description orxRGBA orxRGBA C signature: orxRGBA orxRGBA_Set ( orxU8 _u8R , orxU8 _u8G , orxU8 _u8B , orxU8 _u8A )","title":"rgbaSet"},{"location":"modules/display.html#setbitmapclipping","text":"Signature: r1 = setBitmapClipping ( bitmap , tlx , tly , brx , bry ) Description: Sets a bitmap clipping for blitting (both as source and destination) Params: name type description bitmap orxBITMAP Concerned bitmap, nil to target the first destination bitmap tlx integer Top left X coord in pixels tly integer Top left Y coord in pixels brx integer Bottom right X coord in pixels bry integer Bottom right Y coord in pixels Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetBitmapClipping ( orxBITMAP * _pstBitmap , orxU32 _u32TLX , orxU32 _u32TLY , orxU32 _u32BRX , orxU32 _u32BRY )","title":"setBitmapClipping"},{"location":"modules/display.html#setblendmode","text":"Signature: r1 = setBlendMode ( blendmode ) Description: Sets current blend mode Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetBlendMode ( orxDISPLAY_BLEND_MODE _eBlendMode )","title":"setBlendMode"},{"location":"modules/display.html#setdestinationbitmaps","text":"Signature: r1 = setDestinationBitmaps ( bitmaplist , number ) Description: Sets destination bitmaps Params: name type description bitmaplist table of orxBITMAP Destination bitmap list number integer Number of destination bitmaps Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetDestinationBitmaps ( orxBITMAP ** _apstBitmapList , orxU32 _u32Number )","title":"setDestinationBitmaps"},{"location":"modules/display.html#setfullscreen","text":"Signature: r1 = setFullScreen ( fullscreen ) Description: Sets full screen mode Params: name type description fullscreen boolean true / false Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetFullScreen ( orxBOOL _bFullScreen )","title":"setFullScreen"},{"location":"modules/display.html#setshaderbitmap","text":"Signature: r1 = setShaderBitmap ( shader , id , value ) Description: Sets a shader parameter (orxBITMAP) Params: name type description shader orxHANDLE Concerned shader id integer ID of parameter to set value orxBITMAP# Value (orxBITMAP) for this parameter Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetShaderBitmap ( orxHANDLE _hShader , orxS32 _s32ID , const orxBITMAP * _pstValue )","title":"setShaderBitmap"},{"location":"modules/display.html#setshaderfloat","text":"Signature: r1 = setShaderFloat ( shader , id , value ) Description: Sets a shader parameter (orxFLOAT) Params: name type description shader orxHANDLE Concerned shader id integer ID of parameter to set value number Value (orxFLOAT) for this parameter Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetShaderFloat ( orxHANDLE _hShader , orxS32 _s32ID , orxFLOAT _fValue )","title":"setShaderFloat"},{"location":"modules/display.html#setshadervector","text":"Signature: r1 = setShaderVector ( shader , id , value ) Description: Sets a shader parameter (orxVECTOR) Params: name type description shader orxHANDLE Concerned shader id integer ID of parameter to set value orxVECTOR# Value (orxVECTOR) for this parameter Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetShaderVector ( orxHANDLE _hShader , orxS32 _s32ID , const orxVECTOR * _pvValue )","title":"setShaderVector"},{"location":"modules/display.html#settempbitmap","text":"Signature: r1 = setTempBitmap ( bitmap ) Description: Sets temp bitmap, if a valid temp bitmap is given, load operations will be asynchronous Params: name type description bitmap orxBITMAP# Concerned bitmap, nil for forcing synchronous load operations Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetTempBitmap ( const orxBITMAP * _pstBitmap )","title":"setTempBitmap"},{"location":"modules/display.html#setvideomode","text":"Signature: r1 = setVideoMode ( videomode ) Description: Sets a video mode Params: name type description videomode orxDISPLAY_VIDEO_MODE# Video mode to set, if width, height, depth or refresh rate are 0, the monitor's default values will be used instead Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetVideoMode ( const orxDISPLAY_VIDEO_MODE * _pstVideoMode )","title":"setVideoMode"},{"location":"modules/display.html#setup","text":"Signature: setup () Description: Display module setup Params: Returns: C signature: void orxDisplay_Setup ()","title":"setup"},{"location":"modules/display.html#startshader","text":"Signature: r1 = startShader ( shader ) Description: Starts a shader rendering Params: name type description shader orxHANDLE Shader to start Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_StartShader ( const orxHANDLE _hShader )","title":"startShader"},{"location":"modules/display.html#stopshader","text":"Signature: r1 = stopShader ( shader ) Description: Stops a shader rendering Params: name type description shader orxHANDLE Shader to stop Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_StopShader ( const orxHANDLE _hShader )","title":"stopShader"},{"location":"modules/display.html#swap","text":"Signature: r1 = swap () Description: Swaps/flips bufers (display on screen the current frame) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_Swap ()","title":"swap"},{"location":"modules/display.html#transformbitmap","text":"Signature: r1 = transformBitmap ( src , transform , color , smoothing , blendmode ) Description: Transforms (and blits onto another) a bitmap Params: name type description src orxBITMAP# Bitmap to transform and draw transform orxDISPLAY_TRANSFORM# Transformation info (position, scale, rotation, ...) color orxRGBA Color smoothing orxDISPLAY_SMOOTHING Bitmap smoothing type blendmode orxDISPLAY_BLEND_MODE Blend mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_TransformBitmap ( const orxBITMAP * _pstSrc , const orxDISPLAY_TRANSFORM * _pstTransform , orxRGBA _stColor , orxDISPLAY_SMOOTHING _eSmoothing , orxDISPLAY_BLEND_MODE _eBlendMode )","title":"transformBitmap"},{"location":"modules/display.html#transformtext","text":"Signature: r1 = transformText ( string , font , map , transform , color , smoothing , blendmode ) Description: Transforms a text (onto a bitmap) Params: name type description string string String to display font orxBITMAP# Font bitmap map orxCHARACTER_MAP# Character map transform orxDISPLAY_TRANSFORM# Transformation info (position, scale, rotation, ...) color orxRGBA Color smoothing orxDISPLAY_SMOOTHING Bitmap smoothing type blendmode orxDISPLAY_BLEND_MODE Blend mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_TransformText ( const orxSTRING _zString , const orxBITMAP * _pstFont , const orxCHARACTER_MAP * _pstMap , const orxDISPLAY_TRANSFORM * _pstTransform , orxRGBA _stColor , orxDISPLAY_SMOOTHING _eSmoothing , orxDISPLAY_BLEND_MODE _eBlendMode )","title":"transformText"},{"location":"modules/event.html","text":"module event # functions # exit # Signature: exit () Description: Exits from the event Module Params: Returns: C signature: void orxEvent_Exit () init # Signature: r1 = init () Description: Initializes the event Module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxEvent_Init () isSending # Signature: r1 = isSending () Description: Is currently sending an event? Params: Returns: type description boolean true / false C signature: orxBOOL orxEvent_IsSending () sendShort # Signature: r1 = sendShort ( eventtype , eventid ) Description: Sends a simple event Params: name type description eventtype orxEVENT_TYPE Event type eventid string Event ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxEvent_SendShort ( orxEVENT_TYPE _eEventType , orxENUM _eEventID ) setup # Signature: setup () Description: Event module setup Params: Returns: C signature: void orxEvent_Setup ()","title":"event"},{"location":"modules/event.html#module-event","text":"","title":"module event"},{"location":"modules/event.html#functions","text":"","title":"functions"},{"location":"modules/event.html#exit","text":"Signature: exit () Description: Exits from the event Module Params: Returns: C signature: void orxEvent_Exit ()","title":"exit"},{"location":"modules/event.html#init","text":"Signature: r1 = init () Description: Initializes the event Module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxEvent_Init ()","title":"init"},{"location":"modules/event.html#issending","text":"Signature: r1 = isSending () Description: Is currently sending an event? Params: Returns: type description boolean true / false C signature: orxBOOL orxEvent_IsSending ()","title":"isSending"},{"location":"modules/event.html#sendshort","text":"Signature: r1 = sendShort ( eventtype , eventid ) Description: Sends a simple event Params: name type description eventtype orxEVENT_TYPE Event type eventid string Event ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxEvent_SendShort ( orxEVENT_TYPE _eEventType , orxENUM _eEventID )","title":"sendShort"},{"location":"modules/event.html#setup","text":"Signature: setup () Description: Event module setup Params: Returns: C signature: void orxEvent_Setup ()","title":"setup"},{"location":"modules/file.html","text":"module file # functions # delete # Signature: r1 = delete ( filename ) Description: Deletes a file Params: name type description filename string Full file's path to delete Returns: type description orxSTATUS success upon success, failure otherwise C signature: orxSTATUS orxFile_Delete ( const orxSTRING _zFileName ) exists # Signature: r1 = exists ( filename ) Description: Checks if a file/directory exists Params: name type description filename string Concerned file/directory Returns: type description boolean false if _zFileName doesn't exist, true otherwise C signature: orxBOOL orxFile_Exists ( const orxSTRING _zFileName ) exit # Signature: exit () Description: Exits from the File Module Params: Returns: C signature: void orxFile_Exit () fileInfo # Signature: r1 = fileInfo ( s64Size , s64TimeStamp , u32Flags , hInternal , zName , zPattern , zPath , zFullName ) Description: Create a new orxFILE_INFO Params: name type description s64Size integer s64TimeStamp integer u32Flags integer hInternal orxHANDLE zName string (length-limited) zPattern string (length-limited) zPath string (length-limited) zFullName string (length-limited) Returns: type description orxFILE_INFO The new instance findFirst # Signature: r1 , r2 = findFirst ( searchpattern ) Description: Starts a new file search: finds the first file/directory that will match to the given pattern (ex: /bin/foo*) Params: name type description searchpattern string Pattern used for file/directory search Returns: type description orxSTATUS success / failure orxFILE_INFO Information about the first file found C signature: orxSTATUS orxFile_FindFirst ( const orxSTRING _zSearchPattern , orxFILE_INFO * _pstFileInfo ) getApplicationSaveDirectory # Signature: r1 = getApplicationSaveDirectory ( subpath ) Description: Gets current user's application save directory using linux separators (without trailing separator) Params: name type description subpath string Sub-path to append to the application save directory, nil for none Returns: type description string Current user's application save directory, use it immediately or copy it as it will be modified by the next call to orxFile_GetHomeDirectory() or orxFile_GetApplicationSaveDirectory() C signature: const orxSTRING orxFile_GetApplicationSaveDirectory ( const orxSTRING _zSubPath ) getHomeDirectory # Signature: r1 = getHomeDirectory ( subpath ) Description: Gets current user's home directory using linux separators (without trailing separator) Params: name type description subpath string Sub-path to append to the home directory, nil for none Returns: type description string Current user's home directory, use it immediately or copy it as will be modified by the next call to orxFile_GetHomeDirectory() or orxFile_GetApplicationSaveDirectory() C signature: const orxSTRING orxFile_GetHomeDirectory ( const orxSTRING _zSubPath ) getInfo # Signature: r1 , r2 = getInfo ( filename ) Description: Retrieves a file/directory information Params: name type description filename string Concerned file/directory name Returns: type description orxSTATUS success / failure orxFILE_INFO Information of the file/directory C signature: orxSTATUS orxFile_GetInfo ( const orxSTRING _zFileName , orxFILE_INFO * _pstFileInfo ) init # Signature: r1 = init () Description: Inits the File Module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxFile_Init () makeDirectory # Signature: r1 = makeDirectory ( name ) Description: Makes a directory, works recursively if needed Params: name type description name string Name of the directory to make Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFile_MakeDirectory ( const orxSTRING _zName ) open # Signature: r1 = open ( filename , openflags ) Description: Opens a file for later read or write operation Params: name type description filename string Full file's path to open openflags integer List of used flags when opened Returns: type description orxFILE a File pointer (or nil if an error has occurred) C signature: orxFILE * orxFile_Open ( const orxSTRING _zFileName , orxU32 _u32OpenFlags ) read # Signature: r1 = read ( readdata , elemsize , nbelem , file ) Description: Reads data from a file Params: name type description readdata [in,out] void* Buffer that will contain read data elemsize integer Size of 1 element nbelem integer Number of elements file orxFILE Pointer to the file descriptor Returns: type description integer Returns the number of read elements (not bytes) C signature: orxS64 orxFile_Read ( void * _pReadData , orxS64 _s64ElemSize , orxS64 _s64NbElem , orxFILE * _pstFile ) remove # Signature: r1 = remove ( filename ) Description: Removes a file or an empty directory Params: name type description filename string Concerned file / directory Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFile_Remove ( const orxSTRING _zFileName ) setup # Signature: setup () Description: Params: Returns: C signature: void orxFile_Setup () write # Signature: r1 = write ( datatowrite , elemsize , nbelem , file ) Description: Writes data to a file Params: name type description datatowrite void*# Buffer that contains the data to write elemsize integer Size of 1 element nbelem integer Number of elements file orxFILE Pointer to the file descriptor Returns: type description integer Returns the number of written elements (not bytes) C signature: orxS64 orxFile_Write ( const void * _pDataToWrite , orxS64 _s64ElemSize , orxS64 _s64NbElem , orxFILE * _pstFile )","title":"file"},{"location":"modules/file.html#module-file","text":"","title":"module file"},{"location":"modules/file.html#functions","text":"","title":"functions"},{"location":"modules/file.html#delete","text":"Signature: r1 = delete ( filename ) Description: Deletes a file Params: name type description filename string Full file's path to delete Returns: type description orxSTATUS success upon success, failure otherwise C signature: orxSTATUS orxFile_Delete ( const orxSTRING _zFileName )","title":"delete"},{"location":"modules/file.html#exists","text":"Signature: r1 = exists ( filename ) Description: Checks if a file/directory exists Params: name type description filename string Concerned file/directory Returns: type description boolean false if _zFileName doesn't exist, true otherwise C signature: orxBOOL orxFile_Exists ( const orxSTRING _zFileName )","title":"exists"},{"location":"modules/file.html#exit","text":"Signature: exit () Description: Exits from the File Module Params: Returns: C signature: void orxFile_Exit ()","title":"exit"},{"location":"modules/file.html#fileinfo","text":"Signature: r1 = fileInfo ( s64Size , s64TimeStamp , u32Flags , hInternal , zName , zPattern , zPath , zFullName ) Description: Create a new orxFILE_INFO Params: name type description s64Size integer s64TimeStamp integer u32Flags integer hInternal orxHANDLE zName string (length-limited) zPattern string (length-limited) zPath string (length-limited) zFullName string (length-limited) Returns: type description orxFILE_INFO The new instance","title":"fileInfo"},{"location":"modules/file.html#findfirst","text":"Signature: r1 , r2 = findFirst ( searchpattern ) Description: Starts a new file search: finds the first file/directory that will match to the given pattern (ex: /bin/foo*) Params: name type description searchpattern string Pattern used for file/directory search Returns: type description orxSTATUS success / failure orxFILE_INFO Information about the first file found C signature: orxSTATUS orxFile_FindFirst ( const orxSTRING _zSearchPattern , orxFILE_INFO * _pstFileInfo )","title":"findFirst"},{"location":"modules/file.html#getapplicationsavedirectory","text":"Signature: r1 = getApplicationSaveDirectory ( subpath ) Description: Gets current user's application save directory using linux separators (without trailing separator) Params: name type description subpath string Sub-path to append to the application save directory, nil for none Returns: type description string Current user's application save directory, use it immediately or copy it as it will be modified by the next call to orxFile_GetHomeDirectory() or orxFile_GetApplicationSaveDirectory() C signature: const orxSTRING orxFile_GetApplicationSaveDirectory ( const orxSTRING _zSubPath )","title":"getApplicationSaveDirectory"},{"location":"modules/file.html#gethomedirectory","text":"Signature: r1 = getHomeDirectory ( subpath ) Description: Gets current user's home directory using linux separators (without trailing separator) Params: name type description subpath string Sub-path to append to the home directory, nil for none Returns: type description string Current user's home directory, use it immediately or copy it as will be modified by the next call to orxFile_GetHomeDirectory() or orxFile_GetApplicationSaveDirectory() C signature: const orxSTRING orxFile_GetHomeDirectory ( const orxSTRING _zSubPath )","title":"getHomeDirectory"},{"location":"modules/file.html#getinfo","text":"Signature: r1 , r2 = getInfo ( filename ) Description: Retrieves a file/directory information Params: name type description filename string Concerned file/directory name Returns: type description orxSTATUS success / failure orxFILE_INFO Information of the file/directory C signature: orxSTATUS orxFile_GetInfo ( const orxSTRING _zFileName , orxFILE_INFO * _pstFileInfo )","title":"getInfo"},{"location":"modules/file.html#init","text":"Signature: r1 = init () Description: Inits the File Module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxFile_Init ()","title":"init"},{"location":"modules/file.html#makedirectory","text":"Signature: r1 = makeDirectory ( name ) Description: Makes a directory, works recursively if needed Params: name type description name string Name of the directory to make Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFile_MakeDirectory ( const orxSTRING _zName )","title":"makeDirectory"},{"location":"modules/file.html#open","text":"Signature: r1 = open ( filename , openflags ) Description: Opens a file for later read or write operation Params: name type description filename string Full file's path to open openflags integer List of used flags when opened Returns: type description orxFILE a File pointer (or nil if an error has occurred) C signature: orxFILE * orxFile_Open ( const orxSTRING _zFileName , orxU32 _u32OpenFlags )","title":"open"},{"location":"modules/file.html#read","text":"Signature: r1 = read ( readdata , elemsize , nbelem , file ) Description: Reads data from a file Params: name type description readdata [in,out] void* Buffer that will contain read data elemsize integer Size of 1 element nbelem integer Number of elements file orxFILE Pointer to the file descriptor Returns: type description integer Returns the number of read elements (not bytes) C signature: orxS64 orxFile_Read ( void * _pReadData , orxS64 _s64ElemSize , orxS64 _s64NbElem , orxFILE * _pstFile )","title":"read"},{"location":"modules/file.html#remove","text":"Signature: r1 = remove ( filename ) Description: Removes a file or an empty directory Params: name type description filename string Concerned file / directory Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFile_Remove ( const orxSTRING _zFileName )","title":"remove"},{"location":"modules/file.html#setup","text":"Signature: setup () Description: Params: Returns: C signature: void orxFile_Setup ()","title":"setup"},{"location":"modules/file.html#write","text":"Signature: r1 = write ( datatowrite , elemsize , nbelem , file ) Description: Writes data to a file Params: name type description datatowrite void*# Buffer that contains the data to write elemsize integer Size of 1 element nbelem integer Number of elements file orxFILE Pointer to the file descriptor Returns: type description integer Returns the number of written elements (not bytes) C signature: orxS64 orxFile_Write ( const void * _pDataToWrite , orxS64 _s64ElemSize , orxS64 _s64NbElem , orxFILE * _pstFile )","title":"write"},{"location":"modules/font.html","text":"module font # functions # create # Signature: r1 = create () Description: Creates an empty font Params: Returns: type description orxFONT orxFONT / nil C signature: orxFONT * orxFont_Create () createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates a font from config Params: name type description configid string Config ID Returns: type description orxFONT orxFONT / nil C signature: orxFONT * orxFont_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the font module Params: Returns: C signature: void orxFont_Exit () getDefaultFontConst # Signature: r1 = getDefaultFontConst () Description: Gets default font Params: Returns: type description orxFONT# Default font / nil C signature: const orxFONT * orxFont_GetDefaultFont () init # Signature: r1 = init () Description: Inits the font module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_Init () setup # Signature: setup () Description: Setups the font module Params: Returns: C signature: void orxFont_Setup ()","title":"font"},{"location":"modules/font.html#module-font","text":"","title":"module font"},{"location":"modules/font.html#functions","text":"","title":"functions"},{"location":"modules/font.html#create","text":"Signature: r1 = create () Description: Creates an empty font Params: Returns: type description orxFONT orxFONT / nil C signature: orxFONT * orxFont_Create ()","title":"create"},{"location":"modules/font.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates a font from config Params: name type description configid string Config ID Returns: type description orxFONT orxFONT / nil C signature: orxFONT * orxFont_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/font.html#exit","text":"Signature: exit () Description: Exits from the font module Params: Returns: C signature: void orxFont_Exit ()","title":"exit"},{"location":"modules/font.html#getdefaultfontconst","text":"Signature: r1 = getDefaultFontConst () Description: Gets default font Params: Returns: type description orxFONT# Default font / nil C signature: const orxFONT * orxFont_GetDefaultFont ()","title":"getDefaultFontConst"},{"location":"modules/font.html#init","text":"Signature: r1 = init () Description: Inits the font module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_Init ()","title":"init"},{"location":"modules/font.html#setup","text":"Signature: setup () Description: Setups the font module Params: Returns: C signature: void orxFont_Setup ()","title":"setup"},{"location":"modules/fps.html","text":"module fps # functions # exit # Signature: exit () Description: Params: Returns: C signature: void orxFPS_Exit () getFPS # Signature: r1 = getFPS () Description: Gets current FTP value Params: Returns: type description integer integer (u32) C signature: orxU32 orxFPS_GetFPS () increaseFrameCount # Signature: increaseFrameCount () Description: Params: Returns: C signature: void orxFPS_IncreaseFrameCount () init # Signature: r1 = init () Description: Inits the FPS module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFPS_Init () setup # Signature: setup () Description: Params: Returns: C signature: void orxFPS_Setup ()","title":"fps"},{"location":"modules/fps.html#module-fps","text":"","title":"module fps"},{"location":"modules/fps.html#functions","text":"","title":"functions"},{"location":"modules/fps.html#exit","text":"Signature: exit () Description: Params: Returns: C signature: void orxFPS_Exit ()","title":"exit"},{"location":"modules/fps.html#getfps","text":"Signature: r1 = getFPS () Description: Gets current FTP value Params: Returns: type description integer integer (u32) C signature: orxU32 orxFPS_GetFPS ()","title":"getFPS"},{"location":"modules/fps.html#increaseframecount","text":"Signature: increaseFrameCount () Description: Params: Returns: C signature: void orxFPS_IncreaseFrameCount ()","title":"increaseFrameCount"},{"location":"modules/fps.html#init","text":"Signature: r1 = init () Description: Inits the FPS module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFPS_Init ()","title":"init"},{"location":"modules/fps.html#setup","text":"Signature: setup () Description: Params: Returns: C signature: void orxFPS_Setup ()","title":"setup"},{"location":"modules/frame.html","text":"module frame # functions # create # Signature: r1 = create ( flags ) Description: Creates a frame Params: name type description flags integer Flags for created animation Returns: type description orxFRAME Created orxFRAME / nil C signature: orxFRAME * orxFrame_Create ( orxU32 _u32Flags ) exit # Signature: exit () Description: Exits from the frame module Params: Returns: C signature: void orxFrame_Exit () getIgnoreFlagNames # Signature: r1 = getIgnoreFlagNames ( flags ) Description: Get ignore flag names (beware: result won't persist from one call to the other) Params: name type description flags integer Literal ignore flags Returns: type description string Ignore flags names C signature: const orxSTRING orxFrame_GetIgnoreFlagNames ( orxU32 _u32Flags ) getIgnoreFlagValues # Signature: r1 = getIgnoreFlagValues ( flags ) Description: Get ignore flag values Params: name type description flags string Literal ignore flags Returns: type description integer Ignore flags C signature: orxU32 orxFrame_GetIgnoreFlagValues ( const orxSTRING _zFlags ) init # Signature: r1 = init () Description: Inits the frame module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFrame_Init () setup # Signature: setup () Description: Setups the frame module Params: Returns: C signature: void orxFrame_Setup ()","title":"frame"},{"location":"modules/frame.html#module-frame","text":"","title":"module frame"},{"location":"modules/frame.html#functions","text":"","title":"functions"},{"location":"modules/frame.html#create","text":"Signature: r1 = create ( flags ) Description: Creates a frame Params: name type description flags integer Flags for created animation Returns: type description orxFRAME Created orxFRAME / nil C signature: orxFRAME * orxFrame_Create ( orxU32 _u32Flags )","title":"create"},{"location":"modules/frame.html#exit","text":"Signature: exit () Description: Exits from the frame module Params: Returns: C signature: void orxFrame_Exit ()","title":"exit"},{"location":"modules/frame.html#getignoreflagnames","text":"Signature: r1 = getIgnoreFlagNames ( flags ) Description: Get ignore flag names (beware: result won't persist from one call to the other) Params: name type description flags integer Literal ignore flags Returns: type description string Ignore flags names C signature: const orxSTRING orxFrame_GetIgnoreFlagNames ( orxU32 _u32Flags )","title":"getIgnoreFlagNames"},{"location":"modules/frame.html#getignoreflagvalues","text":"Signature: r1 = getIgnoreFlagValues ( flags ) Description: Get ignore flag values Params: name type description flags string Literal ignore flags Returns: type description integer Ignore flags C signature: orxU32 orxFrame_GetIgnoreFlagValues ( const orxSTRING _zFlags )","title":"getIgnoreFlagValues"},{"location":"modules/frame.html#init","text":"Signature: r1 = init () Description: Inits the frame module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFrame_Init ()","title":"init"},{"location":"modules/frame.html#setup","text":"Signature: setup () Description: Setups the frame module Params: Returns: C signature: void orxFrame_Setup ()","title":"setup"},{"location":"modules/fx.html","text":"module fx # functions # clearCache # Signature: r1 = clearCache () Description: Clears cache (if any FX is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_ClearCache () create # Signature: r1 = create () Description: Creates an empty FX Params: Returns: type description orxFX orxFX / nil C signature: orxFX * orxFX_Create () createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates an FX from config Params: name type description configid string Config ID Returns: type description orxFX orxFX / nil C signature: orxFX * orxFX_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the FX module Params: Returns: C signature: void orxFX_Exit () init # Signature: r1 = init () Description: Inits the FX module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_Init () setup # Signature: setup () Description: FX module setup Params: Returns: C signature: void orxFX_Setup ()","title":"fx"},{"location":"modules/fx.html#module-fx","text":"","title":"module fx"},{"location":"modules/fx.html#functions","text":"","title":"functions"},{"location":"modules/fx.html#clearcache","text":"Signature: r1 = clearCache () Description: Clears cache (if any FX is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_ClearCache ()","title":"clearCache"},{"location":"modules/fx.html#create","text":"Signature: r1 = create () Description: Creates an empty FX Params: Returns: type description orxFX orxFX / nil C signature: orxFX * orxFX_Create ()","title":"create"},{"location":"modules/fx.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates an FX from config Params: name type description configid string Config ID Returns: type description orxFX orxFX / nil C signature: orxFX * orxFX_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/fx.html#exit","text":"Signature: exit () Description: Exits from the FX module Params: Returns: C signature: void orxFX_Exit ()","title":"exit"},{"location":"modules/fx.html#init","text":"Signature: r1 = init () Description: Inits the FX module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_Init ()","title":"init"},{"location":"modules/fx.html#setup","text":"Signature: setup () Description: FX module setup Params: Returns: C signature: void orxFX_Setup ()","title":"setup"},{"location":"modules/fxpointer.html","text":"module fxpointer # functions # create # Signature: r1 = create () Description: Creates an empty FXPointer Params: Returns: type description orxFXPOINTER orxFXPOINTER / nil C signature: orxFXPOINTER * orxFXPointer_Create () exit # Signature: exit () Description: Exits from the FXPointer module Params: Returns: C signature: void orxFXPointer_Exit () init # Signature: r1 = init () Description: Inits the FXPointer module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_Init () setup # Signature: setup () Description: FXPointer module setup Params: Returns: C signature: void orxFXPointer_Setup ()","title":"fxpointer"},{"location":"modules/fxpointer.html#module-fxpointer","text":"","title":"module fxpointer"},{"location":"modules/fxpointer.html#functions","text":"","title":"functions"},{"location":"modules/fxpointer.html#create","text":"Signature: r1 = create () Description: Creates an empty FXPointer Params: Returns: type description orxFXPOINTER orxFXPOINTER / nil C signature: orxFXPOINTER * orxFXPointer_Create ()","title":"create"},{"location":"modules/fxpointer.html#exit","text":"Signature: exit () Description: Exits from the FXPointer module Params: Returns: C signature: void orxFXPointer_Exit ()","title":"exit"},{"location":"modules/fxpointer.html#init","text":"Signature: r1 = init () Description: Inits the FXPointer module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_Init ()","title":"init"},{"location":"modules/fxpointer.html#setup","text":"Signature: setup () Description: FXPointer module setup Params: Returns: C signature: void orxFXPointer_Setup ()","title":"setup"},{"location":"modules/graphic.html","text":"module graphic # functions # alignVector # Signature: r1 = alignVector ( alignflags , box ) Description: Aligns a vector inside a box using flags Params: name type description alignflags integer Align flags box orxAABOX# Concerned box Returns: type description orxVECTOR orxVECTOR C signature: orxVECTOR * orxGraphic_AlignVector ( orxU32 _u32AlignFlags , const orxAABOX * _pstBox , orxVECTOR * _pvValue ) create # Signature: r1 = create () Description: Creates an empty graphic Params: Returns: type description orxGRAPHIC Created orxGRAPHIC / nil C signature: orxGRAPHIC * orxGraphic_Create () createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates a graphic from config Params: name type description configid string Config ID Returns: type description orxGRAPHIC orxGRAPHIC / nil C signature: orxGRAPHIC * orxGraphic_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the Graphic module Params: Returns: C signature: void orxGraphic_Exit () getAlignFlags # Signature: r1 = getAlignFlags ( align ) Description: Gets alignment flags from literals Params: name type description align string Align literals Returns: type description integer Align flags C signature: orxU32 orxGraphic_GetAlignFlags ( const orxSTRING _zAlign ) init # Signature: r1 = init () Description: Inits the Graphic module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxGraphic_Init () setup # Signature: setup () Description: Graphic module setup Params: Returns: C signature: void orxGraphic_Setup ()","title":"graphic"},{"location":"modules/graphic.html#module-graphic","text":"","title":"module graphic"},{"location":"modules/graphic.html#functions","text":"","title":"functions"},{"location":"modules/graphic.html#alignvector","text":"Signature: r1 = alignVector ( alignflags , box ) Description: Aligns a vector inside a box using flags Params: name type description alignflags integer Align flags box orxAABOX# Concerned box Returns: type description orxVECTOR orxVECTOR C signature: orxVECTOR * orxGraphic_AlignVector ( orxU32 _u32AlignFlags , const orxAABOX * _pstBox , orxVECTOR * _pvValue )","title":"alignVector"},{"location":"modules/graphic.html#create","text":"Signature: r1 = create () Description: Creates an empty graphic Params: Returns: type description orxGRAPHIC Created orxGRAPHIC / nil C signature: orxGRAPHIC * orxGraphic_Create ()","title":"create"},{"location":"modules/graphic.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates a graphic from config Params: name type description configid string Config ID Returns: type description orxGRAPHIC orxGRAPHIC / nil C signature: orxGRAPHIC * orxGraphic_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/graphic.html#exit","text":"Signature: exit () Description: Exits from the Graphic module Params: Returns: C signature: void orxGraphic_Exit ()","title":"exit"},{"location":"modules/graphic.html#getalignflags","text":"Signature: r1 = getAlignFlags ( align ) Description: Gets alignment flags from literals Params: name type description align string Align literals Returns: type description integer Align flags C signature: orxU32 orxGraphic_GetAlignFlags ( const orxSTRING _zAlign )","title":"getAlignFlags"},{"location":"modules/graphic.html#init","text":"Signature: r1 = init () Description: Inits the Graphic module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxGraphic_Init ()","title":"init"},{"location":"modules/graphic.html#setup","text":"Signature: setup () Description: Graphic module setup Params: Returns: C signature: void orxGraphic_Setup ()","title":"setup"},{"location":"modules/input.html","text":"module input # functions # bind # Signature: r1 = bind ( name , type , id , mode , bindingindex ) Description: Binds an input to a mouse/joystick button, keyboard key or joystick axis Params: name type description name string Concerned input name type orxINPUT_TYPE Type of peripheral to bind id string ID of button/key/axis to bind mode orxINPUT_MODE Mode (only used for axis input) bindingindex integer Index of the desired binding, if < 0 the oldest binding will be replaced Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Bind ( const orxSTRING _zName , orxINPUT_TYPE _eType , orxENUM _eID , orxINPUT_MODE _eMode , orxS32 _s32BindingIndex ) enableSet # Signature: r1 = enableSet ( setname , enable ) Description: Enables/disables working set (without selecting it) Params: name type description setname string Set name to enable/disable enable boolean Enable / Disable Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_EnableSet ( const orxSTRING _zSetName , orxBOOL _bEnable ) exit # Signature: exit () Description: Exits from Input module Params: Returns: C signature: void orxInput_Exit () getActiveBinding # Signature: r1 , r2 , r3 , r4 = getActiveBinding () Description: Gets active binding (current pressed key/button/...) so as to allow on-the-fly user rebinding Params: Returns: type description orxSTATUS success if one active binding is found, failure otherwise orxINPUT_TYPE Active binding's type (mouse/joystick button, keyboard key or joystick axis) string Active binding's ID (ID of button/key/axis to bind) number Active binding's value (optional) C signature: orxSTATUS orxInput_GetActiveBinding ( orxINPUT_TYPE * _peType , orxENUM * _peID , orxFLOAT * _pfValue ) getBinding # Signature: r1 , r2 , r3 , r4 = getBinding ( name , bindingindex ) Description: Gets an input binding (mouse/joystick button, keyboard key or joystick axis) at a given index Params: name type description name string Concerned input name bindingindex integer Index of the desired binding, should be less than orxINPUT_KU32_BINDING_NUMBER Returns: type description orxSTATUS success if input exists, failure otherwise orxINPUT_TYPE Binding type (if a slot is not bound, its value is orxINPUT_TYPE_NONE) string Binding ID (button/key/axis) orxINPUT_MODE Mode (only used for axis inputs) C signature: orxSTATUS orxInput_GetBinding ( const orxSTRING _zName , orxU32 _u32BindingIndex , orxINPUT_TYPE * _peType , orxENUM * _peID , orxINPUT_MODE * _peMode ) getBindingList # Signature: r1 , r2 , r3 , r4 = getBindingList ( name ) Description: Get an input binding list (mouse/keyboard/joystick) Params: name type description name string Concerned input name Returns: type description orxSTATUS success / failure table of orxINPUT_TYPE List of binding types (if a slot is not bound, its value is orxINPUT_TYPE_NONE) table of string List of binding IDs (button/key/axis) table of orxINPUT_MODE List of modes (only used for axis inputs) C signature: orxSTATUS orxInput_GetBindingList ( const orxSTRING _zName , orxINPUT_TYPE _aeTypeList [ orxINPUT_KU32_BINDING_NUMBER ], orxENUM _aeIDList [ orxINPUT_KU32_BINDING_NUMBER ], orxINPUT_MODE _aeModeList [ orxINPUT_KU32_BINDING_NUMBER ]) getBindingName # Signature: r1 = getBindingName ( type , id , mode ) Description: Gets a binding name, don't keep the result as is as it'll get overridden during the next call to this function Params: name type description type orxINPUT_TYPE Binding type (mouse/joystick button, keyboard key or joystick axis) id string Binding ID (ID of button/key/axis to bind) mode orxINPUT_MODE Mode (only used for axis input) Returns: type description string string (binding's name) if success, empty string otherwise C signature: const orxSTRING orxInput_GetBindingName ( orxINPUT_TYPE _eType , orxENUM _eID , orxINPUT_MODE _eMode ) getBindingType # Signature: r1 , r2 , r3 , r4 = getBindingType ( name ) Description: Gets a binding type and ID from its name Params: name type description name string Concerned input name Returns: type description orxSTATUS success if input is valid, failure otherwise orxINPUT_TYPE Binding type (mouse/joystick button, keyboard key or joystick axis) string Binding ID (ID of button/key/axis to bind) orxINPUT_MODE Binding mode (only used for axis input) C signature: orxSTATUS orxInput_GetBindingType ( const orxSTRING _zName , orxINPUT_TYPE * _peType , orxENUM * _peID , orxINPUT_MODE * _peMode ) getBoundInput # Signature: r1 , r2 , r3 = getBoundInput ( type , id , mode , inputindex ) Description: Gets the input name to which a mouse/joystick button, keyboard key or joystick axis is bound (at given index) Params: name type description type orxINPUT_TYPE Type of peripheral to test id string ID of button/key/axis to test mode orxINPUT_MODE Mode (only used for axis input) inputindex integer Index of the desired input Returns: type description orxSTATUS success if binding exists / failure otherwise string Input name, mandatory integer Binding index for this input, ignored if nil C signature: orxSTATUS orxInput_GetBoundInput ( orxINPUT_TYPE _eType , orxENUM _eID , orxINPUT_MODE _eMode , orxU32 _u32InputIndex , const orxSTRING * _pzName , orxU32 * _pu32BindingIndex ) getBoundInputCount # Signature: r1 = getBoundInputCount ( type , id , mode ) Description: Gets the input count to which a mouse/joystick button, keyboard key or joystick axis is bound Params: name type description type orxINPUT_TYPE Type of peripheral to test id string ID of button/key/axis to test mode orxINPUT_MODE Mode (only used for axis input) Returns: type description integer Number of bound inputs C signature: orxU32 orxInput_GetBoundInputCount ( orxINPUT_TYPE _eType , orxENUM _eID , orxINPUT_MODE _eMode ) getCurrentSet # Signature: r1 = getCurrentSet () Description: Gets current working set Params: Returns: type description string Current selected set C signature: const orxSTRING orxInput_GetCurrentSet () getMultiplier # Signature: r1 = getMultiplier ( inputname ) Description: Gets input multiplier Params: name type description inputname string Concerned input name Returns: type description number Input multiplier if found, -1.0f otherwise C signature: orxFLOAT orxInput_GetMultiplier ( const orxSTRING _zInputName ) getThreshold # Signature: r1 = getThreshold ( inputname ) Description: Gets input threshold Params: name type description inputname string Concerned input name Returns: type description number Input threshold C signature: orxFLOAT orxInput_GetThreshold ( const orxSTRING _zInputName ) getValue # Signature: r1 = getValue ( inputname ) Description: Gets input value Params: name type description inputname string Concerned input name Returns: type description number number C signature: orxFLOAT orxInput_GetValue ( const orxSTRING _zInputName ) hasBeenActivated # Signature: r1 = hasBeenActivated ( inputname ) Description: Has input been activated (this frame)? Params: name type description inputname string Concerned input name Returns: type description boolean true if newly activated since last frame, false otherwise C signature: orxBOOL orxInput_HasBeenActivated ( const orxSTRING _zInputName ) hasBeenDeactivated # Signature: r1 = hasBeenDeactivated ( inputname ) Description: Has input been deactivated (this frame)? Params: name type description inputname string Concerned input name Returns: type description boolean true if newly deactivated since last frame, false otherwise C signature: orxBOOL orxInput_HasBeenDeactivated ( const orxSTRING _zInputName ) hasNewStatus # Signature: r1 = hasNewStatus ( inputname ) Description: Has a new active status since this frame? Params: name type description inputname string Concerned input name Returns: type description boolean true if active status is new, false otherwise C signature: orxBOOL orxInput_HasNewStatus ( const orxSTRING _zInputName ) init # Signature: r1 = init () Description: Initializes Input module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Init () isActive # Signature: r1 = isActive ( inputname ) Description: Is input active? Params: name type description inputname string Concerned input name Returns: type description boolean true if active, false otherwise C signature: orxBOOL orxInput_IsActive ( const orxSTRING _zInputName ) isInCombineMode # Signature: r1 = isInCombineMode ( name ) Description: Is an input in combine mode? Params: name type description name string Concerned input name Returns: type description boolean true if the input is in combine mode, false otherwise C signature: orxBOOL orxInput_IsInCombineMode ( const orxSTRING _zName ) isSetEnabled # Signature: r1 = isSetEnabled ( setname ) Description: Is working set enabled (includes current working set)? Params: name type description setname string Set name to check Returns: type description boolean true / false C signature: orxBOOL orxInput_IsSetEnabled ( const orxSTRING _zSetName ) load # Signature: r1 = load ( filename ) Description: Loads inputs from config Params: name type description filename string File name to load, will use current loaded config if orxSTRING_EMPTY/nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Load ( const orxSTRING _zFileName ) removeSet # Signature: r1 = removeSet ( setname ) Description: Removes a set Params: name type description setname string Set name to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_RemoveSet ( const orxSTRING _zSetName ) resetValue # Signature: r1 = resetValue ( inputname ) Description: Resets input value (peripheral inputs will then be used instead of code ones) Params: name type description inputname string Concerned input name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_ResetValue ( const orxSTRING _zInputName ) save # Signature: r1 = save ( filename ) Description: Saves inputs to config Params: name type description filename string File name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Save ( const orxSTRING _zFileName ) selectSet # Signature: r1 = selectSet ( setname ) Description: Selects (and enables) current working set Params: name type description setname string Set name to select Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SelectSet ( const orxSTRING _zSetName ) setCombineMode # Signature: r1 = setCombineMode ( name , combine ) Description: Sets an input combine mode Params: name type description name string Concerned input name combine boolean If orxTRUE, all assigned bindings need to be active in order to activate input, otherwise input will be considered active if any of its binding is Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetCombineMode ( const orxSTRING _zName , orxBOOL _bCombine ) setMultiplier # Signature: r1 = setMultiplier ( inputname , multiplier ) Description: Sets input multiplier, if not set the default global multiplier will be used Params: name type description inputname string Concerned input name multiplier number Multiplier value, can be negative Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetMultiplier ( const orxSTRING _zInputName , orxFLOAT _fMultiplier ) setPermanentValue # Signature: r1 = setPermanentValue ( inputname , value ) Description: Sets permanent input value (will prevail on peripheral inputs till reset) Params: name type description inputname string Concerned input name value number Value to set, orxFLOAT_0 to deactivate Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetPermanentValue ( const orxSTRING _zInputName , orxFLOAT _fValue ) setThreshold # Signature: r1 = setThreshold ( inputname , threshold ) Description: Sets input threshold, if not set the default global threshold will be used Params: name type description inputname string Concerned input name threshold number Threshold value (between 0.0f and 1.0f) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetThreshold ( const orxSTRING _zInputName , orxFLOAT _fThreshold ) setTypeFlags # Signature: r1 = setTypeFlags ( addtypeflags , removetypeflags ) Description: Sets current set's type flags, only set types will be polled when updating the set (use orxINPUT_GET_FLAG(TYPE) in order to get the flag that matches a type) Params: name type description addtypeflags integer Type flags to add removetypeflags integer Type flags to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetTypeFlags ( orxU32 _u32AddTypeFlags , orxU32 _u32RemoveTypeFlags ) setValue # Signature: r1 = setValue ( inputname , value ) Description: Sets input value (will prevail on peripheral inputs only once) Params: name type description inputname string Concerned input name value number Value to set, orxFLOAT_0 to deactivate Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetValue ( const orxSTRING _zInputName , orxFLOAT _fValue ) setup # Signature: setup () Description: Input module setup Params: Returns: C signature: void orxInput_Setup () unbind # Signature: r1 = unbind ( name , bindingindex ) Description: Unbinds an input Params: name type description name string Concerned input name bindingindex integer Index of the desired binding, if < 0 all the bindings will be removed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Unbind ( const orxSTRING _zName , orxS32 _s32BindingIndex )","title":"input"},{"location":"modules/input.html#module-input","text":"","title":"module input"},{"location":"modules/input.html#functions","text":"","title":"functions"},{"location":"modules/input.html#bind","text":"Signature: r1 = bind ( name , type , id , mode , bindingindex ) Description: Binds an input to a mouse/joystick button, keyboard key or joystick axis Params: name type description name string Concerned input name type orxINPUT_TYPE Type of peripheral to bind id string ID of button/key/axis to bind mode orxINPUT_MODE Mode (only used for axis input) bindingindex integer Index of the desired binding, if < 0 the oldest binding will be replaced Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Bind ( const orxSTRING _zName , orxINPUT_TYPE _eType , orxENUM _eID , orxINPUT_MODE _eMode , orxS32 _s32BindingIndex )","title":"bind"},{"location":"modules/input.html#enableset","text":"Signature: r1 = enableSet ( setname , enable ) Description: Enables/disables working set (without selecting it) Params: name type description setname string Set name to enable/disable enable boolean Enable / Disable Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_EnableSet ( const orxSTRING _zSetName , orxBOOL _bEnable )","title":"enableSet"},{"location":"modules/input.html#exit","text":"Signature: exit () Description: Exits from Input module Params: Returns: C signature: void orxInput_Exit ()","title":"exit"},{"location":"modules/input.html#getactivebinding","text":"Signature: r1 , r2 , r3 , r4 = getActiveBinding () Description: Gets active binding (current pressed key/button/...) so as to allow on-the-fly user rebinding Params: Returns: type description orxSTATUS success if one active binding is found, failure otherwise orxINPUT_TYPE Active binding's type (mouse/joystick button, keyboard key or joystick axis) string Active binding's ID (ID of button/key/axis to bind) number Active binding's value (optional) C signature: orxSTATUS orxInput_GetActiveBinding ( orxINPUT_TYPE * _peType , orxENUM * _peID , orxFLOAT * _pfValue )","title":"getActiveBinding"},{"location":"modules/input.html#getbinding","text":"Signature: r1 , r2 , r3 , r4 = getBinding ( name , bindingindex ) Description: Gets an input binding (mouse/joystick button, keyboard key or joystick axis) at a given index Params: name type description name string Concerned input name bindingindex integer Index of the desired binding, should be less than orxINPUT_KU32_BINDING_NUMBER Returns: type description orxSTATUS success if input exists, failure otherwise orxINPUT_TYPE Binding type (if a slot is not bound, its value is orxINPUT_TYPE_NONE) string Binding ID (button/key/axis) orxINPUT_MODE Mode (only used for axis inputs) C signature: orxSTATUS orxInput_GetBinding ( const orxSTRING _zName , orxU32 _u32BindingIndex , orxINPUT_TYPE * _peType , orxENUM * _peID , orxINPUT_MODE * _peMode )","title":"getBinding"},{"location":"modules/input.html#getbindinglist","text":"Signature: r1 , r2 , r3 , r4 = getBindingList ( name ) Description: Get an input binding list (mouse/keyboard/joystick) Params: name type description name string Concerned input name Returns: type description orxSTATUS success / failure table of orxINPUT_TYPE List of binding types (if a slot is not bound, its value is orxINPUT_TYPE_NONE) table of string List of binding IDs (button/key/axis) table of orxINPUT_MODE List of modes (only used for axis inputs) C signature: orxSTATUS orxInput_GetBindingList ( const orxSTRING _zName , orxINPUT_TYPE _aeTypeList [ orxINPUT_KU32_BINDING_NUMBER ], orxENUM _aeIDList [ orxINPUT_KU32_BINDING_NUMBER ], orxINPUT_MODE _aeModeList [ orxINPUT_KU32_BINDING_NUMBER ])","title":"getBindingList"},{"location":"modules/input.html#getbindingname","text":"Signature: r1 = getBindingName ( type , id , mode ) Description: Gets a binding name, don't keep the result as is as it'll get overridden during the next call to this function Params: name type description type orxINPUT_TYPE Binding type (mouse/joystick button, keyboard key or joystick axis) id string Binding ID (ID of button/key/axis to bind) mode orxINPUT_MODE Mode (only used for axis input) Returns: type description string string (binding's name) if success, empty string otherwise C signature: const orxSTRING orxInput_GetBindingName ( orxINPUT_TYPE _eType , orxENUM _eID , orxINPUT_MODE _eMode )","title":"getBindingName"},{"location":"modules/input.html#getbindingtype","text":"Signature: r1 , r2 , r3 , r4 = getBindingType ( name ) Description: Gets a binding type and ID from its name Params: name type description name string Concerned input name Returns: type description orxSTATUS success if input is valid, failure otherwise orxINPUT_TYPE Binding type (mouse/joystick button, keyboard key or joystick axis) string Binding ID (ID of button/key/axis to bind) orxINPUT_MODE Binding mode (only used for axis input) C signature: orxSTATUS orxInput_GetBindingType ( const orxSTRING _zName , orxINPUT_TYPE * _peType , orxENUM * _peID , orxINPUT_MODE * _peMode )","title":"getBindingType"},{"location":"modules/input.html#getboundinput","text":"Signature: r1 , r2 , r3 = getBoundInput ( type , id , mode , inputindex ) Description: Gets the input name to which a mouse/joystick button, keyboard key or joystick axis is bound (at given index) Params: name type description type orxINPUT_TYPE Type of peripheral to test id string ID of button/key/axis to test mode orxINPUT_MODE Mode (only used for axis input) inputindex integer Index of the desired input Returns: type description orxSTATUS success if binding exists / failure otherwise string Input name, mandatory integer Binding index for this input, ignored if nil C signature: orxSTATUS orxInput_GetBoundInput ( orxINPUT_TYPE _eType , orxENUM _eID , orxINPUT_MODE _eMode , orxU32 _u32InputIndex , const orxSTRING * _pzName , orxU32 * _pu32BindingIndex )","title":"getBoundInput"},{"location":"modules/input.html#getboundinputcount","text":"Signature: r1 = getBoundInputCount ( type , id , mode ) Description: Gets the input count to which a mouse/joystick button, keyboard key or joystick axis is bound Params: name type description type orxINPUT_TYPE Type of peripheral to test id string ID of button/key/axis to test mode orxINPUT_MODE Mode (only used for axis input) Returns: type description integer Number of bound inputs C signature: orxU32 orxInput_GetBoundInputCount ( orxINPUT_TYPE _eType , orxENUM _eID , orxINPUT_MODE _eMode )","title":"getBoundInputCount"},{"location":"modules/input.html#getcurrentset","text":"Signature: r1 = getCurrentSet () Description: Gets current working set Params: Returns: type description string Current selected set C signature: const orxSTRING orxInput_GetCurrentSet ()","title":"getCurrentSet"},{"location":"modules/input.html#getmultiplier","text":"Signature: r1 = getMultiplier ( inputname ) Description: Gets input multiplier Params: name type description inputname string Concerned input name Returns: type description number Input multiplier if found, -1.0f otherwise C signature: orxFLOAT orxInput_GetMultiplier ( const orxSTRING _zInputName )","title":"getMultiplier"},{"location":"modules/input.html#getthreshold","text":"Signature: r1 = getThreshold ( inputname ) Description: Gets input threshold Params: name type description inputname string Concerned input name Returns: type description number Input threshold C signature: orxFLOAT orxInput_GetThreshold ( const orxSTRING _zInputName )","title":"getThreshold"},{"location":"modules/input.html#getvalue","text":"Signature: r1 = getValue ( inputname ) Description: Gets input value Params: name type description inputname string Concerned input name Returns: type description number number C signature: orxFLOAT orxInput_GetValue ( const orxSTRING _zInputName )","title":"getValue"},{"location":"modules/input.html#hasbeenactivated","text":"Signature: r1 = hasBeenActivated ( inputname ) Description: Has input been activated (this frame)? Params: name type description inputname string Concerned input name Returns: type description boolean true if newly activated since last frame, false otherwise C signature: orxBOOL orxInput_HasBeenActivated ( const orxSTRING _zInputName )","title":"hasBeenActivated"},{"location":"modules/input.html#hasbeendeactivated","text":"Signature: r1 = hasBeenDeactivated ( inputname ) Description: Has input been deactivated (this frame)? Params: name type description inputname string Concerned input name Returns: type description boolean true if newly deactivated since last frame, false otherwise C signature: orxBOOL orxInput_HasBeenDeactivated ( const orxSTRING _zInputName )","title":"hasBeenDeactivated"},{"location":"modules/input.html#hasnewstatus","text":"Signature: r1 = hasNewStatus ( inputname ) Description: Has a new active status since this frame? Params: name type description inputname string Concerned input name Returns: type description boolean true if active status is new, false otherwise C signature: orxBOOL orxInput_HasNewStatus ( const orxSTRING _zInputName )","title":"hasNewStatus"},{"location":"modules/input.html#init","text":"Signature: r1 = init () Description: Initializes Input module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Init ()","title":"init"},{"location":"modules/input.html#isactive","text":"Signature: r1 = isActive ( inputname ) Description: Is input active? Params: name type description inputname string Concerned input name Returns: type description boolean true if active, false otherwise C signature: orxBOOL orxInput_IsActive ( const orxSTRING _zInputName )","title":"isActive"},{"location":"modules/input.html#isincombinemode","text":"Signature: r1 = isInCombineMode ( name ) Description: Is an input in combine mode? Params: name type description name string Concerned input name Returns: type description boolean true if the input is in combine mode, false otherwise C signature: orxBOOL orxInput_IsInCombineMode ( const orxSTRING _zName )","title":"isInCombineMode"},{"location":"modules/input.html#issetenabled","text":"Signature: r1 = isSetEnabled ( setname ) Description: Is working set enabled (includes current working set)? Params: name type description setname string Set name to check Returns: type description boolean true / false C signature: orxBOOL orxInput_IsSetEnabled ( const orxSTRING _zSetName )","title":"isSetEnabled"},{"location":"modules/input.html#load","text":"Signature: r1 = load ( filename ) Description: Loads inputs from config Params: name type description filename string File name to load, will use current loaded config if orxSTRING_EMPTY/nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Load ( const orxSTRING _zFileName )","title":"load"},{"location":"modules/input.html#removeset","text":"Signature: r1 = removeSet ( setname ) Description: Removes a set Params: name type description setname string Set name to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_RemoveSet ( const orxSTRING _zSetName )","title":"removeSet"},{"location":"modules/input.html#resetvalue","text":"Signature: r1 = resetValue ( inputname ) Description: Resets input value (peripheral inputs will then be used instead of code ones) Params: name type description inputname string Concerned input name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_ResetValue ( const orxSTRING _zInputName )","title":"resetValue"},{"location":"modules/input.html#save","text":"Signature: r1 = save ( filename ) Description: Saves inputs to config Params: name type description filename string File name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Save ( const orxSTRING _zFileName )","title":"save"},{"location":"modules/input.html#selectset","text":"Signature: r1 = selectSet ( setname ) Description: Selects (and enables) current working set Params: name type description setname string Set name to select Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SelectSet ( const orxSTRING _zSetName )","title":"selectSet"},{"location":"modules/input.html#setcombinemode","text":"Signature: r1 = setCombineMode ( name , combine ) Description: Sets an input combine mode Params: name type description name string Concerned input name combine boolean If orxTRUE, all assigned bindings need to be active in order to activate input, otherwise input will be considered active if any of its binding is Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetCombineMode ( const orxSTRING _zName , orxBOOL _bCombine )","title":"setCombineMode"},{"location":"modules/input.html#setmultiplier","text":"Signature: r1 = setMultiplier ( inputname , multiplier ) Description: Sets input multiplier, if not set the default global multiplier will be used Params: name type description inputname string Concerned input name multiplier number Multiplier value, can be negative Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetMultiplier ( const orxSTRING _zInputName , orxFLOAT _fMultiplier )","title":"setMultiplier"},{"location":"modules/input.html#setpermanentvalue","text":"Signature: r1 = setPermanentValue ( inputname , value ) Description: Sets permanent input value (will prevail on peripheral inputs till reset) Params: name type description inputname string Concerned input name value number Value to set, orxFLOAT_0 to deactivate Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetPermanentValue ( const orxSTRING _zInputName , orxFLOAT _fValue )","title":"setPermanentValue"},{"location":"modules/input.html#setthreshold","text":"Signature: r1 = setThreshold ( inputname , threshold ) Description: Sets input threshold, if not set the default global threshold will be used Params: name type description inputname string Concerned input name threshold number Threshold value (between 0.0f and 1.0f) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetThreshold ( const orxSTRING _zInputName , orxFLOAT _fThreshold )","title":"setThreshold"},{"location":"modules/input.html#settypeflags","text":"Signature: r1 = setTypeFlags ( addtypeflags , removetypeflags ) Description: Sets current set's type flags, only set types will be polled when updating the set (use orxINPUT_GET_FLAG(TYPE) in order to get the flag that matches a type) Params: name type description addtypeflags integer Type flags to add removetypeflags integer Type flags to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetTypeFlags ( orxU32 _u32AddTypeFlags , orxU32 _u32RemoveTypeFlags )","title":"setTypeFlags"},{"location":"modules/input.html#setvalue","text":"Signature: r1 = setValue ( inputname , value ) Description: Sets input value (will prevail on peripheral inputs only once) Params: name type description inputname string Concerned input name value number Value to set, orxFLOAT_0 to deactivate Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_SetValue ( const orxSTRING _zInputName , orxFLOAT _fValue )","title":"setValue"},{"location":"modules/input.html#setup","text":"Signature: setup () Description: Input module setup Params: Returns: C signature: void orxInput_Setup ()","title":"setup"},{"location":"modules/input.html#unbind","text":"Signature: r1 = unbind ( name , bindingindex ) Description: Unbinds an input Params: name type description name string Concerned input name bindingindex integer Index of the desired binding, if < 0 all the bindings will be removed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxInput_Unbind ( const orxSTRING _zName , orxS32 _s32BindingIndex )","title":"unbind"},{"location":"modules/joystick.html","text":"module joystick # functions # exit # Signature: exit () Description: Exits from the joystick module Params: Returns: C signature: void orxJoystick_Exit () getAxisName # Signature: r1 = getAxisName ( axis ) Description: Gets axis literal name Params: name type description axis orxJOYSTICK_AXIS Concerned axis Returns: type description string Axis's name C signature: const orxSTRING orxJoystick_GetAxisName ( orxJOYSTICK_AXIS _eAxis ) getAxisValue # Signature: r1 = getAxisValue ( axis ) Description: Gets joystick axis value Params: name type description axis orxJOYSTICK_AXIS Joystick axis to check Returns: type description number Value of the axis C signature: orxFLOAT orxJoystick_GetAxisValue ( orxJOYSTICK_AXIS _eAxis ) getButtonName # Signature: r1 = getButtonName ( button ) Description: Gets button literal name Params: name type description button orxJOYSTICK_BUTTON Concerned button Returns: type description string Button's name C signature: const orxSTRING orxJoystick_GetButtonName ( orxJOYSTICK_BUTTON _eButton ) init # Signature: r1 = init () Description: Inits the joystick module Params: Returns: type description orxSTATUS Returns the status of the operation C signature: orxSTATUS orxJoystick_Init () isButtonPressed # Signature: r1 = isButtonPressed ( button ) Description: Is joystick button pressed? Params: name type description button orxJOYSTICK_BUTTON Joystick button to check Returns: type description boolean true if pressed / false otherwise C signature: orxBOOL orxJoystick_IsButtonPressed ( orxJOYSTICK_BUTTON _eButton ) isConnected # Signature: r1 = isConnected ( id ) Description: Is joystick connected? Params: name type description id integer ID of the joystick, 1-based index Returns: type description boolean true if connected / false otherwise C signature: orxBOOL orxJoystick_IsConnected ( orxU32 _u32ID ) setup # Signature: setup () Description: JOYSTICK module setup Params: Returns: C signature: void orxJoystick_Setup ()","title":"joystick"},{"location":"modules/joystick.html#module-joystick","text":"","title":"module joystick"},{"location":"modules/joystick.html#functions","text":"","title":"functions"},{"location":"modules/joystick.html#exit","text":"Signature: exit () Description: Exits from the joystick module Params: Returns: C signature: void orxJoystick_Exit ()","title":"exit"},{"location":"modules/joystick.html#getaxisname","text":"Signature: r1 = getAxisName ( axis ) Description: Gets axis literal name Params: name type description axis orxJOYSTICK_AXIS Concerned axis Returns: type description string Axis's name C signature: const orxSTRING orxJoystick_GetAxisName ( orxJOYSTICK_AXIS _eAxis )","title":"getAxisName"},{"location":"modules/joystick.html#getaxisvalue","text":"Signature: r1 = getAxisValue ( axis ) Description: Gets joystick axis value Params: name type description axis orxJOYSTICK_AXIS Joystick axis to check Returns: type description number Value of the axis C signature: orxFLOAT orxJoystick_GetAxisValue ( orxJOYSTICK_AXIS _eAxis )","title":"getAxisValue"},{"location":"modules/joystick.html#getbuttonname","text":"Signature: r1 = getButtonName ( button ) Description: Gets button literal name Params: name type description button orxJOYSTICK_BUTTON Concerned button Returns: type description string Button's name C signature: const orxSTRING orxJoystick_GetButtonName ( orxJOYSTICK_BUTTON _eButton )","title":"getButtonName"},{"location":"modules/joystick.html#init","text":"Signature: r1 = init () Description: Inits the joystick module Params: Returns: type description orxSTATUS Returns the status of the operation C signature: orxSTATUS orxJoystick_Init ()","title":"init"},{"location":"modules/joystick.html#isbuttonpressed","text":"Signature: r1 = isButtonPressed ( button ) Description: Is joystick button pressed? Params: name type description button orxJOYSTICK_BUTTON Joystick button to check Returns: type description boolean true if pressed / false otherwise C signature: orxBOOL orxJoystick_IsButtonPressed ( orxJOYSTICK_BUTTON _eButton )","title":"isButtonPressed"},{"location":"modules/joystick.html#isconnected","text":"Signature: r1 = isConnected ( id ) Description: Is joystick connected? Params: name type description id integer ID of the joystick, 1-based index Returns: type description boolean true if connected / false otherwise C signature: orxBOOL orxJoystick_IsConnected ( orxU32 _u32ID )","title":"isConnected"},{"location":"modules/joystick.html#setup","text":"Signature: setup () Description: JOYSTICK module setup Params: Returns: C signature: void orxJoystick_Setup ()","title":"setup"},{"location":"modules/keyboard.html","text":"module keyboard # functions # clearBuffer # Signature: clearBuffer () Description: Empties the keyboard buffer (both keys and chars) Params: Returns: C signature: void orxKeyboard_ClearBuffer () exit # Signature: exit () Description: Exits from the keyboard module Params: Returns: C signature: void orxKeyboard_Exit () getKeyDisplayName # Signature: r1 = getKeyDisplayName ( key ) Description: Gets key display name, layout-dependent Params: name type description key orxKEYBOARD_KEY Concerned key Returns: type description string UTF-8 encoded key's name if valid, empty string otherwise C signature: const orxSTRING orxKeyboard_GetKeyDisplayName ( orxKEYBOARD_KEY _eKey ) getKeyName # Signature: r1 = getKeyName ( key ) Description: Gets key literal name Params: name type description key orxKEYBOARD_KEY Concerned key Returns: type description string Key's name C signature: const orxSTRING orxKeyboard_GetKeyName ( orxKEYBOARD_KEY _eKey ) init # Signature: r1 = init () Description: Inits the keyboard module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxKeyboard_Init () isKeyPressed # Signature: r1 = isKeyPressed ( key ) Description: Is key pressed? Params: name type description key orxKEYBOARD_KEY Key to check Returns: type description boolean true if pressed / false otherwise C signature: orxBOOL orxKeyboard_IsKeyPressed ( orxKEYBOARD_KEY _eKey ) readKey # Signature: r1 = readKey () Description: Gets the next key from the keyboard buffer and removes it from there Params: Returns: type description orxKEYBOARD_KEY orxKEYBOARD_KEY, orxKEYBOARD_KEY_NONE if the buffer is empty C signature: orxKEYBOARD_KEY orxKeyboard_ReadKey () readString # Signature: r1 = readString () Description: Gets the next UTF-8 encoded string from the keyboard buffer and removes it from there Params: Returns: type description string UTF-8 encoded string C signature: const orxSTRING orxKeyboard_ReadString () setup # Signature: setup () Description: Keyboard module setup Params: Returns: C signature: void orxKeyboard_Setup () show # Signature: r1 = show ( show ) Description: Show/Hide the virtual keyboard Params: name type description show boolean Show/hide virtual keyboard Returns: type description orxSTATUS success if supported by platform, failure otherwise C signature: orxSTATUS orxKeyboard_Show ( orxBOOL _bShow )","title":"keyboard"},{"location":"modules/keyboard.html#module-keyboard","text":"","title":"module keyboard"},{"location":"modules/keyboard.html#functions","text":"","title":"functions"},{"location":"modules/keyboard.html#clearbuffer","text":"Signature: clearBuffer () Description: Empties the keyboard buffer (both keys and chars) Params: Returns: C signature: void orxKeyboard_ClearBuffer ()","title":"clearBuffer"},{"location":"modules/keyboard.html#exit","text":"Signature: exit () Description: Exits from the keyboard module Params: Returns: C signature: void orxKeyboard_Exit ()","title":"exit"},{"location":"modules/keyboard.html#getkeydisplayname","text":"Signature: r1 = getKeyDisplayName ( key ) Description: Gets key display name, layout-dependent Params: name type description key orxKEYBOARD_KEY Concerned key Returns: type description string UTF-8 encoded key's name if valid, empty string otherwise C signature: const orxSTRING orxKeyboard_GetKeyDisplayName ( orxKEYBOARD_KEY _eKey )","title":"getKeyDisplayName"},{"location":"modules/keyboard.html#getkeyname","text":"Signature: r1 = getKeyName ( key ) Description: Gets key literal name Params: name type description key orxKEYBOARD_KEY Concerned key Returns: type description string Key's name C signature: const orxSTRING orxKeyboard_GetKeyName ( orxKEYBOARD_KEY _eKey )","title":"getKeyName"},{"location":"modules/keyboard.html#init","text":"Signature: r1 = init () Description: Inits the keyboard module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxKeyboard_Init ()","title":"init"},{"location":"modules/keyboard.html#iskeypressed","text":"Signature: r1 = isKeyPressed ( key ) Description: Is key pressed? Params: name type description key orxKEYBOARD_KEY Key to check Returns: type description boolean true if pressed / false otherwise C signature: orxBOOL orxKeyboard_IsKeyPressed ( orxKEYBOARD_KEY _eKey )","title":"isKeyPressed"},{"location":"modules/keyboard.html#readkey","text":"Signature: r1 = readKey () Description: Gets the next key from the keyboard buffer and removes it from there Params: Returns: type description orxKEYBOARD_KEY orxKEYBOARD_KEY, orxKEYBOARD_KEY_NONE if the buffer is empty C signature: orxKEYBOARD_KEY orxKeyboard_ReadKey ()","title":"readKey"},{"location":"modules/keyboard.html#readstring","text":"Signature: r1 = readString () Description: Gets the next UTF-8 encoded string from the keyboard buffer and removes it from there Params: Returns: type description string UTF-8 encoded string C signature: const orxSTRING orxKeyboard_ReadString ()","title":"readString"},{"location":"modules/keyboard.html#setup","text":"Signature: setup () Description: Keyboard module setup Params: Returns: C signature: void orxKeyboard_Setup ()","title":"setup"},{"location":"modules/keyboard.html#show","text":"Signature: r1 = show ( show ) Description: Show/Hide the virtual keyboard Params: name type description show boolean Show/hide virtual keyboard Returns: type description orxSTATUS success if supported by platform, failure otherwise C signature: orxSTATUS orxKeyboard_Show ( orxBOOL _bShow )","title":"show"},{"location":"modules/locale.html","text":"module locale # functions # exit # Signature: exit () Description: Exits from the Locale Module Params: Returns: C signature: void orxLocale_Exit () getCurrentLanguage # Signature: r1 = getCurrentLanguage ( group ) Description: Gets current language Params: name type description group string Concerned group, nil for default/fallback one Returns: type description string Current selected language C signature: const orxSTRING orxLocale_GetCurrentLanguage ( const orxSTRING _zGroup ) getKey # Signature: r1 = getKey ( keyindex , group ) Description: Gets key for the current language at the given index Params: name type description keyindex integer Index of the desired key group string Concerned group, nil for default/fallback one Returns: type description string string if exist, nil otherwise C signature: const orxSTRING orxLocale_GetKey ( orxU32 _u32KeyIndex , const orxSTRING _zGroup ) getKeyCount # Signature: r1 = getKeyCount ( group ) Description: Gets key count for the current language Params: name type description group string Concerned group, nil for default/fallback one Returns: type description integer Key count the current language if valid, 0 otherwise C signature: orxU32 orxLocale_GetKeyCount ( const orxSTRING _zGroup ) getLanguage # Signature: r1 = getLanguage ( languageindex ) Description: Gets language at the given index Params: name type description languageindex integer Index of the desired language Returns: type description string string if exist, empty string otherwise C signature: const orxSTRING orxLocale_GetLanguage ( orxU32 _u32LanguageIndex ) getLanguageCount # Signature: r1 = getLanguageCount () Description: Gets language count Params: Returns: type description integer Number of languages defined C signature: orxU32 orxLocale_GetLanguageCount () getString # Signature: r1 = getString ( key , group ) Description: Reads a string in the current language for the given key Params: name type description key string Key name group string Concerned group, nil for default/fallback one Returns: type description string The value C signature: const orxSTRING orxLocale_GetString ( const orxSTRING _zKey , const orxSTRING _zGroup ) hasLanguage # Signature: r1 = hasLanguage ( language ) Description: Has given language? (if not correctly defined, false will be returned) Params: name type description language string Concerned language Returns: type description boolean true / false C signature: orxBOOL orxLocale_HasLanguage ( const orxSTRING _zLanguage ) hasString # Signature: r1 = hasString ( key , group ) Description: Has string for the given key? Params: name type description key string Key name group string Concerned group, nil for default/fallback one Returns: type description boolean true / false C signature: orxBOOL orxLocale_HasString ( const orxSTRING _zKey , const orxSTRING _zGroup ) init # Signature: r1 = init () Description: Initializes the Locale Module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxLocale_Init () selectLanguage # Signature: r1 = selectLanguage ( language , group ) Description: Selects current working language Params: name type description language string Language to select group string Concerned group, nil for default/fallback one Returns: type description orxSTATUS C signature: orxSTATUS orxLocale_SelectLanguage ( const orxSTRING _zLanguage , const orxSTRING _zGroup ) setString # Signature: r1 = setString ( key , value , group ) Description: Writes a string in the current language for the given key Params: name type description key string Key name value string Value group string Concerned group, nil for default/fallback one Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxLocale_SetString ( const orxSTRING _zKey , const orxSTRING _zValue , const orxSTRING _zGroup ) setup # Signature: setup () Description: Locale module setup Params: Returns: C signature: void orxLocale_Setup ()","title":"locale"},{"location":"modules/locale.html#module-locale","text":"","title":"module locale"},{"location":"modules/locale.html#functions","text":"","title":"functions"},{"location":"modules/locale.html#exit","text":"Signature: exit () Description: Exits from the Locale Module Params: Returns: C signature: void orxLocale_Exit ()","title":"exit"},{"location":"modules/locale.html#getcurrentlanguage","text":"Signature: r1 = getCurrentLanguage ( group ) Description: Gets current language Params: name type description group string Concerned group, nil for default/fallback one Returns: type description string Current selected language C signature: const orxSTRING orxLocale_GetCurrentLanguage ( const orxSTRING _zGroup )","title":"getCurrentLanguage"},{"location":"modules/locale.html#getkey","text":"Signature: r1 = getKey ( keyindex , group ) Description: Gets key for the current language at the given index Params: name type description keyindex integer Index of the desired key group string Concerned group, nil for default/fallback one Returns: type description string string if exist, nil otherwise C signature: const orxSTRING orxLocale_GetKey ( orxU32 _u32KeyIndex , const orxSTRING _zGroup )","title":"getKey"},{"location":"modules/locale.html#getkeycount","text":"Signature: r1 = getKeyCount ( group ) Description: Gets key count for the current language Params: name type description group string Concerned group, nil for default/fallback one Returns: type description integer Key count the current language if valid, 0 otherwise C signature: orxU32 orxLocale_GetKeyCount ( const orxSTRING _zGroup )","title":"getKeyCount"},{"location":"modules/locale.html#getlanguage","text":"Signature: r1 = getLanguage ( languageindex ) Description: Gets language at the given index Params: name type description languageindex integer Index of the desired language Returns: type description string string if exist, empty string otherwise C signature: const orxSTRING orxLocale_GetLanguage ( orxU32 _u32LanguageIndex )","title":"getLanguage"},{"location":"modules/locale.html#getlanguagecount","text":"Signature: r1 = getLanguageCount () Description: Gets language count Params: Returns: type description integer Number of languages defined C signature: orxU32 orxLocale_GetLanguageCount ()","title":"getLanguageCount"},{"location":"modules/locale.html#getstring","text":"Signature: r1 = getString ( key , group ) Description: Reads a string in the current language for the given key Params: name type description key string Key name group string Concerned group, nil for default/fallback one Returns: type description string The value C signature: const orxSTRING orxLocale_GetString ( const orxSTRING _zKey , const orxSTRING _zGroup )","title":"getString"},{"location":"modules/locale.html#haslanguage","text":"Signature: r1 = hasLanguage ( language ) Description: Has given language? (if not correctly defined, false will be returned) Params: name type description language string Concerned language Returns: type description boolean true / false C signature: orxBOOL orxLocale_HasLanguage ( const orxSTRING _zLanguage )","title":"hasLanguage"},{"location":"modules/locale.html#hasstring","text":"Signature: r1 = hasString ( key , group ) Description: Has string for the given key? Params: name type description key string Key name group string Concerned group, nil for default/fallback one Returns: type description boolean true / false C signature: orxBOOL orxLocale_HasString ( const orxSTRING _zKey , const orxSTRING _zGroup )","title":"hasString"},{"location":"modules/locale.html#init","text":"Signature: r1 = init () Description: Initializes the Locale Module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxLocale_Init ()","title":"init"},{"location":"modules/locale.html#selectlanguage","text":"Signature: r1 = selectLanguage ( language , group ) Description: Selects current working language Params: name type description language string Language to select group string Concerned group, nil for default/fallback one Returns: type description orxSTATUS C signature: orxSTATUS orxLocale_SelectLanguage ( const orxSTRING _zLanguage , const orxSTRING _zGroup )","title":"selectLanguage"},{"location":"modules/locale.html#setstring","text":"Signature: r1 = setString ( key , value , group ) Description: Writes a string in the current language for the given key Params: name type description key string Key name value string Value group string Concerned group, nil for default/fallback one Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxLocale_SetString ( const orxSTRING _zKey , const orxSTRING _zValue , const orxSTRING _zGroup )","title":"setString"},{"location":"modules/locale.html#setup","text":"Signature: setup () Description: Locale module setup Params: Returns: C signature: void orxLocale_Setup ()","title":"setup"},{"location":"modules/math.html","text":"module math # functions # aCos # Signature: r1 = aCos ( op ) Description: Gets an arccosine Params: name type description op number Input radian angle value Returns: type description number Arccosine of the given angle C signature: orxFLOAT orxMath_ACos ( orxFLOAT _fOp ) aSin # Signature: r1 = aSin ( op ) Description: Gets an arcsine Params: name type description op number Input radian angle value Returns: type description number Arcsine of the given angle C signature: orxFLOAT orxMath_ASin ( orxFLOAT _fOp ) aTan # Signature: r1 = aTan ( op1 , op2 ) Description: Gets an arctangent Params: name type description op1 number First operand op2 number Second operand Returns: type description number Arctangent of the given angle C signature: orxFLOAT orxMath_ATan ( orxFLOAT _fOp1 , orxFLOAT _fOp2 ) abs # Signature: r1 = abs ( op ) Description: Gets an absolute value Params: name type description op number Input value Returns: type description number Absolute value C signature: orxFLOAT orxMath_Abs ( orxFLOAT _fOp ) ceil # Signature: r1 = ceil ( op ) Description: Gets a ceiled value Params: name type description op number Input value Returns: type description number Ceiled value C signature: orxFLOAT orxMath_Ceil ( orxFLOAT _fOp ) cos # Signature: r1 = cos ( op ) Description: Gets a cosine Params: name type description op number Input radian angle value Returns: type description number Cosine of the given angle C signature: orxFLOAT orxMath_Cos ( orxFLOAT _fOp ) floor # Signature: r1 = floor ( op ) Description: Gets a floored value Params: name type description op number Input value Returns: type description number Floored value C signature: orxFLOAT orxMath_Floor ( orxFLOAT _fOp ) getBitCount # Signature: r1 = getBitCount ( value ) Description: Gets the count of bit in an orxU32 Params: name type description value integer Value to process Returns: type description integer Number of bits that are set in the value C signature: orxU32 orxMath_GetBitCount ( orxU32 _u32Value ) getNextPowerOfTwo # Signature: r1 = getNextPowerOfTwo ( value ) Description: Gets next power of two of an orxU32 Params: name type description value integer Value to process Returns: type description integer If _u32Value is already a power of two, returns it, otherwise the next power of two C signature: orxU32 orxMath_GetNextPowerOfTwo ( orxU32 _u32Value ) getRandomFloat # Signature: r1 = getRandomFloat ( min , max ) Description: Gets a random orxFLOAT value Params: name type description min number Minimum boundary (inclusive) max number Maximum boundary (exclusive) Returns: type description number Random value C signature: orxFLOAT orxMath_GetRandomFloat ( orxFLOAT _fMin , orxFLOAT _fMax ) getRandomS32 # Signature: r1 = getRandomS32 ( min , max ) Description: Gets a random orxS32 value Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) Returns: type description integer Random value C signature: orxS32 orxMath_GetRandomS32 ( orxS32 _s32Min , orxS32 _s32Max ) getRandomS64 # Signature: r1 = getRandomS64 ( min , max ) Description: Gets a random orxS64 value Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) Returns: type description integer Random value C signature: orxS64 orxMath_GetRandomS64 ( orxS64 _s64Min , orxS64 _s64Max ) getRandomSeeds # Signature: r1 = getRandomSeeds () Description: Gets the current random seeds Params: Returns: type description table of integer Current seeds C signature: void orxMath_GetRandomSeeds ( orxU32 _au32Seeds [ 4 ]) getRandomU32 # Signature: r1 = getRandomU32 ( min , max ) Description: Gets a random orxU32 value Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) Returns: type description integer Random value C signature: orxU32 orxMath_GetRandomU32 ( orxU32 _u32Min , orxU32 _u32Max ) getRandomU64 # Signature: r1 = getRandomU64 ( min , max ) Description: Gets a random orxU64 value Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) Returns: type description integer Random value C signature: orxU64 orxMath_GetRandomU64 ( orxU64 _u64Min , orxU64 _u64Max ) getSteppedRandomFloat # Signature: r1 = getSteppedRandomFloat ( min , max , step ) Description: Gets a random orxFLOAT value using step increments Params: name type description min number Minimum boundary (inclusive) max number Maximum boundary (inclusive) step number Step value, must be strictly positive Returns: type description number Random value C signature: orxFLOAT orxMath_GetSteppedRandomFloat ( orxFLOAT _fMin , orxFLOAT _fMax , orxFLOAT _fStep ) getSteppedRandomS32 # Signature: r1 = getSteppedRandomS32 ( min , max , step ) Description: Gets a random S32 value using step increments Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) step integer Step value, must be strictly positive Returns: type description integer Random value C signature: orxS32 orxMath_GetSteppedRandomS32 ( orxS32 _s32Min , orxS32 _s32Max , orxS32 _s32Step ) getSteppedRandomS64 # Signature: r1 = getSteppedRandomS64 ( min , max , step ) Description: Gets a random S64 value using step increments Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) step integer Step value, must be strictly positive Returns: type description integer Random value C signature: orxS64 orxMath_GetSteppedRandomS64 ( orxS64 _s64Min , orxS64 _s64Max , orxS64 _s64Step ) getSteppedRandomU32 # Signature: r1 = getSteppedRandomU32 ( min , max , step ) Description: Gets a random U32 value using step increments Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) step integer Step value, must be strictly positive Returns: type description integer Random value C signature: orxU32 orxMath_GetSteppedRandomU32 ( orxU32 _u32Min , orxU32 _u32Max , orxU32 _u32Step ) getSteppedRandomU64 # Signature: r1 = getSteppedRandomU64 ( min , max , step ) Description: Gets a random U64 value using step increments Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) step integer Step value, must be strictly positive Returns: type description integer Random value C signature: orxU64 orxMath_GetSteppedRandomU64 ( orxU64 _u64Min , orxU64 _u64Max , orxU64 _u64Step ) getTrailingZeroCount # Signature: r1 = getTrailingZeroCount ( value ) Description: Gets the count of trailing zeros in an orxU32 Params: name type description value integer Value to process Returns: type description integer Number of trailing zeros C signature: orxU32 orxMath_GetTrailingZeroCount ( orxU32 _u32Value ) getTrailingZeroCount64 # Signature: r1 = getTrailingZeroCount64 ( value ) Description: Gets the count of trailing zeros in an orxU64 Params: name type description value integer Value to process Returns: type description integer Number of trailing zeros C signature: orxU32 orxMath_GetTrailingZeroCount64 ( orxU64 _u64Value ) initRandom # Signature: initRandom ( seed ) Description: Inits the random seed Params: name type description seed integer Value to use as seed for random number generation Returns: C signature: void orxMath_InitRandom ( orxU32 _u32Seed ) isPowerOfTwo # Signature: r1 = isPowerOfTwo ( value ) Description: Is value a power of two? Params: name type description value integer Value to test Returns: type description boolean true / false C signature: orxBOOL orxMath_IsPowerOfTwo ( orxU32 _u32Value ) mod # Signature: r1 = mod ( op1 , op2 ) Description: Gets a modulo value Params: name type description op1 number Input value op2 number Modulo value Returns: type description number Modulo value C signature: orxFLOAT orxMath_Mod ( orxFLOAT _fOp1 , orxFLOAT _fOp2 ) pow # Signature: r1 = pow ( op , exp ) Description: Gets a powed value Params: name type description op number Input value exp number Exponent value Returns: type description number Powed value C signature: orxFLOAT orxMath_Pow ( orxFLOAT _fOp , orxFLOAT _fExp ) round # Signature: r1 = round ( op ) Description: Gets a rounded value Params: name type description op number Input value Returns: type description number Rounded value C signature: orxFLOAT orxMath_Round ( orxFLOAT _fOp ) setRandomSeeds # Signature: setRandomSeeds ( seeds ) Description: Sets (replaces) the current random seeds Params: name type description seeds table of integer Seeds to set Returns: C signature: void orxMath_SetRandomSeeds ( const orxU32 _au32Seeds [ 4 ]) sin # Signature: r1 = sin ( op ) Description: Gets a sine Params: name type description op number Input radian angle value Returns: type description number Sine of the given angle C signature: orxFLOAT orxMath_Sin ( orxFLOAT _fOp ) smoothStep # Signature: r1 = smoothStep ( min , max , value ) Description: Gets smooth stepped value between two extrema Params: name type description min number Minimum value max number Maximum value value number Value to process Returns: type description number 0.0 if _fValue <= _fMin, 1.0 if _fValue >= _fMax, smoothed value between 0.0 & 1.0 otherwise C signature: orxFLOAT orxMath_SmoothStep ( orxFLOAT _fMin , orxFLOAT _fMax , orxFLOAT _fValue ) smootherStep # Signature: r1 = smootherStep ( min , max , value ) Description: Gets smoother stepped value between two extrema Params: name type description min number Minimum value max number Maximum value value number Value to process Returns: type description number 0.0 if _fValue <= _fMin, 1.0 if _fValue >= _fMax, smooth(er)ed value between 0.0 & 1.0 otherwise C signature: orxFLOAT orxMath_SmootherStep ( orxFLOAT _fMin , orxFLOAT _fMax , orxFLOAT _fValue ) sqrt # Signature: r1 = sqrt ( op ) Description: Gets a square root Params: name type description op number Input value Returns: type description number Square root of the given value C signature: orxFLOAT orxMath_Sqrt ( orxFLOAT _fOp ) tan # Signature: r1 = tan ( op ) Description: Gets a tangent Params: name type description op number Input radian angle value Returns: type description number Tangent of the given angle C signature: orxFLOAT orxMath_Tan ( orxFLOAT _fOp )","title":"math"},{"location":"modules/math.html#module-math","text":"","title":"module math"},{"location":"modules/math.html#functions","text":"","title":"functions"},{"location":"modules/math.html#acos","text":"Signature: r1 = aCos ( op ) Description: Gets an arccosine Params: name type description op number Input radian angle value Returns: type description number Arccosine of the given angle C signature: orxFLOAT orxMath_ACos ( orxFLOAT _fOp )","title":"aCos"},{"location":"modules/math.html#asin","text":"Signature: r1 = aSin ( op ) Description: Gets an arcsine Params: name type description op number Input radian angle value Returns: type description number Arcsine of the given angle C signature: orxFLOAT orxMath_ASin ( orxFLOAT _fOp )","title":"aSin"},{"location":"modules/math.html#atan","text":"Signature: r1 = aTan ( op1 , op2 ) Description: Gets an arctangent Params: name type description op1 number First operand op2 number Second operand Returns: type description number Arctangent of the given angle C signature: orxFLOAT orxMath_ATan ( orxFLOAT _fOp1 , orxFLOAT _fOp2 )","title":"aTan"},{"location":"modules/math.html#abs","text":"Signature: r1 = abs ( op ) Description: Gets an absolute value Params: name type description op number Input value Returns: type description number Absolute value C signature: orxFLOAT orxMath_Abs ( orxFLOAT _fOp )","title":"abs"},{"location":"modules/math.html#ceil","text":"Signature: r1 = ceil ( op ) Description: Gets a ceiled value Params: name type description op number Input value Returns: type description number Ceiled value C signature: orxFLOAT orxMath_Ceil ( orxFLOAT _fOp )","title":"ceil"},{"location":"modules/math.html#cos","text":"Signature: r1 = cos ( op ) Description: Gets a cosine Params: name type description op number Input radian angle value Returns: type description number Cosine of the given angle C signature: orxFLOAT orxMath_Cos ( orxFLOAT _fOp )","title":"cos"},{"location":"modules/math.html#floor","text":"Signature: r1 = floor ( op ) Description: Gets a floored value Params: name type description op number Input value Returns: type description number Floored value C signature: orxFLOAT orxMath_Floor ( orxFLOAT _fOp )","title":"floor"},{"location":"modules/math.html#getbitcount","text":"Signature: r1 = getBitCount ( value ) Description: Gets the count of bit in an orxU32 Params: name type description value integer Value to process Returns: type description integer Number of bits that are set in the value C signature: orxU32 orxMath_GetBitCount ( orxU32 _u32Value )","title":"getBitCount"},{"location":"modules/math.html#getnextpoweroftwo","text":"Signature: r1 = getNextPowerOfTwo ( value ) Description: Gets next power of two of an orxU32 Params: name type description value integer Value to process Returns: type description integer If _u32Value is already a power of two, returns it, otherwise the next power of two C signature: orxU32 orxMath_GetNextPowerOfTwo ( orxU32 _u32Value )","title":"getNextPowerOfTwo"},{"location":"modules/math.html#getrandomfloat","text":"Signature: r1 = getRandomFloat ( min , max ) Description: Gets a random orxFLOAT value Params: name type description min number Minimum boundary (inclusive) max number Maximum boundary (exclusive) Returns: type description number Random value C signature: orxFLOAT orxMath_GetRandomFloat ( orxFLOAT _fMin , orxFLOAT _fMax )","title":"getRandomFloat"},{"location":"modules/math.html#getrandoms32","text":"Signature: r1 = getRandomS32 ( min , max ) Description: Gets a random orxS32 value Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) Returns: type description integer Random value C signature: orxS32 orxMath_GetRandomS32 ( orxS32 _s32Min , orxS32 _s32Max )","title":"getRandomS32"},{"location":"modules/math.html#getrandoms64","text":"Signature: r1 = getRandomS64 ( min , max ) Description: Gets a random orxS64 value Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) Returns: type description integer Random value C signature: orxS64 orxMath_GetRandomS64 ( orxS64 _s64Min , orxS64 _s64Max )","title":"getRandomS64"},{"location":"modules/math.html#getrandomseeds","text":"Signature: r1 = getRandomSeeds () Description: Gets the current random seeds Params: Returns: type description table of integer Current seeds C signature: void orxMath_GetRandomSeeds ( orxU32 _au32Seeds [ 4 ])","title":"getRandomSeeds"},{"location":"modules/math.html#getrandomu32","text":"Signature: r1 = getRandomU32 ( min , max ) Description: Gets a random orxU32 value Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) Returns: type description integer Random value C signature: orxU32 orxMath_GetRandomU32 ( orxU32 _u32Min , orxU32 _u32Max )","title":"getRandomU32"},{"location":"modules/math.html#getrandomu64","text":"Signature: r1 = getRandomU64 ( min , max ) Description: Gets a random orxU64 value Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) Returns: type description integer Random value C signature: orxU64 orxMath_GetRandomU64 ( orxU64 _u64Min , orxU64 _u64Max )","title":"getRandomU64"},{"location":"modules/math.html#getsteppedrandomfloat","text":"Signature: r1 = getSteppedRandomFloat ( min , max , step ) Description: Gets a random orxFLOAT value using step increments Params: name type description min number Minimum boundary (inclusive) max number Maximum boundary (inclusive) step number Step value, must be strictly positive Returns: type description number Random value C signature: orxFLOAT orxMath_GetSteppedRandomFloat ( orxFLOAT _fMin , orxFLOAT _fMax , orxFLOAT _fStep )","title":"getSteppedRandomFloat"},{"location":"modules/math.html#getsteppedrandoms32","text":"Signature: r1 = getSteppedRandomS32 ( min , max , step ) Description: Gets a random S32 value using step increments Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) step integer Step value, must be strictly positive Returns: type description integer Random value C signature: orxS32 orxMath_GetSteppedRandomS32 ( orxS32 _s32Min , orxS32 _s32Max , orxS32 _s32Step )","title":"getSteppedRandomS32"},{"location":"modules/math.html#getsteppedrandoms64","text":"Signature: r1 = getSteppedRandomS64 ( min , max , step ) Description: Gets a random S64 value using step increments Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) step integer Step value, must be strictly positive Returns: type description integer Random value C signature: orxS64 orxMath_GetSteppedRandomS64 ( orxS64 _s64Min , orxS64 _s64Max , orxS64 _s64Step )","title":"getSteppedRandomS64"},{"location":"modules/math.html#getsteppedrandomu32","text":"Signature: r1 = getSteppedRandomU32 ( min , max , step ) Description: Gets a random U32 value using step increments Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) step integer Step value, must be strictly positive Returns: type description integer Random value C signature: orxU32 orxMath_GetSteppedRandomU32 ( orxU32 _u32Min , orxU32 _u32Max , orxU32 _u32Step )","title":"getSteppedRandomU32"},{"location":"modules/math.html#getsteppedrandomu64","text":"Signature: r1 = getSteppedRandomU64 ( min , max , step ) Description: Gets a random U64 value using step increments Params: name type description min integer Minimum boundary (inclusive) max integer Maximum boundary (inclusive) step integer Step value, must be strictly positive Returns: type description integer Random value C signature: orxU64 orxMath_GetSteppedRandomU64 ( orxU64 _u64Min , orxU64 _u64Max , orxU64 _u64Step )","title":"getSteppedRandomU64"},{"location":"modules/math.html#gettrailingzerocount","text":"Signature: r1 = getTrailingZeroCount ( value ) Description: Gets the count of trailing zeros in an orxU32 Params: name type description value integer Value to process Returns: type description integer Number of trailing zeros C signature: orxU32 orxMath_GetTrailingZeroCount ( orxU32 _u32Value )","title":"getTrailingZeroCount"},{"location":"modules/math.html#gettrailingzerocount64","text":"Signature: r1 = getTrailingZeroCount64 ( value ) Description: Gets the count of trailing zeros in an orxU64 Params: name type description value integer Value to process Returns: type description integer Number of trailing zeros C signature: orxU32 orxMath_GetTrailingZeroCount64 ( orxU64 _u64Value )","title":"getTrailingZeroCount64"},{"location":"modules/math.html#initrandom","text":"Signature: initRandom ( seed ) Description: Inits the random seed Params: name type description seed integer Value to use as seed for random number generation Returns: C signature: void orxMath_InitRandom ( orxU32 _u32Seed )","title":"initRandom"},{"location":"modules/math.html#ispoweroftwo","text":"Signature: r1 = isPowerOfTwo ( value ) Description: Is value a power of two? Params: name type description value integer Value to test Returns: type description boolean true / false C signature: orxBOOL orxMath_IsPowerOfTwo ( orxU32 _u32Value )","title":"isPowerOfTwo"},{"location":"modules/math.html#mod","text":"Signature: r1 = mod ( op1 , op2 ) Description: Gets a modulo value Params: name type description op1 number Input value op2 number Modulo value Returns: type description number Modulo value C signature: orxFLOAT orxMath_Mod ( orxFLOAT _fOp1 , orxFLOAT _fOp2 )","title":"mod"},{"location":"modules/math.html#pow","text":"Signature: r1 = pow ( op , exp ) Description: Gets a powed value Params: name type description op number Input value exp number Exponent value Returns: type description number Powed value C signature: orxFLOAT orxMath_Pow ( orxFLOAT _fOp , orxFLOAT _fExp )","title":"pow"},{"location":"modules/math.html#round","text":"Signature: r1 = round ( op ) Description: Gets a rounded value Params: name type description op number Input value Returns: type description number Rounded value C signature: orxFLOAT orxMath_Round ( orxFLOAT _fOp )","title":"round"},{"location":"modules/math.html#setrandomseeds","text":"Signature: setRandomSeeds ( seeds ) Description: Sets (replaces) the current random seeds Params: name type description seeds table of integer Seeds to set Returns: C signature: void orxMath_SetRandomSeeds ( const orxU32 _au32Seeds [ 4 ])","title":"setRandomSeeds"},{"location":"modules/math.html#sin","text":"Signature: r1 = sin ( op ) Description: Gets a sine Params: name type description op number Input radian angle value Returns: type description number Sine of the given angle C signature: orxFLOAT orxMath_Sin ( orxFLOAT _fOp )","title":"sin"},{"location":"modules/math.html#smoothstep","text":"Signature: r1 = smoothStep ( min , max , value ) Description: Gets smooth stepped value between two extrema Params: name type description min number Minimum value max number Maximum value value number Value to process Returns: type description number 0.0 if _fValue <= _fMin, 1.0 if _fValue >= _fMax, smoothed value between 0.0 & 1.0 otherwise C signature: orxFLOAT orxMath_SmoothStep ( orxFLOAT _fMin , orxFLOAT _fMax , orxFLOAT _fValue )","title":"smoothStep"},{"location":"modules/math.html#smootherstep","text":"Signature: r1 = smootherStep ( min , max , value ) Description: Gets smoother stepped value between two extrema Params: name type description min number Minimum value max number Maximum value value number Value to process Returns: type description number 0.0 if _fValue <= _fMin, 1.0 if _fValue >= _fMax, smooth(er)ed value between 0.0 & 1.0 otherwise C signature: orxFLOAT orxMath_SmootherStep ( orxFLOAT _fMin , orxFLOAT _fMax , orxFLOAT _fValue )","title":"smootherStep"},{"location":"modules/math.html#sqrt","text":"Signature: r1 = sqrt ( op ) Description: Gets a square root Params: name type description op number Input value Returns: type description number Square root of the given value C signature: orxFLOAT orxMath_Sqrt ( orxFLOAT _fOp )","title":"sqrt"},{"location":"modules/math.html#tan","text":"Signature: r1 = tan ( op ) Description: Gets a tangent Params: name type description op number Input radian angle value Returns: type description number Tangent of the given angle C signature: orxFLOAT orxMath_Tan ( orxFLOAT _fOp )","title":"tan"},{"location":"modules/module.html","text":"module module # functions # addDependency # Signature: addDependency ( moduleid , dependid ) Description: Adds dependencies between 2 modules Params: name type description moduleid orxMODULE_ID Concerned module ID dependid orxMODULE_ID Module ID of the needed module Returns: C signature: void orxModule_AddDependency ( orxMODULE_ID _eModuleID , orxMODULE_ID _eDependID ) addOptionalDependency # Signature: addOptionalDependency ( moduleid , dependid ) Description: Adds optional dependencies between 2 modules Params: name type description moduleid orxMODULE_ID Concerned module ID dependid orxMODULE_ID Module ID of the optionally needed module Returns: C signature: void orxModule_AddOptionalDependency ( orxMODULE_ID _eModuleID , orxMODULE_ID _eDependID ) exit # Signature: exit ( moduleid ) Description: Exits from a module Params: name type description moduleid orxMODULE_ID Concerned module ID Returns: C signature: void orxModule_Exit ( orxMODULE_ID _eModuleID ) getName # Signature: r1 = getName ( moduleid ) Description: Gets module name Params: name type description moduleid orxMODULE_ID Concerned module ID Returns: type description string Module name / empty string C signature: const orxSTRING orxModule_GetName ( orxMODULE_ID _eModuleID ) init # Signature: r1 = init ( moduleid ) Description: Inits a module Params: name type description moduleid orxMODULE_ID Concerned module ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxModule_Init ( orxMODULE_ID _eModuleID ) isInitialized # Signature: r1 = isInitialized ( moduleid ) Description: Is module initialized? Params: name type description moduleid orxMODULE_ID Concerned module ID Returns: type description boolean true / false C signature: orxBOOL orxModule_IsInitialized ( orxMODULE_ID _eModuleID )","title":"module"},{"location":"modules/module.html#module-module","text":"","title":"module module"},{"location":"modules/module.html#functions","text":"","title":"functions"},{"location":"modules/module.html#adddependency","text":"Signature: addDependency ( moduleid , dependid ) Description: Adds dependencies between 2 modules Params: name type description moduleid orxMODULE_ID Concerned module ID dependid orxMODULE_ID Module ID of the needed module Returns: C signature: void orxModule_AddDependency ( orxMODULE_ID _eModuleID , orxMODULE_ID _eDependID )","title":"addDependency"},{"location":"modules/module.html#addoptionaldependency","text":"Signature: addOptionalDependency ( moduleid , dependid ) Description: Adds optional dependencies between 2 modules Params: name type description moduleid orxMODULE_ID Concerned module ID dependid orxMODULE_ID Module ID of the optionally needed module Returns: C signature: void orxModule_AddOptionalDependency ( orxMODULE_ID _eModuleID , orxMODULE_ID _eDependID )","title":"addOptionalDependency"},{"location":"modules/module.html#exit","text":"Signature: exit ( moduleid ) Description: Exits from a module Params: name type description moduleid orxMODULE_ID Concerned module ID Returns: C signature: void orxModule_Exit ( orxMODULE_ID _eModuleID )","title":"exit"},{"location":"modules/module.html#getname","text":"Signature: r1 = getName ( moduleid ) Description: Gets module name Params: name type description moduleid orxMODULE_ID Concerned module ID Returns: type description string Module name / empty string C signature: const orxSTRING orxModule_GetName ( orxMODULE_ID _eModuleID )","title":"getName"},{"location":"modules/module.html#init","text":"Signature: r1 = init ( moduleid ) Description: Inits a module Params: name type description moduleid orxMODULE_ID Concerned module ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxModule_Init ( orxMODULE_ID _eModuleID )","title":"init"},{"location":"modules/module.html#isinitialized","text":"Signature: r1 = isInitialized ( moduleid ) Description: Is module initialized? Params: name type description moduleid orxMODULE_ID Concerned module ID Returns: type description boolean true / false C signature: orxBOOL orxModule_IsInitialized ( orxMODULE_ID _eModuleID )","title":"isInitialized"},{"location":"modules/mouse.html","text":"module mouse # functions # exit # Signature: exit () Description: Exits from the mouse module Params: Returns: C signature: void orxMouse_Exit () getAxisName # Signature: r1 = getAxisName ( axis ) Description: Gets axis literal name Params: name type description axis orxMOUSE_AXIS Concerned axis Returns: type description string Axis's name C signature: const orxSTRING orxMouse_GetAxisName ( orxMOUSE_AXIS _eAxis ) getButtonName # Signature: r1 = getButtonName ( button ) Description: Gets button literal name Params: name type description button orxMOUSE_BUTTON Concerned button Returns: type description string Button's name C signature: const orxSTRING orxMouse_GetButtonName ( orxMOUSE_BUTTON _eButton ) getMoveDelta # Signature: r1 = getMoveDelta () Description: Gets mouse move delta (since last call) Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxMouse_GetMoveDelta ( orxVECTOR * _pvMoveDelta ) getPosition # Signature: r1 = getPosition () Description: Gets mouse position Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxMouse_GetPosition ( orxVECTOR * _pvPosition ) getWheelDelta # Signature: r1 = getWheelDelta () Description: Gets mouse wheel delta (since last call) Params: Returns: type description number Mouse wheel delta C signature: orxFLOAT orxMouse_GetWheelDelta () grab # Signature: r1 = grab ( grab ) Description: Grabs the mouse Params: name type description grab boolean Grab / Release Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxMouse_Grab ( orxBOOL _bGrab ) init # Signature: r1 = init () Description: Inits the mouse module Params: Returns: type description orxSTATUS Returns the status of the operation C signature: orxSTATUS orxMouse_Init () isButtonPressed # Signature: r1 = isButtonPressed ( button ) Description: Is mouse button pressed? Params: name type description button orxMOUSE_BUTTON Mouse button to check Returns: type description boolean true if pressed / false otherwise C signature: orxBOOL orxMouse_IsButtonPressed ( orxMOUSE_BUTTON _eButton ) setCursor # Signature: r1 = setCursor ( name , pivot ) Description: Sets mouse (hardware) cursor Params: name type description name string Cursor's name can be: a standard name (arrow, ibeam, hand, crosshair, hresize or vresize), a file name or nil to reset the hardware cursor to default pivot orxVECTOR# Cursor's pivot (aka hotspot), nil will default to (0, 0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxMouse_SetCursor ( const orxSTRING _zName , const orxVECTOR * _pvPivot ) setPosition # Signature: r1 = setPosition ( position ) Description: Sets mouse position Params: name type description position orxVECTOR# Mouse position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxMouse_SetPosition ( const orxVECTOR * _pvPosition ) setup # Signature: setup () Description: Mouse module setup Params: Returns: C signature: void orxMouse_Setup () showCursor # Signature: r1 = showCursor ( show ) Description: Shows mouse (hardware) cursor Params: name type description show boolean Show / Hide Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxMouse_ShowCursor ( orxBOOL _bShow )","title":"mouse"},{"location":"modules/mouse.html#module-mouse","text":"","title":"module mouse"},{"location":"modules/mouse.html#functions","text":"","title":"functions"},{"location":"modules/mouse.html#exit","text":"Signature: exit () Description: Exits from the mouse module Params: Returns: C signature: void orxMouse_Exit ()","title":"exit"},{"location":"modules/mouse.html#getaxisname","text":"Signature: r1 = getAxisName ( axis ) Description: Gets axis literal name Params: name type description axis orxMOUSE_AXIS Concerned axis Returns: type description string Axis's name C signature: const orxSTRING orxMouse_GetAxisName ( orxMOUSE_AXIS _eAxis )","title":"getAxisName"},{"location":"modules/mouse.html#getbuttonname","text":"Signature: r1 = getButtonName ( button ) Description: Gets button literal name Params: name type description button orxMOUSE_BUTTON Concerned button Returns: type description string Button's name C signature: const orxSTRING orxMouse_GetButtonName ( orxMOUSE_BUTTON _eButton )","title":"getButtonName"},{"location":"modules/mouse.html#getmovedelta","text":"Signature: r1 = getMoveDelta () Description: Gets mouse move delta (since last call) Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxMouse_GetMoveDelta ( orxVECTOR * _pvMoveDelta )","title":"getMoveDelta"},{"location":"modules/mouse.html#getposition","text":"Signature: r1 = getPosition () Description: Gets mouse position Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxMouse_GetPosition ( orxVECTOR * _pvPosition )","title":"getPosition"},{"location":"modules/mouse.html#getwheeldelta","text":"Signature: r1 = getWheelDelta () Description: Gets mouse wheel delta (since last call) Params: Returns: type description number Mouse wheel delta C signature: orxFLOAT orxMouse_GetWheelDelta ()","title":"getWheelDelta"},{"location":"modules/mouse.html#grab","text":"Signature: r1 = grab ( grab ) Description: Grabs the mouse Params: name type description grab boolean Grab / Release Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxMouse_Grab ( orxBOOL _bGrab )","title":"grab"},{"location":"modules/mouse.html#init","text":"Signature: r1 = init () Description: Inits the mouse module Params: Returns: type description orxSTATUS Returns the status of the operation C signature: orxSTATUS orxMouse_Init ()","title":"init"},{"location":"modules/mouse.html#isbuttonpressed","text":"Signature: r1 = isButtonPressed ( button ) Description: Is mouse button pressed? Params: name type description button orxMOUSE_BUTTON Mouse button to check Returns: type description boolean true if pressed / false otherwise C signature: orxBOOL orxMouse_IsButtonPressed ( orxMOUSE_BUTTON _eButton )","title":"isButtonPressed"},{"location":"modules/mouse.html#setcursor","text":"Signature: r1 = setCursor ( name , pivot ) Description: Sets mouse (hardware) cursor Params: name type description name string Cursor's name can be: a standard name (arrow, ibeam, hand, crosshair, hresize or vresize), a file name or nil to reset the hardware cursor to default pivot orxVECTOR# Cursor's pivot (aka hotspot), nil will default to (0, 0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxMouse_SetCursor ( const orxSTRING _zName , const orxVECTOR * _pvPivot )","title":"setCursor"},{"location":"modules/mouse.html#setposition","text":"Signature: r1 = setPosition ( position ) Description: Sets mouse position Params: name type description position orxVECTOR# Mouse position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxMouse_SetPosition ( const orxVECTOR * _pvPosition )","title":"setPosition"},{"location":"modules/mouse.html#setup","text":"Signature: setup () Description: Mouse module setup Params: Returns: C signature: void orxMouse_Setup ()","title":"setup"},{"location":"modules/mouse.html#showcursor","text":"Signature: r1 = showCursor ( show ) Description: Shows mouse (hardware) cursor Params: name type description show boolean Show / Hide Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxMouse_ShowCursor ( orxBOOL _bShow )","title":"showCursor"},{"location":"modules/object.html","text":"module object # functions # boxPick # Signature: r1 = boxPick ( box , groupid ) Description: Picks the first active object with size in contact with the given box, withing a given group. Use orxObject_CreateNeighborList() to get all the objects in the box. Params: name type description box orxOBOX# Box to use for picking groupid integer Group ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_BoxPick ( const orxOBOX * _pstBox , orxSTRINGID _stGroupID ) create # Signature: r1 = create () Description: Creates an empty object. Params: Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_Create () createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates an object from config. Params: name type description configid string Config ID Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the object module. Params: Returns: C signature: void orxObject_Exit () getDefaultGroupID # Signature: r1 = getDefaultGroupID () Description: Gets default group ID. Params: Returns: type description integer Default group ID C signature: orxSTRINGID orxObject_GetDefaultGroupID () getNeighborList # Signature: r1 = getNeighborList ( box , groupid ) Description: Get the neighboring objects Params: name type description box orxOBOX Box to select objects groupid integer Group ID, orxSTRINGID_UNDEFINED for all Returns: type description table of orxOBJECT Objects in the box C signature: orxBANK * orxObject_CreateNeighborList ( const orxOBOX * _pstCheckBox , orxSTRINGID _stGroupID ); void orxObject_DeleteNeighborList ( orxBANK * _pstObjectList ); getNext # Signature: r1 = getNext ( object , groupid ) Description: Gets next object in group. Params: name type description object orxOBJECT# Concerned object, nil to get the first one groupid integer Group ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_GetNext ( const orxOBJECT * _pstObject , orxSTRINGID _stGroupID ) getNextEnabled # Signature: r1 = getNextEnabled ( object , groupid ) Description: Gets next enabled object. Params: name type description object orxOBJECT# Concerned object, nil to get the first one groupid integer Group ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_GetNextEnabled ( const orxOBJECT * _pstObject , orxSTRINGID _stGroupID ) getStructure # Signature: r1 = getStructure ( object , structureid ) Description: Structure used by an object get accessor, given its structure ID. Structure must then be cast correctly. (see helper macro #orxOBJECT_GET_STRUCTURE()) Params: name type description object orxOBJECT# Concerned object structureid orxSTRUCTURE_ID ID of the structure to get Returns: type description orxSTRUCTURE orxSTRUCTURE / nil C signature: orxSTRUCTURE * _orxObject_GetStructure ( const orxOBJECT * _pstObject , orxSTRUCTURE_ID _eStructureID ) init # Signature: r1 = init () Description: Inits the object module. Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Init () pick # Signature: r1 = pick ( position , groupid ) Description: Picks the first active object with size \"under\" the given position, within a given group. See orxObject_BoxPick(), orxObject_CreateNeighborList() and orxObject_Raycast for other ways of picking objects. Params: name type description position orxVECTOR# Position to pick from groupid integer Group ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_Pick ( const orxVECTOR * _pvPosition , orxSTRINGID _stGroupID ) raycast # Signature: r1 = raycast ( begin , end , selfflags , checkmask , earlyexit , contact , normal ) Description: Issues a raycast to test for potential objects in the way. Params: name type description begin orxVECTOR# Beginning of raycast end orxVECTOR# End of raycast selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) earlyexit boolean Should stop as soon as an object has been hit (which might not be the closest) contact orxVECTOR If non-nil and a contact is found it will be stored here normal orxVECTOR If non-nil and a contact is found, its normal will be stored here Returns: type description orxOBJECT Colliding orxOBJECT / nil C signature: orxOBJECT * orxObject_Raycast ( const orxVECTOR * _pvBegin , const orxVECTOR * _pvEnd , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxBOOL _bEarlyExit , orxVECTOR * _pvContact , orxVECTOR * _pvNormal ) setup # Signature: setup () Description: Object module setup Params: Returns: C signature: void orxObject_Setup ()","title":"object"},{"location":"modules/object.html#module-object","text":"","title":"module object"},{"location":"modules/object.html#functions","text":"","title":"functions"},{"location":"modules/object.html#boxpick","text":"Signature: r1 = boxPick ( box , groupid ) Description: Picks the first active object with size in contact with the given box, withing a given group. Use orxObject_CreateNeighborList() to get all the objects in the box. Params: name type description box orxOBOX# Box to use for picking groupid integer Group ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_BoxPick ( const orxOBOX * _pstBox , orxSTRINGID _stGroupID )","title":"boxPick"},{"location":"modules/object.html#create","text":"Signature: r1 = create () Description: Creates an empty object. Params: Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_Create ()","title":"create"},{"location":"modules/object.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates an object from config. Params: name type description configid string Config ID Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/object.html#exit","text":"Signature: exit () Description: Exits from the object module. Params: Returns: C signature: void orxObject_Exit ()","title":"exit"},{"location":"modules/object.html#getdefaultgroupid","text":"Signature: r1 = getDefaultGroupID () Description: Gets default group ID. Params: Returns: type description integer Default group ID C signature: orxSTRINGID orxObject_GetDefaultGroupID ()","title":"getDefaultGroupID"},{"location":"modules/object.html#getneighborlist","text":"Signature: r1 = getNeighborList ( box , groupid ) Description: Get the neighboring objects Params: name type description box orxOBOX Box to select objects groupid integer Group ID, orxSTRINGID_UNDEFINED for all Returns: type description table of orxOBJECT Objects in the box C signature: orxBANK * orxObject_CreateNeighborList ( const orxOBOX * _pstCheckBox , orxSTRINGID _stGroupID ); void orxObject_DeleteNeighborList ( orxBANK * _pstObjectList );","title":"getNeighborList"},{"location":"modules/object.html#getnext","text":"Signature: r1 = getNext ( object , groupid ) Description: Gets next object in group. Params: name type description object orxOBJECT# Concerned object, nil to get the first one groupid integer Group ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_GetNext ( const orxOBJECT * _pstObject , orxSTRINGID _stGroupID )","title":"getNext"},{"location":"modules/object.html#getnextenabled","text":"Signature: r1 = getNextEnabled ( object , groupid ) Description: Gets next enabled object. Params: name type description object orxOBJECT# Concerned object, nil to get the first one groupid integer Group ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_GetNextEnabled ( const orxOBJECT * _pstObject , orxSTRINGID _stGroupID )","title":"getNextEnabled"},{"location":"modules/object.html#getstructure","text":"Signature: r1 = getStructure ( object , structureid ) Description: Structure used by an object get accessor, given its structure ID. Structure must then be cast correctly. (see helper macro #orxOBJECT_GET_STRUCTURE()) Params: name type description object orxOBJECT# Concerned object structureid orxSTRUCTURE_ID ID of the structure to get Returns: type description orxSTRUCTURE orxSTRUCTURE / nil C signature: orxSTRUCTURE * _orxObject_GetStructure ( const orxOBJECT * _pstObject , orxSTRUCTURE_ID _eStructureID )","title":"getStructure"},{"location":"modules/object.html#init","text":"Signature: r1 = init () Description: Inits the object module. Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Init ()","title":"init"},{"location":"modules/object.html#pick","text":"Signature: r1 = pick ( position , groupid ) Description: Picks the first active object with size \"under\" the given position, within a given group. See orxObject_BoxPick(), orxObject_CreateNeighborList() and orxObject_Raycast for other ways of picking objects. Params: name type description position orxVECTOR# Position to pick from groupid integer Group ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxOBJECT orxOBJECT / nil C signature: orxOBJECT * orxObject_Pick ( const orxVECTOR * _pvPosition , orxSTRINGID _stGroupID )","title":"pick"},{"location":"modules/object.html#raycast","text":"Signature: r1 = raycast ( begin , end , selfflags , checkmask , earlyexit , contact , normal ) Description: Issues a raycast to test for potential objects in the way. Params: name type description begin orxVECTOR# Beginning of raycast end orxVECTOR# End of raycast selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) earlyexit boolean Should stop as soon as an object has been hit (which might not be the closest) contact orxVECTOR If non-nil and a contact is found it will be stored here normal orxVECTOR If non-nil and a contact is found, its normal will be stored here Returns: type description orxOBJECT Colliding orxOBJECT / nil C signature: orxOBJECT * orxObject_Raycast ( const orxVECTOR * _pvBegin , const orxVECTOR * _pvEnd , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxBOOL _bEarlyExit , orxVECTOR * _pvContact , orxVECTOR * _pvNormal )","title":"raycast"},{"location":"modules/object.html#setup","text":"Signature: setup () Description: Object module setup Params: Returns: C signature: void orxObject_Setup ()","title":"setup"},{"location":"modules/obox.html","text":"module obox # functions # obox # Signature: r1 = obox ( vPosition , vPivot , vX , vY , vZ ) Description: Create a new orxOBOX Params: name type description vPosition orxVECTOR vPivot orxVECTOR vX orxVECTOR vY orxVECTOR vZ orxVECTOR Returns: type description orxOBOX The new instance","title":"obox"},{"location":"modules/obox.html#module-obox","text":"","title":"module obox"},{"location":"modules/obox.html#functions","text":"","title":"functions"},{"location":"modules/obox.html#obox","text":"Signature: r1 = obox ( vPosition , vPivot , vX , vY , vZ ) Description: Create a new orxOBOX Params: name type description vPosition orxVECTOR vPivot orxVECTOR vX orxVECTOR vY orxVECTOR vZ orxVECTOR Returns: type description orxOBOX The new instance","title":"obox"},{"location":"modules/physics.html","text":"module physics # functions # boxPick # Signature: r1 = boxPick ( box , selfflags , checkmask , userdatalist , number ) Description: Picks bodies in contact with the given axis aligned box Params: name type description box orxAABOX# Box used for picking selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) userdatalist table of orxHANDLE List of user data to fill number integer Number of user data Returns: type description integer Count of actual found bodies. It might be larger than the given array, in which case you'd need to pass a larger array to retrieve them all. C signature: orxU32 orxPhysics_BoxPick ( const orxAABOX * _pstBox , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxHANDLE _ahUserDataList [], orxU32 _u32Number ) enableSimulation # Signature: enableSimulation ( enable ) Description: Enables/disables physics simulation Params: name type description enable boolean Enable / disable Returns: C signature: void orxPhysics_EnableSimulation ( orxBOOL _bEnable ) exit # Signature: exit () Description: Exits from the physics module Params: Returns: C signature: void orxPhysics_Exit () getCollisionFlagName # Signature: r1 = getCollisionFlagName ( flag ) Description: Gets collision flag literal name Params: name type description flag integer Concerned collision flag numerical value Returns: type description string Flag's name C signature: const orxSTRING orxPhysics_GetCollisionFlagName ( orxU32 _u32Flag ) getCollisionFlagValue # Signature: r1 = getCollisionFlagValue ( flag ) Description: Gets collision flag numerical value Params: name type description flag string Concerned collision flag literal name Returns: type description integer Flag's value C signature: orxU32 orxPhysics_GetCollisionFlagValue ( const orxSTRING _zFlag ) getGravity # Signature: r1 = getGravity () Description: Gets physics gravity Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxPhysics_GetGravity ( orxVECTOR * _pvGravity ) init # Signature: r1 = init () Description: Inits the physics module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_Init () raycast # Signature: r1 = raycast ( begin , end , selfflags , checkmask , earlyexit , contact , normal ) Description: Issues a raycast to test for potential physics bodies in the way Params: name type description begin orxVECTOR# Beginning of raycast end orxVECTOR# End of raycast selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) earlyexit boolean Should stop as soon as an object has been hit (which might not be the closest) contact orxVECTOR If non-nil and a contact is found it will be stored here normal orxVECTOR If non-nil and a contact is found, its normal will be stored here Returns: type description orxHANDLE Colliding body's user data / orxHANDLE_UNDEFINED C signature: orxHANDLE orxPhysics_Raycast ( const orxVECTOR * _pvBegin , const orxVECTOR * _pvEnd , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxBOOL _bEarlyExit , orxVECTOR * _pvContact , orxVECTOR * _pvNormal ) setGravity # Signature: r1 = setGravity ( gravity ) Description: Sets physics gravity Params: name type description gravity orxVECTOR# Gravity to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetGravity ( const orxVECTOR * _pvGravity ) setup # Signature: setup () Description: Physics module setup Params: Returns: C signature: void orxPhysics_Setup ()","title":"physics"},{"location":"modules/physics.html#module-physics","text":"","title":"module physics"},{"location":"modules/physics.html#functions","text":"","title":"functions"},{"location":"modules/physics.html#boxpick","text":"Signature: r1 = boxPick ( box , selfflags , checkmask , userdatalist , number ) Description: Picks bodies in contact with the given axis aligned box Params: name type description box orxAABOX# Box used for picking selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) userdatalist table of orxHANDLE List of user data to fill number integer Number of user data Returns: type description integer Count of actual found bodies. It might be larger than the given array, in which case you'd need to pass a larger array to retrieve them all. C signature: orxU32 orxPhysics_BoxPick ( const orxAABOX * _pstBox , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxHANDLE _ahUserDataList [], orxU32 _u32Number )","title":"boxPick"},{"location":"modules/physics.html#enablesimulation","text":"Signature: enableSimulation ( enable ) Description: Enables/disables physics simulation Params: name type description enable boolean Enable / disable Returns: C signature: void orxPhysics_EnableSimulation ( orxBOOL _bEnable )","title":"enableSimulation"},{"location":"modules/physics.html#exit","text":"Signature: exit () Description: Exits from the physics module Params: Returns: C signature: void orxPhysics_Exit ()","title":"exit"},{"location":"modules/physics.html#getcollisionflagname","text":"Signature: r1 = getCollisionFlagName ( flag ) Description: Gets collision flag literal name Params: name type description flag integer Concerned collision flag numerical value Returns: type description string Flag's name C signature: const orxSTRING orxPhysics_GetCollisionFlagName ( orxU32 _u32Flag )","title":"getCollisionFlagName"},{"location":"modules/physics.html#getcollisionflagvalue","text":"Signature: r1 = getCollisionFlagValue ( flag ) Description: Gets collision flag numerical value Params: name type description flag string Concerned collision flag literal name Returns: type description integer Flag's value C signature: orxU32 orxPhysics_GetCollisionFlagValue ( const orxSTRING _zFlag )","title":"getCollisionFlagValue"},{"location":"modules/physics.html#getgravity","text":"Signature: r1 = getGravity () Description: Gets physics gravity Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxPhysics_GetGravity ( orxVECTOR * _pvGravity )","title":"getGravity"},{"location":"modules/physics.html#init","text":"Signature: r1 = init () Description: Inits the physics module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_Init ()","title":"init"},{"location":"modules/physics.html#raycast","text":"Signature: r1 = raycast ( begin , end , selfflags , checkmask , earlyexit , contact , normal ) Description: Issues a raycast to test for potential physics bodies in the way Params: name type description begin orxVECTOR# Beginning of raycast end orxVECTOR# End of raycast selfflags integer Selfs flags used for filtering (0xFFFF for no filtering) checkmask integer Check mask used for filtering (0xFFFF for no filtering) earlyexit boolean Should stop as soon as an object has been hit (which might not be the closest) contact orxVECTOR If non-nil and a contact is found it will be stored here normal orxVECTOR If non-nil and a contact is found, its normal will be stored here Returns: type description orxHANDLE Colliding body's user data / orxHANDLE_UNDEFINED C signature: orxHANDLE orxPhysics_Raycast ( const orxVECTOR * _pvBegin , const orxVECTOR * _pvEnd , orxU16 _u16SelfFlags , orxU16 _u16CheckMask , orxBOOL _bEarlyExit , orxVECTOR * _pvContact , orxVECTOR * _pvNormal )","title":"raycast"},{"location":"modules/physics.html#setgravity","text":"Signature: r1 = setGravity ( gravity ) Description: Sets physics gravity Params: name type description gravity orxVECTOR# Gravity to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetGravity ( const orxVECTOR * _pvGravity )","title":"setGravity"},{"location":"modules/physics.html#setup","text":"Signature: setup () Description: Physics module setup Params: Returns: C signature: void orxPhysics_Setup ()","title":"setup"},{"location":"modules/profiler.html","text":"module profiler # functions # areMarkerOperationsEnabled # Signature: r1 = areMarkerOperationsEnabled () Description: Are marker push/pop operations enabled? Params: Returns: type description boolean true / false C signature: orxBOOL orxProfiler_AreMarkerOperationsEnabled () enableMarkerOperations # Signature: enableMarkerOperations ( enable ) Description: Enables marker push/pop operations Params: name type description enable boolean Enable Returns: C signature: void orxProfiler_EnableMarkerOperations ( orxBOOL _bEnable ) exit # Signature: exit () Description: Params: Returns: C signature: void orxProfiler_Exit () getIDFromName # Signature: r1 = getIDFromName ( name ) Description: Gets a marker ID given a name Params: name type description name string Name of the marker Returns: type description integer Marker's ID / orxPROFILER_KS32_MARKER_ID_NONE C signature: orxS32 orxProfiler_GetIDFromName ( const orxSTRING _zName ) getMarkerCount # Signature: r1 = getMarkerCount () Description: Gets the number of registered markers used on the queried thread Params: Returns: type description integer Number of registered markers C signature: orxS32 orxProfiler_GetMarkerCount () getMarkerMaxTime # Signature: r1 = getMarkerMaxTime ( markerid ) Description: Gets the marker's maximum cumulated time Params: name type description markerid integer Concerned marker ID Returns: type description number Marker's max cumulated time C signature: orxDOUBLE orxProfiler_GetMarkerMaxTime ( orxS32 _s32MarkerID ) getMarkerName # Signature: r1 = getMarkerName ( markerid ) Description: Gets the marker's name Params: name type description markerid integer Concerned marker ID Returns: type description string Marker's name C signature: const orxSTRING orxProfiler_GetMarkerName ( orxS32 _s32MarkerID ) getMarkerPushCount # Signature: r1 = getMarkerPushCount ( markerid ) Description: Gets the marker's push count Params: name type description markerid integer Concerned marker ID Returns: type description integer Number of time the marker has been pushed since last reset C signature: orxU32 orxProfiler_GetMarkerPushCount ( orxS32 _s32MarkerID ) getMarkerTime # Signature: r1 = getMarkerTime ( markerid ) Description: Gets the marker's cumulated time Params: name type description markerid integer Concerned marker ID Returns: type description number Marker's cumulated time C signature: orxDOUBLE orxProfiler_GetMarkerTime ( orxS32 _s32MarkerID ) getMaxResetTime # Signature: r1 = getMaxResetTime () Description: Gets the maximum reset time Params: Returns: type description number Max reset time, in seconds C signature: orxDOUBLE orxProfiler_GetMaxResetTime () getNextMarkerID # Signature: r1 = getNextMarkerID ( markerid ) Description: Gets the next registered marker ID Params: name type description markerid integer ID of the current marker, orxPROFILER_KS32_MARKER_ID_NONE to get the first one Returns: type description integer Next registered marker's ID / orxPROFILER_KS32_MARKER_ID_NONE if the current marker was the last one C signature: orxS32 orxProfiler_GetNextMarkerID ( orxS32 _s32MarkerID ) getNextSortedMarkerID # Signature: r1 = getNextSortedMarkerID ( markerid ) Description: Gets the ID of the next marker, sorted by their push time Params: name type description markerid integer ID of the current pushed marker, orxPROFILER_KS32_MARKER_ID_NONE to get the first one Returns: type description integer Next registered marker's ID / orxPROFILER_KS32_MARKER_ID_NONE if the current marker was the last one C signature: orxS32 orxProfiler_GetNextSortedMarkerID ( orxS32 _s32MarkerID ) getResetTime # Signature: r1 = getResetTime () Description: Gets the time elapsed since last reset Params: Returns: type description number Time elapsed since the last reset, in seconds C signature: orxDOUBLE orxProfiler_GetResetTime () getUniqueMarkerDepth # Signature: r1 = getUniqueMarkerDepth ( markerid ) Description: Gets the uniquely pushed marker's depth, 1 being the depth of the top level Params: name type description markerid integer Concerned marker ID Returns: type description integer Marker's push depth / 0 if this marker hasn't been uniquely pushed C signature: orxU32 orxProfiler_GetUniqueMarkerDepth ( orxS32 _s32MarkerID ) getUniqueMarkerStartTime # Signature: r1 = getUniqueMarkerStartTime ( markerid ) Description: Gets the uniquely pushed marker's start time Params: name type description markerid integer Concerned marker ID Returns: type description number Marker's start time / 0.0 C signature: orxDOUBLE orxProfiler_GetUniqueMarkerStartTime ( orxS32 _s32MarkerID ) init # Signature: r1 = init () Description: Inits the Profiler module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxProfiler_Init () isMarkerIDValid # Signature: r1 = isMarkerIDValid ( markerid ) Description: Is the given marker valid? (Useful when storing markers in static variables and still allow normal hot restart) Params: name type description markerid integer ID of the marker to test Returns: type description boolean true / false C signature: orxBOOL orxProfiler_IsMarkerIDValid ( orxS32 _s32MarkerID ) isPaused # Signature: r1 = isPaused () Description: Is profiler paused? Params: Returns: type description boolean true / false C signature: orxBOOL orxProfiler_IsPaused () isUniqueMarker # Signature: r1 = isUniqueMarker ( markerid ) Description: Has the marker been pushed by a unique parent? Params: name type description markerid integer Concerned marker ID Returns: type description boolean true / false C signature: orxBOOL orxProfiler_IsUniqueMarker ( orxS32 _s32MarkerID ) pause # Signature: pause ( pause ) Description: Pauses/unpauses the profiler Params: name type description pause boolean Pause Returns: C signature: void orxProfiler_Pause ( orxBOOL _bPause ) popMarker # Signature: popMarker () Description: Pops a marker (from the stack) and updates its cumulated time (using the last marker push time) Params: Returns: C signature: void orxProfiler_PopMarker () pushMarker # Signature: pushMarker ( markerid ) Description: Pushes a marker (on a stack) and starts a timer for it Params: name type description markerid integer ID of the marker to push Returns: C signature: void orxProfiler_PushMarker ( orxS32 _s32MarkerID ) resetAllMarkers # Signature: resetAllMarkers () Description: Resets all markers (usually called at the end of the frame) Params: Returns: C signature: void orxProfiler_ResetAllMarkers () resetAllMaxima # Signature: resetAllMaxima () Description: Resets all maxima (usually called at a regular interval) Params: Returns: C signature: void orxProfiler_ResetAllMaxima () selectQueryFrame # Signature: r1 = selectQueryFrame ( queryframe , threadid ) Description: Selects the query frame for all GetMarker* functions below, in number of frame elapsed from the last one Params: name type description queryframe integer Query frame, in number of frame elapsed since the last one (ie. 0 -> last frame, 1 -> frame before last, ...) threadid integer Concerned thread ID, if no data is found for this thread, failure is returned Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxProfiler_SelectQueryFrame ( orxU32 _u32QueryFrame , orxU32 _u32ThreadID ) setup # Signature: setup () Description: Params: Returns: C signature: void orxProfiler_Setup ()","title":"profiler"},{"location":"modules/profiler.html#module-profiler","text":"","title":"module profiler"},{"location":"modules/profiler.html#functions","text":"","title":"functions"},{"location":"modules/profiler.html#aremarkeroperationsenabled","text":"Signature: r1 = areMarkerOperationsEnabled () Description: Are marker push/pop operations enabled? Params: Returns: type description boolean true / false C signature: orxBOOL orxProfiler_AreMarkerOperationsEnabled ()","title":"areMarkerOperationsEnabled"},{"location":"modules/profiler.html#enablemarkeroperations","text":"Signature: enableMarkerOperations ( enable ) Description: Enables marker push/pop operations Params: name type description enable boolean Enable Returns: C signature: void orxProfiler_EnableMarkerOperations ( orxBOOL _bEnable )","title":"enableMarkerOperations"},{"location":"modules/profiler.html#exit","text":"Signature: exit () Description: Params: Returns: C signature: void orxProfiler_Exit ()","title":"exit"},{"location":"modules/profiler.html#getidfromname","text":"Signature: r1 = getIDFromName ( name ) Description: Gets a marker ID given a name Params: name type description name string Name of the marker Returns: type description integer Marker's ID / orxPROFILER_KS32_MARKER_ID_NONE C signature: orxS32 orxProfiler_GetIDFromName ( const orxSTRING _zName )","title":"getIDFromName"},{"location":"modules/profiler.html#getmarkercount","text":"Signature: r1 = getMarkerCount () Description: Gets the number of registered markers used on the queried thread Params: Returns: type description integer Number of registered markers C signature: orxS32 orxProfiler_GetMarkerCount ()","title":"getMarkerCount"},{"location":"modules/profiler.html#getmarkermaxtime","text":"Signature: r1 = getMarkerMaxTime ( markerid ) Description: Gets the marker's maximum cumulated time Params: name type description markerid integer Concerned marker ID Returns: type description number Marker's max cumulated time C signature: orxDOUBLE orxProfiler_GetMarkerMaxTime ( orxS32 _s32MarkerID )","title":"getMarkerMaxTime"},{"location":"modules/profiler.html#getmarkername","text":"Signature: r1 = getMarkerName ( markerid ) Description: Gets the marker's name Params: name type description markerid integer Concerned marker ID Returns: type description string Marker's name C signature: const orxSTRING orxProfiler_GetMarkerName ( orxS32 _s32MarkerID )","title":"getMarkerName"},{"location":"modules/profiler.html#getmarkerpushcount","text":"Signature: r1 = getMarkerPushCount ( markerid ) Description: Gets the marker's push count Params: name type description markerid integer Concerned marker ID Returns: type description integer Number of time the marker has been pushed since last reset C signature: orxU32 orxProfiler_GetMarkerPushCount ( orxS32 _s32MarkerID )","title":"getMarkerPushCount"},{"location":"modules/profiler.html#getmarkertime","text":"Signature: r1 = getMarkerTime ( markerid ) Description: Gets the marker's cumulated time Params: name type description markerid integer Concerned marker ID Returns: type description number Marker's cumulated time C signature: orxDOUBLE orxProfiler_GetMarkerTime ( orxS32 _s32MarkerID )","title":"getMarkerTime"},{"location":"modules/profiler.html#getmaxresettime","text":"Signature: r1 = getMaxResetTime () Description: Gets the maximum reset time Params: Returns: type description number Max reset time, in seconds C signature: orxDOUBLE orxProfiler_GetMaxResetTime ()","title":"getMaxResetTime"},{"location":"modules/profiler.html#getnextmarkerid","text":"Signature: r1 = getNextMarkerID ( markerid ) Description: Gets the next registered marker ID Params: name type description markerid integer ID of the current marker, orxPROFILER_KS32_MARKER_ID_NONE to get the first one Returns: type description integer Next registered marker's ID / orxPROFILER_KS32_MARKER_ID_NONE if the current marker was the last one C signature: orxS32 orxProfiler_GetNextMarkerID ( orxS32 _s32MarkerID )","title":"getNextMarkerID"},{"location":"modules/profiler.html#getnextsortedmarkerid","text":"Signature: r1 = getNextSortedMarkerID ( markerid ) Description: Gets the ID of the next marker, sorted by their push time Params: name type description markerid integer ID of the current pushed marker, orxPROFILER_KS32_MARKER_ID_NONE to get the first one Returns: type description integer Next registered marker's ID / orxPROFILER_KS32_MARKER_ID_NONE if the current marker was the last one C signature: orxS32 orxProfiler_GetNextSortedMarkerID ( orxS32 _s32MarkerID )","title":"getNextSortedMarkerID"},{"location":"modules/profiler.html#getresettime","text":"Signature: r1 = getResetTime () Description: Gets the time elapsed since last reset Params: Returns: type description number Time elapsed since the last reset, in seconds C signature: orxDOUBLE orxProfiler_GetResetTime ()","title":"getResetTime"},{"location":"modules/profiler.html#getuniquemarkerdepth","text":"Signature: r1 = getUniqueMarkerDepth ( markerid ) Description: Gets the uniquely pushed marker's depth, 1 being the depth of the top level Params: name type description markerid integer Concerned marker ID Returns: type description integer Marker's push depth / 0 if this marker hasn't been uniquely pushed C signature: orxU32 orxProfiler_GetUniqueMarkerDepth ( orxS32 _s32MarkerID )","title":"getUniqueMarkerDepth"},{"location":"modules/profiler.html#getuniquemarkerstarttime","text":"Signature: r1 = getUniqueMarkerStartTime ( markerid ) Description: Gets the uniquely pushed marker's start time Params: name type description markerid integer Concerned marker ID Returns: type description number Marker's start time / 0.0 C signature: orxDOUBLE orxProfiler_GetUniqueMarkerStartTime ( orxS32 _s32MarkerID )","title":"getUniqueMarkerStartTime"},{"location":"modules/profiler.html#init","text":"Signature: r1 = init () Description: Inits the Profiler module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxProfiler_Init ()","title":"init"},{"location":"modules/profiler.html#ismarkeridvalid","text":"Signature: r1 = isMarkerIDValid ( markerid ) Description: Is the given marker valid? (Useful when storing markers in static variables and still allow normal hot restart) Params: name type description markerid integer ID of the marker to test Returns: type description boolean true / false C signature: orxBOOL orxProfiler_IsMarkerIDValid ( orxS32 _s32MarkerID )","title":"isMarkerIDValid"},{"location":"modules/profiler.html#ispaused","text":"Signature: r1 = isPaused () Description: Is profiler paused? Params: Returns: type description boolean true / false C signature: orxBOOL orxProfiler_IsPaused ()","title":"isPaused"},{"location":"modules/profiler.html#isuniquemarker","text":"Signature: r1 = isUniqueMarker ( markerid ) Description: Has the marker been pushed by a unique parent? Params: name type description markerid integer Concerned marker ID Returns: type description boolean true / false C signature: orxBOOL orxProfiler_IsUniqueMarker ( orxS32 _s32MarkerID )","title":"isUniqueMarker"},{"location":"modules/profiler.html#pause","text":"Signature: pause ( pause ) Description: Pauses/unpauses the profiler Params: name type description pause boolean Pause Returns: C signature: void orxProfiler_Pause ( orxBOOL _bPause )","title":"pause"},{"location":"modules/profiler.html#popmarker","text":"Signature: popMarker () Description: Pops a marker (from the stack) and updates its cumulated time (using the last marker push time) Params: Returns: C signature: void orxProfiler_PopMarker ()","title":"popMarker"},{"location":"modules/profiler.html#pushmarker","text":"Signature: pushMarker ( markerid ) Description: Pushes a marker (on a stack) and starts a timer for it Params: name type description markerid integer ID of the marker to push Returns: C signature: void orxProfiler_PushMarker ( orxS32 _s32MarkerID )","title":"pushMarker"},{"location":"modules/profiler.html#resetallmarkers","text":"Signature: resetAllMarkers () Description: Resets all markers (usually called at the end of the frame) Params: Returns: C signature: void orxProfiler_ResetAllMarkers ()","title":"resetAllMarkers"},{"location":"modules/profiler.html#resetallmaxima","text":"Signature: resetAllMaxima () Description: Resets all maxima (usually called at a regular interval) Params: Returns: C signature: void orxProfiler_ResetAllMaxima ()","title":"resetAllMaxima"},{"location":"modules/profiler.html#selectqueryframe","text":"Signature: r1 = selectQueryFrame ( queryframe , threadid ) Description: Selects the query frame for all GetMarker* functions below, in number of frame elapsed from the last one Params: name type description queryframe integer Query frame, in number of frame elapsed since the last one (ie. 0 -> last frame, 1 -> frame before last, ...) threadid integer Concerned thread ID, if no data is found for this thread, failure is returned Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxProfiler_SelectQueryFrame ( orxU32 _u32QueryFrame , orxU32 _u32ThreadID )","title":"selectQueryFrame"},{"location":"modules/profiler.html#setup","text":"Signature: setup () Description: Params: Returns: C signature: void orxProfiler_Setup ()","title":"setup"},{"location":"modules/render.html","text":"module render # functions # exit # Signature: exit () Description: Exits from the render module Params: Returns: C signature: void orxRender_Exit () getScreenPosition # Signature: r1 = getScreenPosition ( worldposition , viewport ) Description: Get a screen position given a world one and a viewport (rendering position) Params: name type description worldposition orxVECTOR# Concerned world position viewport orxVIEWPORT# Concerned viewport, if nil then the last viewport with a camera will be used Returns: type description orxVECTOR orxVECTOR if found (can be off-screen), nil otherwise C signature: orxVECTOR * orxRender_GetScreenPosition ( const orxVECTOR * _pvWorldPosition , const orxVIEWPORT * _pstViewport , orxVECTOR * _pvScreenPosition ) getWorldPosition # Signature: r1 = getWorldPosition ( screenposition , viewport ) Description: Get a world position given a screen one (absolute picking) Params: name type description screenposition orxVECTOR# Concerned screen position viewport orxVIEWPORT# Concerned viewport, if nil then either the last viewport that contains the position (if any), or the last viewport with a camera in the list if none contains the position Returns: type description orxVECTOR orxVECTOR if found *inside* the display surface, nil otherwise C signature: orxVECTOR * orxRender_GetWorldPosition ( const orxVECTOR * _pvScreenPosition , const orxVIEWPORT * _pstViewport , orxVECTOR * _pvWorldPosition ) init # Signature: r1 = init () Description: Inits the render module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxRender_Init () setup # Signature: setup () Description: Render module setup Params: Returns: C signature: void orxRender_Setup ()","title":"render"},{"location":"modules/render.html#module-render","text":"","title":"module render"},{"location":"modules/render.html#functions","text":"","title":"functions"},{"location":"modules/render.html#exit","text":"Signature: exit () Description: Exits from the render module Params: Returns: C signature: void orxRender_Exit ()","title":"exit"},{"location":"modules/render.html#getscreenposition","text":"Signature: r1 = getScreenPosition ( worldposition , viewport ) Description: Get a screen position given a world one and a viewport (rendering position) Params: name type description worldposition orxVECTOR# Concerned world position viewport orxVIEWPORT# Concerned viewport, if nil then the last viewport with a camera will be used Returns: type description orxVECTOR orxVECTOR if found (can be off-screen), nil otherwise C signature: orxVECTOR * orxRender_GetScreenPosition ( const orxVECTOR * _pvWorldPosition , const orxVIEWPORT * _pstViewport , orxVECTOR * _pvScreenPosition )","title":"getScreenPosition"},{"location":"modules/render.html#getworldposition","text":"Signature: r1 = getWorldPosition ( screenposition , viewport ) Description: Get a world position given a screen one (absolute picking) Params: name type description screenposition orxVECTOR# Concerned screen position viewport orxVIEWPORT# Concerned viewport, if nil then either the last viewport that contains the position (if any), or the last viewport with a camera in the list if none contains the position Returns: type description orxVECTOR orxVECTOR if found *inside* the display surface, nil otherwise C signature: orxVECTOR * orxRender_GetWorldPosition ( const orxVECTOR * _pvScreenPosition , const orxVIEWPORT * _pstViewport , orxVECTOR * _pvWorldPosition )","title":"getWorldPosition"},{"location":"modules/render.html#init","text":"Signature: r1 = init () Description: Inits the render module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxRender_Init ()","title":"init"},{"location":"modules/render.html#setup","text":"Signature: setup () Description: Render module setup Params: Returns: C signature: void orxRender_Setup ()","title":"setup"},{"location":"modules/resource.html","text":"module resource # functions # addStorage # Signature: r1 = addStorage ( group , storage , addfirst ) Description: Adds a storage for a given resource group Params: name type description group string Concerned resource group storage string Description of the storage, as understood by one of the resource type addfirst boolean If true this storage will be used *before* any already added ones, otherwise it'll be used *after* all those Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_AddStorage ( const orxSTRING _zGroup , const orxSTRING _zStorage , orxBOOL _bAddFirst ) clearCache # Signature: r1 = clearCache ( group ) Description: Clears cache for specific resource group(s) Params: name type description group string Concerned resource group, nil for all groups Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_ClearCache ( const orxSTRING _zGroup ) close # Signature: close ( resource ) Description: Closes a resource Params: name type description resource orxHANDLE Concerned resource Returns: C signature: void orxResource_Close ( orxHANDLE _hResource ) delete # Signature: r1 = delete ( location ) Description: Deletes a resource, given its location Params: name type description location string Location of the resource to delete Returns: type description orxSTATUS success upon success, failure otherwise C signature: orxSTATUS orxResource_Delete ( const orxSTRING _zLocation ) exit # Signature: exit () Description: Exits from the resource module Params: Returns: C signature: void orxResource_Exit () getGroup # Signature: r1 = getGroup ( index ) Description: Gets resource group at given index Params: name type description index integer Index of resource group Returns: type description string Resource group if index is valid, nil otherwise C signature: const orxSTRING orxResource_GetGroup ( orxU32 _u32Index ) getGroupCount # Signature: r1 = getGroupCount () Description: Gets number of resource groups Params: Returns: type description integer Number of resource groups C signature: orxU32 orxResource_GetGroupCount () getLocation # Signature: r1 = getLocation ( resource ) Description: Gets the literal location of a resource Params: name type description resource orxHANDLE Concerned resource Returns: type description string Literal location string C signature: const orxSTRING orxResource_GetLocation ( orxHANDLE _hResource ) getPath # Signature: r1 = getPath ( location ) Description: Gets the resource path from a location Params: name type description location string Location of the concerned resource Returns: type description string Path string if valid, empty string otherwise C signature: const orxSTRING orxResource_GetPath ( const orxSTRING _zLocation ) getPendingOpCount # Signature: r1 = getPendingOpCount ( resource ) Description: Gets pending operation count for a given resource Params: name type description resource orxHANDLE Concerned resource Returns: type description integer Number of pending asynchronous operations for that resource C signature: orxU32 orxResource_GetPendingOpCount ( const orxHANDLE _hResource ) getSize # Signature: r1 = getSize ( resource ) Description: Gets the size, in bytes, of a resource Params: name type description resource orxHANDLE Concerned resource Returns: type description integer Size of the resource, in bytes C signature: orxS64 orxResource_GetSize ( orxHANDLE _hResource ) getStorage # Signature: r1 = getStorage ( group , index ) Description: Gets storage at given index for a given resource group Params: name type description group string Concerned resource group index integer Index of storage Returns: type description string Storage if index is valid, nil otherwise C signature: const orxSTRING orxResource_GetStorage ( const orxSTRING _zGroup , orxU32 _u32Index ) getStorageCount # Signature: r1 = getStorageCount ( group ) Description: Gets number of storages for a given resource group Params: name type description group string Concerned resource group Returns: type description integer Number of storages for this resource group C signature: orxU32 orxResource_GetStorageCount ( const orxSTRING _zGroup ) getTime # Signature: r1 = getTime ( location ) Description: Gets the time of last modification of a resource Params: name type description location string Location of the concerned resource Returns: type description integer Time of last modification, in seconds since epoch, if found, 0 otherwise C signature: orxS64 orxResource_GetTime ( const orxSTRING _zLocation ) getTotalPendingOpCount # Signature: r1 = getTotalPendingOpCount () Description: Gets total pending operation count Params: Returns: type description integer Number of total pending asynchronous operations C signature: orxU32 orxResource_GetTotalPendingOpCount () getTypeCount # Signature: r1 = getTypeCount () Description: Gets number of registered resource types Params: Returns: type description integer Number of registered resource types C signature: orxU32 orxResource_GetTypeCount () getTypeTag # Signature: r1 = getTypeTag ( index ) Description: Gets registered type info at given index Params: name type description index integer Index of storage Returns: type description string Type tag string if index is valid, nil otherwise C signature: const orxSTRING orxResource_GetTypeTag ( orxU32 _u32Index ) init # Signature: r1 = init () Description: Inits the resource module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_Init () locate # Signature: r1 = locate ( group , name ) Description: Gets the location of an *existing* resource for a given group, location gets cached if found Params: name type description group string Concerned resource group name string Name of the resource to locate Returns: type description string Location string if found, nil otherwise C signature: const orxSTRING orxResource_Locate ( const orxSTRING _zGroup , const orxSTRING _zName ) locateInStorage # Signature: r1 = locateInStorage ( group , storage , name ) Description: Gets the location for a resource (existing or not) in a *specific storage*, for a given group. The location doesn't get cached and thus needs to be copied by the caller before the next call Params: name type description group string Concerned resource group storage string Concerned storage, if nil then the highest priority storage will be used name string Name of the resource Returns: type description string Location string if found, nil otherwise C signature: const orxSTRING orxResource_LocateInStorage ( const orxSTRING _zGroup , const orxSTRING _zStorage , const orxSTRING _zName ) open # Signature: r1 = open ( location , erasemode ) Description: Opens the resource at the given location Params: name type description location string Location of the resource to open erasemode boolean If true, the file will be erased if existing or created otherwise, if false, no content will get destroyed when opening Returns: type description orxHANDLE Handle to the open location, orxHANDLE_UNDEFINED otherwise C signature: orxHANDLE orxResource_Open ( const orxSTRING _zLocation , orxBOOL _bEraseMode ) reloadStorage # Signature: r1 = reloadStorage () Description: Reloads storage from config Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_ReloadStorage () removeStorage # Signature: r1 = removeStorage ( group , storage ) Description: Removes storage(s) for specific resource group(s) Params: name type description group string Concerned resource group, nil for all groups storage string Concerned storage, nil for all storages (except default one) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_RemoveStorage ( const orxSTRING _zGroup , const orxSTRING _zStorage ) seek # Signature: r1 = seek ( resource , offset , whence ) Description: Seeks a position in a given resource (moves cursor) Params: name type description resource orxHANDLE Concerned resource offset integer Number of bytes to offset from 'origin' whence orxSEEK_OFFSET_WHENCE Starting point for the offset computation (start, current position or end) Returns: type description integer Absolute cursor position if successful, -1 otherwise C signature: orxS64 orxResource_Seek ( orxHANDLE _hResource , orxS64 _s64Offset , orxSEEK_OFFSET_WHENCE _eWhence ) setup # Signature: setup () Description: Resource module setup Params: Returns: C signature: void orxResource_Setup () sync # Signature: r1 = sync ( group ) Description: Syncs all cached resources for specific resource group(s): update, add or remove events will be sent for all resources that are not located in their original storage anymore Params: name type description group string Concerned resource group, nil for all groups Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_Sync ( const orxSTRING _zGroup ) tell # Signature: r1 = tell ( resource ) Description: Tells the position of the cursor in a given resource Params: name type description resource orxHANDLE Concerned resource Returns: type description integer Position (offset), in bytes C signature: orxS64 orxResource_Tell ( orxHANDLE _hResource )","title":"resource"},{"location":"modules/resource.html#module-resource","text":"","title":"module resource"},{"location":"modules/resource.html#functions","text":"","title":"functions"},{"location":"modules/resource.html#addstorage","text":"Signature: r1 = addStorage ( group , storage , addfirst ) Description: Adds a storage for a given resource group Params: name type description group string Concerned resource group storage string Description of the storage, as understood by one of the resource type addfirst boolean If true this storage will be used *before* any already added ones, otherwise it'll be used *after* all those Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_AddStorage ( const orxSTRING _zGroup , const orxSTRING _zStorage , orxBOOL _bAddFirst )","title":"addStorage"},{"location":"modules/resource.html#clearcache","text":"Signature: r1 = clearCache ( group ) Description: Clears cache for specific resource group(s) Params: name type description group string Concerned resource group, nil for all groups Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_ClearCache ( const orxSTRING _zGroup )","title":"clearCache"},{"location":"modules/resource.html#close","text":"Signature: close ( resource ) Description: Closes a resource Params: name type description resource orxHANDLE Concerned resource Returns: C signature: void orxResource_Close ( orxHANDLE _hResource )","title":"close"},{"location":"modules/resource.html#delete","text":"Signature: r1 = delete ( location ) Description: Deletes a resource, given its location Params: name type description location string Location of the resource to delete Returns: type description orxSTATUS success upon success, failure otherwise C signature: orxSTATUS orxResource_Delete ( const orxSTRING _zLocation )","title":"delete"},{"location":"modules/resource.html#exit","text":"Signature: exit () Description: Exits from the resource module Params: Returns: C signature: void orxResource_Exit ()","title":"exit"},{"location":"modules/resource.html#getgroup","text":"Signature: r1 = getGroup ( index ) Description: Gets resource group at given index Params: name type description index integer Index of resource group Returns: type description string Resource group if index is valid, nil otherwise C signature: const orxSTRING orxResource_GetGroup ( orxU32 _u32Index )","title":"getGroup"},{"location":"modules/resource.html#getgroupcount","text":"Signature: r1 = getGroupCount () Description: Gets number of resource groups Params: Returns: type description integer Number of resource groups C signature: orxU32 orxResource_GetGroupCount ()","title":"getGroupCount"},{"location":"modules/resource.html#getlocation","text":"Signature: r1 = getLocation ( resource ) Description: Gets the literal location of a resource Params: name type description resource orxHANDLE Concerned resource Returns: type description string Literal location string C signature: const orxSTRING orxResource_GetLocation ( orxHANDLE _hResource )","title":"getLocation"},{"location":"modules/resource.html#getpath","text":"Signature: r1 = getPath ( location ) Description: Gets the resource path from a location Params: name type description location string Location of the concerned resource Returns: type description string Path string if valid, empty string otherwise C signature: const orxSTRING orxResource_GetPath ( const orxSTRING _zLocation )","title":"getPath"},{"location":"modules/resource.html#getpendingopcount","text":"Signature: r1 = getPendingOpCount ( resource ) Description: Gets pending operation count for a given resource Params: name type description resource orxHANDLE Concerned resource Returns: type description integer Number of pending asynchronous operations for that resource C signature: orxU32 orxResource_GetPendingOpCount ( const orxHANDLE _hResource )","title":"getPendingOpCount"},{"location":"modules/resource.html#getsize","text":"Signature: r1 = getSize ( resource ) Description: Gets the size, in bytes, of a resource Params: name type description resource orxHANDLE Concerned resource Returns: type description integer Size of the resource, in bytes C signature: orxS64 orxResource_GetSize ( orxHANDLE _hResource )","title":"getSize"},{"location":"modules/resource.html#getstorage","text":"Signature: r1 = getStorage ( group , index ) Description: Gets storage at given index for a given resource group Params: name type description group string Concerned resource group index integer Index of storage Returns: type description string Storage if index is valid, nil otherwise C signature: const orxSTRING orxResource_GetStorage ( const orxSTRING _zGroup , orxU32 _u32Index )","title":"getStorage"},{"location":"modules/resource.html#getstoragecount","text":"Signature: r1 = getStorageCount ( group ) Description: Gets number of storages for a given resource group Params: name type description group string Concerned resource group Returns: type description integer Number of storages for this resource group C signature: orxU32 orxResource_GetStorageCount ( const orxSTRING _zGroup )","title":"getStorageCount"},{"location":"modules/resource.html#gettime","text":"Signature: r1 = getTime ( location ) Description: Gets the time of last modification of a resource Params: name type description location string Location of the concerned resource Returns: type description integer Time of last modification, in seconds since epoch, if found, 0 otherwise C signature: orxS64 orxResource_GetTime ( const orxSTRING _zLocation )","title":"getTime"},{"location":"modules/resource.html#gettotalpendingopcount","text":"Signature: r1 = getTotalPendingOpCount () Description: Gets total pending operation count Params: Returns: type description integer Number of total pending asynchronous operations C signature: orxU32 orxResource_GetTotalPendingOpCount ()","title":"getTotalPendingOpCount"},{"location":"modules/resource.html#gettypecount","text":"Signature: r1 = getTypeCount () Description: Gets number of registered resource types Params: Returns: type description integer Number of registered resource types C signature: orxU32 orxResource_GetTypeCount ()","title":"getTypeCount"},{"location":"modules/resource.html#gettypetag","text":"Signature: r1 = getTypeTag ( index ) Description: Gets registered type info at given index Params: name type description index integer Index of storage Returns: type description string Type tag string if index is valid, nil otherwise C signature: const orxSTRING orxResource_GetTypeTag ( orxU32 _u32Index )","title":"getTypeTag"},{"location":"modules/resource.html#init","text":"Signature: r1 = init () Description: Inits the resource module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_Init ()","title":"init"},{"location":"modules/resource.html#locate","text":"Signature: r1 = locate ( group , name ) Description: Gets the location of an *existing* resource for a given group, location gets cached if found Params: name type description group string Concerned resource group name string Name of the resource to locate Returns: type description string Location string if found, nil otherwise C signature: const orxSTRING orxResource_Locate ( const orxSTRING _zGroup , const orxSTRING _zName )","title":"locate"},{"location":"modules/resource.html#locateinstorage","text":"Signature: r1 = locateInStorage ( group , storage , name ) Description: Gets the location for a resource (existing or not) in a *specific storage*, for a given group. The location doesn't get cached and thus needs to be copied by the caller before the next call Params: name type description group string Concerned resource group storage string Concerned storage, if nil then the highest priority storage will be used name string Name of the resource Returns: type description string Location string if found, nil otherwise C signature: const orxSTRING orxResource_LocateInStorage ( const orxSTRING _zGroup , const orxSTRING _zStorage , const orxSTRING _zName )","title":"locateInStorage"},{"location":"modules/resource.html#open","text":"Signature: r1 = open ( location , erasemode ) Description: Opens the resource at the given location Params: name type description location string Location of the resource to open erasemode boolean If true, the file will be erased if existing or created otherwise, if false, no content will get destroyed when opening Returns: type description orxHANDLE Handle to the open location, orxHANDLE_UNDEFINED otherwise C signature: orxHANDLE orxResource_Open ( const orxSTRING _zLocation , orxBOOL _bEraseMode )","title":"open"},{"location":"modules/resource.html#reloadstorage","text":"Signature: r1 = reloadStorage () Description: Reloads storage from config Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_ReloadStorage ()","title":"reloadStorage"},{"location":"modules/resource.html#removestorage","text":"Signature: r1 = removeStorage ( group , storage ) Description: Removes storage(s) for specific resource group(s) Params: name type description group string Concerned resource group, nil for all groups storage string Concerned storage, nil for all storages (except default one) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_RemoveStorage ( const orxSTRING _zGroup , const orxSTRING _zStorage )","title":"removeStorage"},{"location":"modules/resource.html#seek","text":"Signature: r1 = seek ( resource , offset , whence ) Description: Seeks a position in a given resource (moves cursor) Params: name type description resource orxHANDLE Concerned resource offset integer Number of bytes to offset from 'origin' whence orxSEEK_OFFSET_WHENCE Starting point for the offset computation (start, current position or end) Returns: type description integer Absolute cursor position if successful, -1 otherwise C signature: orxS64 orxResource_Seek ( orxHANDLE _hResource , orxS64 _s64Offset , orxSEEK_OFFSET_WHENCE _eWhence )","title":"seek"},{"location":"modules/resource.html#setup","text":"Signature: setup () Description: Resource module setup Params: Returns: C signature: void orxResource_Setup ()","title":"setup"},{"location":"modules/resource.html#sync","text":"Signature: r1 = sync ( group ) Description: Syncs all cached resources for specific resource group(s): update, add or remove events will be sent for all resources that are not located in their original storage anymore Params: name type description group string Concerned resource group, nil for all groups Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxResource_Sync ( const orxSTRING _zGroup )","title":"sync"},{"location":"modules/resource.html#tell","text":"Signature: r1 = tell ( resource ) Description: Tells the position of the cursor in a given resource Params: name type description resource orxHANDLE Concerned resource Returns: type description integer Position (offset), in bytes C signature: orxS64 orxResource_Tell ( orxHANDLE _hResource )","title":"tell"},{"location":"modules/screenshot.html","text":"module screenshot # functions # capture # Signature: r1 = capture () Description: Captures a screenshot Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxScreenshot_Capture () exit # Signature: exit () Description: Exits from the screenshot module Params: Returns: C signature: void orxScreenshot_Exit () init # Signature: r1 = init () Description: Inits the screenshot module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxScreenshot_Init () setup # Signature: setup () Description: Screenshot module setup Params: Returns: C signature: void orxScreenshot_Setup ()","title":"screenshot"},{"location":"modules/screenshot.html#module-screenshot","text":"","title":"module screenshot"},{"location":"modules/screenshot.html#functions","text":"","title":"functions"},{"location":"modules/screenshot.html#capture","text":"Signature: r1 = capture () Description: Captures a screenshot Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxScreenshot_Capture ()","title":"capture"},{"location":"modules/screenshot.html#exit","text":"Signature: exit () Description: Exits from the screenshot module Params: Returns: C signature: void orxScreenshot_Exit ()","title":"exit"},{"location":"modules/screenshot.html#init","text":"Signature: r1 = init () Description: Inits the screenshot module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxScreenshot_Init ()","title":"init"},{"location":"modules/screenshot.html#setup","text":"Signature: setup () Description: Screenshot module setup Params: Returns: C signature: void orxScreenshot_Setup ()","title":"setup"},{"location":"modules/shader.html","text":"module shader # functions # clearCache # Signature: r1 = clearCache () Description: Clears cache (if any shader is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_ClearCache () create # Signature: r1 = create () Description: Creates an empty shader Params: Returns: type description orxSHADER orxSHADER / nil C signature: orxSHADER * orxShader_Create () createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates a shader from config Params: name type description configid string Config ID Returns: type description orxSHADER orxSHADER / nil C signature: orxSHADER * orxShader_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the shader module Params: Returns: C signature: void orxShader_Exit () init # Signature: r1 = init () Description: Inits the shader module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_Init () setup # Signature: setup () Description: Shader module setup Params: Returns: C signature: void orxShader_Setup ()","title":"shader"},{"location":"modules/shader.html#module-shader","text":"","title":"module shader"},{"location":"modules/shader.html#functions","text":"","title":"functions"},{"location":"modules/shader.html#clearcache","text":"Signature: r1 = clearCache () Description: Clears cache (if any shader is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_ClearCache ()","title":"clearCache"},{"location":"modules/shader.html#create","text":"Signature: r1 = create () Description: Creates an empty shader Params: Returns: type description orxSHADER orxSHADER / nil C signature: orxSHADER * orxShader_Create ()","title":"create"},{"location":"modules/shader.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates a shader from config Params: name type description configid string Config ID Returns: type description orxSHADER orxSHADER / nil C signature: orxSHADER * orxShader_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/shader.html#exit","text":"Signature: exit () Description: Exits from the shader module Params: Returns: C signature: void orxShader_Exit ()","title":"exit"},{"location":"modules/shader.html#init","text":"Signature: r1 = init () Description: Inits the shader module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_Init ()","title":"init"},{"location":"modules/shader.html#setup","text":"Signature: setup () Description: Shader module setup Params: Returns: C signature: void orxShader_Setup ()","title":"setup"},{"location":"modules/shaderpointer.html","text":"module shaderpointer # functions # create # Signature: r1 = create () Description: Creates an empty ShaderPointer Params: Returns: type description orxSHADERPOINTER orxSHADERPOINTER / nil C signature: orxSHADERPOINTER * orxShaderPointer_Create () exit # Signature: exit () Description: Exits from the ShaderPointer module Params: Returns: C signature: void orxShaderPointer_Exit () init # Signature: r1 = init () Description: Inits the ShaderPointer module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_Init () setup # Signature: setup () Description: ShaderPointer module setup Params: Returns: C signature: void orxShaderPointer_Setup ()","title":"shaderpointer"},{"location":"modules/shaderpointer.html#module-shaderpointer","text":"","title":"module shaderpointer"},{"location":"modules/shaderpointer.html#functions","text":"","title":"functions"},{"location":"modules/shaderpointer.html#create","text":"Signature: r1 = create () Description: Creates an empty ShaderPointer Params: Returns: type description orxSHADERPOINTER orxSHADERPOINTER / nil C signature: orxSHADERPOINTER * orxShaderPointer_Create ()","title":"create"},{"location":"modules/shaderpointer.html#exit","text":"Signature: exit () Description: Exits from the ShaderPointer module Params: Returns: C signature: void orxShaderPointer_Exit ()","title":"exit"},{"location":"modules/shaderpointer.html#init","text":"Signature: r1 = init () Description: Inits the ShaderPointer module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_Init ()","title":"init"},{"location":"modules/shaderpointer.html#setup","text":"Signature: setup () Description: ShaderPointer module setup Params: Returns: C signature: void orxShaderPointer_Setup ()","title":"setup"},{"location":"modules/sound.html","text":"module sound # functions # addBusFilter # Signature: r1 = addBusFilter ( busid , filterdata , usecustomparam ) Description: Adds a filter to a bus (cascading) Params: name type description busid integer Concerned bus ID filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_AddBusFilter ( orxSTRINGID _stBusID , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam ) addBusFilterFromConfig # Signature: r1 = addBusFilterFromConfig ( busid , filterconfigid ) Description: Adds a filter to a bus (cascading) from config Params: name type description busid integer Concerned bus ID filterconfigid string Config ID of the filter to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_AddBusFilterFromConfig ( orxSTRINGID _stBusID , const orxSTRING _zFilterConfigID ) clearCache # Signature: r1 = clearCache () Description: Clears cache (if any sound sample is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_ClearCache () create # Signature: r1 = create () Description: Creates an empty sound Params: Returns: type description orxSOUND Created orxSOUND / nil C signature: orxSOUND * orxSound_Create () createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates sound from config Params: name type description configid string Config ID Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxSound_CreateFromConfig ( const orxSTRING _zConfigID ) createSample # Signature: r1 = createSample ( channelnumber , framenumber , samplerate , name ) Description: Creates a sample Params: name type description channelnumber integer Number of channels of the sample framenumber integer Number of frame of the sample (number of \"samples\" = number of frames * number of channels) samplerate integer Sampling rate of the sample (ie. number of frames per second) name string Name to associate with the sample Returns: type description orxSOUNDSYSTEM_SAMPLE orxSOUNDSYSTEM_SAMPLE / nil C signature: orxSOUNDSYSTEM_SAMPLE * orxSound_CreateSample ( orxU32 _u32ChannelNumber , orxU32 _u32FrameNumber , orxU32 _u32SampleRate , const orxSTRING _zName ) createWithEmptyStream # Signature: r1 = createWithEmptyStream ( channelnumber , samplerate , name ) Description: Creates a sound with an empty stream (ie. you'll need to provide actual sound data for each packet sent to the sound card using the event system) Params: name type description channelnumber integer Number of channels of the stream samplerate integer Sampling rate of the stream (ie. number of frames per second) name string Name to associate with this sound Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxSound_CreateWithEmptyStream ( orxU32 _u32ChannelNumber , orxU32 _u32SampleRate , const orxSTRING _zName ) deleteSample # Signature: r1 = deleteSample ( name ) Description: Deletes a sample Params: name type description name string Sample's name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_DeleteSample ( const orxSTRING _zName ) exit # Signature: exit () Description: Exits from the sound module Params: Returns: C signature: void orxSound_Exit () filterDataBandPass # Signature: r1 = filterDataBandPass ( nameid , frequency , order ) Description: Create a orxSOUND_FILTER_DATA of band pass type Params: name type description nameid integer frequency number order integer Returns: type description orxSOUND_FILTER_DATA The new instance filterDataBiquad # Signature: r1 = filterDataBiquad ( nameid , a0 , a1 , a2 , b0 , b1 , b2 ) Description: Create a orxSOUND_FILTER_DATA of biquad type Params: name type description nameid integer a0 number a1 number a2 number b0 number b1 number b2 number Returns: type description orxSOUND_FILTER_DATA The new instance filterDataDelay # Signature: r1 = filterDataDelay ( nameid , delay , decay ) Description: Create a orxSOUND_FILTER_DATA of delay type Params: name type description nameid integer delay number decay number Returns: type description orxSOUND_FILTER_DATA The new instance filterDataHighPass # Signature: r1 = filterDataHighPass ( nameid , frequency , order ) Description: Create a orxSOUND_FILTER_DATA of high pass type Params: name type description nameid integer frequency number order integer Returns: type description orxSOUND_FILTER_DATA The new instance filterDataHighShelf # Signature: r1 = filterDataHighShelf ( nameid , frequency , q , gain ) Description: Create a orxSOUND_FILTER_DATA of low shelf type Params: name type description nameid integer frequency number q number gain number Returns: type description orxSOUND_FILTER_DATA The new instance filterDataLowPass # Signature: r1 = filterDataLowPass ( nameid , frequency , order ) Description: Create a orxSOUND_FILTER_DATA of low pass type Params: name type description nameid integer frequency number order integer Returns: type description orxSOUND_FILTER_DATA The new instance filterDataLowShelf # Signature: r1 = filterDataLowShelf ( nameid , frequency , q , gain ) Description: Create a orxSOUND_FILTER_DATA of low shelf type Params: name type description nameid integer frequency number q number gain number Returns: type description orxSOUND_FILTER_DATA The new instance filterDataNotch # Signature: r1 = filterDataNotch ( nameid , frequency , q ) Description: Create a orxSOUND_FILTER_DATA of notch type Params: name type description nameid integer frequency number q number Returns: type description orxSOUND_FILTER_DATA The new instance filterDataPeaking # Signature: r1 = filterDataPeaking ( nameid , frequency , q , gain ) Description: Create a orxSOUND_FILTER_DATA of peaking type Params: name type description nameid integer frequency number q number gain number Returns: type description orxSOUND_FILTER_DATA The new instance getBusChild # Signature: r1 = getBusChild ( busid ) Description: Gets bus child Params: name type description busid integer Concerned bus ID Returns: type description integer Child bus ID / orxSTRINGID_UNDEFINED C signature: orxSTRINGID orxSound_GetBusChild ( orxSTRINGID _stBusID ) getBusGlobalPitch # Signature: r1 = getBusGlobalPitch ( busid ) Description: Gets bus global pitch, ie. taking into account the whole bus hierarchy Params: name type description busid integer Concerned bus ID Returns: type description number number C signature: orxFLOAT orxSound_GetBusGlobalPitch ( orxSTRINGID _stBusID ) getBusGlobalVolume # Signature: r1 = getBusGlobalVolume ( busid ) Description: Gets bus global volume, ie. taking into account the whole bus hierarchy Params: name type description busid integer Concerned bus ID Returns: type description number number C signature: orxFLOAT orxSound_GetBusGlobalVolume ( orxSTRINGID _stBusID ) getBusParent # Signature: r1 = getBusParent ( busid ) Description: Gets bus parent Params: name type description busid integer Concerned bus ID Returns: type description integer Parent bus ID / orxSTRINGID_UNDEFINED C signature: orxSTRINGID orxSound_GetBusParent ( orxSTRINGID _stBusID ) getBusPitch # Signature: r1 = getBusPitch ( busid ) Description: Gets bus pitch (local, ie. unaffected by the whole bus hierarchy) Params: name type description busid integer Concerned bus ID Returns: type description number number C signature: orxFLOAT orxSound_GetBusPitch ( orxSTRINGID _stBusID ) getBusSibling # Signature: r1 = getBusSibling ( busid ) Description: Gets bus sibling Params: name type description busid integer Concerned bus ID Returns: type description integer Sibling bus ID / orxSTRINGID_UNDEFINED C signature: orxSTRINGID orxSound_GetBusSibling ( orxSTRINGID _stBusID ) getBusVolume # Signature: r1 = getBusVolume ( busid ) Description: Gets bus volume (local, ie. unaffected by the whole bus hierarchy) Params: name type description busid integer Concerned bus ID Returns: type description number number C signature: orxFLOAT orxSound_GetBusVolume ( orxSTRINGID _stBusID ) getMasterBusID # Signature: r1 = getMasterBusID () Description: Gets master bus ID Params: Returns: type description integer Master bus ID C signature: orxSTRINGID orxSound_GetMasterBusID () getNext # Signature: r1 = getNext ( sound , busid ) Description: Gets next sound in bus Params: name type description sound orxSOUND# Concerned sound, nil to get the first one busid integer Bus ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxSound_GetNext ( const orxSOUND * _pstSound , orxSTRINGID _stBusID ) getSample # Signature: r1 = getSample ( name ) Description: Gets a sample Params: name type description name string Sample's name Returns: type description orxSOUNDSYSTEM_SAMPLE success / failure C signature: orxSOUNDSYSTEM_SAMPLE * orxSound_GetSample ( const orxSTRING _zName ) hasRecordingSupport # Signature: r1 = hasRecordingSupport () Description: Is recording possible on the current system? Params: Returns: type description boolean true / false C signature: orxBOOL orxSound_HasRecordingSupport () init # Signature: r1 = init () Description: Initializes the sound module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Init () removeAllBusFilters # Signature: r1 = removeAllBusFilters ( busid ) Description: Removes all filters from a bus Params: name type description busid integer Concerned bus ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_RemoveAllBusFilters ( orxSTRINGID _stBusID ) removeLastBusFilter # Signature: r1 = removeLastBusFilter ( busid ) Description: Removes last added filter from a bus Params: name type description busid integer Concerned bus ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_RemoveLastBusFilter ( orxSTRINGID _stBusID ) setBusParent # Signature: r1 = setBusParent ( busid , parentbusid ) Description: Sets a bus parent Params: name type description busid integer Concerned bus ID, will create it if not already existing parentbusid integer ID of the bus to use as parent, will create it if not already existing Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetBusParent ( orxSTRINGID _stBusID , orxSTRINGID _stParentBusID ) setBusPitch # Signature: r1 = setBusPitch ( busid , pitch ) Description: Sets bus pitch Params: name type description busid integer Concerned bus ID, will create it if not already existing pitch number Desired pitch Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetBusPitch ( orxSTRINGID _stBusID , orxFLOAT _fPitch ) setBusVolume # Signature: r1 = setBusVolume ( busid , volume ) Description: Sets bus volume Params: name type description busid integer Concerned bus ID, will create it if not already existing volume number Desired volume (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetBusVolume ( orxSTRINGID _stBusID , orxFLOAT _fVolume ) setup # Signature: setup () Description: Sound module setup Params: Returns: C signature: void orxSound_Setup () startRecording # Signature: r1 = startRecording ( name , writetofile , samplerate , channelnumber ) Description: Starts recording Params: name type description name string Name for the recorded sound/file writetofile boolean Should write to file? samplerate integer Sample rate, 0 for default rate (48000Hz) channelnumber integer Channel number, 0 for default mono channel Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_StartRecording ( const orxCHAR * _zName , orxBOOL _bWriteToFile , orxU32 _u32SampleRate , orxU32 _u32ChannelNumber ) stopRecording # Signature: r1 = stopRecording () Description: Stops recording Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_StopRecording ()","title":"sound"},{"location":"modules/sound.html#module-sound","text":"","title":"module sound"},{"location":"modules/sound.html#functions","text":"","title":"functions"},{"location":"modules/sound.html#addbusfilter","text":"Signature: r1 = addBusFilter ( busid , filterdata , usecustomparam ) Description: Adds a filter to a bus (cascading) Params: name type description busid integer Concerned bus ID filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_AddBusFilter ( orxSTRINGID _stBusID , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam )","title":"addBusFilter"},{"location":"modules/sound.html#addbusfilterfromconfig","text":"Signature: r1 = addBusFilterFromConfig ( busid , filterconfigid ) Description: Adds a filter to a bus (cascading) from config Params: name type description busid integer Concerned bus ID filterconfigid string Config ID of the filter to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_AddBusFilterFromConfig ( orxSTRINGID _stBusID , const orxSTRING _zFilterConfigID )","title":"addBusFilterFromConfig"},{"location":"modules/sound.html#clearcache","text":"Signature: r1 = clearCache () Description: Clears cache (if any sound sample is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_ClearCache ()","title":"clearCache"},{"location":"modules/sound.html#create","text":"Signature: r1 = create () Description: Creates an empty sound Params: Returns: type description orxSOUND Created orxSOUND / nil C signature: orxSOUND * orxSound_Create ()","title":"create"},{"location":"modules/sound.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates sound from config Params: name type description configid string Config ID Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxSound_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/sound.html#createsample","text":"Signature: r1 = createSample ( channelnumber , framenumber , samplerate , name ) Description: Creates a sample Params: name type description channelnumber integer Number of channels of the sample framenumber integer Number of frame of the sample (number of \"samples\" = number of frames * number of channels) samplerate integer Sampling rate of the sample (ie. number of frames per second) name string Name to associate with the sample Returns: type description orxSOUNDSYSTEM_SAMPLE orxSOUNDSYSTEM_SAMPLE / nil C signature: orxSOUNDSYSTEM_SAMPLE * orxSound_CreateSample ( orxU32 _u32ChannelNumber , orxU32 _u32FrameNumber , orxU32 _u32SampleRate , const orxSTRING _zName )","title":"createSample"},{"location":"modules/sound.html#createwithemptystream","text":"Signature: r1 = createWithEmptyStream ( channelnumber , samplerate , name ) Description: Creates a sound with an empty stream (ie. you'll need to provide actual sound data for each packet sent to the sound card using the event system) Params: name type description channelnumber integer Number of channels of the stream samplerate integer Sampling rate of the stream (ie. number of frames per second) name string Name to associate with this sound Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxSound_CreateWithEmptyStream ( orxU32 _u32ChannelNumber , orxU32 _u32SampleRate , const orxSTRING _zName )","title":"createWithEmptyStream"},{"location":"modules/sound.html#deletesample","text":"Signature: r1 = deleteSample ( name ) Description: Deletes a sample Params: name type description name string Sample's name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_DeleteSample ( const orxSTRING _zName )","title":"deleteSample"},{"location":"modules/sound.html#exit","text":"Signature: exit () Description: Exits from the sound module Params: Returns: C signature: void orxSound_Exit ()","title":"exit"},{"location":"modules/sound.html#filterdatabandpass","text":"Signature: r1 = filterDataBandPass ( nameid , frequency , order ) Description: Create a orxSOUND_FILTER_DATA of band pass type Params: name type description nameid integer frequency number order integer Returns: type description orxSOUND_FILTER_DATA The new instance","title":"filterDataBandPass"},{"location":"modules/sound.html#filterdatabiquad","text":"Signature: r1 = filterDataBiquad ( nameid , a0 , a1 , a2 , b0 , b1 , b2 ) Description: Create a orxSOUND_FILTER_DATA of biquad type Params: name type description nameid integer a0 number a1 number a2 number b0 number b1 number b2 number Returns: type description orxSOUND_FILTER_DATA The new instance","title":"filterDataBiquad"},{"location":"modules/sound.html#filterdatadelay","text":"Signature: r1 = filterDataDelay ( nameid , delay , decay ) Description: Create a orxSOUND_FILTER_DATA of delay type Params: name type description nameid integer delay number decay number Returns: type description orxSOUND_FILTER_DATA The new instance","title":"filterDataDelay"},{"location":"modules/sound.html#filterdatahighpass","text":"Signature: r1 = filterDataHighPass ( nameid , frequency , order ) Description: Create a orxSOUND_FILTER_DATA of high pass type Params: name type description nameid integer frequency number order integer Returns: type description orxSOUND_FILTER_DATA The new instance","title":"filterDataHighPass"},{"location":"modules/sound.html#filterdatahighshelf","text":"Signature: r1 = filterDataHighShelf ( nameid , frequency , q , gain ) Description: Create a orxSOUND_FILTER_DATA of low shelf type Params: name type description nameid integer frequency number q number gain number Returns: type description orxSOUND_FILTER_DATA The new instance","title":"filterDataHighShelf"},{"location":"modules/sound.html#filterdatalowpass","text":"Signature: r1 = filterDataLowPass ( nameid , frequency , order ) Description: Create a orxSOUND_FILTER_DATA of low pass type Params: name type description nameid integer frequency number order integer Returns: type description orxSOUND_FILTER_DATA The new instance","title":"filterDataLowPass"},{"location":"modules/sound.html#filterdatalowshelf","text":"Signature: r1 = filterDataLowShelf ( nameid , frequency , q , gain ) Description: Create a orxSOUND_FILTER_DATA of low shelf type Params: name type description nameid integer frequency number q number gain number Returns: type description orxSOUND_FILTER_DATA The new instance","title":"filterDataLowShelf"},{"location":"modules/sound.html#filterdatanotch","text":"Signature: r1 = filterDataNotch ( nameid , frequency , q ) Description: Create a orxSOUND_FILTER_DATA of notch type Params: name type description nameid integer frequency number q number Returns: type description orxSOUND_FILTER_DATA The new instance","title":"filterDataNotch"},{"location":"modules/sound.html#filterdatapeaking","text":"Signature: r1 = filterDataPeaking ( nameid , frequency , q , gain ) Description: Create a orxSOUND_FILTER_DATA of peaking type Params: name type description nameid integer frequency number q number gain number Returns: type description orxSOUND_FILTER_DATA The new instance","title":"filterDataPeaking"},{"location":"modules/sound.html#getbuschild","text":"Signature: r1 = getBusChild ( busid ) Description: Gets bus child Params: name type description busid integer Concerned bus ID Returns: type description integer Child bus ID / orxSTRINGID_UNDEFINED C signature: orxSTRINGID orxSound_GetBusChild ( orxSTRINGID _stBusID )","title":"getBusChild"},{"location":"modules/sound.html#getbusglobalpitch","text":"Signature: r1 = getBusGlobalPitch ( busid ) Description: Gets bus global pitch, ie. taking into account the whole bus hierarchy Params: name type description busid integer Concerned bus ID Returns: type description number number C signature: orxFLOAT orxSound_GetBusGlobalPitch ( orxSTRINGID _stBusID )","title":"getBusGlobalPitch"},{"location":"modules/sound.html#getbusglobalvolume","text":"Signature: r1 = getBusGlobalVolume ( busid ) Description: Gets bus global volume, ie. taking into account the whole bus hierarchy Params: name type description busid integer Concerned bus ID Returns: type description number number C signature: orxFLOAT orxSound_GetBusGlobalVolume ( orxSTRINGID _stBusID )","title":"getBusGlobalVolume"},{"location":"modules/sound.html#getbusparent","text":"Signature: r1 = getBusParent ( busid ) Description: Gets bus parent Params: name type description busid integer Concerned bus ID Returns: type description integer Parent bus ID / orxSTRINGID_UNDEFINED C signature: orxSTRINGID orxSound_GetBusParent ( orxSTRINGID _stBusID )","title":"getBusParent"},{"location":"modules/sound.html#getbuspitch","text":"Signature: r1 = getBusPitch ( busid ) Description: Gets bus pitch (local, ie. unaffected by the whole bus hierarchy) Params: name type description busid integer Concerned bus ID Returns: type description number number C signature: orxFLOAT orxSound_GetBusPitch ( orxSTRINGID _stBusID )","title":"getBusPitch"},{"location":"modules/sound.html#getbussibling","text":"Signature: r1 = getBusSibling ( busid ) Description: Gets bus sibling Params: name type description busid integer Concerned bus ID Returns: type description integer Sibling bus ID / orxSTRINGID_UNDEFINED C signature: orxSTRINGID orxSound_GetBusSibling ( orxSTRINGID _stBusID )","title":"getBusSibling"},{"location":"modules/sound.html#getbusvolume","text":"Signature: r1 = getBusVolume ( busid ) Description: Gets bus volume (local, ie. unaffected by the whole bus hierarchy) Params: name type description busid integer Concerned bus ID Returns: type description number number C signature: orxFLOAT orxSound_GetBusVolume ( orxSTRINGID _stBusID )","title":"getBusVolume"},{"location":"modules/sound.html#getmasterbusid","text":"Signature: r1 = getMasterBusID () Description: Gets master bus ID Params: Returns: type description integer Master bus ID C signature: orxSTRINGID orxSound_GetMasterBusID ()","title":"getMasterBusID"},{"location":"modules/sound.html#getnext","text":"Signature: r1 = getNext ( sound , busid ) Description: Gets next sound in bus Params: name type description sound orxSOUND# Concerned sound, nil to get the first one busid integer Bus ID to consider, orxSTRINGID_UNDEFINED for all Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxSound_GetNext ( const orxSOUND * _pstSound , orxSTRINGID _stBusID )","title":"getNext"},{"location":"modules/sound.html#getsample","text":"Signature: r1 = getSample ( name ) Description: Gets a sample Params: name type description name string Sample's name Returns: type description orxSOUNDSYSTEM_SAMPLE success / failure C signature: orxSOUNDSYSTEM_SAMPLE * orxSound_GetSample ( const orxSTRING _zName )","title":"getSample"},{"location":"modules/sound.html#hasrecordingsupport","text":"Signature: r1 = hasRecordingSupport () Description: Is recording possible on the current system? Params: Returns: type description boolean true / false C signature: orxBOOL orxSound_HasRecordingSupport ()","title":"hasRecordingSupport"},{"location":"modules/sound.html#init","text":"Signature: r1 = init () Description: Initializes the sound module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Init ()","title":"init"},{"location":"modules/sound.html#removeallbusfilters","text":"Signature: r1 = removeAllBusFilters ( busid ) Description: Removes all filters from a bus Params: name type description busid integer Concerned bus ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_RemoveAllBusFilters ( orxSTRINGID _stBusID )","title":"removeAllBusFilters"},{"location":"modules/sound.html#removelastbusfilter","text":"Signature: r1 = removeLastBusFilter ( busid ) Description: Removes last added filter from a bus Params: name type description busid integer Concerned bus ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_RemoveLastBusFilter ( orxSTRINGID _stBusID )","title":"removeLastBusFilter"},{"location":"modules/sound.html#setbusparent","text":"Signature: r1 = setBusParent ( busid , parentbusid ) Description: Sets a bus parent Params: name type description busid integer Concerned bus ID, will create it if not already existing parentbusid integer ID of the bus to use as parent, will create it if not already existing Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetBusParent ( orxSTRINGID _stBusID , orxSTRINGID _stParentBusID )","title":"setBusParent"},{"location":"modules/sound.html#setbuspitch","text":"Signature: r1 = setBusPitch ( busid , pitch ) Description: Sets bus pitch Params: name type description busid integer Concerned bus ID, will create it if not already existing pitch number Desired pitch Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetBusPitch ( orxSTRINGID _stBusID , orxFLOAT _fPitch )","title":"setBusPitch"},{"location":"modules/sound.html#setbusvolume","text":"Signature: r1 = setBusVolume ( busid , volume ) Description: Sets bus volume Params: name type description busid integer Concerned bus ID, will create it if not already existing volume number Desired volume (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetBusVolume ( orxSTRINGID _stBusID , orxFLOAT _fVolume )","title":"setBusVolume"},{"location":"modules/sound.html#setup","text":"Signature: setup () Description: Sound module setup Params: Returns: C signature: void orxSound_Setup ()","title":"setup"},{"location":"modules/sound.html#startrecording","text":"Signature: r1 = startRecording ( name , writetofile , samplerate , channelnumber ) Description: Starts recording Params: name type description name string Name for the recorded sound/file writetofile boolean Should write to file? samplerate integer Sample rate, 0 for default rate (48000Hz) channelnumber integer Channel number, 0 for default mono channel Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_StartRecording ( const orxCHAR * _zName , orxBOOL _bWriteToFile , orxU32 _u32SampleRate , orxU32 _u32ChannelNumber )","title":"startRecording"},{"location":"modules/sound.html#stoprecording","text":"Signature: r1 = stopRecording () Description: Stops recording Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_StopRecording ()","title":"stopRecording"},{"location":"modules/soundpointer.html","text":"module soundpointer # functions # create # Signature: r1 = create () Description: Creates an empty SoundPointer Params: Returns: type description orxSOUNDPOINTER orxSOUNDPOINTER / nil C signature: orxSOUNDPOINTER * orxSoundPointer_Create () exit # Signature: exit () Description: Exits from the SoundPointer module Params: Returns: C signature: void orxSoundPointer_Exit () init # Signature: r1 = init () Description: Inits the SoundPointer module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Init () setup # Signature: setup () Description: SoundPointer module setup Params: Returns: C signature: void orxSoundPointer_Setup ()","title":"soundpointer"},{"location":"modules/soundpointer.html#module-soundpointer","text":"","title":"module soundpointer"},{"location":"modules/soundpointer.html#functions","text":"","title":"functions"},{"location":"modules/soundpointer.html#create","text":"Signature: r1 = create () Description: Creates an empty SoundPointer Params: Returns: type description orxSOUNDPOINTER orxSOUNDPOINTER / nil C signature: orxSOUNDPOINTER * orxSoundPointer_Create ()","title":"create"},{"location":"modules/soundpointer.html#exit","text":"Signature: exit () Description: Exits from the SoundPointer module Params: Returns: C signature: void orxSoundPointer_Exit ()","title":"exit"},{"location":"modules/soundpointer.html#init","text":"Signature: r1 = init () Description: Inits the SoundPointer module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Init ()","title":"init"},{"location":"modules/soundpointer.html#setup","text":"Signature: setup () Description: SoundPointer module setup Params: Returns: C signature: void orxSoundPointer_Setup ()","title":"setup"},{"location":"modules/soundsystem.html","text":"module soundsystem # functions # addBusFilter # Signature: r1 = addBusFilter ( bus , filterdata , usecustomparam ) Description: Adds a filter to a bus (cascading) Params: name type description bus orxHANDLE Concerned bus filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_AddBusFilter ( orxHANDLE _hBus , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam ) createBus # Signature: r1 = createBus ( busid ) Description: Creates a bus Params: name type description busid integer Concerned bus ID Returns: type description orxHANDLE orxHANDLE / orxHANDLE_UNDEFINED C signature: orxHANDLE orxSoundSystem_CreateBus ( orxSTRINGID _stBusID ) createFromSample # Signature: r1 = createFromSample ( userdata , sample ) Description: Creates a sound from preloaded sample (can be played directly) Params: name type description userdata orxHANDLE User data to associate with this sound sample orxSOUNDSYSTEM_SAMPLE# Concerned sample Returns: type description orxSOUNDSYSTEM_SOUND orxSOUNDSYSTEM_SOUND / nil C signature: orxSOUNDSYSTEM_SOUND * orxSoundSystem_CreateFromSample ( orxHANDLE _hUserData , const orxSOUNDSYSTEM_SAMPLE * _pstSample ) createSample # Signature: r1 = createSample ( channelnumber , framenumber , samplerate ) Description: Creates an empty sample Params: name type description channelnumber integer Number of channels of the sample framenumber integer Number of frame of the sample (number of \"samples\" = number of frames * number of channels) samplerate integer Sampling rate of the sample (ie. number of frames per second) Returns: type description orxSOUNDSYSTEM_SAMPLE orxSOUNDSYSTEM_SAMPLE / nil C signature: orxSOUNDSYSTEM_SAMPLE * orxSoundSystem_CreateSample ( orxU32 _u32ChannelNumber , orxU32 _u32FrameNumber , orxU32 _u32SampleRate ) createStream # Signature: r1 = createStream ( userdata , channelnumber , samplerate ) Description: Creates an empty stream Params: name type description userdata orxHANDLE User data to associate with this sound channelnumber integer Number of channels for the stream samplerate integer Sampling rate of the stream (ie. number of frames per second) Returns: type description orxSOUNDSYSTEM_SOUND orxSOUNDSYSTEM_SOUND / nil C signature: orxSOUNDSYSTEM_SOUND * orxSoundSystem_CreateStream ( orxHANDLE _hUserData , orxU32 _u32ChannelNumber , orxU32 _u32SampleRate ) createStreamFromFile # Signature: r1 = createStreamFromFile ( userdata , filename ) Description: Creates a streamed sound from file (can be played directly) Params: name type description userdata orxHANDLE User data to associate with this sound filename string Name of the file to load as a stream (won't be completely loaded in memory, useful for musics) Returns: type description orxSOUNDSYSTEM_SOUND orxSOUNDSYSTEM_SOUND / nil C signature: orxSOUNDSYSTEM_SOUND * orxSoundSystem_CreateStreamFromFile ( orxHANDLE _hUserData , const orxSTRING _zFilename ) deleteBus # Signature: r1 = deleteBus ( bus ) Description: Deletes a bus Params: name type description bus orxHANDLE Concerned bus Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_DeleteBus ( orxHANDLE _hBus ) enableListener # Signature: enableListener ( listenerindex , enable ) Description: Enables/disables a listener Params: name type description listenerindex integer Concerned listener index enable boolean Enable / disable Returns: C signature: void orxSoundSystem_EnableListener ( orxU32 _u32ListenerIndex , orxBOOL _bEnable ) exit # Signature: exit () Description: Exits from the sound system module Params: Returns: C signature: void orxSoundSystem_Exit () getGlobalVolume # Signature: r1 = getGlobalVolume () Description: Gets global volume Params: Returns: type description number Gobal volume C signature: orxFLOAT orxSoundSystem_GetGlobalVolume () getListenerCount # Signature: r1 = getListenerCount () Description: Gets listener count Params: Returns: type description integer Listener count C signature: orxU32 orxSoundSystem_GetListenerCount () getListenerPosition # Signature: r1 = getListenerPosition ( index ) Description: Gets listener position Params: name type description index integer Listener index, 0-based Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxSoundSystem_GetListenerPosition ( orxU32 _u32Index , orxVECTOR * _pvPosition ) hasRecordingSupport # Signature: r1 = hasRecordingSupport () Description: Is recording possible on the current system? Params: Returns: type description boolean true / false C signature: orxBOOL orxSoundSystem_HasRecordingSupport () init # Signature: r1 = init () Description: Inits the sound system module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Init () isListenerEnabled # Signature: r1 = isListenerEnabled ( listenerindex ) Description: Is listener enabled? Params: name type description listenerindex integer Concerned listener index Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxSoundSystem_IsListenerEnabled ( orxU32 _u32ListenerIndex ) loadSample # Signature: r1 = loadSample ( filename ) Description: Loads a sound sample from file (cannot be played directly) Params: name type description filename string Name of the file to load as a sample (completely loaded in memory, useful for sound effects) Returns: type description orxSOUNDSYSTEM_SAMPLE orxSOUNDSYSTEM_SAMPLE / nil C signature: orxSOUNDSYSTEM_SAMPLE * orxSoundSystem_LoadSample ( const orxSTRING _zFilename ) removeAllBusFilters # Signature: r1 = removeAllBusFilters ( bus ) Description: Removes all filters from a bus Params: name type description bus orxHANDLE Concerned bus Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_RemoveAllBusFilters ( orxHANDLE _hBus ) removeLastBusFilter # Signature: r1 = removeLastBusFilter ( bus ) Description: Removes last added filter from a bus Params: name type description bus orxHANDLE Concerned bus Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_RemoveLastBusFilter ( orxHANDLE _hBus ) setBusParent # Signature: r1 = setBusParent ( bus , parentbus ) Description: Sets a bus's parent Params: name type description bus orxHANDLE Concerned bus parentbus orxHANDLE Handle of the bus to use as parent Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetBusParent ( orxHANDLE _hBus , orxHANDLE _hParentBus ) setGlobalVolume # Signature: r1 = setGlobalVolume ( globalvolume ) Description: Sets global volume Params: name type description globalvolume number Global volume to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetGlobalVolume ( orxFLOAT _fGlobalVolume ) setListenerPosition # Signature: r1 = setListenerPosition ( index , position ) Description: Sets listener position Params: name type description index integer Listener index, 0-based position orxVECTOR# Desired position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetListenerPosition ( orxU32 _u32Index , const orxVECTOR * _pvPosition ) setup # Signature: setup () Description: Sound system module setup Params: Returns: C signature: void orxSoundSystem_Setup () startRecording # Signature: r1 = startRecording ( name , writetofile , samplerate , channelnumber ) Description: Starts recording Params: name type description name string Name for the recorded sound/file writetofile boolean Should write to file? samplerate integer Sample rate, 0 for default rate (48000Hz) channelnumber integer Channel number, 0 for default mono channel Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_StartRecording ( const orxCHAR * _zName , orxBOOL _bWriteToFile , orxU32 _u32SampleRate , orxU32 _u32ChannelNumber ) stopRecording # Signature: r1 = stopRecording () Description: Stops recording Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_StopRecording ()","title":"soundsystem"},{"location":"modules/soundsystem.html#module-soundsystem","text":"","title":"module soundsystem"},{"location":"modules/soundsystem.html#functions","text":"","title":"functions"},{"location":"modules/soundsystem.html#addbusfilter","text":"Signature: r1 = addBusFilter ( bus , filterdata , usecustomparam ) Description: Adds a filter to a bus (cascading) Params: name type description bus orxHANDLE Concerned bus filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_AddBusFilter ( orxHANDLE _hBus , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam )","title":"addBusFilter"},{"location":"modules/soundsystem.html#createbus","text":"Signature: r1 = createBus ( busid ) Description: Creates a bus Params: name type description busid integer Concerned bus ID Returns: type description orxHANDLE orxHANDLE / orxHANDLE_UNDEFINED C signature: orxHANDLE orxSoundSystem_CreateBus ( orxSTRINGID _stBusID )","title":"createBus"},{"location":"modules/soundsystem.html#createfromsample","text":"Signature: r1 = createFromSample ( userdata , sample ) Description: Creates a sound from preloaded sample (can be played directly) Params: name type description userdata orxHANDLE User data to associate with this sound sample orxSOUNDSYSTEM_SAMPLE# Concerned sample Returns: type description orxSOUNDSYSTEM_SOUND orxSOUNDSYSTEM_SOUND / nil C signature: orxSOUNDSYSTEM_SOUND * orxSoundSystem_CreateFromSample ( orxHANDLE _hUserData , const orxSOUNDSYSTEM_SAMPLE * _pstSample )","title":"createFromSample"},{"location":"modules/soundsystem.html#createsample","text":"Signature: r1 = createSample ( channelnumber , framenumber , samplerate ) Description: Creates an empty sample Params: name type description channelnumber integer Number of channels of the sample framenumber integer Number of frame of the sample (number of \"samples\" = number of frames * number of channels) samplerate integer Sampling rate of the sample (ie. number of frames per second) Returns: type description orxSOUNDSYSTEM_SAMPLE orxSOUNDSYSTEM_SAMPLE / nil C signature: orxSOUNDSYSTEM_SAMPLE * orxSoundSystem_CreateSample ( orxU32 _u32ChannelNumber , orxU32 _u32FrameNumber , orxU32 _u32SampleRate )","title":"createSample"},{"location":"modules/soundsystem.html#createstream","text":"Signature: r1 = createStream ( userdata , channelnumber , samplerate ) Description: Creates an empty stream Params: name type description userdata orxHANDLE User data to associate with this sound channelnumber integer Number of channels for the stream samplerate integer Sampling rate of the stream (ie. number of frames per second) Returns: type description orxSOUNDSYSTEM_SOUND orxSOUNDSYSTEM_SOUND / nil C signature: orxSOUNDSYSTEM_SOUND * orxSoundSystem_CreateStream ( orxHANDLE _hUserData , orxU32 _u32ChannelNumber , orxU32 _u32SampleRate )","title":"createStream"},{"location":"modules/soundsystem.html#createstreamfromfile","text":"Signature: r1 = createStreamFromFile ( userdata , filename ) Description: Creates a streamed sound from file (can be played directly) Params: name type description userdata orxHANDLE User data to associate with this sound filename string Name of the file to load as a stream (won't be completely loaded in memory, useful for musics) Returns: type description orxSOUNDSYSTEM_SOUND orxSOUNDSYSTEM_SOUND / nil C signature: orxSOUNDSYSTEM_SOUND * orxSoundSystem_CreateStreamFromFile ( orxHANDLE _hUserData , const orxSTRING _zFilename )","title":"createStreamFromFile"},{"location":"modules/soundsystem.html#deletebus","text":"Signature: r1 = deleteBus ( bus ) Description: Deletes a bus Params: name type description bus orxHANDLE Concerned bus Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_DeleteBus ( orxHANDLE _hBus )","title":"deleteBus"},{"location":"modules/soundsystem.html#enablelistener","text":"Signature: enableListener ( listenerindex , enable ) Description: Enables/disables a listener Params: name type description listenerindex integer Concerned listener index enable boolean Enable / disable Returns: C signature: void orxSoundSystem_EnableListener ( orxU32 _u32ListenerIndex , orxBOOL _bEnable )","title":"enableListener"},{"location":"modules/soundsystem.html#exit","text":"Signature: exit () Description: Exits from the sound system module Params: Returns: C signature: void orxSoundSystem_Exit ()","title":"exit"},{"location":"modules/soundsystem.html#getglobalvolume","text":"Signature: r1 = getGlobalVolume () Description: Gets global volume Params: Returns: type description number Gobal volume C signature: orxFLOAT orxSoundSystem_GetGlobalVolume ()","title":"getGlobalVolume"},{"location":"modules/soundsystem.html#getlistenercount","text":"Signature: r1 = getListenerCount () Description: Gets listener count Params: Returns: type description integer Listener count C signature: orxU32 orxSoundSystem_GetListenerCount ()","title":"getListenerCount"},{"location":"modules/soundsystem.html#getlistenerposition","text":"Signature: r1 = getListenerPosition ( index ) Description: Gets listener position Params: name type description index integer Listener index, 0-based Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxSoundSystem_GetListenerPosition ( orxU32 _u32Index , orxVECTOR * _pvPosition )","title":"getListenerPosition"},{"location":"modules/soundsystem.html#hasrecordingsupport","text":"Signature: r1 = hasRecordingSupport () Description: Is recording possible on the current system? Params: Returns: type description boolean true / false C signature: orxBOOL orxSoundSystem_HasRecordingSupport ()","title":"hasRecordingSupport"},{"location":"modules/soundsystem.html#init","text":"Signature: r1 = init () Description: Inits the sound system module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Init ()","title":"init"},{"location":"modules/soundsystem.html#islistenerenabled","text":"Signature: r1 = isListenerEnabled ( listenerindex ) Description: Is listener enabled? Params: name type description listenerindex integer Concerned listener index Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxSoundSystem_IsListenerEnabled ( orxU32 _u32ListenerIndex )","title":"isListenerEnabled"},{"location":"modules/soundsystem.html#loadsample","text":"Signature: r1 = loadSample ( filename ) Description: Loads a sound sample from file (cannot be played directly) Params: name type description filename string Name of the file to load as a sample (completely loaded in memory, useful for sound effects) Returns: type description orxSOUNDSYSTEM_SAMPLE orxSOUNDSYSTEM_SAMPLE / nil C signature: orxSOUNDSYSTEM_SAMPLE * orxSoundSystem_LoadSample ( const orxSTRING _zFilename )","title":"loadSample"},{"location":"modules/soundsystem.html#removeallbusfilters","text":"Signature: r1 = removeAllBusFilters ( bus ) Description: Removes all filters from a bus Params: name type description bus orxHANDLE Concerned bus Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_RemoveAllBusFilters ( orxHANDLE _hBus )","title":"removeAllBusFilters"},{"location":"modules/soundsystem.html#removelastbusfilter","text":"Signature: r1 = removeLastBusFilter ( bus ) Description: Removes last added filter from a bus Params: name type description bus orxHANDLE Concerned bus Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_RemoveLastBusFilter ( orxHANDLE _hBus )","title":"removeLastBusFilter"},{"location":"modules/soundsystem.html#setbusparent","text":"Signature: r1 = setBusParent ( bus , parentbus ) Description: Sets a bus's parent Params: name type description bus orxHANDLE Concerned bus parentbus orxHANDLE Handle of the bus to use as parent Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetBusParent ( orxHANDLE _hBus , orxHANDLE _hParentBus )","title":"setBusParent"},{"location":"modules/soundsystem.html#setglobalvolume","text":"Signature: r1 = setGlobalVolume ( globalvolume ) Description: Sets global volume Params: name type description globalvolume number Global volume to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetGlobalVolume ( orxFLOAT _fGlobalVolume )","title":"setGlobalVolume"},{"location":"modules/soundsystem.html#setlistenerposition","text":"Signature: r1 = setListenerPosition ( index , position ) Description: Sets listener position Params: name type description index integer Listener index, 0-based position orxVECTOR# Desired position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetListenerPosition ( orxU32 _u32Index , const orxVECTOR * _pvPosition )","title":"setListenerPosition"},{"location":"modules/soundsystem.html#setup","text":"Signature: setup () Description: Sound system module setup Params: Returns: C signature: void orxSoundSystem_Setup ()","title":"setup"},{"location":"modules/soundsystem.html#startrecording","text":"Signature: r1 = startRecording ( name , writetofile , samplerate , channelnumber ) Description: Starts recording Params: name type description name string Name for the recorded sound/file writetofile boolean Should write to file? samplerate integer Sample rate, 0 for default rate (48000Hz) channelnumber integer Channel number, 0 for default mono channel Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_StartRecording ( const orxCHAR * _zName , orxBOOL _bWriteToFile , orxU32 _u32SampleRate , orxU32 _u32ChannelNumber )","title":"startRecording"},{"location":"modules/soundsystem.html#stoprecording","text":"Signature: r1 = stopRecording () Description: Stops recording Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_StopRecording ()","title":"stopRecording"},{"location":"modules/spawner.html","text":"module spawner # functions # create # Signature: r1 = create () Description: Creates an empty spawner Params: Returns: type description orxSPAWNER orxSPAWNER / nil C signature: orxSPAWNER * orxSpawner_Create () createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates a spawner from config Params: name type description configid string Config ID Returns: type description orxSPAWNER orxSPAWNER / nil C signature: orxSPAWNER * orxSpawner_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the spawner module Params: Returns: C signature: void orxSpawner_Exit () init # Signature: r1 = init () Description: Inits the spawner module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_Init () setup # Signature: setup () Description: Spawner module setup Params: Returns: C signature: void orxSpawner_Setup ()","title":"spawner"},{"location":"modules/spawner.html#module-spawner","text":"","title":"module spawner"},{"location":"modules/spawner.html#functions","text":"","title":"functions"},{"location":"modules/spawner.html#create","text":"Signature: r1 = create () Description: Creates an empty spawner Params: Returns: type description orxSPAWNER orxSPAWNER / nil C signature: orxSPAWNER * orxSpawner_Create ()","title":"create"},{"location":"modules/spawner.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates a spawner from config Params: name type description configid string Config ID Returns: type description orxSPAWNER orxSPAWNER / nil C signature: orxSPAWNER * orxSpawner_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/spawner.html#exit","text":"Signature: exit () Description: Exits from the spawner module Params: Returns: C signature: void orxSpawner_Exit ()","title":"exit"},{"location":"modules/spawner.html#init","text":"Signature: r1 = init () Description: Inits the spawner module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_Init ()","title":"init"},{"location":"modules/spawner.html#setup","text":"Signature: setup () Description: Spawner module setup Params: Returns: C signature: void orxSpawner_Setup ()","title":"setup"},{"location":"modules/string.html","text":"module string # functions # compare # Signature: r1 = compare ( string1 , string2 ) Description: Compare two strings, case sensitive. If the first one is smaller than the second it returns -1, 1 if the second one is bigger than the first, and 0 if they are equals Params: name type description string1 string First String to compare string2 string Second string to compare Returns: type description integer -1, 0 or 1 as indicated in the description. C signature: orxS32 orxString_Compare ( const orxSTRING _zString1 , const orxSTRING _zString2 ) duplicate # Signature: r1 = duplicate ( srcstring ) Description: Duplicate a string. Params: name type description srcstring string String to duplicate. Returns: type description string Duplicated string. C signature: orxSTRING orxString_Duplicate ( const orxSTRING _zSrcString ) exit # Signature: exit () Description: Exits from the structure module Params: Returns: C signature: void orxString_Exit () extractBase # Signature: r1 , r2 = extractBase ( string ) Description: Extracts the base (2, 8, 10 or 16) from a literal number Params: name type description string string String from which to extract the base Returns: type description integer Base or the numerical value, defaults to 10 (decimal) when no prefix is found or the literal value couldn't be identified string If non null, will contain the remaining literal number, right after the base prefix (0x, 0b or 0) C signature: orxU32 orxString_ExtractBase ( const orxSTRING _zString , const orxSTRING * _pzRemaining ) getCharacterCount # Signature: r1 = getCharacterCount ( string ) Description: Returns the number of valid unicode characters (UTF-8) in the string (for ASCII string, it will be the same result as orxString_GetLength()) Params: name type description string string Concerned string Returns: type description integer Number of valid unicode characters contained in the string, orxU32_UNDEFINED for an invalid UTF-8 string C signature: orxU32 orxString_GetCharacterCount ( const orxSTRING _zString ) getExtension # Signature: r1 = getExtension ( filename ) Description: Gets the extension from a file name Params: name type description filename string Concerned file name Returns: type description string Extension if exists, empty string otherwise C signature: const orxSTRING orxString_GetExtension ( const orxSTRING _zFileName ) getFirstCharacterCodePoint # Signature: r1 , r2 = getFirstCharacterCodePoint ( string ) Description: Returns the code of the first character of the UTF-8 string Params: name type description string string Concerned string Returns: type description integer Code of the first UTF-8 character of the string, orxU32_UNDEFINED if it's an invalid character string If non null, will contain the remaining string after the first UTF-8 character C signature: orxU32 orxString_GetFirstCharacterCodePoint ( const orxSTRING _zString , const orxSTRING * _pzRemaining ) getFromID # Signature: r1 = getFromID ( id ) Description: Gets a string from an ID (it should have already been stored internally with a call to orxString_GetID) Params: name type description id integer Concerned string ID Returns: type description string string if ID's found, empty string otherwise C signature: const orxSTRING orxString_GetFromID ( orxSTRINGID _stID ) getID # Signature: r1 = getID ( string ) Description: Gets a string's ID (and stores the string internally to prevent duplication) Params: name type description string string Concerned string Returns: type description integer String's ID C signature: orxSTRINGID orxString_GetID ( const orxSTRING _zString ) getLength # Signature: r1 = getLength ( string ) Description: Returns the number of orxCHAR in the string (for non-ASCII UTF-8 string, it won't be the actual number of unicode characters) Params: name type description string string String used for length computation Returns: type description integer Length of the string (doesn't count final orxCHAR_NULL) C signature: orxU32 orxString_GetLength ( const orxSTRING _zString ) getUTF8CharacterLength # Signature: r1 = getUTF8CharacterLength ( charactercodepoint ) Description: Gets the UTF-8 encoding length of given character Params: name type description charactercodepoint integer Concerned character code Returns: type description integer Encoding length in UTF-8 for given character if valid, orxU32_UNDEFINED otherwise C signature: orxU32 orxString_GetUTF8CharacterLength ( orxU32 _u32CharacterCodePoint ) hash # Signature: r1 = hash ( string ) Description: Gets a string's ID (aka hash), without storing the string internally Params: name type description string string Concerned string Returns: type description integer String's ID/hash C signature: orxSTRINGID orxString_Hash ( const orxSTRING _zString ) iCompare # Signature: r1 = iCompare ( string1 , string2 ) Description: Compare two strings, case insensitive. If the first one is smaller than the second, it returns -1, If the second one is bigger than the first, and 0 if they are equals Params: name type description string1 string First String to compare string2 string Second string to compare Returns: type description integer -1, 0 or 1 as indicated in the description. C signature: orxS32 orxString_ICompare ( const orxSTRING _zString1 , const orxSTRING _zString2 ) init # Signature: r1 = init () Description: Initializess the structure module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxString_Init () isCharacterASCII # Signature: r1 = isCharacterASCII ( charactercodepoint ) Description: Tells if a character is ASCII from its ID Params: name type description charactercodepoint integer Concerned character code Returns: type description boolean true is it's a non-extended ASCII character, false otherwise C signature: orxBOOL orxString_IsCharacterASCII ( orxU32 _u32CharacterCodePoint ) isCharacterAlphaNumeric # Signature: r1 = isCharacterAlphaNumeric ( charactercodepoint ) Description: Tells if a character is alpha-numeric from its ID Params: name type description charactercodepoint integer Concerned character code Returns: type description boolean true is it's a non-extended ASCII alpha-numerical character, false otherwise C signature: orxBOOL orxString_IsCharacterAlphaNumeric ( orxU32 _u32CharacterCodePoint ) nCompare # Signature: r1 = nCompare ( string1 , string2 , charnumber ) Description: Compare N first character from two strings, case sensitive. If the first one is smaller than the second it returns -1, 1 if the second one is bigger than the first and 0 if they are equals. Params: name type description string1 string First String to compare string2 string Second string to compare charnumber integer Number of character to compare Returns: type description integer -1, 0 or 1 as indicated in the description. C signature: orxS32 orxString_NCompare ( const orxSTRING _zString1 , const orxSTRING _zString2 , orxU32 _u32CharNumber ) nHash # Signature: r1 = nHash ( string , charnumber ) Description: Gets a string's ID (aka hash), without storing the string internally Params: name type description string string Concerned string charnumber integer Number of character to process, should be <= orxString_GetLength(_zString) Returns: type description integer String's ID/hash C signature: orxSTRINGID orxString_NHash ( const orxSTRING _zString , orxU32 _u32CharNumber ) nICompare # Signature: r1 = nICompare ( string1 , string2 , charnumber ) Description: Compare N first character from two strings, case insensitive. If the first one is smaller than the second, it returns -1, If the second one is bigger than the first, and 0 if they are equals. Params: name type description string1 string First String to compare string2 string Second string to compare charnumber integer Number of character to compare Returns: type description integer -1, 0 or 1 as indicated in the description. C signature: orxS32 orxString_NICompare ( const orxSTRING _zString1 , const orxSTRING _zString2 , orxU32 _u32CharNumber ) scan # Signature: r1 = scan ( string , format ) Description: Scans a formated string from a memory buffer Params: name type description string string String to scan format string Format string Returns: type description integer The number of scanned items C signature: orxS32 orxString_Scan ( const orxSTRING _zString , const orxSTRING _zFormat , ...) searchChar # Signature: r1 = searchChar ( string , char ) Description: Returns the first occurrence of _cChar in _zString Params: name type description string string String to analyze char string The character to find Returns: type description string The pointer of the first occurrence of _cChar, or nil if not found C signature: const orxSTRING orxString_SearchChar ( const orxSTRING _zString , orxCHAR _cChar ) searchCharIndex # Signature: r1 = searchCharIndex ( string , char , position ) Description: Returns the first occurrence of _cChar in _zString Params: name type description string string String to analyze char string The character to find position integer Search begin position Returns: type description integer The index of the next occurrence of requested character, starting at given position / -1 if not found C signature: orxS32 orxString_SearchCharIndex ( const orxSTRING _zString , orxCHAR _cChar , orxS32 _s32Position ) searchString # Signature: r1 = searchString ( string1 , string2 ) Description: Returns the first occurrence of _zString2 in _zString1 Params: name type description string1 string String to analyze string2 string String that must be inside _zString1 Returns: type description string The pointer of the first occurrence of _zString2, or nil if not found C signature: const orxSTRING orxString_SearchString ( const orxSTRING _zString1 , const orxSTRING _zString2 ) setup # Signature: setup () Description: Structure module setup Params: Returns: C signature: void orxString_Setup () skipPath # Signature: r1 = skipPath ( string ) Description: Skips path Params: name type description string string Concerned string Returns: type description string Sub string located after all non-terminal directory separators C signature: const orxSTRING orxString_SkipPath ( const orxSTRING _zString ) skipWhiteSpaces # Signature: r1 = skipWhiteSpaces ( string ) Description: Skips all white spaces Params: name type description string string Concerned string Returns: type description string Sub string located after all leading white spaces, including EOL characters C signature: const orxSTRING orxString_SkipWhiteSpaces ( const orxSTRING _zString ) store # Signature: r1 = store ( string ) Description: Stores a string internally: equivalent to an optimized call to orxString_GetFromID(orxString_GetID(_zString)) Params: name type description string string Concerned string Returns: type description string Stored string C signature: const orxSTRING orxString_Store ( const orxSTRING _zString ) toBool # Signature: r1 , r2 , r3 = toBool ( string ) Description: Convert a string to a boolean Params: name type description string string String To convert Returns: type description orxSTATUS success / failure boolean Converted value string If non null, will contain the remaining string after the boolean conversion C signature: orxSTATUS orxString_ToBool ( const orxSTRING _zString , orxBOOL * _pbOutValue , const orxSTRING * _pzRemaining ) toFloat # Signature: r1 , r2 , r3 = toFloat ( string ) Description: Convert a string to a value Params: name type description string string String To convert Returns: type description orxSTATUS success / failure number Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToFloat ( const orxSTRING _zString , orxFLOAT * _pfOutValue , const orxSTRING * _pzRemaining ) toS32 # Signature: r1 , r2 , r3 = toS32 ( string ) Description: Converts a String to a signed int value, guessing the base Params: name type description string string String To convert Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToS32 ( const orxSTRING _zString , orxS32 * _ps32OutValue , const orxSTRING * _pzRemaining ) toS32Base # Signature: r1 , r2 , r3 = toS32Base ( string , base ) Description: Converts a String to a signed int value using the given base Params: name type description string string String To convert base integer Base of the read value (generally 10, but can be 16 to read hexa) Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToS32Base ( const orxSTRING _zString , orxU32 _u32Base , orxS32 * _ps32OutValue , const orxSTRING * _pzRemaining ) toS64 # Signature: r1 , r2 , r3 = toS64 ( string ) Description: Converts a String to a signed int value, guessing the base Params: name type description string string String To convert Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToS64 ( const orxSTRING _zString , orxS64 * _ps64OutValue , const orxSTRING * _pzRemaining ) toS64Base # Signature: r1 , r2 , r3 = toS64Base ( string , base ) Description: Converts a String to a signed int value using the given base Params: name type description string string String To convert base integer Base of the read value (generally 10, but can be 16 to read hexa) Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToS64Base ( const orxSTRING _zString , orxU32 _u32Base , orxS64 * _ps64OutValue , const orxSTRING * _pzRemaining ) toU32 # Signature: r1 , r2 , r3 = toU32 ( string ) Description: Converts a String to an unsigned int value, guessing the base Params: name type description string string String To convert Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToU32 ( const orxSTRING _zString , orxU32 * _pu32OutValue , const orxSTRING * _pzRemaining ) toU32Base # Signature: r1 , r2 , r3 = toU32Base ( string , base ) Description: Converts a String to an unsigned int value using the given base Params: name type description string string String To convert base integer Base of the read value (generally 10, but can be 16 to read hexa) Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToU32Base ( const orxSTRING _zString , orxU32 _u32Base , orxU32 * _pu32OutValue , const orxSTRING * _pzRemaining ) toU64 # Signature: r1 , r2 , r3 = toU64 ( string ) Description: Converts a String to an unsigned int value, guessing the base Params: name type description string string String To convert Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToU64 ( const orxSTRING _zString , orxU64 * _pu64OutValue , const orxSTRING * _pzRemaining ) toU64Base # Signature: r1 , r2 , r3 = toU64Base ( string , base ) Description: Converts a String to an unsigned int value using the given base Params: name type description string string String To convert base integer Base of the read value (generally 10, but can be 16 to read hexa) Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToU64Base ( const orxSTRING _zString , orxU32 _u32Base , orxU64 * _pu64OutValue , const orxSTRING * _pzRemaining ) toVector # Signature: r1 , r2 , r3 = toVector ( string ) Description: Convert a string to a vector Params: name type description string string String To convert Returns: type description orxSTATUS success / failure orxVECTOR Converted value. N.B.: if only two components (x, y) are defined, the z component will be set to zero string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToVector ( const orxSTRING _zString , orxVECTOR * _pvOutValue , const orxSTRING * _pzRemaining )","title":"string"},{"location":"modules/string.html#module-string","text":"","title":"module string"},{"location":"modules/string.html#functions","text":"","title":"functions"},{"location":"modules/string.html#compare","text":"Signature: r1 = compare ( string1 , string2 ) Description: Compare two strings, case sensitive. If the first one is smaller than the second it returns -1, 1 if the second one is bigger than the first, and 0 if they are equals Params: name type description string1 string First String to compare string2 string Second string to compare Returns: type description integer -1, 0 or 1 as indicated in the description. C signature: orxS32 orxString_Compare ( const orxSTRING _zString1 , const orxSTRING _zString2 )","title":"compare"},{"location":"modules/string.html#duplicate","text":"Signature: r1 = duplicate ( srcstring ) Description: Duplicate a string. Params: name type description srcstring string String to duplicate. Returns: type description string Duplicated string. C signature: orxSTRING orxString_Duplicate ( const orxSTRING _zSrcString )","title":"duplicate"},{"location":"modules/string.html#exit","text":"Signature: exit () Description: Exits from the structure module Params: Returns: C signature: void orxString_Exit ()","title":"exit"},{"location":"modules/string.html#extractbase","text":"Signature: r1 , r2 = extractBase ( string ) Description: Extracts the base (2, 8, 10 or 16) from a literal number Params: name type description string string String from which to extract the base Returns: type description integer Base or the numerical value, defaults to 10 (decimal) when no prefix is found or the literal value couldn't be identified string If non null, will contain the remaining literal number, right after the base prefix (0x, 0b or 0) C signature: orxU32 orxString_ExtractBase ( const orxSTRING _zString , const orxSTRING * _pzRemaining )","title":"extractBase"},{"location":"modules/string.html#getcharactercount","text":"Signature: r1 = getCharacterCount ( string ) Description: Returns the number of valid unicode characters (UTF-8) in the string (for ASCII string, it will be the same result as orxString_GetLength()) Params: name type description string string Concerned string Returns: type description integer Number of valid unicode characters contained in the string, orxU32_UNDEFINED for an invalid UTF-8 string C signature: orxU32 orxString_GetCharacterCount ( const orxSTRING _zString )","title":"getCharacterCount"},{"location":"modules/string.html#getextension","text":"Signature: r1 = getExtension ( filename ) Description: Gets the extension from a file name Params: name type description filename string Concerned file name Returns: type description string Extension if exists, empty string otherwise C signature: const orxSTRING orxString_GetExtension ( const orxSTRING _zFileName )","title":"getExtension"},{"location":"modules/string.html#getfirstcharactercodepoint","text":"Signature: r1 , r2 = getFirstCharacterCodePoint ( string ) Description: Returns the code of the first character of the UTF-8 string Params: name type description string string Concerned string Returns: type description integer Code of the first UTF-8 character of the string, orxU32_UNDEFINED if it's an invalid character string If non null, will contain the remaining string after the first UTF-8 character C signature: orxU32 orxString_GetFirstCharacterCodePoint ( const orxSTRING _zString , const orxSTRING * _pzRemaining )","title":"getFirstCharacterCodePoint"},{"location":"modules/string.html#getfromid","text":"Signature: r1 = getFromID ( id ) Description: Gets a string from an ID (it should have already been stored internally with a call to orxString_GetID) Params: name type description id integer Concerned string ID Returns: type description string string if ID's found, empty string otherwise C signature: const orxSTRING orxString_GetFromID ( orxSTRINGID _stID )","title":"getFromID"},{"location":"modules/string.html#getid","text":"Signature: r1 = getID ( string ) Description: Gets a string's ID (and stores the string internally to prevent duplication) Params: name type description string string Concerned string Returns: type description integer String's ID C signature: orxSTRINGID orxString_GetID ( const orxSTRING _zString )","title":"getID"},{"location":"modules/string.html#getlength","text":"Signature: r1 = getLength ( string ) Description: Returns the number of orxCHAR in the string (for non-ASCII UTF-8 string, it won't be the actual number of unicode characters) Params: name type description string string String used for length computation Returns: type description integer Length of the string (doesn't count final orxCHAR_NULL) C signature: orxU32 orxString_GetLength ( const orxSTRING _zString )","title":"getLength"},{"location":"modules/string.html#getutf8characterlength","text":"Signature: r1 = getUTF8CharacterLength ( charactercodepoint ) Description: Gets the UTF-8 encoding length of given character Params: name type description charactercodepoint integer Concerned character code Returns: type description integer Encoding length in UTF-8 for given character if valid, orxU32_UNDEFINED otherwise C signature: orxU32 orxString_GetUTF8CharacterLength ( orxU32 _u32CharacterCodePoint )","title":"getUTF8CharacterLength"},{"location":"modules/string.html#hash","text":"Signature: r1 = hash ( string ) Description: Gets a string's ID (aka hash), without storing the string internally Params: name type description string string Concerned string Returns: type description integer String's ID/hash C signature: orxSTRINGID orxString_Hash ( const orxSTRING _zString )","title":"hash"},{"location":"modules/string.html#icompare","text":"Signature: r1 = iCompare ( string1 , string2 ) Description: Compare two strings, case insensitive. If the first one is smaller than the second, it returns -1, If the second one is bigger than the first, and 0 if they are equals Params: name type description string1 string First String to compare string2 string Second string to compare Returns: type description integer -1, 0 or 1 as indicated in the description. C signature: orxS32 orxString_ICompare ( const orxSTRING _zString1 , const orxSTRING _zString2 )","title":"iCompare"},{"location":"modules/string.html#init","text":"Signature: r1 = init () Description: Initializess the structure module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxString_Init ()","title":"init"},{"location":"modules/string.html#ischaracterascii","text":"Signature: r1 = isCharacterASCII ( charactercodepoint ) Description: Tells if a character is ASCII from its ID Params: name type description charactercodepoint integer Concerned character code Returns: type description boolean true is it's a non-extended ASCII character, false otherwise C signature: orxBOOL orxString_IsCharacterASCII ( orxU32 _u32CharacterCodePoint )","title":"isCharacterASCII"},{"location":"modules/string.html#ischaracteralphanumeric","text":"Signature: r1 = isCharacterAlphaNumeric ( charactercodepoint ) Description: Tells if a character is alpha-numeric from its ID Params: name type description charactercodepoint integer Concerned character code Returns: type description boolean true is it's a non-extended ASCII alpha-numerical character, false otherwise C signature: orxBOOL orxString_IsCharacterAlphaNumeric ( orxU32 _u32CharacterCodePoint )","title":"isCharacterAlphaNumeric"},{"location":"modules/string.html#ncompare","text":"Signature: r1 = nCompare ( string1 , string2 , charnumber ) Description: Compare N first character from two strings, case sensitive. If the first one is smaller than the second it returns -1, 1 if the second one is bigger than the first and 0 if they are equals. Params: name type description string1 string First String to compare string2 string Second string to compare charnumber integer Number of character to compare Returns: type description integer -1, 0 or 1 as indicated in the description. C signature: orxS32 orxString_NCompare ( const orxSTRING _zString1 , const orxSTRING _zString2 , orxU32 _u32CharNumber )","title":"nCompare"},{"location":"modules/string.html#nhash","text":"Signature: r1 = nHash ( string , charnumber ) Description: Gets a string's ID (aka hash), without storing the string internally Params: name type description string string Concerned string charnumber integer Number of character to process, should be <= orxString_GetLength(_zString) Returns: type description integer String's ID/hash C signature: orxSTRINGID orxString_NHash ( const orxSTRING _zString , orxU32 _u32CharNumber )","title":"nHash"},{"location":"modules/string.html#nicompare","text":"Signature: r1 = nICompare ( string1 , string2 , charnumber ) Description: Compare N first character from two strings, case insensitive. If the first one is smaller than the second, it returns -1, If the second one is bigger than the first, and 0 if they are equals. Params: name type description string1 string First String to compare string2 string Second string to compare charnumber integer Number of character to compare Returns: type description integer -1, 0 or 1 as indicated in the description. C signature: orxS32 orxString_NICompare ( const orxSTRING _zString1 , const orxSTRING _zString2 , orxU32 _u32CharNumber )","title":"nICompare"},{"location":"modules/string.html#scan","text":"Signature: r1 = scan ( string , format ) Description: Scans a formated string from a memory buffer Params: name type description string string String to scan format string Format string Returns: type description integer The number of scanned items C signature: orxS32 orxString_Scan ( const orxSTRING _zString , const orxSTRING _zFormat , ...)","title":"scan"},{"location":"modules/string.html#searchchar","text":"Signature: r1 = searchChar ( string , char ) Description: Returns the first occurrence of _cChar in _zString Params: name type description string string String to analyze char string The character to find Returns: type description string The pointer of the first occurrence of _cChar, or nil if not found C signature: const orxSTRING orxString_SearchChar ( const orxSTRING _zString , orxCHAR _cChar )","title":"searchChar"},{"location":"modules/string.html#searchcharindex","text":"Signature: r1 = searchCharIndex ( string , char , position ) Description: Returns the first occurrence of _cChar in _zString Params: name type description string string String to analyze char string The character to find position integer Search begin position Returns: type description integer The index of the next occurrence of requested character, starting at given position / -1 if not found C signature: orxS32 orxString_SearchCharIndex ( const orxSTRING _zString , orxCHAR _cChar , orxS32 _s32Position )","title":"searchCharIndex"},{"location":"modules/string.html#searchstring","text":"Signature: r1 = searchString ( string1 , string2 ) Description: Returns the first occurrence of _zString2 in _zString1 Params: name type description string1 string String to analyze string2 string String that must be inside _zString1 Returns: type description string The pointer of the first occurrence of _zString2, or nil if not found C signature: const orxSTRING orxString_SearchString ( const orxSTRING _zString1 , const orxSTRING _zString2 )","title":"searchString"},{"location":"modules/string.html#setup","text":"Signature: setup () Description: Structure module setup Params: Returns: C signature: void orxString_Setup ()","title":"setup"},{"location":"modules/string.html#skippath","text":"Signature: r1 = skipPath ( string ) Description: Skips path Params: name type description string string Concerned string Returns: type description string Sub string located after all non-terminal directory separators C signature: const orxSTRING orxString_SkipPath ( const orxSTRING _zString )","title":"skipPath"},{"location":"modules/string.html#skipwhitespaces","text":"Signature: r1 = skipWhiteSpaces ( string ) Description: Skips all white spaces Params: name type description string string Concerned string Returns: type description string Sub string located after all leading white spaces, including EOL characters C signature: const orxSTRING orxString_SkipWhiteSpaces ( const orxSTRING _zString )","title":"skipWhiteSpaces"},{"location":"modules/string.html#store","text":"Signature: r1 = store ( string ) Description: Stores a string internally: equivalent to an optimized call to orxString_GetFromID(orxString_GetID(_zString)) Params: name type description string string Concerned string Returns: type description string Stored string C signature: const orxSTRING orxString_Store ( const orxSTRING _zString )","title":"store"},{"location":"modules/string.html#tobool","text":"Signature: r1 , r2 , r3 = toBool ( string ) Description: Convert a string to a boolean Params: name type description string string String To convert Returns: type description orxSTATUS success / failure boolean Converted value string If non null, will contain the remaining string after the boolean conversion C signature: orxSTATUS orxString_ToBool ( const orxSTRING _zString , orxBOOL * _pbOutValue , const orxSTRING * _pzRemaining )","title":"toBool"},{"location":"modules/string.html#tofloat","text":"Signature: r1 , r2 , r3 = toFloat ( string ) Description: Convert a string to a value Params: name type description string string String To convert Returns: type description orxSTATUS success / failure number Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToFloat ( const orxSTRING _zString , orxFLOAT * _pfOutValue , const orxSTRING * _pzRemaining )","title":"toFloat"},{"location":"modules/string.html#tos32","text":"Signature: r1 , r2 , r3 = toS32 ( string ) Description: Converts a String to a signed int value, guessing the base Params: name type description string string String To convert Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToS32 ( const orxSTRING _zString , orxS32 * _ps32OutValue , const orxSTRING * _pzRemaining )","title":"toS32"},{"location":"modules/string.html#tos32base","text":"Signature: r1 , r2 , r3 = toS32Base ( string , base ) Description: Converts a String to a signed int value using the given base Params: name type description string string String To convert base integer Base of the read value (generally 10, but can be 16 to read hexa) Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToS32Base ( const orxSTRING _zString , orxU32 _u32Base , orxS32 * _ps32OutValue , const orxSTRING * _pzRemaining )","title":"toS32Base"},{"location":"modules/string.html#tos64","text":"Signature: r1 , r2 , r3 = toS64 ( string ) Description: Converts a String to a signed int value, guessing the base Params: name type description string string String To convert Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToS64 ( const orxSTRING _zString , orxS64 * _ps64OutValue , const orxSTRING * _pzRemaining )","title":"toS64"},{"location":"modules/string.html#tos64base","text":"Signature: r1 , r2 , r3 = toS64Base ( string , base ) Description: Converts a String to a signed int value using the given base Params: name type description string string String To convert base integer Base of the read value (generally 10, but can be 16 to read hexa) Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToS64Base ( const orxSTRING _zString , orxU32 _u32Base , orxS64 * _ps64OutValue , const orxSTRING * _pzRemaining )","title":"toS64Base"},{"location":"modules/string.html#tou32","text":"Signature: r1 , r2 , r3 = toU32 ( string ) Description: Converts a String to an unsigned int value, guessing the base Params: name type description string string String To convert Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToU32 ( const orxSTRING _zString , orxU32 * _pu32OutValue , const orxSTRING * _pzRemaining )","title":"toU32"},{"location":"modules/string.html#tou32base","text":"Signature: r1 , r2 , r3 = toU32Base ( string , base ) Description: Converts a String to an unsigned int value using the given base Params: name type description string string String To convert base integer Base of the read value (generally 10, but can be 16 to read hexa) Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToU32Base ( const orxSTRING _zString , orxU32 _u32Base , orxU32 * _pu32OutValue , const orxSTRING * _pzRemaining )","title":"toU32Base"},{"location":"modules/string.html#tou64","text":"Signature: r1 , r2 , r3 = toU64 ( string ) Description: Converts a String to an unsigned int value, guessing the base Params: name type description string string String To convert Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToU64 ( const orxSTRING _zString , orxU64 * _pu64OutValue , const orxSTRING * _pzRemaining )","title":"toU64"},{"location":"modules/string.html#tou64base","text":"Signature: r1 , r2 , r3 = toU64Base ( string , base ) Description: Converts a String to an unsigned int value using the given base Params: name type description string string String To convert base integer Base of the read value (generally 10, but can be 16 to read hexa) Returns: type description orxSTATUS success / failure integer Converted value string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToU64Base ( const orxSTRING _zString , orxU32 _u32Base , orxU64 * _pu64OutValue , const orxSTRING * _pzRemaining )","title":"toU64Base"},{"location":"modules/string.html#tovector","text":"Signature: r1 , r2 , r3 = toVector ( string ) Description: Convert a string to a vector Params: name type description string string String To convert Returns: type description orxSTATUS success / failure orxVECTOR Converted value. N.B.: if only two components (x, y) are defined, the z component will be set to zero string If non null, will contain the remaining string after the number conversion C signature: orxSTATUS orxString_ToVector ( const orxSTRING _zString , orxVECTOR * _pvOutValue , const orxSTRING * _pzRemaining )","title":"toVector"},{"location":"modules/structure.html","text":"module structure # functions # create # Signature: r1 = create ( structureid ) Description: Creates a clean structure for given type Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTRUCTURE orxSTRUCTURE / nil C signature: orxSTRUCTURE * orxStructure_Create ( orxSTRUCTURE_ID _eStructureID ) decreaseCount # Signature: decreaseCount ( structure ) Description: Decreases structure reference count Params: name type description structure void* Concerned structure Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) delete # Signature: r1 = delete ( structure ) Description: Deletes a structure (needs to be cleaned beforehand) Params: name type description structure void* Concerned structure Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Delete ( void * _pStructure ) exit # Signature: exit () Description: Exits from the structure module Params: Returns: C signature: void orxStructure_Exit () get # Signature: r1 = get ( guid ) Description: Gets structure given its GUID Params: name type description guid integer Structure's GUID Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_Get ( orxU64 _u64GUID ) getChild # Signature: r1 = getChild ( structure ) Description: Gets structure tree child Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) getCount # Signature: r1 = getCount ( structureid ) Description: Gets given type structure count Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description integer integer (u32) / orxU32_UNDEFINED C signature: orxU32 orxStructure_GetCount ( orxSTRUCTURE_ID _eStructureID ) getFirst # Signature: r1 = getFirst ( structureid ) Description: Gets first stored structure (first list cell or tree root depending on storage type) Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetFirst ( orxSTRUCTURE_ID _eStructureID ) getFlags # Signature: r1 = getFlags ( structure , mask ) Description: Gets structure flags Params: name type description structure void*# Concerned structure mask integer Mask to use for getting flags Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) getGUID # Signature: r1 = getGUID ( structure ) Description: Gets structure GUID Params: name type description structure void*# Concerned structure Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) getID # Signature: r1 = getID ( structure ) Description: Gets structure ID Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) getIDString # Signature: r1 = getIDString ( id ) Description: Gets structure ID string Params: name type description id orxSTRUCTURE_ID Concerned ID Returns: type description string Corresponding literal string C signature: const orxSTRING orxStructure_GetIDString ( orxSTRUCTURE_ID _eID ) getLast # Signature: r1 = getLast ( structureid ) Description: Gets last stored structure (last list cell or tree root depending on storage type) Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetLast ( orxSTRUCTURE_ID _eStructureID ) getNext # Signature: r1 = getNext ( structure ) Description: Gets structure list next Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) getOwner # Signature: r1 = getOwner ( structure ) Description: Gets structure's owner Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) getParent # Signature: r1 = getParent ( structure ) Description: Gets structure tree parent Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) getPointer # Signature: r1 = getPointer ( structure , structureid ) Description: Gets structure pointer / debug mode Params: name type description structure void*# Concerned structure structureid orxSTRUCTURE_ID ID to test the structure against Returns: type description orxSTRUCTURE Valid orxSTRUCTURE, nil otherwise C signature: orxSTRUCTURE * _orxStructure_GetPointer ( const void * _pStructure , orxSTRUCTURE_ID _eStructureID ) getPrevious # Signature: r1 = getPrevious ( structure ) Description: Gets structure list previous Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) getRefCount # Signature: r1 = getRefCount ( structure ) Description: Gets structure reference count Params: name type description structure void*# Concerned structure Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) getSibling # Signature: r1 = getSibling ( structure ) Description: Gets structure tree sibling Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) getStorageType # Signature: r1 = getStorageType ( structureid ) Description: Gets structure storage type Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTRUCTURE_STORAGE_TYPE orxSTRUCTURE_STORAGE_TYPE C signature: orxSTRUCTURE_STORAGE_TYPE orxStructure_GetStorageType ( orxSTRUCTURE_ID _eStructureID ) increaseCount # Signature: increaseCount ( structure ) Description: Increases structure reference count Params: name type description structure void* Concerned structure Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) init # Signature: r1 = init () Description: Initializess the structure module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Init () logAll # Signature: r1 = logAll ( private ) Description: Logs all user-generated (& optionally private) active structures Params: name type description private boolean Include all private structures in the log Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_LogAll ( orxBOOL _bPrivate ) setFlags # Signature: setFlags ( structure , addflags , removeflags ) Description: Sets structure flags Params: name type description structure void* Concerned structure addflags integer Flags to add removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) setOwner # Signature: r1 = setOwner ( structure , owner ) Description: Sets structure owner Params: name type description structure void* Concerned structure owner void* Structure to set as owner Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) setParent # Signature: r1 = setParent ( structure , parent ) Description: Sets structure tree parent Params: name type description structure void* Concerned structure parent void* Structure to set as parent Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) setup # Signature: setup () Description: Structure module setup Params: Returns: C signature: void orxStructure_Setup () testAllFlags # Signature: r1 = testAllFlags ( structure , flags ) Description: Tests all flags against structure ones Params: name type description structure void*# Concerned structure flags integer Flags to test Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) testFlags # Signature: r1 = testFlags ( structure , flags ) Description: Tests flags against structure ones Params: name type description structure void*# Concerned structure flags integer Flags to test Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) unregister # Signature: r1 = unregister ( structureid ) Description: Unregisters a given ID Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Unregister ( orxSTRUCTURE_ID _eStructureID ) update # Signature: r1 = update ( structure , caller , clockinfo ) Description: Updates structure if update function was registered for the structure type Params: name type description structure void* Concerned structure caller void*# Caller structure clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"structure"},{"location":"modules/structure.html#module-structure","text":"","title":"module structure"},{"location":"modules/structure.html#functions","text":"","title":"functions"},{"location":"modules/structure.html#create","text":"Signature: r1 = create ( structureid ) Description: Creates a clean structure for given type Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTRUCTURE orxSTRUCTURE / nil C signature: orxSTRUCTURE * orxStructure_Create ( orxSTRUCTURE_ID _eStructureID )","title":"create"},{"location":"modules/structure.html#decreasecount","text":"Signature: decreaseCount ( structure ) Description: Decreases structure reference count Params: name type description structure void* Concerned structure Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"decreaseCount"},{"location":"modules/structure.html#delete","text":"Signature: r1 = delete ( structure ) Description: Deletes a structure (needs to be cleaned beforehand) Params: name type description structure void* Concerned structure Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Delete ( void * _pStructure )","title":"delete"},{"location":"modules/structure.html#exit","text":"Signature: exit () Description: Exits from the structure module Params: Returns: C signature: void orxStructure_Exit ()","title":"exit"},{"location":"modules/structure.html#get","text":"Signature: r1 = get ( guid ) Description: Gets structure given its GUID Params: name type description guid integer Structure's GUID Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_Get ( orxU64 _u64GUID )","title":"get"},{"location":"modules/structure.html#getchild","text":"Signature: r1 = getChild ( structure ) Description: Gets structure tree child Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"getChild"},{"location":"modules/structure.html#getcount","text":"Signature: r1 = getCount ( structureid ) Description: Gets given type structure count Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description integer integer (u32) / orxU32_UNDEFINED C signature: orxU32 orxStructure_GetCount ( orxSTRUCTURE_ID _eStructureID )","title":"getCount"},{"location":"modules/structure.html#getfirst","text":"Signature: r1 = getFirst ( structureid ) Description: Gets first stored structure (first list cell or tree root depending on storage type) Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetFirst ( orxSTRUCTURE_ID _eStructureID )","title":"getFirst"},{"location":"modules/structure.html#getflags","text":"Signature: r1 = getFlags ( structure , mask ) Description: Gets structure flags Params: name type description structure void*# Concerned structure mask integer Mask to use for getting flags Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"getFlags"},{"location":"modules/structure.html#getguid","text":"Signature: r1 = getGUID ( structure ) Description: Gets structure GUID Params: name type description structure void*# Concerned structure Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"getGUID"},{"location":"modules/structure.html#getid","text":"Signature: r1 = getID ( structure ) Description: Gets structure ID Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"getID"},{"location":"modules/structure.html#getidstring","text":"Signature: r1 = getIDString ( id ) Description: Gets structure ID string Params: name type description id orxSTRUCTURE_ID Concerned ID Returns: type description string Corresponding literal string C signature: const orxSTRING orxStructure_GetIDString ( orxSTRUCTURE_ID _eID )","title":"getIDString"},{"location":"modules/structure.html#getlast","text":"Signature: r1 = getLast ( structureid ) Description: Gets last stored structure (last list cell or tree root depending on storage type) Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetLast ( orxSTRUCTURE_ID _eStructureID )","title":"getLast"},{"location":"modules/structure.html#getnext","text":"Signature: r1 = getNext ( structure ) Description: Gets structure list next Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"getNext"},{"location":"modules/structure.html#getowner","text":"Signature: r1 = getOwner ( structure ) Description: Gets structure's owner Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"getOwner"},{"location":"modules/structure.html#getparent","text":"Signature: r1 = getParent ( structure ) Description: Gets structure tree parent Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"getParent"},{"location":"modules/structure.html#getpointer","text":"Signature: r1 = getPointer ( structure , structureid ) Description: Gets structure pointer / debug mode Params: name type description structure void*# Concerned structure structureid orxSTRUCTURE_ID ID to test the structure against Returns: type description orxSTRUCTURE Valid orxSTRUCTURE, nil otherwise C signature: orxSTRUCTURE * _orxStructure_GetPointer ( const void * _pStructure , orxSTRUCTURE_ID _eStructureID )","title":"getPointer"},{"location":"modules/structure.html#getprevious","text":"Signature: r1 = getPrevious ( structure ) Description: Gets structure list previous Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"getPrevious"},{"location":"modules/structure.html#getrefcount","text":"Signature: r1 = getRefCount ( structure ) Description: Gets structure reference count Params: name type description structure void*# Concerned structure Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"getRefCount"},{"location":"modules/structure.html#getsibling","text":"Signature: r1 = getSibling ( structure ) Description: Gets structure tree sibling Params: name type description structure void*# Concerned structure Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"getSibling"},{"location":"modules/structure.html#getstoragetype","text":"Signature: r1 = getStorageType ( structureid ) Description: Gets structure storage type Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTRUCTURE_STORAGE_TYPE orxSTRUCTURE_STORAGE_TYPE C signature: orxSTRUCTURE_STORAGE_TYPE orxStructure_GetStorageType ( orxSTRUCTURE_ID _eStructureID )","title":"getStorageType"},{"location":"modules/structure.html#increasecount","text":"Signature: increaseCount ( structure ) Description: Increases structure reference count Params: name type description structure void* Concerned structure Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"increaseCount"},{"location":"modules/structure.html#init","text":"Signature: r1 = init () Description: Initializess the structure module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Init ()","title":"init"},{"location":"modules/structure.html#logall","text":"Signature: r1 = logAll ( private ) Description: Logs all user-generated (& optionally private) active structures Params: name type description private boolean Include all private structures in the log Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_LogAll ( orxBOOL _bPrivate )","title":"logAll"},{"location":"modules/structure.html#setflags","text":"Signature: setFlags ( structure , addflags , removeflags ) Description: Sets structure flags Params: name type description structure void* Concerned structure addflags integer Flags to add removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"setFlags"},{"location":"modules/structure.html#setowner","text":"Signature: r1 = setOwner ( structure , owner ) Description: Sets structure owner Params: name type description structure void* Concerned structure owner void* Structure to set as owner Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"setOwner"},{"location":"modules/structure.html#setparent","text":"Signature: r1 = setParent ( structure , parent ) Description: Sets structure tree parent Params: name type description structure void* Concerned structure parent void* Structure to set as parent Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"setParent"},{"location":"modules/structure.html#setup","text":"Signature: setup () Description: Structure module setup Params: Returns: C signature: void orxStructure_Setup ()","title":"setup"},{"location":"modules/structure.html#testallflags","text":"Signature: r1 = testAllFlags ( structure , flags ) Description: Tests all flags against structure ones Params: name type description structure void*# Concerned structure flags integer Flags to test Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"testAllFlags"},{"location":"modules/structure.html#testflags","text":"Signature: r1 = testFlags ( structure , flags ) Description: Tests flags against structure ones Params: name type description structure void*# Concerned structure flags integer Flags to test Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"testFlags"},{"location":"modules/structure.html#unregister","text":"Signature: r1 = unregister ( structureid ) Description: Unregisters a given ID Params: name type description structureid orxSTRUCTURE_ID Concerned structure ID Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Unregister ( orxSTRUCTURE_ID _eStructureID )","title":"unregister"},{"location":"modules/structure.html#update","text":"Signature: r1 = update ( structure , caller , clockinfo ) Description: Updates structure if update function was registered for the structure type Params: name type description structure void* Concerned structure caller void*# Caller structure clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"update"},{"location":"modules/system.html","text":"module system # functions # delay # Signature: delay ( seconds ) Description: Delay the program for given number of seconds Params: name type description seconds number Number of seconds to wait Returns: C signature: void orxSystem_Delay ( orxFLOAT _fSeconds ) exit # Signature: exit () Description: Exits from the system module Params: Returns: C signature: void orxSystem_Exit () getClipboard # Signature: r1 = getClipboard () Description: Gets clipboard's content Params: Returns: type description string Clipboard's content / orxNULL, valid until next call to orxSystem_GetClipboard/orxSystem_SetClipboard C signature: const orxSTRING orxSystem_GetClipboard () getRealTime # Signature: r1 = getRealTime () Description: Gets real time (in seconds) Params: Returns: type description integer Returns the amount of seconds elapsed since reference time (epoch) C signature: orxU64 orxSystem_GetRealTime () getSystemTime # Signature: r1 = getSystemTime () Description: Gets current internal system time (in seconds) Params: Returns: type description number Current internal system time C signature: orxDOUBLE orxSystem_GetSystemTime () getTime # Signature: r1 = getTime () Description: Gets current time (elapsed from the beginning of the application, in seconds) Params: Returns: type description number Current time C signature: orxDOUBLE orxSystem_GetTime () getVersionFullString # Signature: r1 = getVersionFullString () Description: Gets orx version literal (compiled), including build number Params: Returns: type description string Compiled version literal C signature: const orxSTRING orxSystem_GetVersionFullString () getVersionNumeric # Signature: r1 = getVersionNumeric () Description: Gets orx version absolute numeric value (compiled) Params: Returns: type description integer Absolute numeric value of compiled version C signature: orxU32 orxSystem_GetVersionNumeric () getVersionString # Signature: r1 = getVersionString () Description: Gets orx version literal (compiled), excluding build number Params: Returns: type description string Compiled version literal C signature: const orxSTRING orxSystem_GetVersionString () init # Signature: r1 = init () Description: Inits the system module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSystem_Init () setClipboard # Signature: r1 = setClipboard ( value ) Description: Sets clipboard's content Params: name type description value string Value to set in the clipboard, nil to clear Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSystem_SetClipboard ( const orxSTRING _zValue ) setup # Signature: setup () Description: System module setup Params: Returns: C signature: void orxSystem_Setup ()","title":"system"},{"location":"modules/system.html#module-system","text":"","title":"module system"},{"location":"modules/system.html#functions","text":"","title":"functions"},{"location":"modules/system.html#delay","text":"Signature: delay ( seconds ) Description: Delay the program for given number of seconds Params: name type description seconds number Number of seconds to wait Returns: C signature: void orxSystem_Delay ( orxFLOAT _fSeconds )","title":"delay"},{"location":"modules/system.html#exit","text":"Signature: exit () Description: Exits from the system module Params: Returns: C signature: void orxSystem_Exit ()","title":"exit"},{"location":"modules/system.html#getclipboard","text":"Signature: r1 = getClipboard () Description: Gets clipboard's content Params: Returns: type description string Clipboard's content / orxNULL, valid until next call to orxSystem_GetClipboard/orxSystem_SetClipboard C signature: const orxSTRING orxSystem_GetClipboard ()","title":"getClipboard"},{"location":"modules/system.html#getrealtime","text":"Signature: r1 = getRealTime () Description: Gets real time (in seconds) Params: Returns: type description integer Returns the amount of seconds elapsed since reference time (epoch) C signature: orxU64 orxSystem_GetRealTime ()","title":"getRealTime"},{"location":"modules/system.html#getsystemtime","text":"Signature: r1 = getSystemTime () Description: Gets current internal system time (in seconds) Params: Returns: type description number Current internal system time C signature: orxDOUBLE orxSystem_GetSystemTime ()","title":"getSystemTime"},{"location":"modules/system.html#gettime","text":"Signature: r1 = getTime () Description: Gets current time (elapsed from the beginning of the application, in seconds) Params: Returns: type description number Current time C signature: orxDOUBLE orxSystem_GetTime ()","title":"getTime"},{"location":"modules/system.html#getversionfullstring","text":"Signature: r1 = getVersionFullString () Description: Gets orx version literal (compiled), including build number Params: Returns: type description string Compiled version literal C signature: const orxSTRING orxSystem_GetVersionFullString ()","title":"getVersionFullString"},{"location":"modules/system.html#getversionnumeric","text":"Signature: r1 = getVersionNumeric () Description: Gets orx version absolute numeric value (compiled) Params: Returns: type description integer Absolute numeric value of compiled version C signature: orxU32 orxSystem_GetVersionNumeric ()","title":"getVersionNumeric"},{"location":"modules/system.html#getversionstring","text":"Signature: r1 = getVersionString () Description: Gets orx version literal (compiled), excluding build number Params: Returns: type description string Compiled version literal C signature: const orxSTRING orxSystem_GetVersionString ()","title":"getVersionString"},{"location":"modules/system.html#init","text":"Signature: r1 = init () Description: Inits the system module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSystem_Init ()","title":"init"},{"location":"modules/system.html#setclipboard","text":"Signature: r1 = setClipboard ( value ) Description: Sets clipboard's content Params: name type description value string Value to set in the clipboard, nil to clear Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSystem_SetClipboard ( const orxSTRING _zValue )","title":"setClipboard"},{"location":"modules/system.html#setup","text":"Signature: setup () Description: System module setup Params: Returns: C signature: void orxSystem_Setup ()","title":"setup"},{"location":"modules/text.html","text":"module text # functions # create # Signature: r1 = create () Description: Creates an empty text Params: Returns: type description orxTEXT orxTEXT / nil C signature: orxTEXT * orxText_Create () createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates a text from config Params: name type description configid string Config ID Returns: type description orxTEXT orxTEXT / nil C signature: orxTEXT * orxText_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the text module Params: Returns: C signature: void orxText_Exit () init # Signature: r1 = init () Description: Inits the text module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxText_Init () setup # Signature: setup () Description: Setups the text module Params: Returns: C signature: void orxText_Setup ()","title":"text"},{"location":"modules/text.html#module-text","text":"","title":"module text"},{"location":"modules/text.html#functions","text":"","title":"functions"},{"location":"modules/text.html#create","text":"Signature: r1 = create () Description: Creates an empty text Params: Returns: type description orxTEXT orxTEXT / nil C signature: orxTEXT * orxText_Create ()","title":"create"},{"location":"modules/text.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates a text from config Params: name type description configid string Config ID Returns: type description orxTEXT orxTEXT / nil C signature: orxTEXT * orxText_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/text.html#exit","text":"Signature: exit () Description: Exits from the text module Params: Returns: C signature: void orxText_Exit ()","title":"exit"},{"location":"modules/text.html#init","text":"Signature: r1 = init () Description: Inits the text module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxText_Init ()","title":"init"},{"location":"modules/text.html#setup","text":"Signature: setup () Description: Setups the text module Params: Returns: C signature: void orxText_Setup ()","title":"setup"},{"location":"modules/texture.html","text":"module texture # functions # clearCache # Signature: r1 = clearCache () Description: Clears cache (if any texture is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_ClearCache () create # Signature: r1 = create () Description: Creates an empty texture Params: Returns: type description orxTEXTURE orxTEXTURE / nil C signature: orxTEXTURE * orxTexture_Create () createFromFile # Signature: r1 = createFromFile ( filename , keepincache ) Description: Creates a texture from a bitmap file Params: name type description filename string Name of the bitmap keepincache boolean Should be kept in cache after no more references exist? Returns: type description orxTEXTURE orxTEXTURE / nil C signature: orxTEXTURE * orxTexture_CreateFromFile ( const orxSTRING _zFileName , orxBOOL _bKeepInCache ) exit # Signature: exit () Description: Exits from the texture module Params: Returns: C signature: void orxTexture_Exit () get # Signature: r1 = get ( name ) Description: Gets texture given its name Params: name type description name string Texture name Returns: type description orxTEXTURE orxTEXTURE / nil C signature: orxTEXTURE * orxTexture_Get ( const orxSTRING _zName ) getLoadCount # Signature: r1 = getLoadCount () Description: Gets pending load count Params: Returns: type description integer Pending load count C signature: orxU32 orxTexture_GetLoadCount () getScreenTexture # Signature: r1 = getScreenTexture () Description: Gets screen texture Params: Returns: type description orxTEXTURE Screen texture / nil C signature: orxTEXTURE * orxTexture_GetScreenTexture () init # Signature: r1 = init () Description: Inits the texture module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_Init () setup # Signature: setup () Description: Setups the texture module Params: Returns: C signature: void orxTexture_Setup ()","title":"texture"},{"location":"modules/texture.html#module-texture","text":"","title":"module texture"},{"location":"modules/texture.html#functions","text":"","title":"functions"},{"location":"modules/texture.html#clearcache","text":"Signature: r1 = clearCache () Description: Clears cache (if any texture is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_ClearCache ()","title":"clearCache"},{"location":"modules/texture.html#create","text":"Signature: r1 = create () Description: Creates an empty texture Params: Returns: type description orxTEXTURE orxTEXTURE / nil C signature: orxTEXTURE * orxTexture_Create ()","title":"create"},{"location":"modules/texture.html#createfromfile","text":"Signature: r1 = createFromFile ( filename , keepincache ) Description: Creates a texture from a bitmap file Params: name type description filename string Name of the bitmap keepincache boolean Should be kept in cache after no more references exist? Returns: type description orxTEXTURE orxTEXTURE / nil C signature: orxTEXTURE * orxTexture_CreateFromFile ( const orxSTRING _zFileName , orxBOOL _bKeepInCache )","title":"createFromFile"},{"location":"modules/texture.html#exit","text":"Signature: exit () Description: Exits from the texture module Params: Returns: C signature: void orxTexture_Exit ()","title":"exit"},{"location":"modules/texture.html#get","text":"Signature: r1 = get ( name ) Description: Gets texture given its name Params: name type description name string Texture name Returns: type description orxTEXTURE orxTEXTURE / nil C signature: orxTEXTURE * orxTexture_Get ( const orxSTRING _zName )","title":"get"},{"location":"modules/texture.html#getloadcount","text":"Signature: r1 = getLoadCount () Description: Gets pending load count Params: Returns: type description integer Pending load count C signature: orxU32 orxTexture_GetLoadCount ()","title":"getLoadCount"},{"location":"modules/texture.html#getscreentexture","text":"Signature: r1 = getScreenTexture () Description: Gets screen texture Params: Returns: type description orxTEXTURE Screen texture / nil C signature: orxTEXTURE * orxTexture_GetScreenTexture ()","title":"getScreenTexture"},{"location":"modules/texture.html#init","text":"Signature: r1 = init () Description: Inits the texture module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_Init ()","title":"init"},{"location":"modules/texture.html#setup","text":"Signature: setup () Description: Setups the texture module Params: Returns: C signature: void orxTexture_Setup ()","title":"setup"},{"location":"modules/thread.html","text":"module thread # functions # createSemaphore # Signature: r1 = createSemaphore ( value ) Description: Inits a semaphore with a given value Params: name type description value integer Value with which to init the semaphore Returns: type description orxTHREAD_SEMAPHORE orxTHREAD_SEMAPHORE / nil C signature: orxTHREAD_SEMAPHORE * orxThread_CreateSemaphore ( orxU32 _u32Value ) enable # Signature: r1 = enable ( enablethreads , disablethreads ) Description: Enables / disables threads Params: name type description enablethreads integer Mask of threads to enable (1 << ThreadID) disablethreads integer Mask of threads to disable (1 << ThreadID) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_Enable ( orxU32 _u32EnableThreads , orxU32 _u32DisableThreads ) exit # Signature: exit () Description: Exits from the thread module Params: Returns: C signature: void orxThread_Exit () getCurrent # Signature: r1 = getCurrent () Description: Gets current thread ID Params: Returns: type description integer Current thread ID C signature: orxU32 orxThread_GetCurrent () getName # Signature: r1 = getName ( threadid ) Description: Gets a thread name Params: name type description threadid integer ID of the concerned thread Returns: type description string Thread name C signature: const orxSTRING orxThread_GetName ( orxU32 _u32ThreadID ) getTaskCount # Signature: r1 = getTaskCount () Description: Gets number of pending asynchronous tasks awaiting full completion (might pump task notifications if called from main thread) Params: Returns: type description integer Number of pending asynchronous tasks C signature: orxU32 orxThread_GetTaskCount () init # Signature: r1 = init () Description: Inits the thread module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_Init () join # Signature: r1 = join ( threadid ) Description: Joins a thread (blocks & waits until the other thread finishes) Params: name type description threadid integer ID of the thread for which to wait Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_Join ( orxU32 _u32ThreadID ) joinAll # Signature: r1 = joinAll () Description: Joins all threads (blocks & waits until the other threads finish) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_JoinAll () setup # Signature: setup () Description: Thread module setup Params: Returns: C signature: void orxThread_Setup () yield # Signature: yield () Description: Yields to other threads Params: Returns: C signature: void orxThread_Yield ()","title":"thread"},{"location":"modules/thread.html#module-thread","text":"","title":"module thread"},{"location":"modules/thread.html#functions","text":"","title":"functions"},{"location":"modules/thread.html#createsemaphore","text":"Signature: r1 = createSemaphore ( value ) Description: Inits a semaphore with a given value Params: name type description value integer Value with which to init the semaphore Returns: type description orxTHREAD_SEMAPHORE orxTHREAD_SEMAPHORE / nil C signature: orxTHREAD_SEMAPHORE * orxThread_CreateSemaphore ( orxU32 _u32Value )","title":"createSemaphore"},{"location":"modules/thread.html#enable","text":"Signature: r1 = enable ( enablethreads , disablethreads ) Description: Enables / disables threads Params: name type description enablethreads integer Mask of threads to enable (1 << ThreadID) disablethreads integer Mask of threads to disable (1 << ThreadID) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_Enable ( orxU32 _u32EnableThreads , orxU32 _u32DisableThreads )","title":"enable"},{"location":"modules/thread.html#exit","text":"Signature: exit () Description: Exits from the thread module Params: Returns: C signature: void orxThread_Exit ()","title":"exit"},{"location":"modules/thread.html#getcurrent","text":"Signature: r1 = getCurrent () Description: Gets current thread ID Params: Returns: type description integer Current thread ID C signature: orxU32 orxThread_GetCurrent ()","title":"getCurrent"},{"location":"modules/thread.html#getname","text":"Signature: r1 = getName ( threadid ) Description: Gets a thread name Params: name type description threadid integer ID of the concerned thread Returns: type description string Thread name C signature: const orxSTRING orxThread_GetName ( orxU32 _u32ThreadID )","title":"getName"},{"location":"modules/thread.html#gettaskcount","text":"Signature: r1 = getTaskCount () Description: Gets number of pending asynchronous tasks awaiting full completion (might pump task notifications if called from main thread) Params: Returns: type description integer Number of pending asynchronous tasks C signature: orxU32 orxThread_GetTaskCount ()","title":"getTaskCount"},{"location":"modules/thread.html#init","text":"Signature: r1 = init () Description: Inits the thread module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_Init ()","title":"init"},{"location":"modules/thread.html#join","text":"Signature: r1 = join ( threadid ) Description: Joins a thread (blocks & waits until the other thread finishes) Params: name type description threadid integer ID of the thread for which to wait Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_Join ( orxU32 _u32ThreadID )","title":"join"},{"location":"modules/thread.html#joinall","text":"Signature: r1 = joinAll () Description: Joins all threads (blocks & waits until the other threads finish) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_JoinAll ()","title":"joinAll"},{"location":"modules/thread.html#setup","text":"Signature: setup () Description: Thread module setup Params: Returns: C signature: void orxThread_Setup ()","title":"setup"},{"location":"modules/thread.html#yield","text":"Signature: yield () Description: Yields to other threads Params: Returns: C signature: void orxThread_Yield ()","title":"yield"},{"location":"modules/timeline.html","text":"module timeline # functions # clearCache # Signature: r1 = clearCache () Description: Clears cache (if any TimeLine track is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTimeLine_ClearCache () create # Signature: r1 = create () Description: Creates an empty TimeLine Params: Returns: type description orxTIMELINE orxTIMELINE / nil C signature: orxTIMELINE * orxTimeLine_Create () exit # Signature: exit () Description: Exits from the TimeLine module Params: Returns: C signature: void orxTimeLine_Exit () getTrackDuration # Signature: r1 = getTrackDuration ( trackid ) Description: Gets a track duration using its config ID Params: name type description trackid string Config ID of the concerned track Returns: type description number Duration if found, -orxFLOAT_1 otherwise C signature: orxFLOAT orxTimeLine_GetTrackDuration ( const orxSTRING _zTrackID ) init # Signature: r1 = init () Description: Inits the TimeLine module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTimeLine_Init () setup # Signature: setup () Description: TimeLine module setup Params: Returns: C signature: void orxTimeLine_Setup ()","title":"timeline"},{"location":"modules/timeline.html#module-timeline","text":"","title":"module timeline"},{"location":"modules/timeline.html#functions","text":"","title":"functions"},{"location":"modules/timeline.html#clearcache","text":"Signature: r1 = clearCache () Description: Clears cache (if any TimeLine track is still in active use, it'll remain in memory until not referenced anymore) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTimeLine_ClearCache ()","title":"clearCache"},{"location":"modules/timeline.html#create","text":"Signature: r1 = create () Description: Creates an empty TimeLine Params: Returns: type description orxTIMELINE orxTIMELINE / nil C signature: orxTIMELINE * orxTimeLine_Create ()","title":"create"},{"location":"modules/timeline.html#exit","text":"Signature: exit () Description: Exits from the TimeLine module Params: Returns: C signature: void orxTimeLine_Exit ()","title":"exit"},{"location":"modules/timeline.html#gettrackduration","text":"Signature: r1 = getTrackDuration ( trackid ) Description: Gets a track duration using its config ID Params: name type description trackid string Config ID of the concerned track Returns: type description number Duration if found, -orxFLOAT_1 otherwise C signature: orxFLOAT orxTimeLine_GetTrackDuration ( const orxSTRING _zTrackID )","title":"getTrackDuration"},{"location":"modules/timeline.html#init","text":"Signature: r1 = init () Description: Inits the TimeLine module Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTimeLine_Init ()","title":"init"},{"location":"modules/timeline.html#setup","text":"Signature: setup () Description: TimeLine module setup Params: Returns: C signature: void orxTimeLine_Setup ()","title":"setup"},{"location":"modules/vector.html","text":"module vector # functions # _2DDot # Signature: r1 = _2DDot ( op1 , op2 ) Description: Gets 2D dot product of two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description number 2D dot product C signature: orxFLOAT orxVector_2DDot ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) add # Signature: r1 = add ( op1 , op2 ) Description: Adds vectors and stores result in a third one Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector (Op1 + Op2) C signature: orxVECTOR * orxVector_Add ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) areEqual # Signature: r1 = areEqual ( op1 , op2 ) Description: Are vectors equal? Params: name type description op1 orxVECTOR# First vector to compare op2 orxVECTOR# Second vector to compare Returns: type description boolean true if both vectors are equal, false otherwise C signature: orxBOOL orxVector_AreEqual ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) cross # Signature: r1 = cross ( op1 , op2 ) Description: Gets cross product of two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Cross product orxVECTOR / nil C signature: orxVECTOR * orxVector_Cross ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) div # Signature: r1 = div ( op1 , op2 ) Description: Divides a vector by another vector and stores result in a third one Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector (Op1 / Op2) C signature: orxVECTOR * orxVector_Div ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) divf # Signature: r1 = divf ( op1 , op2 ) Description: Divides a vector by an orxFLOAT and stores result in another one Params: name type description op1 orxVECTOR# First operand op2 number Second operand Returns: type description orxVECTOR Resulting vector C signature: orxVECTOR * orxVector_Divf ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , orxFLOAT _fOp2 ) dot # Signature: r1 = dot ( op1 , op2 ) Description: Gets dot product of two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description number Dot product C signature: orxFLOAT orxVector_Dot ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) getDistance # Signature: r1 = getDistance ( op1 , op2 ) Description: Gets distance between 2 positions Params: name type description op1 orxVECTOR# First position op2 orxVECTOR# Second position Returns: type description number Distance C signature: orxFLOAT orxVector_GetDistance ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) getSquareDistance # Signature: r1 = getSquareDistance ( op1 , op2 ) Description: Gets squared distance between 2 positions Params: name type description op1 orxVECTOR# First position op2 orxVECTOR# Second position Returns: type description number Squared distance C signature: orxFLOAT orxVector_GetSquareDistance ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) lerp # Signature: r1 = lerp ( op1 , op2 , op ) Description: Lerps from one vector to another one using a coefficient Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand op number Lerp coefficient parameter Returns: type description orxVECTOR Resulting vector C signature: orxVECTOR * orxVector_Lerp ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 , orxFLOAT _fOp ) max # Signature: r1 = max ( op1 , op2 ) Description: Gets maximum between two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector MAX(Op1, Op2) C signature: orxVECTOR * orxVector_Max ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) min # Signature: r1 = min ( op1 , op2 ) Description: Gets minimum between two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector MIN(Op1, Op2) C signature: orxVECTOR * orxVector_Min ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) mul # Signature: r1 = mul ( op1 , op2 ) Description: Multiplies a vector by another vector and stores result in a third one Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector (Op1 * Op2) C signature: orxVECTOR * orxVector_Mul ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) mulf # Signature: r1 = mulf ( op1 , op2 ) Description: Multiplies a vector by an orxFLOAT and stores result in another one Params: name type description op1 orxVECTOR# First operand op2 number Second operand Returns: type description orxVECTOR Resulting vector C signature: orxVECTOR * orxVector_Mulf ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , orxFLOAT _fOp2 ) sub # Signature: r1 = sub ( op1 , op2 ) Description: Substracts vectors and stores result in a third one Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector (Op1 - Op2) C signature: orxVECTOR * orxVector_Sub ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 ) vector # Signature: r1 = vector ( fX , fY , fZ ) Description: Create a new orxVECTOR Params: name type description fX number fY number fZ number Returns: type description orxVECTOR The new instance","title":"vector"},{"location":"modules/vector.html#module-vector","text":"","title":"module vector"},{"location":"modules/vector.html#functions","text":"","title":"functions"},{"location":"modules/vector.html#_2ddot","text":"Signature: r1 = _2DDot ( op1 , op2 ) Description: Gets 2D dot product of two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description number 2D dot product C signature: orxFLOAT orxVector_2DDot ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"_2DDot"},{"location":"modules/vector.html#add","text":"Signature: r1 = add ( op1 , op2 ) Description: Adds vectors and stores result in a third one Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector (Op1 + Op2) C signature: orxVECTOR * orxVector_Add ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"add"},{"location":"modules/vector.html#areequal","text":"Signature: r1 = areEqual ( op1 , op2 ) Description: Are vectors equal? Params: name type description op1 orxVECTOR# First vector to compare op2 orxVECTOR# Second vector to compare Returns: type description boolean true if both vectors are equal, false otherwise C signature: orxBOOL orxVector_AreEqual ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"areEqual"},{"location":"modules/vector.html#cross","text":"Signature: r1 = cross ( op1 , op2 ) Description: Gets cross product of two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Cross product orxVECTOR / nil C signature: orxVECTOR * orxVector_Cross ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"cross"},{"location":"modules/vector.html#div","text":"Signature: r1 = div ( op1 , op2 ) Description: Divides a vector by another vector and stores result in a third one Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector (Op1 / Op2) C signature: orxVECTOR * orxVector_Div ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"div"},{"location":"modules/vector.html#divf","text":"Signature: r1 = divf ( op1 , op2 ) Description: Divides a vector by an orxFLOAT and stores result in another one Params: name type description op1 orxVECTOR# First operand op2 number Second operand Returns: type description orxVECTOR Resulting vector C signature: orxVECTOR * orxVector_Divf ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , orxFLOAT _fOp2 )","title":"divf"},{"location":"modules/vector.html#dot","text":"Signature: r1 = dot ( op1 , op2 ) Description: Gets dot product of two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description number Dot product C signature: orxFLOAT orxVector_Dot ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"dot"},{"location":"modules/vector.html#getdistance","text":"Signature: r1 = getDistance ( op1 , op2 ) Description: Gets distance between 2 positions Params: name type description op1 orxVECTOR# First position op2 orxVECTOR# Second position Returns: type description number Distance C signature: orxFLOAT orxVector_GetDistance ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"getDistance"},{"location":"modules/vector.html#getsquaredistance","text":"Signature: r1 = getSquareDistance ( op1 , op2 ) Description: Gets squared distance between 2 positions Params: name type description op1 orxVECTOR# First position op2 orxVECTOR# Second position Returns: type description number Squared distance C signature: orxFLOAT orxVector_GetSquareDistance ( const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"getSquareDistance"},{"location":"modules/vector.html#lerp","text":"Signature: r1 = lerp ( op1 , op2 , op ) Description: Lerps from one vector to another one using a coefficient Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand op number Lerp coefficient parameter Returns: type description orxVECTOR Resulting vector C signature: orxVECTOR * orxVector_Lerp ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 , orxFLOAT _fOp )","title":"lerp"},{"location":"modules/vector.html#max","text":"Signature: r1 = max ( op1 , op2 ) Description: Gets maximum between two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector MAX(Op1, Op2) C signature: orxVECTOR * orxVector_Max ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"max"},{"location":"modules/vector.html#min","text":"Signature: r1 = min ( op1 , op2 ) Description: Gets minimum between two vectors Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector MIN(Op1, Op2) C signature: orxVECTOR * orxVector_Min ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"min"},{"location":"modules/vector.html#mul","text":"Signature: r1 = mul ( op1 , op2 ) Description: Multiplies a vector by another vector and stores result in a third one Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector (Op1 * Op2) C signature: orxVECTOR * orxVector_Mul ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"mul"},{"location":"modules/vector.html#mulf","text":"Signature: r1 = mulf ( op1 , op2 ) Description: Multiplies a vector by an orxFLOAT and stores result in another one Params: name type description op1 orxVECTOR# First operand op2 number Second operand Returns: type description orxVECTOR Resulting vector C signature: orxVECTOR * orxVector_Mulf ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , orxFLOAT _fOp2 )","title":"mulf"},{"location":"modules/vector.html#sub","text":"Signature: r1 = sub ( op1 , op2 ) Description: Substracts vectors and stores result in a third one Params: name type description op1 orxVECTOR# First operand op2 orxVECTOR# Second operand Returns: type description orxVECTOR Resulting vector (Op1 - Op2) C signature: orxVECTOR * orxVector_Sub ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp1 , const orxVECTOR * _pvOp2 )","title":"sub"},{"location":"modules/vector.html#vector","text":"Signature: r1 = vector ( fX , fY , fZ ) Description: Create a new orxVECTOR Params: name type description fX number fY number fZ number Returns: type description orxVECTOR The new instance","title":"vector"},{"location":"modules/viewport.html","text":"module viewport # functions # create # Signature: r1 = create () Description: Creates a viewport Params: Returns: type description orxVIEWPORT Created orxVIEWPORT / nil C signature: orxVIEWPORT * orxViewport_Create () createFromConfig # Signature: r1 = createFromConfig ( configid ) Description: Creates a viewport from config Params: name type description configid string Config ID Returns: type description orxVIEWPORT orxVIEWPORT / nil C signature: orxVIEWPORT * orxViewport_CreateFromConfig ( const orxSTRING _zConfigID ) exit # Signature: exit () Description: Exits from the viewport module Params: Returns: C signature: void orxViewport_Exit () get # Signature: r1 = get ( name ) Description: Gets viewport given its name Params: name type description name string Camera name Returns: type description orxVIEWPORT orxVIEWPORT / nil C signature: orxVIEWPORT * orxViewport_Get ( const orxSTRING _zName ) init # Signature: r1 = init () Description: Inits the viewport module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxViewport_Init () setup # Signature: setup () Description: Viewport module setup Params: Returns: C signature: void orxViewport_Setup ()","title":"viewport"},{"location":"modules/viewport.html#module-viewport","text":"","title":"module viewport"},{"location":"modules/viewport.html#functions","text":"","title":"functions"},{"location":"modules/viewport.html#create","text":"Signature: r1 = create () Description: Creates a viewport Params: Returns: type description orxVIEWPORT Created orxVIEWPORT / nil C signature: orxVIEWPORT * orxViewport_Create ()","title":"create"},{"location":"modules/viewport.html#createfromconfig","text":"Signature: r1 = createFromConfig ( configid ) Description: Creates a viewport from config Params: name type description configid string Config ID Returns: type description orxVIEWPORT orxVIEWPORT / nil C signature: orxVIEWPORT * orxViewport_CreateFromConfig ( const orxSTRING _zConfigID )","title":"createFromConfig"},{"location":"modules/viewport.html#exit","text":"Signature: exit () Description: Exits from the viewport module Params: Returns: C signature: void orxViewport_Exit ()","title":"exit"},{"location":"modules/viewport.html#get","text":"Signature: r1 = get ( name ) Description: Gets viewport given its name Params: name type description name string Camera name Returns: type description orxVIEWPORT orxVIEWPORT / nil C signature: orxVIEWPORT * orxViewport_Get ( const orxSTRING _zName )","title":"get"},{"location":"modules/viewport.html#init","text":"Signature: r1 = init () Description: Inits the viewport module Params: Returns: type description orxSTATUS C signature: orxSTATUS orxViewport_Init ()","title":"init"},{"location":"modules/viewport.html#setup","text":"Signature: setup () Description: Viewport module setup Params: Returns: C signature: void orxViewport_Setup ()","title":"setup"},{"location":"types/orxAABOX.html","text":"type orxAABOX # constructors: lorx.aabox.aabox Properties # name type tl orxVECTOR br orxVECTOR Methods # orxAABOX:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxAABOX:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxAABOX:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxAABOX:copy # Signature: r1 = copy () Description: Copies an AABox onto another one Params: Returns: type description orxAABOX Destination AABox C signature: orxAABOX * orxAABox_Copy ( orxAABOX * _pstDst , const orxAABOX * _pstSrc ) orxAABOX:getCenter # Signature: r1 = getCenter () Description: Gets AABox center position Params: Returns: type description orxVECTOR Center position vector C signature: orxVECTOR * orxAABox_GetCenter ( const orxAABOX * _pstOp , orxVECTOR * _pvRes ) orxAABOX:isInside # Signature: r1 = isInside ( position ) Description: Is position inside axis aligned box test Params: name type description position orxVECTOR# Position to test against the box Returns: type description boolean true if position is inside the box, false otherwise C signature: orxBOOL orxAABox_IsInside ( const orxAABOX * _pstBox , const orxVECTOR * _pvPosition ) orxAABOX:move # Signature: r1 = move ( move ) Description: Moves an AABox Params: name type description move orxVECTOR# Move vector Returns: type description orxAABOX Moved AABox C signature: orxAABOX * orxAABox_Move ( orxAABOX * _pstRes , const orxAABOX * _pstOp , const orxVECTOR * _pvMove ) orxAABOX:reorder # Signature: r1 = reorder () Description: Reorders AABox corners (non-const self only) Params: Returns: type description orxAABOX Reordered AABox C signature: orxAABOX * orxAABox_Reorder ( orxAABOX * _pstBox ) orxAABOX:set # Signature: r1 = set ( tl , br ) Description: Sets axis aligned box values (non-const self only) Params: name type description tl orxVECTOR# Top left corner br orxVECTOR# Bottom right corner Returns: type description orxAABOX orxAABOX / nil C signature: orxAABOX * orxAABox_Set ( orxAABOX * _pstRes , const orxVECTOR * _pvTL , const orxVECTOR * _pvBR ) orxAABOX:test2DIntersection # Signature: r1 = test2DIntersection ( box2 ) Description: Tests axis aligned box 2D intersection (no Z-axis test) Params: name type description box2 orxAABOX# Second box operand Returns: type description boolean true if boxes intersect in 2D, false otherwise C signature: orxBOOL orxAABox_Test2DIntersection ( const orxAABOX * _pstBox1 , const orxAABOX * _pstBox2 ) orxAABOX:testIntersection # Signature: r1 = testIntersection ( box2 ) Description: Tests axis aligned box intersection Params: name type description box2 orxAABOX# Second box operand Returns: type description boolean true if boxes intersect, false otherwise C signature: orxBOOL orxAABox_TestIntersection ( const orxAABOX * _pstBox1 , const orxAABOX * _pstBox2 ) orxAABOX:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxAABOX"},{"location":"types/orxAABOX.html#type-orxaabox","text":"constructors: lorx.aabox.aabox","title":"type orxAABOX"},{"location":"types/orxAABOX.html#properties","text":"name type tl orxVECTOR br orxVECTOR","title":"Properties"},{"location":"types/orxAABOX.html#methods","text":"","title":"Methods"},{"location":"types/orxAABOX.html#orxaaboxaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxAABOX:addr"},{"location":"types/orxAABOX.html#orxaaboxaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxAABOX:aeq"},{"location":"types/orxAABOX.html#orxaaboxasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxAABOX:asVoid"},{"location":"types/orxAABOX.html#orxaaboxcopy","text":"Signature: r1 = copy () Description: Copies an AABox onto another one Params: Returns: type description orxAABOX Destination AABox C signature: orxAABOX * orxAABox_Copy ( orxAABOX * _pstDst , const orxAABOX * _pstSrc )","title":"orxAABOX:copy"},{"location":"types/orxAABOX.html#orxaaboxgetcenter","text":"Signature: r1 = getCenter () Description: Gets AABox center position Params: Returns: type description orxVECTOR Center position vector C signature: orxVECTOR * orxAABox_GetCenter ( const orxAABOX * _pstOp , orxVECTOR * _pvRes )","title":"orxAABOX:getCenter"},{"location":"types/orxAABOX.html#orxaaboxisinside","text":"Signature: r1 = isInside ( position ) Description: Is position inside axis aligned box test Params: name type description position orxVECTOR# Position to test against the box Returns: type description boolean true if position is inside the box, false otherwise C signature: orxBOOL orxAABox_IsInside ( const orxAABOX * _pstBox , const orxVECTOR * _pvPosition )","title":"orxAABOX:isInside"},{"location":"types/orxAABOX.html#orxaaboxmove","text":"Signature: r1 = move ( move ) Description: Moves an AABox Params: name type description move orxVECTOR# Move vector Returns: type description orxAABOX Moved AABox C signature: orxAABOX * orxAABox_Move ( orxAABOX * _pstRes , const orxAABOX * _pstOp , const orxVECTOR * _pvMove )","title":"orxAABOX:move"},{"location":"types/orxAABOX.html#orxaaboxreorder","text":"Signature: r1 = reorder () Description: Reorders AABox corners (non-const self only) Params: Returns: type description orxAABOX Reordered AABox C signature: orxAABOX * orxAABox_Reorder ( orxAABOX * _pstBox )","title":"orxAABOX:reorder"},{"location":"types/orxAABOX.html#orxaaboxset","text":"Signature: r1 = set ( tl , br ) Description: Sets axis aligned box values (non-const self only) Params: name type description tl orxVECTOR# Top left corner br orxVECTOR# Bottom right corner Returns: type description orxAABOX orxAABOX / nil C signature: orxAABOX * orxAABox_Set ( orxAABOX * _pstRes , const orxVECTOR * _pvTL , const orxVECTOR * _pvBR )","title":"orxAABOX:set"},{"location":"types/orxAABOX.html#orxaaboxtest2dintersection","text":"Signature: r1 = test2DIntersection ( box2 ) Description: Tests axis aligned box 2D intersection (no Z-axis test) Params: name type description box2 orxAABOX# Second box operand Returns: type description boolean true if boxes intersect in 2D, false otherwise C signature: orxBOOL orxAABox_Test2DIntersection ( const orxAABOX * _pstBox1 , const orxAABOX * _pstBox2 )","title":"orxAABOX:test2DIntersection"},{"location":"types/orxAABOX.html#orxaaboxtestintersection","text":"Signature: r1 = testIntersection ( box2 ) Description: Tests axis aligned box intersection Params: name type description box2 orxAABOX# Second box operand Returns: type description boolean true if boxes intersect, false otherwise C signature: orxBOOL orxAABox_TestIntersection ( const orxAABOX * _pstBox1 , const orxAABOX * _pstBox2 )","title":"orxAABOX:testIntersection"},{"location":"types/orxAABOX.html#orxaaboxtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxAABOX:type"},{"location":"types/orxANIM.html","text":"type orxANIM # Methods # orxANIM:addEvent # Signature: r1 = addEvent ( eventname , timestamp , value ) Description: Adds an event to an animation (non-const self only) Params: name type description eventname string Event name to add timestamp number Timestamp for this event value number Value for this event Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_AddEvent ( orxANIM * _pstAnim , const orxSTRING _zEventName , orxFLOAT _fTimeStamp , orxFLOAT _fValue ) orxANIM:addKey # Signature: r1 = addKey ( data , timestamp ) Description: Adds a key to an animation (non-const self only) Params: name type description data orxSTRUCTURE Key data to add timestamp number Timestamp for this key Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_AddKey ( orxANIM * _pstAnim , orxSTRUCTURE * _pstData , orxFLOAT _fTimeStamp ) orxANIM:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxANIM:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxANIM:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxANIM:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxANIM:delete # Signature: r1 = delete () Description: Deletes an animation (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_Delete ( orxANIM * _pstAnim ) orxANIM:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxANIM:getEventAfter # Signature: r1 = getEventAfter ( timestamp ) Description: Gets event strictly after given timestamp Params: name type description timestamp number Time stamp, excluded Returns: type description orxANIM_CUSTOM_EVENT# success / failure C signature: const orxANIM_CUSTOM_EVENT * orxAnim_GetEventAfter ( const orxANIM * _pstAnim , orxFLOAT _fTimeStamp ) orxANIM:getEventCount # Signature: r1 = getEventCount () Description: Anim event count accessor Params: Returns: type description integer Anim event count C signature: orxU32 orxAnim_GetEventCount ( const orxANIM * _pstAnim ) orxANIM:getEventStorageSize # Signature: r1 = getEventStorageSize () Description: Anim event storage size accessor Params: Returns: type description integer Anim event storage size C signature: orxU32 orxAnim_GetEventStorageSize ( const orxANIM * _pstAnim ) orxANIM:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxANIM:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxANIM:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxANIM:getKey # Signature: r1 = getKey ( timestamp ) Description: Gets animation's key index from a time stamp Params: name type description timestamp number TimeStamp of the desired animation key Returns: type description integer Animation key index / orxU32_UNDEFINED C signature: orxU32 orxAnim_GetKey ( const orxANIM * _pstAnim , orxFLOAT _fTimeStamp ) orxANIM:getKeyCount # Signature: r1 = getKeyCount () Description: Anim key count accessor Params: Returns: type description integer Anim key count C signature: orxU32 orxAnim_GetKeyCount ( const orxANIM * _pstAnim ) orxANIM:getKeyData # Signature: r1 = getKeyData ( index ) Description: Anim key data accessor Params: name type description index integer Index of desired key data Returns: type description orxSTRUCTURE Desired orxSTRUCTURE / nil C signature: orxSTRUCTURE * orxAnim_GetKeyData ( const orxANIM * _pstAnim , orxU32 _u32Index ) orxANIM:getKeyStorageSize # Signature: r1 = getKeyStorageSize () Description: Anim key storage size accessor Params: Returns: type description integer Anim key storage size C signature: orxU32 orxAnim_GetKeyStorageSize ( const orxANIM * _pstAnim ) orxANIM:getLength # Signature: r1 = getLength () Description: Anim time length accessor Params: Returns: type description number Anim time length C signature: orxFLOAT orxAnim_GetLength ( const orxANIM * _pstAnim ) orxANIM:getName # Signature: r1 = getName () Description: Anim name get accessor Params: Returns: type description string string / empty string C signature: const orxSTRING orxAnim_GetName ( const orxANIM * _pstAnim ) orxANIM:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxANIM:getNextEvent # Signature: r1 = getNextEvent ( event ) Description: Gets next event Params: name type description event orxANIM_CUSTOM_EVENT# Event, nil for first Returns: type description orxANIM_CUSTOM_EVENT# success / failure C signature: const orxANIM_CUSTOM_EVENT * orxAnim_GetNextEvent ( const orxANIM * _pstAnim , const orxANIM_CUSTOM_EVENT * _pstEvent ) orxANIM:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxANIM:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxANIM:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxANIM:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxANIM:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxANIM:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxANIM:removeAllEvents # Signature: removeAllEvents () Description: Removes all events from an animation (non-const self only) Params: Returns: C signature: void orxAnim_RemoveAllEvents ( orxANIM * _pstAnim ) orxANIM:removeAllKeys # Signature: removeAllKeys () Description: Removes all keys from an animation (non-const self only) Params: Returns: C signature: void orxAnim_RemoveAllKeys ( orxANIM * _pstAnim ) orxANIM:removeLastEvent # Signature: r1 = removeLastEvent () Description: Removes last added event from an animation (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_RemoveLastEvent ( orxANIM * _pstAnim ) orxANIM:removeLastKey # Signature: r1 = removeLastKey () Description: Removes last added key from an animation (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_RemoveLastKey ( orxANIM * _pstAnim ) orxANIM:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxANIM:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxANIM:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxANIM:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxANIM:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxANIM:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxANIM:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxANIM"},{"location":"types/orxANIM.html#type-orxanim","text":"","title":"type orxANIM"},{"location":"types/orxANIM.html#methods","text":"","title":"Methods"},{"location":"types/orxANIM.html#orxanimaddevent","text":"Signature: r1 = addEvent ( eventname , timestamp , value ) Description: Adds an event to an animation (non-const self only) Params: name type description eventname string Event name to add timestamp number Timestamp for this event value number Value for this event Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_AddEvent ( orxANIM * _pstAnim , const orxSTRING _zEventName , orxFLOAT _fTimeStamp , orxFLOAT _fValue )","title":"orxANIM:addEvent"},{"location":"types/orxANIM.html#orxanimaddkey","text":"Signature: r1 = addKey ( data , timestamp ) Description: Adds a key to an animation (non-const self only) Params: name type description data orxSTRUCTURE Key data to add timestamp number Timestamp for this key Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_AddKey ( orxANIM * _pstAnim , orxSTRUCTURE * _pstData , orxFLOAT _fTimeStamp )","title":"orxANIM:addKey"},{"location":"types/orxANIM.html#orxanimaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxANIM:addr"},{"location":"types/orxANIM.html#orxanimaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxANIM:aeq"},{"location":"types/orxANIM.html#orxanimasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxANIM:asVoid"},{"location":"types/orxANIM.html#orxanimdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxANIM:decreaseCount"},{"location":"types/orxANIM.html#orxanimdelete","text":"Signature: r1 = delete () Description: Deletes an animation (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_Delete ( orxANIM * _pstAnim )","title":"orxANIM:delete"},{"location":"types/orxANIM.html#orxanimgetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxANIM:getChild"},{"location":"types/orxANIM.html#orxanimgeteventafter","text":"Signature: r1 = getEventAfter ( timestamp ) Description: Gets event strictly after given timestamp Params: name type description timestamp number Time stamp, excluded Returns: type description orxANIM_CUSTOM_EVENT# success / failure C signature: const orxANIM_CUSTOM_EVENT * orxAnim_GetEventAfter ( const orxANIM * _pstAnim , orxFLOAT _fTimeStamp )","title":"orxANIM:getEventAfter"},{"location":"types/orxANIM.html#orxanimgeteventcount","text":"Signature: r1 = getEventCount () Description: Anim event count accessor Params: Returns: type description integer Anim event count C signature: orxU32 orxAnim_GetEventCount ( const orxANIM * _pstAnim )","title":"orxANIM:getEventCount"},{"location":"types/orxANIM.html#orxanimgeteventstoragesize","text":"Signature: r1 = getEventStorageSize () Description: Anim event storage size accessor Params: Returns: type description integer Anim event storage size C signature: orxU32 orxAnim_GetEventStorageSize ( const orxANIM * _pstAnim )","title":"orxANIM:getEventStorageSize"},{"location":"types/orxANIM.html#orxanimgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxANIM:getFlags"},{"location":"types/orxANIM.html#orxanimgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxANIM:getGUID"},{"location":"types/orxANIM.html#orxanimgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxANIM:getID"},{"location":"types/orxANIM.html#orxanimgetkey","text":"Signature: r1 = getKey ( timestamp ) Description: Gets animation's key index from a time stamp Params: name type description timestamp number TimeStamp of the desired animation key Returns: type description integer Animation key index / orxU32_UNDEFINED C signature: orxU32 orxAnim_GetKey ( const orxANIM * _pstAnim , orxFLOAT _fTimeStamp )","title":"orxANIM:getKey"},{"location":"types/orxANIM.html#orxanimgetkeycount","text":"Signature: r1 = getKeyCount () Description: Anim key count accessor Params: Returns: type description integer Anim key count C signature: orxU32 orxAnim_GetKeyCount ( const orxANIM * _pstAnim )","title":"orxANIM:getKeyCount"},{"location":"types/orxANIM.html#orxanimgetkeydata","text":"Signature: r1 = getKeyData ( index ) Description: Anim key data accessor Params: name type description index integer Index of desired key data Returns: type description orxSTRUCTURE Desired orxSTRUCTURE / nil C signature: orxSTRUCTURE * orxAnim_GetKeyData ( const orxANIM * _pstAnim , orxU32 _u32Index )","title":"orxANIM:getKeyData"},{"location":"types/orxANIM.html#orxanimgetkeystoragesize","text":"Signature: r1 = getKeyStorageSize () Description: Anim key storage size accessor Params: Returns: type description integer Anim key storage size C signature: orxU32 orxAnim_GetKeyStorageSize ( const orxANIM * _pstAnim )","title":"orxANIM:getKeyStorageSize"},{"location":"types/orxANIM.html#orxanimgetlength","text":"Signature: r1 = getLength () Description: Anim time length accessor Params: Returns: type description number Anim time length C signature: orxFLOAT orxAnim_GetLength ( const orxANIM * _pstAnim )","title":"orxANIM:getLength"},{"location":"types/orxANIM.html#orxanimgetname","text":"Signature: r1 = getName () Description: Anim name get accessor Params: Returns: type description string string / empty string C signature: const orxSTRING orxAnim_GetName ( const orxANIM * _pstAnim )","title":"orxANIM:getName"},{"location":"types/orxANIM.html#orxanimgetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxANIM:getNext"},{"location":"types/orxANIM.html#orxanimgetnextevent","text":"Signature: r1 = getNextEvent ( event ) Description: Gets next event Params: name type description event orxANIM_CUSTOM_EVENT# Event, nil for first Returns: type description orxANIM_CUSTOM_EVENT# success / failure C signature: const orxANIM_CUSTOM_EVENT * orxAnim_GetNextEvent ( const orxANIM * _pstAnim , const orxANIM_CUSTOM_EVENT * _pstEvent )","title":"orxANIM:getNextEvent"},{"location":"types/orxANIM.html#orxanimgetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxANIM:getOwner"},{"location":"types/orxANIM.html#orxanimgetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxANIM:getParent"},{"location":"types/orxANIM.html#orxanimgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxANIM:getPrevious"},{"location":"types/orxANIM.html#orxanimgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxANIM:getRefCount"},{"location":"types/orxANIM.html#orxanimgetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxANIM:getSibling"},{"location":"types/orxANIM.html#orxanimincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxANIM:increaseCount"},{"location":"types/orxANIM.html#orxanimremoveallevents","text":"Signature: removeAllEvents () Description: Removes all events from an animation (non-const self only) Params: Returns: C signature: void orxAnim_RemoveAllEvents ( orxANIM * _pstAnim )","title":"orxANIM:removeAllEvents"},{"location":"types/orxANIM.html#orxanimremoveallkeys","text":"Signature: removeAllKeys () Description: Removes all keys from an animation (non-const self only) Params: Returns: C signature: void orxAnim_RemoveAllKeys ( orxANIM * _pstAnim )","title":"orxANIM:removeAllKeys"},{"location":"types/orxANIM.html#orxanimremovelastevent","text":"Signature: r1 = removeLastEvent () Description: Removes last added event from an animation (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_RemoveLastEvent ( orxANIM * _pstAnim )","title":"orxANIM:removeLastEvent"},{"location":"types/orxANIM.html#orxanimremovelastkey","text":"Signature: r1 = removeLastKey () Description: Removes last added key from an animation (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnim_RemoveLastKey ( orxANIM * _pstAnim )","title":"orxANIM:removeLastKey"},{"location":"types/orxANIM.html#orxanimsetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxANIM:setFlags"},{"location":"types/orxANIM.html#orxanimsetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxANIM:setOwner"},{"location":"types/orxANIM.html#orxanimsetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxANIM:setParent"},{"location":"types/orxANIM.html#orxanimtestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxANIM:testAllFlags"},{"location":"types/orxANIM.html#orxanimtestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxANIM:testFlags"},{"location":"types/orxANIM.html#orxanimtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxANIM:type"},{"location":"types/orxANIM.html#orxanimupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxANIM:update"},{"location":"types/orxANIMPOINTER.html","text":"type orxANIMPOINTER # Methods # orxANIMPOINTER:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxANIMPOINTER:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxANIMPOINTER:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxANIMPOINTER:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxANIMPOINTER:delete # Signature: r1 = delete () Description: Deletes an AnimPointer (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_Delete ( orxANIMPOINTER * _pstAnimPointer ) orxANIMPOINTER:getAnimSet # Signature: r1 = getAnimSet () Description: Gets the referenced AnimSet Params: Returns: type description orxANIMSET Referenced orxANIMSET C signature: orxANIMSET * orxAnimPointer_GetAnimSet ( const orxANIMPOINTER * _pstAnimPointer ) orxANIMPOINTER:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxANIMPOINTER:getCurrentAnim # Signature: r1 = getCurrentAnim () Description: AnimPointer current Animation get accessor Params: Returns: type description integer Current Animation ID C signature: orxU32 orxAnimPointer_GetCurrentAnim ( const orxANIMPOINTER * _pstAnimPointer ) orxANIMPOINTER:getCurrentAnimData # Signature: r1 = getCurrentAnimData () Description: AnimPointer current anim data get accessor Params: Returns: type description orxSTRUCTURE Current anim data / nil C signature: orxSTRUCTURE * orxAnimPointer_GetCurrentAnimData ( const orxANIMPOINTER * _pstAnimPointer ) orxANIMPOINTER:getCurrentAnimName # Signature: r1 = getCurrentAnimName () Description: AnimPointer current Animation name get accessor Params: Returns: type description string Current Animation name / empty string C signature: const orxSTRING orxAnimPointer_GetCurrentAnimName ( const orxANIMPOINTER * _pstAnimPointer ) orxANIMPOINTER:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxANIMPOINTER:getFrequency # Signature: r1 = getFrequency () Description: AnimPointer frequency get accessor Params: Returns: type description number AnimPointer frequency C signature: orxFLOAT orxAnimPointer_GetFrequency ( const orxANIMPOINTER * _pstAnimPointer ) orxANIMPOINTER:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxANIMPOINTER:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxANIMPOINTER:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxANIMPOINTER:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxANIMPOINTER:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxANIMPOINTER:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxANIMPOINTER:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxANIMPOINTER:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxANIMPOINTER:getTargetAnim # Signature: r1 = getTargetAnim () Description: AnimPointer target Animation get accessor Params: Returns: type description integer Target Animation ID C signature: orxU32 orxAnimPointer_GetTargetAnim ( const orxANIMPOINTER * _pstAnimPointer ) orxANIMPOINTER:getTargetAnimName # Signature: r1 = getTargetAnimName () Description: AnimPointer target Animation ID get accessor Params: Returns: type description string Target Animation name / empty string C signature: const orxSTRING orxAnimPointer_GetTargetAnimName ( const orxANIMPOINTER * _pstAnimPointer ) orxANIMPOINTER:getTime # Signature: r1 = getTime () Description: AnimPointer time get accessor Params: Returns: type description number Current time C signature: orxFLOAT orxAnimPointer_GetTime ( const orxANIMPOINTER * _pstAnimPointer ) orxANIMPOINTER:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxANIMPOINTER:pause # Signature: r1 = pause ( pause ) Description: AnimPointer pause accessor (non-const self only) Params: name type description pause boolean Pause / Unpause Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_Pause ( orxANIMPOINTER * _pstAnimPointer , orxBOOL _bPause ) orxANIMPOINTER:setCurrentAnim # Signature: r1 = setCurrentAnim ( animid ) Description: AnimPointer current Animation set accessor (non-const self only) Params: name type description animid integer Animation ID to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetCurrentAnim ( orxANIMPOINTER * _pstAnimPointer , orxU32 _u32AnimID ) orxANIMPOINTER:setCurrentAnimFromName # Signature: r1 = setCurrentAnimFromName ( animname ) Description: AnimPointer current Animation set accessor using name (non-const self only) Params: name type description animname string Animation name (config's name) to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetCurrentAnimFromName ( orxANIMPOINTER * _pstAnimPointer , const orxSTRING _zAnimName ) orxANIMPOINTER:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxANIMPOINTER:setFrequency # Signature: r1 = setFrequency ( frequency ) Description: AnimPointer frequency set accessor (non-const self only) Params: name type description frequency number Frequency to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetFrequency ( orxANIMPOINTER * _pstAnimPointer , orxFLOAT _fFrequency ) orxANIMPOINTER:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxANIMPOINTER:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxANIMPOINTER:setTargetAnim # Signature: r1 = setTargetAnim ( animid ) Description: AnimPointer target Animation set accessor (non-const self only) Params: name type description animid integer Animation ID to set / orxU32_UNDEFINED Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetTargetAnim ( orxANIMPOINTER * _pstAnimPointer , orxU32 _u32AnimID ) orxANIMPOINTER:setTargetAnimFromName # Signature: r1 = setTargetAnimFromName ( animname ) Description: AnimPointer target Animation set accessor using name (non-const self only) Params: name type description animname string Animation name (config's name) to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetTargetAnimFromName ( orxANIMPOINTER * _pstAnimPointer , const orxSTRING _zAnimName ) orxANIMPOINTER:setTime # Signature: r1 = setTime ( time ) Description: AnimPointer current time set accessor (non-const self only) Params: name type description time number Time to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetTime ( orxANIMPOINTER * _pstAnimPointer , orxFLOAT _fTime ) orxANIMPOINTER:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxANIMPOINTER:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxANIMPOINTER:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxANIMPOINTER:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxANIMPOINTER"},{"location":"types/orxANIMPOINTER.html#type-orxanimpointer","text":"","title":"type orxANIMPOINTER"},{"location":"types/orxANIMPOINTER.html#methods","text":"","title":"Methods"},{"location":"types/orxANIMPOINTER.html#orxanimpointeraddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxANIMPOINTER:addr"},{"location":"types/orxANIMPOINTER.html#orxanimpointeraeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxANIMPOINTER:aeq"},{"location":"types/orxANIMPOINTER.html#orxanimpointerasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxANIMPOINTER:asVoid"},{"location":"types/orxANIMPOINTER.html#orxanimpointerdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxANIMPOINTER:decreaseCount"},{"location":"types/orxANIMPOINTER.html#orxanimpointerdelete","text":"Signature: r1 = delete () Description: Deletes an AnimPointer (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_Delete ( orxANIMPOINTER * _pstAnimPointer )","title":"orxANIMPOINTER:delete"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetanimset","text":"Signature: r1 = getAnimSet () Description: Gets the referenced AnimSet Params: Returns: type description orxANIMSET Referenced orxANIMSET C signature: orxANIMSET * orxAnimPointer_GetAnimSet ( const orxANIMPOINTER * _pstAnimPointer )","title":"orxANIMPOINTER:getAnimSet"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxANIMPOINTER:getChild"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetcurrentanim","text":"Signature: r1 = getCurrentAnim () Description: AnimPointer current Animation get accessor Params: Returns: type description integer Current Animation ID C signature: orxU32 orxAnimPointer_GetCurrentAnim ( const orxANIMPOINTER * _pstAnimPointer )","title":"orxANIMPOINTER:getCurrentAnim"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetcurrentanimdata","text":"Signature: r1 = getCurrentAnimData () Description: AnimPointer current anim data get accessor Params: Returns: type description orxSTRUCTURE Current anim data / nil C signature: orxSTRUCTURE * orxAnimPointer_GetCurrentAnimData ( const orxANIMPOINTER * _pstAnimPointer )","title":"orxANIMPOINTER:getCurrentAnimData"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetcurrentanimname","text":"Signature: r1 = getCurrentAnimName () Description: AnimPointer current Animation name get accessor Params: Returns: type description string Current Animation name / empty string C signature: const orxSTRING orxAnimPointer_GetCurrentAnimName ( const orxANIMPOINTER * _pstAnimPointer )","title":"orxANIMPOINTER:getCurrentAnimName"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxANIMPOINTER:getFlags"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetfrequency","text":"Signature: r1 = getFrequency () Description: AnimPointer frequency get accessor Params: Returns: type description number AnimPointer frequency C signature: orxFLOAT orxAnimPointer_GetFrequency ( const orxANIMPOINTER * _pstAnimPointer )","title":"orxANIMPOINTER:getFrequency"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxANIMPOINTER:getGUID"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxANIMPOINTER:getID"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxANIMPOINTER:getNext"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxANIMPOINTER:getOwner"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxANIMPOINTER:getParent"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxANIMPOINTER:getPrevious"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxANIMPOINTER:getRefCount"},{"location":"types/orxANIMPOINTER.html#orxanimpointergetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxANIMPOINTER:getSibling"},{"location":"types/orxANIMPOINTER.html#orxanimpointergettargetanim","text":"Signature: r1 = getTargetAnim () Description: AnimPointer target Animation get accessor Params: Returns: type description integer Target Animation ID C signature: orxU32 orxAnimPointer_GetTargetAnim ( const orxANIMPOINTER * _pstAnimPointer )","title":"orxANIMPOINTER:getTargetAnim"},{"location":"types/orxANIMPOINTER.html#orxanimpointergettargetanimname","text":"Signature: r1 = getTargetAnimName () Description: AnimPointer target Animation ID get accessor Params: Returns: type description string Target Animation name / empty string C signature: const orxSTRING orxAnimPointer_GetTargetAnimName ( const orxANIMPOINTER * _pstAnimPointer )","title":"orxANIMPOINTER:getTargetAnimName"},{"location":"types/orxANIMPOINTER.html#orxanimpointergettime","text":"Signature: r1 = getTime () Description: AnimPointer time get accessor Params: Returns: type description number Current time C signature: orxFLOAT orxAnimPointer_GetTime ( const orxANIMPOINTER * _pstAnimPointer )","title":"orxANIMPOINTER:getTime"},{"location":"types/orxANIMPOINTER.html#orxanimpointerincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxANIMPOINTER:increaseCount"},{"location":"types/orxANIMPOINTER.html#orxanimpointerpause","text":"Signature: r1 = pause ( pause ) Description: AnimPointer pause accessor (non-const self only) Params: name type description pause boolean Pause / Unpause Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_Pause ( orxANIMPOINTER * _pstAnimPointer , orxBOOL _bPause )","title":"orxANIMPOINTER:pause"},{"location":"types/orxANIMPOINTER.html#orxanimpointersetcurrentanim","text":"Signature: r1 = setCurrentAnim ( animid ) Description: AnimPointer current Animation set accessor (non-const self only) Params: name type description animid integer Animation ID to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetCurrentAnim ( orxANIMPOINTER * _pstAnimPointer , orxU32 _u32AnimID )","title":"orxANIMPOINTER:setCurrentAnim"},{"location":"types/orxANIMPOINTER.html#orxanimpointersetcurrentanimfromname","text":"Signature: r1 = setCurrentAnimFromName ( animname ) Description: AnimPointer current Animation set accessor using name (non-const self only) Params: name type description animname string Animation name (config's name) to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetCurrentAnimFromName ( orxANIMPOINTER * _pstAnimPointer , const orxSTRING _zAnimName )","title":"orxANIMPOINTER:setCurrentAnimFromName"},{"location":"types/orxANIMPOINTER.html#orxanimpointersetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxANIMPOINTER:setFlags"},{"location":"types/orxANIMPOINTER.html#orxanimpointersetfrequency","text":"Signature: r1 = setFrequency ( frequency ) Description: AnimPointer frequency set accessor (non-const self only) Params: name type description frequency number Frequency to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetFrequency ( orxANIMPOINTER * _pstAnimPointer , orxFLOAT _fFrequency )","title":"orxANIMPOINTER:setFrequency"},{"location":"types/orxANIMPOINTER.html#orxanimpointersetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxANIMPOINTER:setOwner"},{"location":"types/orxANIMPOINTER.html#orxanimpointersetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxANIMPOINTER:setParent"},{"location":"types/orxANIMPOINTER.html#orxanimpointersettargetanim","text":"Signature: r1 = setTargetAnim ( animid ) Description: AnimPointer target Animation set accessor (non-const self only) Params: name type description animid integer Animation ID to set / orxU32_UNDEFINED Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetTargetAnim ( orxANIMPOINTER * _pstAnimPointer , orxU32 _u32AnimID )","title":"orxANIMPOINTER:setTargetAnim"},{"location":"types/orxANIMPOINTER.html#orxanimpointersettargetanimfromname","text":"Signature: r1 = setTargetAnimFromName ( animname ) Description: AnimPointer target Animation set accessor using name (non-const self only) Params: name type description animname string Animation name (config's name) to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetTargetAnimFromName ( orxANIMPOINTER * _pstAnimPointer , const orxSTRING _zAnimName )","title":"orxANIMPOINTER:setTargetAnimFromName"},{"location":"types/orxANIMPOINTER.html#orxanimpointersettime","text":"Signature: r1 = setTime ( time ) Description: AnimPointer current time set accessor (non-const self only) Params: name type description time number Time to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimPointer_SetTime ( orxANIMPOINTER * _pstAnimPointer , orxFLOAT _fTime )","title":"orxANIMPOINTER:setTime"},{"location":"types/orxANIMPOINTER.html#orxanimpointertestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxANIMPOINTER:testAllFlags"},{"location":"types/orxANIMPOINTER.html#orxanimpointertestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxANIMPOINTER:testFlags"},{"location":"types/orxANIMPOINTER.html#orxanimpointertype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxANIMPOINTER:type"},{"location":"types/orxANIMPOINTER.html#orxanimpointerupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxANIMPOINTER:update"},{"location":"types/orxANIMSET.html","text":"type orxANIMSET # Methods # orxANIMSET:addAnim # Signature: r1 = addAnim ( anim ) Description: Adds an Anim to an AnimSet (non-const self only) Params: name type description anim orxANIM Anim to add Returns: type description integer Anim ID in the specified AnimSet C signature: orxU32 orxAnimSet_AddAnim ( orxANIMSET * _pstAnimSet , orxANIM * _pstAnim ) orxANIMSET:addLink # Signature: r1 = addLink ( srcanim , dstanim ) Description: Adds a link between two Anims of the AnimSet (non-const self only) Params: name type description srcanim integer Source Anim of the link dstanim integer Destination Anim of the link Returns: type description integer ID of the created link / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_AddLink ( orxANIMSET * _pstAnimSet , orxU32 _u32SrcAnim , orxU32 _u32DstAnim ) orxANIMSET:addReference # Signature: addReference () Description: Adds a reference to an AnimSet (non-const self only) Params: Returns: C signature: void orxAnimSet_AddReference ( orxANIMSET * _pstAnimSet ) orxANIMSET:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxANIMSET:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxANIMSET:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxANIMSET:cloneLinkTable # Signature: r1 = cloneLinkTable () Description: Clones an AnimSet Link Table Params: Returns: type description orxANIMSET_LINK_TABLE An internally allocated clone of the AnimSet C signature: orxANIMSET_LINK_TABLE * orxAnimSet_CloneLinkTable ( const orxANIMSET * _pstAnimSet ) orxANIMSET:computeAnim # Signature: r1 , r2 , r3 , r4 = computeAnim ( srcanim , dstanim , linktable ) Description: Computes active Anim given current and destination Anim IDs & a relative timestamp (non-const self only) Params: name type description srcanim integer Source (current) Anim ID dstanim integer Destination Anim ID, if none (auto mode) set it to orxU32_UNDEFINED linktable [in,out] orxANIMSET_LINK_TABLE Anim Pointer link table (updated if AnimSet link table isn't static, when using loop counts for example) Returns: type description integer Current Anim ID. If it's not the source one, _pu32Time will contain the new timestamp, relative to the new Anim number Pointer to the current timestamp relative to the source Anim (time elapsed since the beginning of this anim) boolean Animation has been cut boolean Animation has requested a target clearing C signature: orxU32 orxAnimSet_ComputeAnim ( orxANIMSET * _pstAnimSet , orxU32 _u32SrcAnim , orxU32 _u32DstAnim , orxFLOAT * _pfTime , orxANIMSET_LINK_TABLE * _pstLinkTable , orxBOOL * _pbCut , orxBOOL * _pbClearTarget ) orxANIMSET:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxANIMSET:delete # Signature: r1 = delete () Description: Deletes an AnimSet (non-const self only) Params: Returns: type description orxSTATUS C signature: orxSTATUS orxAnimSet_Delete ( orxANIMSET * _pstAnimSet ) orxANIMSET:findNextAnim # Signature: r1 = findNextAnim ( srcanim , dstanim ) Description: Finds next Anim given current and destination Anim IDs (non-const self only) Params: name type description srcanim integer Source (current) Anim ID dstanim integer Destination Anim ID, if none (auto mode) set it to orxU32_UNDEFINED Returns: type description integer Next Anim ID if found, orxU32_UNDEFINED otherwise C signature: orxU32 orxAnimSet_FindNextAnim ( orxANIMSET * _pstAnimSet , orxU32 _u32SrcAnim , orxU32 _u32DstAnim ) orxANIMSET:getAnim # Signature: r1 = getAnim ( animid ) Description: AnimSet Anim get accessor Params: name type description animid integer Anim ID Returns: type description orxANIM Anim pointer / nil C signature: orxANIM * orxAnimSet_GetAnim ( const orxANIMSET * _pstAnimSet , orxU32 _u32AnimID ) orxANIMSET:getAnimCount # Signature: r1 = getAnimCount () Description: AnimSet Anim count get accessor Params: Returns: type description integer Anim count / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_GetAnimCount ( const orxANIMSET * _pstAnimSet ) orxANIMSET:getAnimIDFromName # Signature: r1 = getAnimIDFromName ( animname ) Description: Gets animation ID from name Params: name type description animname string Animation name (config's section) Returns: type description integer Anim ID / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_GetAnimIDFromName ( const orxANIMSET * _pstAnimSet , const orxSTRING _zAnimName ) orxANIMSET:getAnimStorageSize # Signature: r1 = getAnimStorageSize () Description: AnimSet Anim storage size get accessor Params: Returns: type description integer AnimSet Storage size / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_GetAnimStorageSize ( const orxANIMSET * _pstAnimSet ) orxANIMSET:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxANIMSET:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxANIMSET:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxANIMSET:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxANIMSET:getLink # Signature: r1 = getLink ( srcanim , dstanim ) Description: Gets a direct link between two Anims, if exists Params: name type description srcanim integer ID of the source Anim dstanim integer ID of the destination Anim Returns: type description integer ID of the direct link, orxU32_UNDEFINED if none C signature: orxU32 orxAnimSet_GetLink ( const orxANIMSET * _pstAnimSet , orxU32 _u32SrcAnim , orxU32 _u32DstAnim ) orxANIMSET:getLinkProperty # Signature: r1 = getLinkProperty ( linkid , property ) Description: Gets a link property Params: name type description linkid integer ID of the concerned link property integer ID of the property to get Returns: type description integer Property value / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_GetLinkProperty ( const orxANIMSET * _pstAnimSet , orxU32 _u32LinkID , orxU32 _u32Property ) orxANIMSET:getName # Signature: r1 = getName () Description: AnimSet name get accessor Params: Returns: type description string string / empty string C signature: const orxSTRING orxAnimSet_GetName ( const orxANIMSET * _pstAnimSet ) orxANIMSET:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxANIMSET:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxANIMSET:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxANIMSET:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxANIMSET:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxANIMSET:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxANIMSET:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxANIMSET:removeAllAnims # Signature: r1 = removeAllAnims () Description: Removes all Anim from the AnimSet (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_RemoveAllAnims ( orxANIMSET * _pstAnimSet ) orxANIMSET:removeAnim # Signature: r1 = removeAnim ( animid ) Description: Removes an Anim from an AnimSet (non-const self only) Params: name type description animid integer ID of the anim to remove Returns: type description orxSTATUS orxSTATUS_SUCESS / failure C signature: orxSTATUS orxAnimSet_RemoveAnim ( orxANIMSET * _pstAnimSet , orxU32 _u32AnimID ) orxANIMSET:removeLink # Signature: r1 = removeLink ( linkid ) Description: Removes a link from the AnimSet (non-const self only) Params: name type description linkid integer ID of the link Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_RemoveLink ( orxANIMSET * _pstAnimSet , orxU32 _u32LinkID ) orxANIMSET:removeReference # Signature: removeReference () Description: Removes a reference from an AnimSet (non-const self only) Params: Returns: C signature: void orxAnimSet_RemoveReference ( orxANIMSET * _pstAnimSet ) orxANIMSET:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxANIMSET:setLinkProperty # Signature: r1 = setLinkProperty ( linkid , property , value ) Description: Sets a link property (non-const self only) Params: name type description linkid integer ID of the concerned link property integer ID of the property to set value integer Value of the property to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_SetLinkProperty ( orxANIMSET * _pstAnimSet , orxU32 _u32LinkID , orxU32 _u32Property , orxU32 _u32Value ) orxANIMSET:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxANIMSET:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxANIMSET:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxANIMSET:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxANIMSET:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxANIMSET:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxANIMSET"},{"location":"types/orxANIMSET.html#type-orxanimset","text":"","title":"type orxANIMSET"},{"location":"types/orxANIMSET.html#methods","text":"","title":"Methods"},{"location":"types/orxANIMSET.html#orxanimsetaddanim","text":"Signature: r1 = addAnim ( anim ) Description: Adds an Anim to an AnimSet (non-const self only) Params: name type description anim orxANIM Anim to add Returns: type description integer Anim ID in the specified AnimSet C signature: orxU32 orxAnimSet_AddAnim ( orxANIMSET * _pstAnimSet , orxANIM * _pstAnim )","title":"orxANIMSET:addAnim"},{"location":"types/orxANIMSET.html#orxanimsetaddlink","text":"Signature: r1 = addLink ( srcanim , dstanim ) Description: Adds a link between two Anims of the AnimSet (non-const self only) Params: name type description srcanim integer Source Anim of the link dstanim integer Destination Anim of the link Returns: type description integer ID of the created link / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_AddLink ( orxANIMSET * _pstAnimSet , orxU32 _u32SrcAnim , orxU32 _u32DstAnim )","title":"orxANIMSET:addLink"},{"location":"types/orxANIMSET.html#orxanimsetaddreference","text":"Signature: addReference () Description: Adds a reference to an AnimSet (non-const self only) Params: Returns: C signature: void orxAnimSet_AddReference ( orxANIMSET * _pstAnimSet )","title":"orxANIMSET:addReference"},{"location":"types/orxANIMSET.html#orxanimsetaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxANIMSET:addr"},{"location":"types/orxANIMSET.html#orxanimsetaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxANIMSET:aeq"},{"location":"types/orxANIMSET.html#orxanimsetasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxANIMSET:asVoid"},{"location":"types/orxANIMSET.html#orxanimsetclonelinktable","text":"Signature: r1 = cloneLinkTable () Description: Clones an AnimSet Link Table Params: Returns: type description orxANIMSET_LINK_TABLE An internally allocated clone of the AnimSet C signature: orxANIMSET_LINK_TABLE * orxAnimSet_CloneLinkTable ( const orxANIMSET * _pstAnimSet )","title":"orxANIMSET:cloneLinkTable"},{"location":"types/orxANIMSET.html#orxanimsetcomputeanim","text":"Signature: r1 , r2 , r3 , r4 = computeAnim ( srcanim , dstanim , linktable ) Description: Computes active Anim given current and destination Anim IDs & a relative timestamp (non-const self only) Params: name type description srcanim integer Source (current) Anim ID dstanim integer Destination Anim ID, if none (auto mode) set it to orxU32_UNDEFINED linktable [in,out] orxANIMSET_LINK_TABLE Anim Pointer link table (updated if AnimSet link table isn't static, when using loop counts for example) Returns: type description integer Current Anim ID. If it's not the source one, _pu32Time will contain the new timestamp, relative to the new Anim number Pointer to the current timestamp relative to the source Anim (time elapsed since the beginning of this anim) boolean Animation has been cut boolean Animation has requested a target clearing C signature: orxU32 orxAnimSet_ComputeAnim ( orxANIMSET * _pstAnimSet , orxU32 _u32SrcAnim , orxU32 _u32DstAnim , orxFLOAT * _pfTime , orxANIMSET_LINK_TABLE * _pstLinkTable , orxBOOL * _pbCut , orxBOOL * _pbClearTarget )","title":"orxANIMSET:computeAnim"},{"location":"types/orxANIMSET.html#orxanimsetdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxANIMSET:decreaseCount"},{"location":"types/orxANIMSET.html#orxanimsetdelete","text":"Signature: r1 = delete () Description: Deletes an AnimSet (non-const self only) Params: Returns: type description orxSTATUS C signature: orxSTATUS orxAnimSet_Delete ( orxANIMSET * _pstAnimSet )","title":"orxANIMSET:delete"},{"location":"types/orxANIMSET.html#orxanimsetfindnextanim","text":"Signature: r1 = findNextAnim ( srcanim , dstanim ) Description: Finds next Anim given current and destination Anim IDs (non-const self only) Params: name type description srcanim integer Source (current) Anim ID dstanim integer Destination Anim ID, if none (auto mode) set it to orxU32_UNDEFINED Returns: type description integer Next Anim ID if found, orxU32_UNDEFINED otherwise C signature: orxU32 orxAnimSet_FindNextAnim ( orxANIMSET * _pstAnimSet , orxU32 _u32SrcAnim , orxU32 _u32DstAnim )","title":"orxANIMSET:findNextAnim"},{"location":"types/orxANIMSET.html#orxanimsetgetanim","text":"Signature: r1 = getAnim ( animid ) Description: AnimSet Anim get accessor Params: name type description animid integer Anim ID Returns: type description orxANIM Anim pointer / nil C signature: orxANIM * orxAnimSet_GetAnim ( const orxANIMSET * _pstAnimSet , orxU32 _u32AnimID )","title":"orxANIMSET:getAnim"},{"location":"types/orxANIMSET.html#orxanimsetgetanimcount","text":"Signature: r1 = getAnimCount () Description: AnimSet Anim count get accessor Params: Returns: type description integer Anim count / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_GetAnimCount ( const orxANIMSET * _pstAnimSet )","title":"orxANIMSET:getAnimCount"},{"location":"types/orxANIMSET.html#orxanimsetgetanimidfromname","text":"Signature: r1 = getAnimIDFromName ( animname ) Description: Gets animation ID from name Params: name type description animname string Animation name (config's section) Returns: type description integer Anim ID / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_GetAnimIDFromName ( const orxANIMSET * _pstAnimSet , const orxSTRING _zAnimName )","title":"orxANIMSET:getAnimIDFromName"},{"location":"types/orxANIMSET.html#orxanimsetgetanimstoragesize","text":"Signature: r1 = getAnimStorageSize () Description: AnimSet Anim storage size get accessor Params: Returns: type description integer AnimSet Storage size / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_GetAnimStorageSize ( const orxANIMSET * _pstAnimSet )","title":"orxANIMSET:getAnimStorageSize"},{"location":"types/orxANIMSET.html#orxanimsetgetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxANIMSET:getChild"},{"location":"types/orxANIMSET.html#orxanimsetgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxANIMSET:getFlags"},{"location":"types/orxANIMSET.html#orxanimsetgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxANIMSET:getGUID"},{"location":"types/orxANIMSET.html#orxanimsetgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxANIMSET:getID"},{"location":"types/orxANIMSET.html#orxanimsetgetlink","text":"Signature: r1 = getLink ( srcanim , dstanim ) Description: Gets a direct link between two Anims, if exists Params: name type description srcanim integer ID of the source Anim dstanim integer ID of the destination Anim Returns: type description integer ID of the direct link, orxU32_UNDEFINED if none C signature: orxU32 orxAnimSet_GetLink ( const orxANIMSET * _pstAnimSet , orxU32 _u32SrcAnim , orxU32 _u32DstAnim )","title":"orxANIMSET:getLink"},{"location":"types/orxANIMSET.html#orxanimsetgetlinkproperty","text":"Signature: r1 = getLinkProperty ( linkid , property ) Description: Gets a link property Params: name type description linkid integer ID of the concerned link property integer ID of the property to get Returns: type description integer Property value / orxU32_UNDEFINED C signature: orxU32 orxAnimSet_GetLinkProperty ( const orxANIMSET * _pstAnimSet , orxU32 _u32LinkID , orxU32 _u32Property )","title":"orxANIMSET:getLinkProperty"},{"location":"types/orxANIMSET.html#orxanimsetgetname","text":"Signature: r1 = getName () Description: AnimSet name get accessor Params: Returns: type description string string / empty string C signature: const orxSTRING orxAnimSet_GetName ( const orxANIMSET * _pstAnimSet )","title":"orxANIMSET:getName"},{"location":"types/orxANIMSET.html#orxanimsetgetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxANIMSET:getNext"},{"location":"types/orxANIMSET.html#orxanimsetgetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxANIMSET:getOwner"},{"location":"types/orxANIMSET.html#orxanimsetgetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxANIMSET:getParent"},{"location":"types/orxANIMSET.html#orxanimsetgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxANIMSET:getPrevious"},{"location":"types/orxANIMSET.html#orxanimsetgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxANIMSET:getRefCount"},{"location":"types/orxANIMSET.html#orxanimsetgetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxANIMSET:getSibling"},{"location":"types/orxANIMSET.html#orxanimsetincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxANIMSET:increaseCount"},{"location":"types/orxANIMSET.html#orxanimsetremoveallanims","text":"Signature: r1 = removeAllAnims () Description: Removes all Anim from the AnimSet (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_RemoveAllAnims ( orxANIMSET * _pstAnimSet )","title":"orxANIMSET:removeAllAnims"},{"location":"types/orxANIMSET.html#orxanimsetremoveanim","text":"Signature: r1 = removeAnim ( animid ) Description: Removes an Anim from an AnimSet (non-const self only) Params: name type description animid integer ID of the anim to remove Returns: type description orxSTATUS orxSTATUS_SUCESS / failure C signature: orxSTATUS orxAnimSet_RemoveAnim ( orxANIMSET * _pstAnimSet , orxU32 _u32AnimID )","title":"orxANIMSET:removeAnim"},{"location":"types/orxANIMSET.html#orxanimsetremovelink","text":"Signature: r1 = removeLink ( linkid ) Description: Removes a link from the AnimSet (non-const self only) Params: name type description linkid integer ID of the link Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_RemoveLink ( orxANIMSET * _pstAnimSet , orxU32 _u32LinkID )","title":"orxANIMSET:removeLink"},{"location":"types/orxANIMSET.html#orxanimsetremovereference","text":"Signature: removeReference () Description: Removes a reference from an AnimSet (non-const self only) Params: Returns: C signature: void orxAnimSet_RemoveReference ( orxANIMSET * _pstAnimSet )","title":"orxANIMSET:removeReference"},{"location":"types/orxANIMSET.html#orxanimsetsetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxANIMSET:setFlags"},{"location":"types/orxANIMSET.html#orxanimsetsetlinkproperty","text":"Signature: r1 = setLinkProperty ( linkid , property , value ) Description: Sets a link property (non-const self only) Params: name type description linkid integer ID of the concerned link property integer ID of the property to set value integer Value of the property to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxAnimSet_SetLinkProperty ( orxANIMSET * _pstAnimSet , orxU32 _u32LinkID , orxU32 _u32Property , orxU32 _u32Value )","title":"orxANIMSET:setLinkProperty"},{"location":"types/orxANIMSET.html#orxanimsetsetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxANIMSET:setOwner"},{"location":"types/orxANIMSET.html#orxanimsetsetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxANIMSET:setParent"},{"location":"types/orxANIMSET.html#orxanimsettestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxANIMSET:testAllFlags"},{"location":"types/orxANIMSET.html#orxanimsettestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxANIMSET:testFlags"},{"location":"types/orxANIMSET.html#orxanimsettype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxANIMSET:type"},{"location":"types/orxANIMSET.html#orxanimsetupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxANIMSET:update"},{"location":"types/orxANIMSET_LINK_TABLE.html","text":"type orxANIMSET_LINK_TABLE # Methods # orxANIMSET_LINK_TABLE:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxANIMSET_LINK_TABLE:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxANIMSET_LINK_TABLE:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxANIMSET_LINK_TABLE:deleteLink # Signature: deleteLink () Description: Deletes a Link table (non-const self only) Params: Returns: C signature: void orxAnimSet_DeleteLinkTable ( orxANIMSET_LINK_TABLE * _pstLinkTable ) orxANIMSET_LINK_TABLE:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxANIMSET_LINK_TABLE"},{"location":"types/orxANIMSET_LINK_TABLE.html#type-orxanimset_link_table","text":"","title":"type orxANIMSET_LINK_TABLE"},{"location":"types/orxANIMSET_LINK_TABLE.html#methods","text":"","title":"Methods"},{"location":"types/orxANIMSET_LINK_TABLE.html#orxanimset_link_tableaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxANIMSET_LINK_TABLE:addr"},{"location":"types/orxANIMSET_LINK_TABLE.html#orxanimset_link_tableaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxANIMSET_LINK_TABLE:aeq"},{"location":"types/orxANIMSET_LINK_TABLE.html#orxanimset_link_tableasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxANIMSET_LINK_TABLE:asVoid"},{"location":"types/orxANIMSET_LINK_TABLE.html#orxanimset_link_tabledeletelink","text":"Signature: deleteLink () Description: Deletes a Link table (non-const self only) Params: Returns: C signature: void orxAnimSet_DeleteLinkTable ( orxANIMSET_LINK_TABLE * _pstLinkTable )","title":"orxANIMSET_LINK_TABLE:deleteLink"},{"location":"types/orxANIMSET_LINK_TABLE.html#orxanimset_link_tabletype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxANIMSET_LINK_TABLE:type"},{"location":"types/orxANIM_CUSTOM_EVENT.html","text":"type orxANIM_CUSTOM_EVENT # constructors: lorx.anim.animCustomEvent Properties # name type name string fvalue number timestamp number Methods # orxANIM_CUSTOM_EVENT:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxANIM_CUSTOM_EVENT:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxANIM_CUSTOM_EVENT:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxANIM_CUSTOM_EVENT:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxANIM_CUSTOM_EVENT"},{"location":"types/orxANIM_CUSTOM_EVENT.html#type-orxanim_custom_event","text":"constructors: lorx.anim.animCustomEvent","title":"type orxANIM_CUSTOM_EVENT"},{"location":"types/orxANIM_CUSTOM_EVENT.html#properties","text":"name type name string fvalue number timestamp number","title":"Properties"},{"location":"types/orxANIM_CUSTOM_EVENT.html#methods","text":"","title":"Methods"},{"location":"types/orxANIM_CUSTOM_EVENT.html#orxanim_custom_eventaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxANIM_CUSTOM_EVENT:addr"},{"location":"types/orxANIM_CUSTOM_EVENT.html#orxanim_custom_eventaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxANIM_CUSTOM_EVENT:aeq"},{"location":"types/orxANIM_CUSTOM_EVENT.html#orxanim_custom_eventasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxANIM_CUSTOM_EVENT:asVoid"},{"location":"types/orxANIM_CUSTOM_EVENT.html#orxanim_custom_eventtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxANIM_CUSTOM_EVENT:type"},{"location":"types/orxBITMAP.html","text":"type orxBITMAP # Methods # orxBITMAP:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxBITMAP:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxBITMAP:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxBITMAP:delete # Signature: delete () Description: Deletes a bitmap (non-const self only) Params: Returns: C signature: void orxDisplay_DeleteBitmap ( orxBITMAP * _pstBitmap ) orxBITMAP:getData # Signature: r1 = getData ( data , bytenumber ) Description: Gets a bitmap data (RGBA memory format) Params: name type description data table of integer Output buffer (4 channels, RGBA) bytenumber integer Number of bytes of the buffer Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_GetBitmapData ( const orxBITMAP * _pstBitmap , orxU8 * _au8Data , orxU32 _u32ByteNumber ) orxBITMAP:getID # Signature: r1 = getID () Description: Gets a bitmap (internal) ID Params: Returns: type description integer integer (u32) C signature: orxU32 orxDisplay_GetBitmapID ( const orxBITMAP * _pstBitmap ) orxBITMAP:getSize # Signature: r1 , r2 , r3 = getSize () Description: Gets a bitmap size Params: Returns: type description orxSTATUS success / failure number Bitmap width number Bitmap height C signature: orxSTATUS orxDisplay_GetBitmapSize ( const orxBITMAP * _pstBitmap , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight ) orxBITMAP:save # Signature: r1 = save ( filename ) Description: Saves a bitmap to file Params: name type description filename string Name of the file where to store the bitmap Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SaveBitmap ( const orxBITMAP * _pstBitmap , const orxSTRING _zFileName ) orxBITMAP:setData # Signature: r1 = setData ( data , bytenumber ) Description: Sets a bitmap data (RGBA memory format) (non-const self only) Params: name type description data table of integer Data (4 channels, RGBA) bytenumber integer Number of bytes Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetBitmapData ( orxBITMAP * _pstBitmap , const orxU8 * _au8Data , orxU32 _u32ByteNumber ) orxBITMAP:setPartialData # Signature: r1 = setPartialData ( data , x , y , width , height ) Description: Sets a partial (rectangle) bitmap data (RGBA memory format) (non-const self only) Params: name type description data table of integer Data (4 channels, RGBA) x integer Origin's X coord of the rectangle area to set y integer Origin's Y coord of the rectangle area to set width integer Width of the rectangle area to set height integer Height of the rectangle area to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetPartialBitmapData ( orxBITMAP * _pstBitmap , const orxU8 * _au8Data , orxU32 _u32X , orxU32 _u32Y , orxU32 _u32Width , orxU32 _u32Height ) orxBITMAP:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxBITMAP"},{"location":"types/orxBITMAP.html#type-orxbitmap","text":"","title":"type orxBITMAP"},{"location":"types/orxBITMAP.html#methods","text":"","title":"Methods"},{"location":"types/orxBITMAP.html#orxbitmapaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxBITMAP:addr"},{"location":"types/orxBITMAP.html#orxbitmapaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxBITMAP:aeq"},{"location":"types/orxBITMAP.html#orxbitmapasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxBITMAP:asVoid"},{"location":"types/orxBITMAP.html#orxbitmapdelete","text":"Signature: delete () Description: Deletes a bitmap (non-const self only) Params: Returns: C signature: void orxDisplay_DeleteBitmap ( orxBITMAP * _pstBitmap )","title":"orxBITMAP:delete"},{"location":"types/orxBITMAP.html#orxbitmapgetdata","text":"Signature: r1 = getData ( data , bytenumber ) Description: Gets a bitmap data (RGBA memory format) Params: name type description data table of integer Output buffer (4 channels, RGBA) bytenumber integer Number of bytes of the buffer Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_GetBitmapData ( const orxBITMAP * _pstBitmap , orxU8 * _au8Data , orxU32 _u32ByteNumber )","title":"orxBITMAP:getData"},{"location":"types/orxBITMAP.html#orxbitmapgetid","text":"Signature: r1 = getID () Description: Gets a bitmap (internal) ID Params: Returns: type description integer integer (u32) C signature: orxU32 orxDisplay_GetBitmapID ( const orxBITMAP * _pstBitmap )","title":"orxBITMAP:getID"},{"location":"types/orxBITMAP.html#orxbitmapgetsize","text":"Signature: r1 , r2 , r3 = getSize () Description: Gets a bitmap size Params: Returns: type description orxSTATUS success / failure number Bitmap width number Bitmap height C signature: orxSTATUS orxDisplay_GetBitmapSize ( const orxBITMAP * _pstBitmap , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight )","title":"orxBITMAP:getSize"},{"location":"types/orxBITMAP.html#orxbitmapsave","text":"Signature: r1 = save ( filename ) Description: Saves a bitmap to file Params: name type description filename string Name of the file where to store the bitmap Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SaveBitmap ( const orxBITMAP * _pstBitmap , const orxSTRING _zFileName )","title":"orxBITMAP:save"},{"location":"types/orxBITMAP.html#orxbitmapsetdata","text":"Signature: r1 = setData ( data , bytenumber ) Description: Sets a bitmap data (RGBA memory format) (non-const self only) Params: name type description data table of integer Data (4 channels, RGBA) bytenumber integer Number of bytes Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetBitmapData ( orxBITMAP * _pstBitmap , const orxU8 * _au8Data , orxU32 _u32ByteNumber )","title":"orxBITMAP:setData"},{"location":"types/orxBITMAP.html#orxbitmapsetpartialdata","text":"Signature: r1 = setPartialData ( data , x , y , width , height ) Description: Sets a partial (rectangle) bitmap data (RGBA memory format) (non-const self only) Params: name type description data table of integer Data (4 channels, RGBA) x integer Origin's X coord of the rectangle area to set y integer Origin's Y coord of the rectangle area to set width integer Width of the rectangle area to set height integer Height of the rectangle area to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxDisplay_SetPartialBitmapData ( orxBITMAP * _pstBitmap , const orxU8 * _au8Data , orxU32 _u32X , orxU32 _u32Y , orxU32 _u32Width , orxU32 _u32Height )","title":"orxBITMAP:setPartialData"},{"location":"types/orxBITMAP.html#orxbitmaptype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxBITMAP:type"},{"location":"types/orxBODY.html","text":"type orxBODY # Methods # orxBODY:addJointFromConfig # Signature: r1 = addJointFromConfig ( dstbody , configid ) Description: Adds a joint from config to link two bodies together (non-const self only) Params: name type description dstbody orxBODY Concerned destination body configid string Body joint config ID Returns: type description orxBODY_JOINT orxBODY_JOINT / nil C signature: orxBODY_JOINT * orxBody_AddJointFromConfig ( orxBODY * _pstSrcBody , orxBODY * _pstDstBody , const orxSTRING _zConfigID ) orxBODY:addPartFromConfig # Signature: r1 = addPartFromConfig ( configid ) Description: Adds a part to body from config (non-const self only) Params: name type description configid string Body part config ID Returns: type description orxBODY_PART orxBODY_PART / nil C signature: orxBODY_PART * orxBody_AddPartFromConfig ( orxBODY * _pstBody , const orxSTRING _zConfigID ) orxBODY:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxBODY:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxBODY:applyForce # Signature: r1 = applyForce ( force , point ) Description: Applies a force (non-const self only) Params: name type description force orxVECTOR# Force to apply point orxVECTOR# Point (world coordinates) where the force will be applied, if orxNULL, center of mass will be used Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_ApplyForce ( orxBODY * _pstBody , const orxVECTOR * _pvForce , const orxVECTOR * _pvPoint ) orxBODY:applyImpulse # Signature: r1 = applyImpulse ( impulse , point ) Description: Applies an impulse (non-const self only) Params: name type description impulse orxVECTOR# Impulse to apply point orxVECTOR# Point (world coordinates) where the impulse will be applied, if orxNULL, center of mass will be used Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_ApplyImpulse ( orxBODY * _pstBody , const orxVECTOR * _pvImpulse , const orxVECTOR * _pvPoint ) orxBODY:applyTorque # Signature: r1 = applyTorque ( torque ) Description: Applies a torque (non-const self only) Params: name type description torque number Torque to apply Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_ApplyTorque ( orxBODY * _pstBody , orxFLOAT _fTorque ) orxBODY:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxBODY:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxBODY:delete # Signature: r1 = delete () Description: Deletes a body (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_Delete ( orxBODY * _pstBody ) orxBODY:getAllowMoving # Signature: r1 = getAllowMoving () Description: Gets the \"allow moving\" property of a body, only relevant for non-dynamic bodies Params: Returns: type description boolean true / false C signature: orxBOOL orxBody_GetAllowMoving ( const orxBODY * _pstBody ) orxBODY:getAngularDamping # Signature: r1 = getAngularDamping () Description: Gets a body angular damping Params: Returns: type description number Body's angular damping C signature: orxFLOAT orxBody_GetAngularDamping ( const orxBODY * _pstBody ) orxBODY:getAngularVelocity # Signature: r1 = getAngularVelocity () Description: Gets a body angular velocity Params: Returns: type description number Body angular velocity (radians/seconds) C signature: orxFLOAT orxBody_GetAngularVelocity ( const orxBODY * _pstBody ) orxBODY:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxBODY:getCustomGravity # Signature: r1 = getCustomGravity () Description: Gets a body custom gravity Params: Returns: type description orxVECTOR Body custom gravity / nil is object doesn't have any C signature: orxVECTOR * orxBody_GetCustomGravity ( const orxBODY * _pstBody , orxVECTOR * _pvCustomGravity ) orxBODY:getDefFlags # Signature: r1 = getDefFlags ( mask ) Description: Gets body definition flags Params: name type description mask integer Mask to use for getting flags Returns: type description integer integer (u32) C signature: orxU32 orxBody_GetDefFlags ( const orxBODY * _pstBody , orxU32 _u32Mask ) orxBODY:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxBODY:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxBODY:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxBODY:getLinearDamping # Signature: r1 = getLinearDamping () Description: Gets a body linear damping Params: Returns: type description number Body's linear damping C signature: orxFLOAT orxBody_GetLinearDamping ( const orxBODY * _pstBody ) orxBODY:getMass # Signature: r1 = getMass () Description: Gets a body mass Params: Returns: type description number Body mass C signature: orxFLOAT orxBody_GetMass ( const orxBODY * _pstBody ) orxBODY:getMassCenter # Signature: r1 = getMassCenter () Description: Gets a body center of mass (object space) Params: Returns: type description orxVECTOR Mass center / nil C signature: orxVECTOR * orxBody_GetMassCenter ( const orxBODY * _pstBody , orxVECTOR * _pvMassCenter ) orxBODY:getName # Signature: r1 = getName () Description: Gets body config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxBody_GetName ( const orxBODY * _pstBody ) orxBODY:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxBODY:getNextJoint # Signature: r1 = getNextJoint ( bodyjoint ) Description: Gets next body joint Params: name type description bodyjoint orxBODY_JOINT# Current body joint (nil to get the first one) Returns: type description orxBODY_JOINT orxBODY_JOINT / nil C signature: orxBODY_JOINT * orxBody_GetNextJoint ( const orxBODY * _pstBody , const orxBODY_JOINT * _pstBodyJoint ) orxBODY:getNextPart # Signature: r1 = getNextPart ( bodypart ) Description: Gets next body part Params: name type description bodypart orxBODY_PART# Current body part (nil to get the first one) Returns: type description orxBODY_PART orxBODY_PART / nil C signature: orxBODY_PART * orxBody_GetNextPart ( const orxBODY * _pstBody , const orxBODY_PART * _pstBodyPart ) orxBODY:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxBODY:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxBODY:getPosition # Signature: r1 = getPosition () Description: Gets a body position Params: Returns: type description orxVECTOR Body position / nil C signature: orxVECTOR * orxBody_GetPosition ( const orxBODY * _pstBody , orxVECTOR * _pvPosition ) orxBODY:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxBODY:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxBODY:getRotation # Signature: r1 = getRotation () Description: Gets a body rotation Params: Returns: type description number Body rotation (radians) C signature: orxFLOAT orxBody_GetRotation ( const orxBODY * _pstBody ) orxBODY:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxBODY:getSpeed # Signature: r1 = getSpeed () Description: Gets a body speed Params: Returns: type description orxVECTOR Body speed / nil C signature: orxVECTOR * orxBody_GetSpeed ( const orxBODY * _pstBody , orxVECTOR * _pvSpeed ) orxBODY:getSpeedAtWorldPosition # Signature: r1 = getSpeedAtWorldPosition ( position ) Description: Gets a body speed at a specified world position Params: name type description position orxVECTOR# Concerned world position Returns: type description orxVECTOR Body speed / nil C signature: orxVECTOR * orxBody_GetSpeedAtWorldPosition ( const orxBODY * _pstBody , const orxVECTOR * _pvPosition , orxVECTOR * _pvSpeed ) orxBODY:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxBODY:isDynamic # Signature: r1 = isDynamic () Description: Gets the dynamic property of a body Params: Returns: type description boolean true / false C signature: orxBOOL orxBody_IsDynamic ( const orxBODY * _pstBody ) orxBODY:isFixedRotation # Signature: r1 = isFixedRotation () Description: Is a body using a fixed rotation Params: Returns: type description boolean true if fixed rotation, false otherwise C signature: orxBOOL orxBody_IsFixedRotation ( const orxBODY * _pstBody ) orxBODY:isInside # Signature: r1 = isInside ( position ) Description: Is point inside body? (Using world coordinates) Params: name type description position orxVECTOR# Position to test (world coordinates) Returns: type description boolean true / false C signature: orxBOOL orxBody_IsInside ( const orxBODY * _pstBody , const orxVECTOR * _pvPosition ) orxBODY:removePartFromConfig # Signature: r1 = removePartFromConfig ( configid ) Description: Removes a part using its config ID (non-const self only) Params: name type description configid string Config ID of the part to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_RemovePartFromConfig ( orxBODY * _pstBody , const orxSTRING _zConfigID ) orxBODY:setAllowMoving # Signature: r1 = setAllowMoving ( allowmoving ) Description: Sets the \"allow moving\" property of a body (non-const self only) Params: name type description allowmoving boolean Only used for non-dynamic bodies, Kinematic / Static Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetAllowMoving ( orxBODY * _pstBody , orxBOOL _bAllowMoving ) orxBODY:setAngularDamping # Signature: r1 = setAngularDamping ( damping ) Description: Sets a body angular damping (non-const self only) Params: name type description damping number Angular damping to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetAngularDamping ( orxBODY * _pstBody , orxFLOAT _fDamping ) orxBODY:setAngularVelocity # Signature: r1 = setAngularVelocity ( velocity ) Description: Sets a body angular velocity (non-const self only) Params: name type description velocity number Angular velocity to set (radians/seconds) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetAngularVelocity ( orxBODY * _pstBody , orxFLOAT _fVelocity ) orxBODY:setCustomGravity # Signature: r1 = setCustomGravity ( customgravity ) Description: Sets a body custom gravity (non-const self only) Params: name type description customgravity orxVECTOR# Custom gravity to set / nil to remove it Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetCustomGravity ( orxBODY * _pstBody , const orxVECTOR * _pvCustomGravity ) orxBODY:setDynamic # Signature: r1 = setDynamic ( dynamic ) Description: Sets the dynamic property of a body (non-const self only) Params: name type description dynamic boolean Dynamic / Static (or Kinematic depending on the \"allow moving\" property) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetDynamic ( orxBODY * _pstBody , orxBOOL _bDynamic ) orxBODY:setFixedRotation # Signature: r1 = setFixedRotation ( fixed ) Description: Sets a body fixed rotation (non-const self only) Params: name type description fixed boolean Fixed / not fixed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetFixedRotation ( orxBODY * _pstBody , orxBOOL _bFixed ) orxBODY:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxBODY:setLinearDamping # Signature: r1 = setLinearDamping ( damping ) Description: Sets a body linear damping (non-const self only) Params: name type description damping number Linear damping to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetLinearDamping ( orxBODY * _pstBody , orxFLOAT _fDamping ) orxBODY:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxBODY:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxBODY:setPosition # Signature: r1 = setPosition ( position ) Description: Sets a body position (non-const self only) Params: name type description position orxVECTOR# Position to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPosition ( orxBODY * _pstBody , const orxVECTOR * _pvPosition ) orxBODY:setRotation # Signature: r1 = setRotation ( rotation ) Description: Sets a body rotation (non-const self only) Params: name type description rotation number Rotation to set (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetRotation ( orxBODY * _pstBody , orxFLOAT _fRotation ) orxBODY:setScale # Signature: r1 = setScale ( scale ) Description: Sets a body scale (non-const self only) Params: name type description scale orxVECTOR# Scale to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetScale ( orxBODY * _pstBody , const orxVECTOR * _pvScale ) orxBODY:setSpeed # Signature: r1 = setSpeed ( speed ) Description: Sets a body speed (non-const self only) Params: name type description speed orxVECTOR# Speed to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetSpeed ( orxBODY * _pstBody , const orxVECTOR * _pvSpeed ) orxBODY:testAllDefFlags # Signature: r1 = testAllDefFlags ( flags ) Description: Tests all flags against body definition ones Params: name type description flags integer Flags to test Returns: type description boolean true / false C signature: orxBOOL orxBody_TestAllDefFlags ( const orxBODY * _pstBody , orxU32 _u32Flags ) orxBODY:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxBODY:testDefFlags # Signature: r1 = testDefFlags ( flags ) Description: Tests flags against body definition ones Params: name type description flags integer Flags to test Returns: type description boolean true / false C signature: orxBOOL orxBody_TestDefFlags ( const orxBODY * _pstBody , orxU32 _u32Flags ) orxBODY:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxBODY:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxBODY:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxBODY"},{"location":"types/orxBODY.html#type-orxbody","text":"","title":"type orxBODY"},{"location":"types/orxBODY.html#methods","text":"","title":"Methods"},{"location":"types/orxBODY.html#orxbodyaddjointfromconfig","text":"Signature: r1 = addJointFromConfig ( dstbody , configid ) Description: Adds a joint from config to link two bodies together (non-const self only) Params: name type description dstbody orxBODY Concerned destination body configid string Body joint config ID Returns: type description orxBODY_JOINT orxBODY_JOINT / nil C signature: orxBODY_JOINT * orxBody_AddJointFromConfig ( orxBODY * _pstSrcBody , orxBODY * _pstDstBody , const orxSTRING _zConfigID )","title":"orxBODY:addJointFromConfig"},{"location":"types/orxBODY.html#orxbodyaddpartfromconfig","text":"Signature: r1 = addPartFromConfig ( configid ) Description: Adds a part to body from config (non-const self only) Params: name type description configid string Body part config ID Returns: type description orxBODY_PART orxBODY_PART / nil C signature: orxBODY_PART * orxBody_AddPartFromConfig ( orxBODY * _pstBody , const orxSTRING _zConfigID )","title":"orxBODY:addPartFromConfig"},{"location":"types/orxBODY.html#orxbodyaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxBODY:addr"},{"location":"types/orxBODY.html#orxbodyaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxBODY:aeq"},{"location":"types/orxBODY.html#orxbodyapplyforce","text":"Signature: r1 = applyForce ( force , point ) Description: Applies a force (non-const self only) Params: name type description force orxVECTOR# Force to apply point orxVECTOR# Point (world coordinates) where the force will be applied, if orxNULL, center of mass will be used Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_ApplyForce ( orxBODY * _pstBody , const orxVECTOR * _pvForce , const orxVECTOR * _pvPoint )","title":"orxBODY:applyForce"},{"location":"types/orxBODY.html#orxbodyapplyimpulse","text":"Signature: r1 = applyImpulse ( impulse , point ) Description: Applies an impulse (non-const self only) Params: name type description impulse orxVECTOR# Impulse to apply point orxVECTOR# Point (world coordinates) where the impulse will be applied, if orxNULL, center of mass will be used Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_ApplyImpulse ( orxBODY * _pstBody , const orxVECTOR * _pvImpulse , const orxVECTOR * _pvPoint )","title":"orxBODY:applyImpulse"},{"location":"types/orxBODY.html#orxbodyapplytorque","text":"Signature: r1 = applyTorque ( torque ) Description: Applies a torque (non-const self only) Params: name type description torque number Torque to apply Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_ApplyTorque ( orxBODY * _pstBody , orxFLOAT _fTorque )","title":"orxBODY:applyTorque"},{"location":"types/orxBODY.html#orxbodyasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxBODY:asVoid"},{"location":"types/orxBODY.html#orxbodydecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxBODY:decreaseCount"},{"location":"types/orxBODY.html#orxbodydelete","text":"Signature: r1 = delete () Description: Deletes a body (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_Delete ( orxBODY * _pstBody )","title":"orxBODY:delete"},{"location":"types/orxBODY.html#orxbodygetallowmoving","text":"Signature: r1 = getAllowMoving () Description: Gets the \"allow moving\" property of a body, only relevant for non-dynamic bodies Params: Returns: type description boolean true / false C signature: orxBOOL orxBody_GetAllowMoving ( const orxBODY * _pstBody )","title":"orxBODY:getAllowMoving"},{"location":"types/orxBODY.html#orxbodygetangulardamping","text":"Signature: r1 = getAngularDamping () Description: Gets a body angular damping Params: Returns: type description number Body's angular damping C signature: orxFLOAT orxBody_GetAngularDamping ( const orxBODY * _pstBody )","title":"orxBODY:getAngularDamping"},{"location":"types/orxBODY.html#orxbodygetangularvelocity","text":"Signature: r1 = getAngularVelocity () Description: Gets a body angular velocity Params: Returns: type description number Body angular velocity (radians/seconds) C signature: orxFLOAT orxBody_GetAngularVelocity ( const orxBODY * _pstBody )","title":"orxBODY:getAngularVelocity"},{"location":"types/orxBODY.html#orxbodygetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxBODY:getChild"},{"location":"types/orxBODY.html#orxbodygetcustomgravity","text":"Signature: r1 = getCustomGravity () Description: Gets a body custom gravity Params: Returns: type description orxVECTOR Body custom gravity / nil is object doesn't have any C signature: orxVECTOR * orxBody_GetCustomGravity ( const orxBODY * _pstBody , orxVECTOR * _pvCustomGravity )","title":"orxBODY:getCustomGravity"},{"location":"types/orxBODY.html#orxbodygetdefflags","text":"Signature: r1 = getDefFlags ( mask ) Description: Gets body definition flags Params: name type description mask integer Mask to use for getting flags Returns: type description integer integer (u32) C signature: orxU32 orxBody_GetDefFlags ( const orxBODY * _pstBody , orxU32 _u32Mask )","title":"orxBODY:getDefFlags"},{"location":"types/orxBODY.html#orxbodygetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxBODY:getFlags"},{"location":"types/orxBODY.html#orxbodygetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxBODY:getGUID"},{"location":"types/orxBODY.html#orxbodygetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxBODY:getID"},{"location":"types/orxBODY.html#orxbodygetlineardamping","text":"Signature: r1 = getLinearDamping () Description: Gets a body linear damping Params: Returns: type description number Body's linear damping C signature: orxFLOAT orxBody_GetLinearDamping ( const orxBODY * _pstBody )","title":"orxBODY:getLinearDamping"},{"location":"types/orxBODY.html#orxbodygetmass","text":"Signature: r1 = getMass () Description: Gets a body mass Params: Returns: type description number Body mass C signature: orxFLOAT orxBody_GetMass ( const orxBODY * _pstBody )","title":"orxBODY:getMass"},{"location":"types/orxBODY.html#orxbodygetmasscenter","text":"Signature: r1 = getMassCenter () Description: Gets a body center of mass (object space) Params: Returns: type description orxVECTOR Mass center / nil C signature: orxVECTOR * orxBody_GetMassCenter ( const orxBODY * _pstBody , orxVECTOR * _pvMassCenter )","title":"orxBODY:getMassCenter"},{"location":"types/orxBODY.html#orxbodygetname","text":"Signature: r1 = getName () Description: Gets body config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxBody_GetName ( const orxBODY * _pstBody )","title":"orxBODY:getName"},{"location":"types/orxBODY.html#orxbodygetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxBODY:getNext"},{"location":"types/orxBODY.html#orxbodygetnextjoint","text":"Signature: r1 = getNextJoint ( bodyjoint ) Description: Gets next body joint Params: name type description bodyjoint orxBODY_JOINT# Current body joint (nil to get the first one) Returns: type description orxBODY_JOINT orxBODY_JOINT / nil C signature: orxBODY_JOINT * orxBody_GetNextJoint ( const orxBODY * _pstBody , const orxBODY_JOINT * _pstBodyJoint )","title":"orxBODY:getNextJoint"},{"location":"types/orxBODY.html#orxbodygetnextpart","text":"Signature: r1 = getNextPart ( bodypart ) Description: Gets next body part Params: name type description bodypart orxBODY_PART# Current body part (nil to get the first one) Returns: type description orxBODY_PART orxBODY_PART / nil C signature: orxBODY_PART * orxBody_GetNextPart ( const orxBODY * _pstBody , const orxBODY_PART * _pstBodyPart )","title":"orxBODY:getNextPart"},{"location":"types/orxBODY.html#orxbodygetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxBODY:getOwner"},{"location":"types/orxBODY.html#orxbodygetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxBODY:getParent"},{"location":"types/orxBODY.html#orxbodygetposition","text":"Signature: r1 = getPosition () Description: Gets a body position Params: Returns: type description orxVECTOR Body position / nil C signature: orxVECTOR * orxBody_GetPosition ( const orxBODY * _pstBody , orxVECTOR * _pvPosition )","title":"orxBODY:getPosition"},{"location":"types/orxBODY.html#orxbodygetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxBODY:getPrevious"},{"location":"types/orxBODY.html#orxbodygetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxBODY:getRefCount"},{"location":"types/orxBODY.html#orxbodygetrotation","text":"Signature: r1 = getRotation () Description: Gets a body rotation Params: Returns: type description number Body rotation (radians) C signature: orxFLOAT orxBody_GetRotation ( const orxBODY * _pstBody )","title":"orxBODY:getRotation"},{"location":"types/orxBODY.html#orxbodygetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxBODY:getSibling"},{"location":"types/orxBODY.html#orxbodygetspeed","text":"Signature: r1 = getSpeed () Description: Gets a body speed Params: Returns: type description orxVECTOR Body speed / nil C signature: orxVECTOR * orxBody_GetSpeed ( const orxBODY * _pstBody , orxVECTOR * _pvSpeed )","title":"orxBODY:getSpeed"},{"location":"types/orxBODY.html#orxbodygetspeedatworldposition","text":"Signature: r1 = getSpeedAtWorldPosition ( position ) Description: Gets a body speed at a specified world position Params: name type description position orxVECTOR# Concerned world position Returns: type description orxVECTOR Body speed / nil C signature: orxVECTOR * orxBody_GetSpeedAtWorldPosition ( const orxBODY * _pstBody , const orxVECTOR * _pvPosition , orxVECTOR * _pvSpeed )","title":"orxBODY:getSpeedAtWorldPosition"},{"location":"types/orxBODY.html#orxbodyincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxBODY:increaseCount"},{"location":"types/orxBODY.html#orxbodyisdynamic","text":"Signature: r1 = isDynamic () Description: Gets the dynamic property of a body Params: Returns: type description boolean true / false C signature: orxBOOL orxBody_IsDynamic ( const orxBODY * _pstBody )","title":"orxBODY:isDynamic"},{"location":"types/orxBODY.html#orxbodyisfixedrotation","text":"Signature: r1 = isFixedRotation () Description: Is a body using a fixed rotation Params: Returns: type description boolean true if fixed rotation, false otherwise C signature: orxBOOL orxBody_IsFixedRotation ( const orxBODY * _pstBody )","title":"orxBODY:isFixedRotation"},{"location":"types/orxBODY.html#orxbodyisinside","text":"Signature: r1 = isInside ( position ) Description: Is point inside body? (Using world coordinates) Params: name type description position orxVECTOR# Position to test (world coordinates) Returns: type description boolean true / false C signature: orxBOOL orxBody_IsInside ( const orxBODY * _pstBody , const orxVECTOR * _pvPosition )","title":"orxBODY:isInside"},{"location":"types/orxBODY.html#orxbodyremovepartfromconfig","text":"Signature: r1 = removePartFromConfig ( configid ) Description: Removes a part using its config ID (non-const self only) Params: name type description configid string Config ID of the part to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_RemovePartFromConfig ( orxBODY * _pstBody , const orxSTRING _zConfigID )","title":"orxBODY:removePartFromConfig"},{"location":"types/orxBODY.html#orxbodysetallowmoving","text":"Signature: r1 = setAllowMoving ( allowmoving ) Description: Sets the \"allow moving\" property of a body (non-const self only) Params: name type description allowmoving boolean Only used for non-dynamic bodies, Kinematic / Static Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetAllowMoving ( orxBODY * _pstBody , orxBOOL _bAllowMoving )","title":"orxBODY:setAllowMoving"},{"location":"types/orxBODY.html#orxbodysetangulardamping","text":"Signature: r1 = setAngularDamping ( damping ) Description: Sets a body angular damping (non-const self only) Params: name type description damping number Angular damping to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetAngularDamping ( orxBODY * _pstBody , orxFLOAT _fDamping )","title":"orxBODY:setAngularDamping"},{"location":"types/orxBODY.html#orxbodysetangularvelocity","text":"Signature: r1 = setAngularVelocity ( velocity ) Description: Sets a body angular velocity (non-const self only) Params: name type description velocity number Angular velocity to set (radians/seconds) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetAngularVelocity ( orxBODY * _pstBody , orxFLOAT _fVelocity )","title":"orxBODY:setAngularVelocity"},{"location":"types/orxBODY.html#orxbodysetcustomgravity","text":"Signature: r1 = setCustomGravity ( customgravity ) Description: Sets a body custom gravity (non-const self only) Params: name type description customgravity orxVECTOR# Custom gravity to set / nil to remove it Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetCustomGravity ( orxBODY * _pstBody , const orxVECTOR * _pvCustomGravity )","title":"orxBODY:setCustomGravity"},{"location":"types/orxBODY.html#orxbodysetdynamic","text":"Signature: r1 = setDynamic ( dynamic ) Description: Sets the dynamic property of a body (non-const self only) Params: name type description dynamic boolean Dynamic / Static (or Kinematic depending on the \"allow moving\" property) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetDynamic ( orxBODY * _pstBody , orxBOOL _bDynamic )","title":"orxBODY:setDynamic"},{"location":"types/orxBODY.html#orxbodysetfixedrotation","text":"Signature: r1 = setFixedRotation ( fixed ) Description: Sets a body fixed rotation (non-const self only) Params: name type description fixed boolean Fixed / not fixed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetFixedRotation ( orxBODY * _pstBody , orxBOOL _bFixed )","title":"orxBODY:setFixedRotation"},{"location":"types/orxBODY.html#orxbodysetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxBODY:setFlags"},{"location":"types/orxBODY.html#orxbodysetlineardamping","text":"Signature: r1 = setLinearDamping ( damping ) Description: Sets a body linear damping (non-const self only) Params: name type description damping number Linear damping to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetLinearDamping ( orxBODY * _pstBody , orxFLOAT _fDamping )","title":"orxBODY:setLinearDamping"},{"location":"types/orxBODY.html#orxbodysetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxBODY:setOwner"},{"location":"types/orxBODY.html#orxbodysetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxBODY:setParent"},{"location":"types/orxBODY.html#orxbodysetposition","text":"Signature: r1 = setPosition ( position ) Description: Sets a body position (non-const self only) Params: name type description position orxVECTOR# Position to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPosition ( orxBODY * _pstBody , const orxVECTOR * _pvPosition )","title":"orxBODY:setPosition"},{"location":"types/orxBODY.html#orxbodysetrotation","text":"Signature: r1 = setRotation ( rotation ) Description: Sets a body rotation (non-const self only) Params: name type description rotation number Rotation to set (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetRotation ( orxBODY * _pstBody , orxFLOAT _fRotation )","title":"orxBODY:setRotation"},{"location":"types/orxBODY.html#orxbodysetscale","text":"Signature: r1 = setScale ( scale ) Description: Sets a body scale (non-const self only) Params: name type description scale orxVECTOR# Scale to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetScale ( orxBODY * _pstBody , const orxVECTOR * _pvScale )","title":"orxBODY:setScale"},{"location":"types/orxBODY.html#orxbodysetspeed","text":"Signature: r1 = setSpeed ( speed ) Description: Sets a body speed (non-const self only) Params: name type description speed orxVECTOR# Speed to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetSpeed ( orxBODY * _pstBody , const orxVECTOR * _pvSpeed )","title":"orxBODY:setSpeed"},{"location":"types/orxBODY.html#orxbodytestalldefflags","text":"Signature: r1 = testAllDefFlags ( flags ) Description: Tests all flags against body definition ones Params: name type description flags integer Flags to test Returns: type description boolean true / false C signature: orxBOOL orxBody_TestAllDefFlags ( const orxBODY * _pstBody , orxU32 _u32Flags )","title":"orxBODY:testAllDefFlags"},{"location":"types/orxBODY.html#orxbodytestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxBODY:testAllFlags"},{"location":"types/orxBODY.html#orxbodytestdefflags","text":"Signature: r1 = testDefFlags ( flags ) Description: Tests flags against body definition ones Params: name type description flags integer Flags to test Returns: type description boolean true / false C signature: orxBOOL orxBody_TestDefFlags ( const orxBODY * _pstBody , orxU32 _u32Flags )","title":"orxBODY:testDefFlags"},{"location":"types/orxBODY.html#orxbodytestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxBODY:testFlags"},{"location":"types/orxBODY.html#orxbodytype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxBODY:type"},{"location":"types/orxBODY.html#orxbodyupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxBODY:update"},{"location":"types/orxBODY_JOINT.html","text":"type orxBODY_JOINT # Methods # orxBODY_JOINT:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxBODY_JOINT:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxBODY_JOINT:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxBODY_JOINT:enableMotor # Signature: r1 = enableMotor ( enable ) Description: Enables a (revolute) body joint motor (non-const self only) Params: name type description enable boolean Enable / Disable Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_EnableMotor ( orxBODY_JOINT * _pstBodyJoint , orxBOOL _bEnable ) orxBODY_JOINT:getName # Signature: r1 = getName () Description: Gets a body joint name Params: Returns: type description string string / nil C signature: const orxSTRING orxBody_GetJointName ( const orxBODY_JOINT * _pstBodyJoint ) orxBODY_JOINT:getReactionForce # Signature: r1 = getReactionForce () Description: Gets the reaction force on the attached body at the joint anchor Params: Returns: type description orxVECTOR Reaction force in Newtons C signature: orxVECTOR * orxBody_GetJointReactionForce ( const orxBODY_JOINT * _pstBodyJoint , orxVECTOR * _pvForce ) orxBODY_JOINT:getReactionTorque # Signature: r1 = getReactionTorque () Description: Gets the reaction torque on the attached body Params: Returns: type description number Reaction torque C signature: orxFLOAT orxBody_GetJointReactionTorque ( const orxBODY_JOINT * _pstBodyJoint ) orxBODY_JOINT:remove # Signature: r1 = remove () Description: Removes a body joint (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_RemoveJoint ( orxBODY_JOINT * _pstBodyJoint ) orxBODY_JOINT:setMaxMotorTorque # Signature: r1 = setMaxMotorTorque ( maxtorque ) Description: Sets a (revolute) body joint maximum motor torque (non-const self only) Params: name type description maxtorque number Maximum motor torque Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetJointMaxMotorTorque ( orxBODY_JOINT * _pstBodyJoint , orxFLOAT _fMaxTorque ) orxBODY_JOINT:setMotorSpeed # Signature: r1 = setMotorSpeed ( speed ) Description: Sets a (revolute) body joint motor speed (non-const self only) Params: name type description speed number Speed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetJointMotorSpeed ( orxBODY_JOINT * _pstBodyJoint , orxFLOAT _fSpeed ) orxBODY_JOINT:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxBODY_JOINT"},{"location":"types/orxBODY_JOINT.html#type-orxbody_joint","text":"","title":"type orxBODY_JOINT"},{"location":"types/orxBODY_JOINT.html#methods","text":"","title":"Methods"},{"location":"types/orxBODY_JOINT.html#orxbody_jointaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxBODY_JOINT:addr"},{"location":"types/orxBODY_JOINT.html#orxbody_jointaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxBODY_JOINT:aeq"},{"location":"types/orxBODY_JOINT.html#orxbody_jointasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxBODY_JOINT:asVoid"},{"location":"types/orxBODY_JOINT.html#orxbody_jointenablemotor","text":"Signature: r1 = enableMotor ( enable ) Description: Enables a (revolute) body joint motor (non-const self only) Params: name type description enable boolean Enable / Disable Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_EnableMotor ( orxBODY_JOINT * _pstBodyJoint , orxBOOL _bEnable )","title":"orxBODY_JOINT:enableMotor"},{"location":"types/orxBODY_JOINT.html#orxbody_jointgetname","text":"Signature: r1 = getName () Description: Gets a body joint name Params: Returns: type description string string / nil C signature: const orxSTRING orxBody_GetJointName ( const orxBODY_JOINT * _pstBodyJoint )","title":"orxBODY_JOINT:getName"},{"location":"types/orxBODY_JOINT.html#orxbody_jointgetreactionforce","text":"Signature: r1 = getReactionForce () Description: Gets the reaction force on the attached body at the joint anchor Params: Returns: type description orxVECTOR Reaction force in Newtons C signature: orxVECTOR * orxBody_GetJointReactionForce ( const orxBODY_JOINT * _pstBodyJoint , orxVECTOR * _pvForce )","title":"orxBODY_JOINT:getReactionForce"},{"location":"types/orxBODY_JOINT.html#orxbody_jointgetreactiontorque","text":"Signature: r1 = getReactionTorque () Description: Gets the reaction torque on the attached body Params: Returns: type description number Reaction torque C signature: orxFLOAT orxBody_GetJointReactionTorque ( const orxBODY_JOINT * _pstBodyJoint )","title":"orxBODY_JOINT:getReactionTorque"},{"location":"types/orxBODY_JOINT.html#orxbody_jointremove","text":"Signature: r1 = remove () Description: Removes a body joint (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_RemoveJoint ( orxBODY_JOINT * _pstBodyJoint )","title":"orxBODY_JOINT:remove"},{"location":"types/orxBODY_JOINT.html#orxbody_jointsetmaxmotortorque","text":"Signature: r1 = setMaxMotorTorque ( maxtorque ) Description: Sets a (revolute) body joint maximum motor torque (non-const self only) Params: name type description maxtorque number Maximum motor torque Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetJointMaxMotorTorque ( orxBODY_JOINT * _pstBodyJoint , orxFLOAT _fMaxTorque )","title":"orxBODY_JOINT:setMaxMotorTorque"},{"location":"types/orxBODY_JOINT.html#orxbody_jointsetmotorspeed","text":"Signature: r1 = setMotorSpeed ( speed ) Description: Sets a (revolute) body joint motor speed (non-const self only) Params: name type description speed number Speed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetJointMotorSpeed ( orxBODY_JOINT * _pstBodyJoint , orxFLOAT _fSpeed )","title":"orxBODY_JOINT:setMotorSpeed"},{"location":"types/orxBODY_JOINT.html#orxbody_jointtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxBODY_JOINT:type"},{"location":"types/orxBODY_PART.html","text":"type orxBODY_PART # Methods # orxBODY_PART:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxBODY_PART:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxBODY_PART:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxBODY_PART:getBody # Signature: r1 = getBody () Description: Gets a body part body (ie. owner) Params: Returns: type description orxBODY orxBODY / nil C signature: orxBODY * orxBody_GetPartBody ( const orxBODY_PART * _pstBodyPart ) orxBODY_PART:getCheckMask # Signature: r1 = getCheckMask () Description: Gets check mask of a body part Params: Returns: type description integer Check mask of the body part C signature: orxU16 orxBody_GetPartCheckMask ( const orxBODY_PART * _pstBodyPart ) orxBODY_PART:getDensity # Signature: r1 = getDensity () Description: Gets density of a body part Params: Returns: type description number Density C signature: orxFLOAT orxBody_GetPartDensity ( const orxBODY_PART * _pstBodyPart ) orxBODY_PART:getFriction # Signature: r1 = getFriction () Description: Gets friction of a body part Params: Returns: type description number Friction C signature: orxFLOAT orxBody_GetPartFriction ( const orxBODY_PART * _pstBodyPart ) orxBODY_PART:getName # Signature: r1 = getName () Description: Gets a body part name Params: Returns: type description string string / nil C signature: const orxSTRING orxBody_GetPartName ( const orxBODY_PART * _pstBodyPart ) orxBODY_PART:getRestitution # Signature: r1 = getRestitution () Description: Gets restitution of a body part Params: Returns: type description number Restitution C signature: orxFLOAT orxBody_GetPartRestitution ( const orxBODY_PART * _pstBodyPart ) orxBODY_PART:getSelfFlags # Signature: r1 = getSelfFlags () Description: Gets self flags of a body part Params: Returns: type description integer Self flags of the body part C signature: orxU16 orxBody_GetPartSelfFlags ( const orxBODY_PART * _pstBodyPart ) orxBODY_PART:isInside # Signature: r1 = isInside ( position ) Description: Is point inside part? (Using world coordinates) Params: name type description position orxVECTOR# Position to test (world coordinates) Returns: type description boolean true / false C signature: orxBOOL orxBody_IsInsidePart ( const orxBODY_PART * _pstBodyPart , const orxVECTOR * _pvPosition ) orxBODY_PART:isSolid # Signature: r1 = isSolid () Description: Is a body part solid? Params: Returns: type description boolean true / false C signature: orxBOOL orxBody_IsPartSolid ( const orxBODY_PART * _pstBodyPart ) orxBODY_PART:remove # Signature: r1 = remove () Description: Removes a body part (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_RemovePart ( orxBODY_PART * _pstBodyPart ) orxBODY_PART:setCheckMask # Signature: r1 = setCheckMask ( checkmask ) Description: Sets check mask of a body part (non-const self only) Params: name type description checkmask integer Check mask to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartCheckMask ( orxBODY_PART * _pstBodyPart , orxU16 _u16CheckMask ) orxBODY_PART:setDensity # Signature: r1 = setDensity ( density ) Description: Sets density of a body part (non-const self only) Params: name type description density number Density Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartDensity ( orxBODY_PART * _pstBodyPart , orxFLOAT _fDensity ) orxBODY_PART:setFriction # Signature: r1 = setFriction ( friction ) Description: Sets friction of a body part (non-const self only) Params: name type description friction number Friction Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartFriction ( orxBODY_PART * _pstBodyPart , orxFLOAT _fFriction ) orxBODY_PART:setRestitution # Signature: r1 = setRestitution ( restitution ) Description: Sets restitution of a body part (non-const self only) Params: name type description restitution number Restitution Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartRestitution ( orxBODY_PART * _pstBodyPart , orxFLOAT _fRestitution ) orxBODY_PART:setSelfFlags # Signature: r1 = setSelfFlags ( selfflags ) Description: Sets self flags of a body part (non-const self only) Params: name type description selfflags integer Self flags to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartSelfFlags ( orxBODY_PART * _pstBodyPart , orxU16 _u16SelfFlags ) orxBODY_PART:setSolid # Signature: r1 = setSolid ( solid ) Description: Sets a body part solid (non-const self only) Params: name type description solid boolean Solid or sensor? Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartSolid ( orxBODY_PART * _pstBodyPart , orxBOOL _bSolid ) orxBODY_PART:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxBODY_PART"},{"location":"types/orxBODY_PART.html#type-orxbody_part","text":"","title":"type orxBODY_PART"},{"location":"types/orxBODY_PART.html#methods","text":"","title":"Methods"},{"location":"types/orxBODY_PART.html#orxbody_partaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxBODY_PART:addr"},{"location":"types/orxBODY_PART.html#orxbody_partaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxBODY_PART:aeq"},{"location":"types/orxBODY_PART.html#orxbody_partasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxBODY_PART:asVoid"},{"location":"types/orxBODY_PART.html#orxbody_partgetbody","text":"Signature: r1 = getBody () Description: Gets a body part body (ie. owner) Params: Returns: type description orxBODY orxBODY / nil C signature: orxBODY * orxBody_GetPartBody ( const orxBODY_PART * _pstBodyPart )","title":"orxBODY_PART:getBody"},{"location":"types/orxBODY_PART.html#orxbody_partgetcheckmask","text":"Signature: r1 = getCheckMask () Description: Gets check mask of a body part Params: Returns: type description integer Check mask of the body part C signature: orxU16 orxBody_GetPartCheckMask ( const orxBODY_PART * _pstBodyPart )","title":"orxBODY_PART:getCheckMask"},{"location":"types/orxBODY_PART.html#orxbody_partgetdensity","text":"Signature: r1 = getDensity () Description: Gets density of a body part Params: Returns: type description number Density C signature: orxFLOAT orxBody_GetPartDensity ( const orxBODY_PART * _pstBodyPart )","title":"orxBODY_PART:getDensity"},{"location":"types/orxBODY_PART.html#orxbody_partgetfriction","text":"Signature: r1 = getFriction () Description: Gets friction of a body part Params: Returns: type description number Friction C signature: orxFLOAT orxBody_GetPartFriction ( const orxBODY_PART * _pstBodyPart )","title":"orxBODY_PART:getFriction"},{"location":"types/orxBODY_PART.html#orxbody_partgetname","text":"Signature: r1 = getName () Description: Gets a body part name Params: Returns: type description string string / nil C signature: const orxSTRING orxBody_GetPartName ( const orxBODY_PART * _pstBodyPart )","title":"orxBODY_PART:getName"},{"location":"types/orxBODY_PART.html#orxbody_partgetrestitution","text":"Signature: r1 = getRestitution () Description: Gets restitution of a body part Params: Returns: type description number Restitution C signature: orxFLOAT orxBody_GetPartRestitution ( const orxBODY_PART * _pstBodyPart )","title":"orxBODY_PART:getRestitution"},{"location":"types/orxBODY_PART.html#orxbody_partgetselfflags","text":"Signature: r1 = getSelfFlags () Description: Gets self flags of a body part Params: Returns: type description integer Self flags of the body part C signature: orxU16 orxBody_GetPartSelfFlags ( const orxBODY_PART * _pstBodyPart )","title":"orxBODY_PART:getSelfFlags"},{"location":"types/orxBODY_PART.html#orxbody_partisinside","text":"Signature: r1 = isInside ( position ) Description: Is point inside part? (Using world coordinates) Params: name type description position orxVECTOR# Position to test (world coordinates) Returns: type description boolean true / false C signature: orxBOOL orxBody_IsInsidePart ( const orxBODY_PART * _pstBodyPart , const orxVECTOR * _pvPosition )","title":"orxBODY_PART:isInside"},{"location":"types/orxBODY_PART.html#orxbody_partissolid","text":"Signature: r1 = isSolid () Description: Is a body part solid? Params: Returns: type description boolean true / false C signature: orxBOOL orxBody_IsPartSolid ( const orxBODY_PART * _pstBodyPart )","title":"orxBODY_PART:isSolid"},{"location":"types/orxBODY_PART.html#orxbody_partremove","text":"Signature: r1 = remove () Description: Removes a body part (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_RemovePart ( orxBODY_PART * _pstBodyPart )","title":"orxBODY_PART:remove"},{"location":"types/orxBODY_PART.html#orxbody_partsetcheckmask","text":"Signature: r1 = setCheckMask ( checkmask ) Description: Sets check mask of a body part (non-const self only) Params: name type description checkmask integer Check mask to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartCheckMask ( orxBODY_PART * _pstBodyPart , orxU16 _u16CheckMask )","title":"orxBODY_PART:setCheckMask"},{"location":"types/orxBODY_PART.html#orxbody_partsetdensity","text":"Signature: r1 = setDensity ( density ) Description: Sets density of a body part (non-const self only) Params: name type description density number Density Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartDensity ( orxBODY_PART * _pstBodyPart , orxFLOAT _fDensity )","title":"orxBODY_PART:setDensity"},{"location":"types/orxBODY_PART.html#orxbody_partsetfriction","text":"Signature: r1 = setFriction ( friction ) Description: Sets friction of a body part (non-const self only) Params: name type description friction number Friction Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartFriction ( orxBODY_PART * _pstBodyPart , orxFLOAT _fFriction )","title":"orxBODY_PART:setFriction"},{"location":"types/orxBODY_PART.html#orxbody_partsetrestitution","text":"Signature: r1 = setRestitution ( restitution ) Description: Sets restitution of a body part (non-const self only) Params: name type description restitution number Restitution Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartRestitution ( orxBODY_PART * _pstBodyPart , orxFLOAT _fRestitution )","title":"orxBODY_PART:setRestitution"},{"location":"types/orxBODY_PART.html#orxbody_partsetselfflags","text":"Signature: r1 = setSelfFlags ( selfflags ) Description: Sets self flags of a body part (non-const self only) Params: name type description selfflags integer Self flags to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartSelfFlags ( orxBODY_PART * _pstBodyPart , orxU16 _u16SelfFlags )","title":"orxBODY_PART:setSelfFlags"},{"location":"types/orxBODY_PART.html#orxbody_partsetsolid","text":"Signature: r1 = setSolid ( solid ) Description: Sets a body part solid (non-const self only) Params: name type description solid boolean Solid or sensor? Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxBody_SetPartSolid ( orxBODY_PART * _pstBodyPart , orxBOOL _bSolid )","title":"orxBODY_PART:setSolid"},{"location":"types/orxBODY_PART.html#orxbody_parttype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxBODY_PART:type"},{"location":"types/orxCAMERA.html","text":"type orxCAMERA # Methods # orxCAMERA:addGroupID # Signature: r1 = addGroupID ( groupid , addfirst ) Description: Adds a group ID to a camera (non-const self only) Params: name type description groupid integer ID of the group to add addfirst boolean If true this group will be used before any already added ones, otherwise it'll be used after all of them Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_AddGroupID ( orxCAMERA * _pstCamera , orxSTRINGID _stGroupID , orxBOOL _bAddFirst ) orxCAMERA:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxCAMERA:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxCAMERA:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxCAMERA:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxCAMERA:delete # Signature: r1 = delete () Description: Deletes a camera (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_Delete ( orxCAMERA * _pstCamera ) orxCAMERA:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxCAMERA:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxCAMERA:getFrame # Signature: r1 = getFrame () Description: Gets camera frame Params: Returns: type description orxFRAME orxFRAME C signature: orxFRAME * orxCamera_GetFrame ( const orxCAMERA * _pstCamera ) orxCAMERA:getFrustum # Signature: r1 = getFrustum () Description: Gets camera frustum (3D box for 2D camera) Params: Returns: type description orxAABOX Frustum orxAABOX C signature: orxAABOX * orxCamera_GetFrustum ( const orxCAMERA * _pstCamera , orxAABOX * _pstFrustum ) orxCAMERA:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxCAMERA:getGroupID # Signature: r1 = getGroupID ( index ) Description: Gets the group ID of a camera at the given index Params: name type description index integer Index of group ID Returns: type description integer Group ID if index is valid, orxSTRINGID_UNDEFINED otherwise C signature: orxSTRINGID orxCamera_GetGroupID ( const orxCAMERA * _pstCamera , orxU32 _u32Index ) orxCAMERA:getGroupIDCount # Signature: r1 = getGroupIDCount () Description: Gets number of group IDs of camera Params: Returns: type description integer Number of group IDs of this camera C signature: orxU32 orxCamera_GetGroupIDCount ( const orxCAMERA * _pstCamera ) orxCAMERA:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxCAMERA:getName # Signature: r1 = getName () Description: Gets camera config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxCamera_GetName ( const orxCAMERA * _pstCamera ) orxCAMERA:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxCAMERA:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxCAMERA:getParent # Signature: r1 = getParent () Description: Gets camera parent Params: Returns: type description orxSTRUCTURE Parent (object, spawner, camera or frame) / nil C signature: orxSTRUCTURE * orxCamera_GetParent ( const orxCAMERA * _pstCamera ) orxCAMERA:getPosition # Signature: r1 = getPosition () Description: Get camera position Params: Returns: type description orxVECTOR orxVECTOR C signature: orxVECTOR * orxCamera_GetPosition ( const orxCAMERA * _pstCamera , orxVECTOR * _pvPosition ) orxCAMERA:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxCAMERA:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxCAMERA:getRotation # Signature: r1 = getRotation () Description: Get camera rotation Params: Returns: type description number Rotation value (radians) C signature: orxFLOAT orxCamera_GetRotation ( const orxCAMERA * _pstCamera ) orxCAMERA:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxCAMERA:getZoom # Signature: r1 = getZoom () Description: Get camera zoom Params: Returns: type description number Zoom value C signature: orxFLOAT orxCamera_GetZoom ( const orxCAMERA * _pstCamera ) orxCAMERA:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxCAMERA:removeGroupID # Signature: r1 = removeGroupID ( groupid ) Description: Removes a group ID from a camera (non-const self only) Params: name type description groupid integer ID of the group to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_RemoveGroupID ( orxCAMERA * _pstCamera , orxSTRINGID _stGroupID ) orxCAMERA:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxCAMERA:setFrustum # Signature: r1 = setFrustum ( width , height , near , far ) Description: Sets camera frustum (non-const self only) Params: name type description width number Width of frustum height number Height of frustum near number Near distance of frustum far number Far distance of frustum Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_SetFrustum ( orxCAMERA * _pstCamera , orxFLOAT _fWidth , orxFLOAT _fHeight , orxFLOAT _fNear , orxFLOAT _fFar ) orxCAMERA:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxCAMERA:setParent # Signature: r1 = setParent ( parent ) Description: Sets camera parent (non-const self only) Params: name type description parent void* Parent structure to set (object, spawner, camera or frame) / nil Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxCamera_SetParent ( orxCAMERA * _pstCamera , void * _pParent ) orxCAMERA:setPosition # Signature: r1 = setPosition ( position ) Description: Sets camera position (non-const self only) Params: name type description position orxVECTOR# Camera position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_SetPosition ( orxCAMERA * _pstCamera , const orxVECTOR * _pvPosition ) orxCAMERA:setRotation # Signature: r1 = setRotation ( rotation ) Description: Sets camera rotation (non-const self only) Params: name type description rotation number Camera rotation (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_SetRotation ( orxCAMERA * _pstCamera , orxFLOAT _fRotation ) orxCAMERA:setZoom # Signature: r1 = setZoom ( zoom ) Description: Sets camera zoom (non-const self only) Params: name type description zoom number Camera zoom Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_SetZoom ( orxCAMERA * _pstCamera , orxFLOAT _fZoom ) orxCAMERA:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxCAMERA:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxCAMERA:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxCAMERA:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxCAMERA"},{"location":"types/orxCAMERA.html#type-orxcamera","text":"","title":"type orxCAMERA"},{"location":"types/orxCAMERA.html#methods","text":"","title":"Methods"},{"location":"types/orxCAMERA.html#orxcameraaddgroupid","text":"Signature: r1 = addGroupID ( groupid , addfirst ) Description: Adds a group ID to a camera (non-const self only) Params: name type description groupid integer ID of the group to add addfirst boolean If true this group will be used before any already added ones, otherwise it'll be used after all of them Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_AddGroupID ( orxCAMERA * _pstCamera , orxSTRINGID _stGroupID , orxBOOL _bAddFirst )","title":"orxCAMERA:addGroupID"},{"location":"types/orxCAMERA.html#orxcameraaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxCAMERA:addr"},{"location":"types/orxCAMERA.html#orxcameraaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxCAMERA:aeq"},{"location":"types/orxCAMERA.html#orxcameraasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxCAMERA:asVoid"},{"location":"types/orxCAMERA.html#orxcameradecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxCAMERA:decreaseCount"},{"location":"types/orxCAMERA.html#orxcameradelete","text":"Signature: r1 = delete () Description: Deletes a camera (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_Delete ( orxCAMERA * _pstCamera )","title":"orxCAMERA:delete"},{"location":"types/orxCAMERA.html#orxcameragetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxCAMERA:getChild"},{"location":"types/orxCAMERA.html#orxcameragetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxCAMERA:getFlags"},{"location":"types/orxCAMERA.html#orxcameragetframe","text":"Signature: r1 = getFrame () Description: Gets camera frame Params: Returns: type description orxFRAME orxFRAME C signature: orxFRAME * orxCamera_GetFrame ( const orxCAMERA * _pstCamera )","title":"orxCAMERA:getFrame"},{"location":"types/orxCAMERA.html#orxcameragetfrustum","text":"Signature: r1 = getFrustum () Description: Gets camera frustum (3D box for 2D camera) Params: Returns: type description orxAABOX Frustum orxAABOX C signature: orxAABOX * orxCamera_GetFrustum ( const orxCAMERA * _pstCamera , orxAABOX * _pstFrustum )","title":"orxCAMERA:getFrustum"},{"location":"types/orxCAMERA.html#orxcameragetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxCAMERA:getGUID"},{"location":"types/orxCAMERA.html#orxcameragetgroupid","text":"Signature: r1 = getGroupID ( index ) Description: Gets the group ID of a camera at the given index Params: name type description index integer Index of group ID Returns: type description integer Group ID if index is valid, orxSTRINGID_UNDEFINED otherwise C signature: orxSTRINGID orxCamera_GetGroupID ( const orxCAMERA * _pstCamera , orxU32 _u32Index )","title":"orxCAMERA:getGroupID"},{"location":"types/orxCAMERA.html#orxcameragetgroupidcount","text":"Signature: r1 = getGroupIDCount () Description: Gets number of group IDs of camera Params: Returns: type description integer Number of group IDs of this camera C signature: orxU32 orxCamera_GetGroupIDCount ( const orxCAMERA * _pstCamera )","title":"orxCAMERA:getGroupIDCount"},{"location":"types/orxCAMERA.html#orxcameragetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxCAMERA:getID"},{"location":"types/orxCAMERA.html#orxcameragetname","text":"Signature: r1 = getName () Description: Gets camera config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxCamera_GetName ( const orxCAMERA * _pstCamera )","title":"orxCAMERA:getName"},{"location":"types/orxCAMERA.html#orxcameragetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxCAMERA:getNext"},{"location":"types/orxCAMERA.html#orxcameragetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxCAMERA:getOwner"},{"location":"types/orxCAMERA.html#orxcameragetparent","text":"Signature: r1 = getParent () Description: Gets camera parent Params: Returns: type description orxSTRUCTURE Parent (object, spawner, camera or frame) / nil C signature: orxSTRUCTURE * orxCamera_GetParent ( const orxCAMERA * _pstCamera )","title":"orxCAMERA:getParent"},{"location":"types/orxCAMERA.html#orxcameragetposition","text":"Signature: r1 = getPosition () Description: Get camera position Params: Returns: type description orxVECTOR orxVECTOR C signature: orxVECTOR * orxCamera_GetPosition ( const orxCAMERA * _pstCamera , orxVECTOR * _pvPosition )","title":"orxCAMERA:getPosition"},{"location":"types/orxCAMERA.html#orxcameragetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxCAMERA:getPrevious"},{"location":"types/orxCAMERA.html#orxcameragetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxCAMERA:getRefCount"},{"location":"types/orxCAMERA.html#orxcameragetrotation","text":"Signature: r1 = getRotation () Description: Get camera rotation Params: Returns: type description number Rotation value (radians) C signature: orxFLOAT orxCamera_GetRotation ( const orxCAMERA * _pstCamera )","title":"orxCAMERA:getRotation"},{"location":"types/orxCAMERA.html#orxcameragetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxCAMERA:getSibling"},{"location":"types/orxCAMERA.html#orxcameragetzoom","text":"Signature: r1 = getZoom () Description: Get camera zoom Params: Returns: type description number Zoom value C signature: orxFLOAT orxCamera_GetZoom ( const orxCAMERA * _pstCamera )","title":"orxCAMERA:getZoom"},{"location":"types/orxCAMERA.html#orxcameraincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxCAMERA:increaseCount"},{"location":"types/orxCAMERA.html#orxcameraremovegroupid","text":"Signature: r1 = removeGroupID ( groupid ) Description: Removes a group ID from a camera (non-const self only) Params: name type description groupid integer ID of the group to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_RemoveGroupID ( orxCAMERA * _pstCamera , orxSTRINGID _stGroupID )","title":"orxCAMERA:removeGroupID"},{"location":"types/orxCAMERA.html#orxcamerasetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxCAMERA:setFlags"},{"location":"types/orxCAMERA.html#orxcamerasetfrustum","text":"Signature: r1 = setFrustum ( width , height , near , far ) Description: Sets camera frustum (non-const self only) Params: name type description width number Width of frustum height number Height of frustum near number Near distance of frustum far number Far distance of frustum Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_SetFrustum ( orxCAMERA * _pstCamera , orxFLOAT _fWidth , orxFLOAT _fHeight , orxFLOAT _fNear , orxFLOAT _fFar )","title":"orxCAMERA:setFrustum"},{"location":"types/orxCAMERA.html#orxcamerasetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxCAMERA:setOwner"},{"location":"types/orxCAMERA.html#orxcamerasetparent","text":"Signature: r1 = setParent ( parent ) Description: Sets camera parent (non-const self only) Params: name type description parent void* Parent structure to set (object, spawner, camera or frame) / nil Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxCamera_SetParent ( orxCAMERA * _pstCamera , void * _pParent )","title":"orxCAMERA:setParent"},{"location":"types/orxCAMERA.html#orxcamerasetposition","text":"Signature: r1 = setPosition ( position ) Description: Sets camera position (non-const self only) Params: name type description position orxVECTOR# Camera position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_SetPosition ( orxCAMERA * _pstCamera , const orxVECTOR * _pvPosition )","title":"orxCAMERA:setPosition"},{"location":"types/orxCAMERA.html#orxcamerasetrotation","text":"Signature: r1 = setRotation ( rotation ) Description: Sets camera rotation (non-const self only) Params: name type description rotation number Camera rotation (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_SetRotation ( orxCAMERA * _pstCamera , orxFLOAT _fRotation )","title":"orxCAMERA:setRotation"},{"location":"types/orxCAMERA.html#orxcamerasetzoom","text":"Signature: r1 = setZoom ( zoom ) Description: Sets camera zoom (non-const self only) Params: name type description zoom number Camera zoom Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxCamera_SetZoom ( orxCAMERA * _pstCamera , orxFLOAT _fZoom )","title":"orxCAMERA:setZoom"},{"location":"types/orxCAMERA.html#orxcameratestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxCAMERA:testAllFlags"},{"location":"types/orxCAMERA.html#orxcameratestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxCAMERA:testFlags"},{"location":"types/orxCAMERA.html#orxcameratype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCAMERA:type"},{"location":"types/orxCAMERA.html#orxcameraupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxCAMERA:update"},{"location":"types/orxCHARACTER_GLYPH.html","text":"type orxCHARACTER_GLYPH # constructors: lorx.display.characterGlyph Properties # name type x number y number width number Methods # orxCHARACTER_GLYPH:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxCHARACTER_GLYPH:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxCHARACTER_GLYPH:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxCHARACTER_GLYPH:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCHARACTER_GLYPH"},{"location":"types/orxCHARACTER_GLYPH.html#type-orxcharacter_glyph","text":"constructors: lorx.display.characterGlyph","title":"type orxCHARACTER_GLYPH"},{"location":"types/orxCHARACTER_GLYPH.html#properties","text":"name type x number y number width number","title":"Properties"},{"location":"types/orxCHARACTER_GLYPH.html#methods","text":"","title":"Methods"},{"location":"types/orxCHARACTER_GLYPH.html#orxcharacter_glyphaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxCHARACTER_GLYPH:addr"},{"location":"types/orxCHARACTER_GLYPH.html#orxcharacter_glyphaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxCHARACTER_GLYPH:aeq"},{"location":"types/orxCHARACTER_GLYPH.html#orxcharacter_glyphasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxCHARACTER_GLYPH:asVoid"},{"location":"types/orxCHARACTER_GLYPH.html#orxcharacter_glyphtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCHARACTER_GLYPH:type"},{"location":"types/orxCHARACTER_MAP.html","text":"type orxCHARACTER_MAP # Properties # name type characterheight number Methods # orxCHARACTER_MAP:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxCHARACTER_MAP:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxCHARACTER_MAP:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxCHARACTER_MAP:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCHARACTER_MAP"},{"location":"types/orxCHARACTER_MAP.html#type-orxcharacter_map","text":"","title":"type orxCHARACTER_MAP"},{"location":"types/orxCHARACTER_MAP.html#properties","text":"name type characterheight number","title":"Properties"},{"location":"types/orxCHARACTER_MAP.html#methods","text":"","title":"Methods"},{"location":"types/orxCHARACTER_MAP.html#orxcharacter_mapaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxCHARACTER_MAP:addr"},{"location":"types/orxCHARACTER_MAP.html#orxcharacter_mapaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxCHARACTER_MAP:aeq"},{"location":"types/orxCHARACTER_MAP.html#orxcharacter_mapasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxCHARACTER_MAP:asVoid"},{"location":"types/orxCHARACTER_MAP.html#orxcharacter_maptype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCHARACTER_MAP:type"},{"location":"types/orxCLOCK.html","text":"type orxCLOCK # Methods # orxCLOCK:addTimer # Signature: r1 = addTimer ( func , delay , repetition ) Description: Adds a timer function to a clock Params: name type description func lorxCLOCK_CALLBACK Callback to register delay number Timer's delay between 2 calls, must be strictly positive repetition integer Number of times this timer should be called before removed, -1 for infinite Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_AddTimer ( orxCLOCK * _pstClock , const orxCLOCK_FUNCTION _pfnCallback , orxFLOAT _fDelay , orxS32 _s32Repetition , void * _pContext ) orxCLOCK:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxCLOCK:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxCLOCK:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxCLOCK:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxCLOCK:delete # Signature: r1 = delete () Description: Deletes a clock (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Delete ( orxCLOCK * _pstClock ) orxCLOCK:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxCLOCK:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxCLOCK:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxCLOCK:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxCLOCK:getInfo # Signature: r1 = getInfo () Description: Gets clock info Params: Returns: type description orxCLOCK_INFO# orxCLOCK_INFO / nil C signature: const orxCLOCK_INFO * orxClock_GetInfo ( const orxCLOCK * _pstClock ) orxCLOCK:getModifier # Signature: r1 = getModifier ( modifier ) Description: Gets a clock's modifier (non-const self only) Params: name type description modifier orxCLOCK_MODIFIER Concerned modifier Returns: type description number Modifier value / orxFLOAT_0 if deactivated C signature: orxFLOAT orxClock_GetModifier ( orxCLOCK * _pstClock , orxCLOCK_MODIFIER _eModifier ) orxCLOCK:getName # Signature: r1 = getName () Description: Gets clock config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxClock_GetName ( const orxCLOCK * _pstClock ) orxCLOCK:getNext # Signature: r1 = getNext () Description: Gets next existing clock in list (can be used to parse all existing clocks) Params: Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_GetNext ( const orxCLOCK * _pstClock ) orxCLOCK:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxCLOCK:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxCLOCK:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxCLOCK:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxCLOCK:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxCLOCK:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxCLOCK:isPaused # Signature: r1 = isPaused () Description: Is a clock paused? Params: Returns: type description boolean true if paused, false otherwise C signature: orxBOOL orxClock_IsPaused ( const orxCLOCK * _pstClock ) orxCLOCK:pause # Signature: r1 = pause () Description: Pauses a clock (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Pause ( orxCLOCK * _pstClock ) orxCLOCK:register # Signature: r1 = register ( func , moduleid , priority ) Description: Registers a callback function to a clock (the previous one will be discarded) Params: name type description func lorxCLOCK_CALLBACK Callback to register moduleid orxMODULE_ID ID of the module related to this callback priority orxCLOCK_PRIORITY Priority for the function Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Register ( orxCLOCK * _pstClock , const orxCLOCK_FUNCTION _pfnCallback , void * _pContext , orxMODULE_ID _eModuleID , orxCLOCK_PRIORITY _ePriority ) orxCLOCK:removeTimer # Signature: r1 = removeTimer ( func , delay ) Description: Removes a timer function from a clock Params: name type description func lorxCLOCK_CALLBACK Callback to register delay number Timer's delay between 2 calls, must be strictly positive Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_RemoveTimer ( orxCLOCK * _pstClock , const orxCLOCK_FUNCTION _pfnCallback , orxFLOAT _fDelay , void * _pContext ) orxCLOCK:restart # Signature: r1 = restart () Description: Restarts a clock (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Restart ( orxCLOCK * _pstClock ) orxCLOCK:resync # Signature: r1 = resync () Description: Resyncs a clock (accumulated DT => 0) (non-const self only) Params: Returns: type description orxSTATUS C signature: orxSTATUS orxClock_Resync ( orxCLOCK * _pstClock ) orxCLOCK:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxCLOCK:setModifier # Signature: r1 = setModifier ( modifier , value ) Description: Sets a clock's modifier (non-const self only) Params: name type description modifier orxCLOCK_MODIFIER Concerned modifier value number Modifier value, orxFLOAT_0 to deactivate the modifier Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_SetModifier ( orxCLOCK * _pstClock , orxCLOCK_MODIFIER _eModifier , orxFLOAT _fValue ) orxCLOCK:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxCLOCK:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxCLOCK:setTickSize # Signature: r1 = setTickSize ( ticksize ) Description: Sets a clock tick size (non-const self only) Params: name type description ticksize number Tick size, -1 for 'display' Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_SetTickSize ( orxCLOCK * _pstClock , orxFLOAT _fTickSize ) orxCLOCK:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxCLOCK:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxCLOCK:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxCLOCK:unpause # Signature: r1 = unpause () Description: Unpauses a clock (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Unpause ( orxCLOCK * _pstClock ) orxCLOCK:unregister # Signature: r1 = unregister () Description: Unregisters the callback function of a clock Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Unregister ( orxCLOCK * _pstClock , const orxCLOCK_FUNCTION _pfnCallback ); orxCLOCK:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxCLOCK"},{"location":"types/orxCLOCK.html#type-orxclock","text":"","title":"type orxCLOCK"},{"location":"types/orxCLOCK.html#methods","text":"","title":"Methods"},{"location":"types/orxCLOCK.html#orxclockaddtimer","text":"Signature: r1 = addTimer ( func , delay , repetition ) Description: Adds a timer function to a clock Params: name type description func lorxCLOCK_CALLBACK Callback to register delay number Timer's delay between 2 calls, must be strictly positive repetition integer Number of times this timer should be called before removed, -1 for infinite Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_AddTimer ( orxCLOCK * _pstClock , const orxCLOCK_FUNCTION _pfnCallback , orxFLOAT _fDelay , orxS32 _s32Repetition , void * _pContext )","title":"orxCLOCK:addTimer"},{"location":"types/orxCLOCK.html#orxclockaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxCLOCK:addr"},{"location":"types/orxCLOCK.html#orxclockaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxCLOCK:aeq"},{"location":"types/orxCLOCK.html#orxclockasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxCLOCK:asVoid"},{"location":"types/orxCLOCK.html#orxclockdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxCLOCK:decreaseCount"},{"location":"types/orxCLOCK.html#orxclockdelete","text":"Signature: r1 = delete () Description: Deletes a clock (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Delete ( orxCLOCK * _pstClock )","title":"orxCLOCK:delete"},{"location":"types/orxCLOCK.html#orxclockgetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxCLOCK:getChild"},{"location":"types/orxCLOCK.html#orxclockgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxCLOCK:getFlags"},{"location":"types/orxCLOCK.html#orxclockgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxCLOCK:getGUID"},{"location":"types/orxCLOCK.html#orxclockgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxCLOCK:getID"},{"location":"types/orxCLOCK.html#orxclockgetinfo","text":"Signature: r1 = getInfo () Description: Gets clock info Params: Returns: type description orxCLOCK_INFO# orxCLOCK_INFO / nil C signature: const orxCLOCK_INFO * orxClock_GetInfo ( const orxCLOCK * _pstClock )","title":"orxCLOCK:getInfo"},{"location":"types/orxCLOCK.html#orxclockgetmodifier","text":"Signature: r1 = getModifier ( modifier ) Description: Gets a clock's modifier (non-const self only) Params: name type description modifier orxCLOCK_MODIFIER Concerned modifier Returns: type description number Modifier value / orxFLOAT_0 if deactivated C signature: orxFLOAT orxClock_GetModifier ( orxCLOCK * _pstClock , orxCLOCK_MODIFIER _eModifier )","title":"orxCLOCK:getModifier"},{"location":"types/orxCLOCK.html#orxclockgetname","text":"Signature: r1 = getName () Description: Gets clock config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxClock_GetName ( const orxCLOCK * _pstClock )","title":"orxCLOCK:getName"},{"location":"types/orxCLOCK.html#orxclockgetnext","text":"Signature: r1 = getNext () Description: Gets next existing clock in list (can be used to parse all existing clocks) Params: Returns: type description orxCLOCK orxCLOCK / nil C signature: orxCLOCK * orxClock_GetNext ( const orxCLOCK * _pstClock )","title":"orxCLOCK:getNext"},{"location":"types/orxCLOCK.html#orxclockgetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxCLOCK:getOwner"},{"location":"types/orxCLOCK.html#orxclockgetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxCLOCK:getParent"},{"location":"types/orxCLOCK.html#orxclockgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxCLOCK:getPrevious"},{"location":"types/orxCLOCK.html#orxclockgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxCLOCK:getRefCount"},{"location":"types/orxCLOCK.html#orxclockgetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxCLOCK:getSibling"},{"location":"types/orxCLOCK.html#orxclockincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxCLOCK:increaseCount"},{"location":"types/orxCLOCK.html#orxclockispaused","text":"Signature: r1 = isPaused () Description: Is a clock paused? Params: Returns: type description boolean true if paused, false otherwise C signature: orxBOOL orxClock_IsPaused ( const orxCLOCK * _pstClock )","title":"orxCLOCK:isPaused"},{"location":"types/orxCLOCK.html#orxclockpause","text":"Signature: r1 = pause () Description: Pauses a clock (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Pause ( orxCLOCK * _pstClock )","title":"orxCLOCK:pause"},{"location":"types/orxCLOCK.html#orxclockregister","text":"Signature: r1 = register ( func , moduleid , priority ) Description: Registers a callback function to a clock (the previous one will be discarded) Params: name type description func lorxCLOCK_CALLBACK Callback to register moduleid orxMODULE_ID ID of the module related to this callback priority orxCLOCK_PRIORITY Priority for the function Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Register ( orxCLOCK * _pstClock , const orxCLOCK_FUNCTION _pfnCallback , void * _pContext , orxMODULE_ID _eModuleID , orxCLOCK_PRIORITY _ePriority )","title":"orxCLOCK:register"},{"location":"types/orxCLOCK.html#orxclockremovetimer","text":"Signature: r1 = removeTimer ( func , delay ) Description: Removes a timer function from a clock Params: name type description func lorxCLOCK_CALLBACK Callback to register delay number Timer's delay between 2 calls, must be strictly positive Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_RemoveTimer ( orxCLOCK * _pstClock , const orxCLOCK_FUNCTION _pfnCallback , orxFLOAT _fDelay , void * _pContext )","title":"orxCLOCK:removeTimer"},{"location":"types/orxCLOCK.html#orxclockrestart","text":"Signature: r1 = restart () Description: Restarts a clock (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Restart ( orxCLOCK * _pstClock )","title":"orxCLOCK:restart"},{"location":"types/orxCLOCK.html#orxclockresync","text":"Signature: r1 = resync () Description: Resyncs a clock (accumulated DT => 0) (non-const self only) Params: Returns: type description orxSTATUS C signature: orxSTATUS orxClock_Resync ( orxCLOCK * _pstClock )","title":"orxCLOCK:resync"},{"location":"types/orxCLOCK.html#orxclocksetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxCLOCK:setFlags"},{"location":"types/orxCLOCK.html#orxclocksetmodifier","text":"Signature: r1 = setModifier ( modifier , value ) Description: Sets a clock's modifier (non-const self only) Params: name type description modifier orxCLOCK_MODIFIER Concerned modifier value number Modifier value, orxFLOAT_0 to deactivate the modifier Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_SetModifier ( orxCLOCK * _pstClock , orxCLOCK_MODIFIER _eModifier , orxFLOAT _fValue )","title":"orxCLOCK:setModifier"},{"location":"types/orxCLOCK.html#orxclocksetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxCLOCK:setOwner"},{"location":"types/orxCLOCK.html#orxclocksetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxCLOCK:setParent"},{"location":"types/orxCLOCK.html#orxclocksetticksize","text":"Signature: r1 = setTickSize ( ticksize ) Description: Sets a clock tick size (non-const self only) Params: name type description ticksize number Tick size, -1 for 'display' Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_SetTickSize ( orxCLOCK * _pstClock , orxFLOAT _fTickSize )","title":"orxCLOCK:setTickSize"},{"location":"types/orxCLOCK.html#orxclocktestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxCLOCK:testAllFlags"},{"location":"types/orxCLOCK.html#orxclocktestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxCLOCK:testFlags"},{"location":"types/orxCLOCK.html#orxclocktype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCLOCK:type"},{"location":"types/orxCLOCK.html#orxclockunpause","text":"Signature: r1 = unpause () Description: Unpauses a clock (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Unpause ( orxCLOCK * _pstClock )","title":"orxCLOCK:unpause"},{"location":"types/orxCLOCK.html#orxclockunregister","text":"Signature: r1 = unregister () Description: Unregisters the callback function of a clock Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxClock_Unregister ( orxCLOCK * _pstClock , const orxCLOCK_FUNCTION _pfnCallback );","title":"orxCLOCK:unregister"},{"location":"types/orxCLOCK.html#orxclockupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxCLOCK:update"},{"location":"types/orxCLOCK_INFO.html","text":"type orxCLOCK_INFO # Properties # name type ticksize number dt number time number modifierlistlist table of number Methods # orxCLOCK_INFO:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxCLOCK_INFO:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxCLOCK_INFO:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxCLOCK_INFO:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCLOCK_INFO"},{"location":"types/orxCLOCK_INFO.html#type-orxclock_info","text":"","title":"type orxCLOCK_INFO"},{"location":"types/orxCLOCK_INFO.html#properties","text":"name type ticksize number dt number time number modifierlistlist table of number","title":"Properties"},{"location":"types/orxCLOCK_INFO.html#methods","text":"","title":"Methods"},{"location":"types/orxCLOCK_INFO.html#orxclock_infoaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxCLOCK_INFO:addr"},{"location":"types/orxCLOCK_INFO.html#orxclock_infoaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxCLOCK_INFO:aeq"},{"location":"types/orxCLOCK_INFO.html#orxclock_infoasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxCLOCK_INFO:asVoid"},{"location":"types/orxCLOCK_INFO.html#orxclock_infotype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCLOCK_INFO:type"},{"location":"types/orxCOLOR.html","text":"type orxCOLOR # constructors: lorx.display.color Properties # name type rgb orxVECTOR hsl orxVECTOR hsv orxVECTOR alpha number Methods # orxCOLOR:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxCOLOR:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxCOLOR:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxCOLOR:copy # Signature: r1 = copy () Description: Copies an orxCOLOR into another one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_Copy ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc ) orxCOLOR:fromHSLToRGB # Signature: r1 = fromHSLToRGB () Description: Converts from HSL color space to RGB one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_FromHSLToRGB ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc ) orxCOLOR:fromHSVToRGB # Signature: r1 = fromHSVToRGB () Description: Converts from HSV color space to RGB one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_FromHSVToRGB ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc ) orxCOLOR:fromRGBToHSL # Signature: r1 = fromRGBToHSL () Description: Converts from RGB color space to HSL one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_FromRGBToHSL ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc ) orxCOLOR:fromRGBToHSV # Signature: r1 = fromRGBToHSV () Description: Converts from RGB color space to HSV one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_FromRGBToHSV ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc ) orxCOLOR:set # Signature: r1 = set ( rgb , alpha ) Description: Sets all components (non-const self only) Params: name type description rgb orxVECTOR# RGB components alpha number Normalized alpha component Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_Set ( orxCOLOR * _pstColor , const orxVECTOR * _pvRGB , orxFLOAT _fAlpha ) orxCOLOR:setAlpha # Signature: r1 = setAlpha ( alpha ) Description: Sets alpha component (non-const self only) Params: name type description alpha number Normalized alpha component Returns: type description orxCOLOR orxCOLOR / nil C signature: orxCOLOR * orxColor_SetAlpha ( orxCOLOR * _pstColor , orxFLOAT _fAlpha ) orxCOLOR:setRGB # Signature: r1 = setRGB ( rgb ) Description: Sets RGB components (non-const self only) Params: name type description rgb orxVECTOR# RGB components Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_SetRGB ( orxCOLOR * _pstColor , const orxVECTOR * _pvRGB ) orxCOLOR:setRGBA # Signature: r1 = setRGBA ( rgba ) Description: Sets all components from an orxRGBA (non-const self only) Params: name type description rgba orxRGBA RGBA values to set Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_SetRGBA ( orxCOLOR * _pstColor , orxRGBA _stRGBA ) orxCOLOR:toRGBA # Signature: r1 = toRGBA () Description: Gets orxRGBA from an orxCOLOR Params: Returns: type description orxRGBA orxRGBA C signature: orxRGBA orxColor_ToRGBA ( const orxCOLOR * _pstColor ) orxCOLOR:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCOLOR"},{"location":"types/orxCOLOR.html#type-orxcolor","text":"constructors: lorx.display.color","title":"type orxCOLOR"},{"location":"types/orxCOLOR.html#properties","text":"name type rgb orxVECTOR hsl orxVECTOR hsv orxVECTOR alpha number","title":"Properties"},{"location":"types/orxCOLOR.html#methods","text":"","title":"Methods"},{"location":"types/orxCOLOR.html#orxcoloraddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxCOLOR:addr"},{"location":"types/orxCOLOR.html#orxcoloraeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxCOLOR:aeq"},{"location":"types/orxCOLOR.html#orxcolorasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxCOLOR:asVoid"},{"location":"types/orxCOLOR.html#orxcolorcopy","text":"Signature: r1 = copy () Description: Copies an orxCOLOR into another one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_Copy ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc )","title":"orxCOLOR:copy"},{"location":"types/orxCOLOR.html#orxcolorfromhsltorgb","text":"Signature: r1 = fromHSLToRGB () Description: Converts from HSL color space to RGB one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_FromHSLToRGB ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc )","title":"orxCOLOR:fromHSLToRGB"},{"location":"types/orxCOLOR.html#orxcolorfromhsvtorgb","text":"Signature: r1 = fromHSVToRGB () Description: Converts from HSV color space to RGB one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_FromHSVToRGB ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc )","title":"orxCOLOR:fromHSVToRGB"},{"location":"types/orxCOLOR.html#orxcolorfromrgbtohsl","text":"Signature: r1 = fromRGBToHSL () Description: Converts from RGB color space to HSL one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_FromRGBToHSL ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc )","title":"orxCOLOR:fromRGBToHSL"},{"location":"types/orxCOLOR.html#orxcolorfromrgbtohsv","text":"Signature: r1 = fromRGBToHSV () Description: Converts from RGB color space to HSV one Params: Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_FromRGBToHSV ( orxCOLOR * _pstDst , const orxCOLOR * _pstSrc )","title":"orxCOLOR:fromRGBToHSV"},{"location":"types/orxCOLOR.html#orxcolorset","text":"Signature: r1 = set ( rgb , alpha ) Description: Sets all components (non-const self only) Params: name type description rgb orxVECTOR# RGB components alpha number Normalized alpha component Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_Set ( orxCOLOR * _pstColor , const orxVECTOR * _pvRGB , orxFLOAT _fAlpha )","title":"orxCOLOR:set"},{"location":"types/orxCOLOR.html#orxcolorsetalpha","text":"Signature: r1 = setAlpha ( alpha ) Description: Sets alpha component (non-const self only) Params: name type description alpha number Normalized alpha component Returns: type description orxCOLOR orxCOLOR / nil C signature: orxCOLOR * orxColor_SetAlpha ( orxCOLOR * _pstColor , orxFLOAT _fAlpha )","title":"orxCOLOR:setAlpha"},{"location":"types/orxCOLOR.html#orxcolorsetrgb","text":"Signature: r1 = setRGB ( rgb ) Description: Sets RGB components (non-const self only) Params: name type description rgb orxVECTOR# RGB components Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_SetRGB ( orxCOLOR * _pstColor , const orxVECTOR * _pvRGB )","title":"orxCOLOR:setRGB"},{"location":"types/orxCOLOR.html#orxcolorsetrgba","text":"Signature: r1 = setRGBA ( rgba ) Description: Sets all components from an orxRGBA (non-const self only) Params: name type description rgba orxRGBA RGBA values to set Returns: type description orxCOLOR orxCOLOR C signature: orxCOLOR * orxColor_SetRGBA ( orxCOLOR * _pstColor , orxRGBA _stRGBA )","title":"orxCOLOR:setRGBA"},{"location":"types/orxCOLOR.html#orxcolortorgba","text":"Signature: r1 = toRGBA () Description: Gets orxRGBA from an orxCOLOR Params: Returns: type description orxRGBA orxRGBA C signature: orxRGBA orxColor_ToRGBA ( const orxCOLOR * _pstColor )","title":"orxCOLOR:toRGBA"},{"location":"types/orxCOLOR.html#orxcolortype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCOLOR:type"},{"location":"types/orxCOMMAND_VAR.html","text":"type orxCOMMAND_VAR # constructors: lorx.command.commandVar Properties # name type vvalue orxVECTOR zvalue string u32value integer s32value integer u64value integer s64value integer fvalue number bvalue boolean type orxCOMMAND_VAR_TYPE Methods # orxCOMMAND_VAR:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxCOMMAND_VAR:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxCOMMAND_VAR:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxCOMMAND_VAR:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCOMMAND_VAR"},{"location":"types/orxCOMMAND_VAR.html#type-orxcommand_var","text":"constructors: lorx.command.commandVar","title":"type orxCOMMAND_VAR"},{"location":"types/orxCOMMAND_VAR.html#properties","text":"name type vvalue orxVECTOR zvalue string u32value integer s32value integer u64value integer s64value integer fvalue number bvalue boolean type orxCOMMAND_VAR_TYPE","title":"Properties"},{"location":"types/orxCOMMAND_VAR.html#methods","text":"","title":"Methods"},{"location":"types/orxCOMMAND_VAR.html#orxcommand_varaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxCOMMAND_VAR:addr"},{"location":"types/orxCOMMAND_VAR.html#orxcommand_varaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxCOMMAND_VAR:aeq"},{"location":"types/orxCOMMAND_VAR.html#orxcommand_varasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxCOMMAND_VAR:asVoid"},{"location":"types/orxCOMMAND_VAR.html#orxcommand_vartype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxCOMMAND_VAR:type"},{"location":"types/orxDISPLAY_MESH.html","text":"type orxDISPLAY_MESH # This type doesn't have any property or method Methods # orxDISPLAY_MESH:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxDISPLAY_MESH:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxDISPLAY_MESH:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxDISPLAY_MESH:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxDISPLAY_MESH"},{"location":"types/orxDISPLAY_MESH.html#type-orxdisplay_mesh","text":"This type doesn't have any property or method","title":"type orxDISPLAY_MESH"},{"location":"types/orxDISPLAY_MESH.html#methods","text":"","title":"Methods"},{"location":"types/orxDISPLAY_MESH.html#orxdisplay_meshaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxDISPLAY_MESH:addr"},{"location":"types/orxDISPLAY_MESH.html#orxdisplay_meshaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxDISPLAY_MESH:aeq"},{"location":"types/orxDISPLAY_MESH.html#orxdisplay_meshasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxDISPLAY_MESH:asVoid"},{"location":"types/orxDISPLAY_MESH.html#orxdisplay_meshtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxDISPLAY_MESH:type"},{"location":"types/orxDISPLAY_TRANSFORM.html","text":"type orxDISPLAY_TRANSFORM # constructors: lorx.display.displayTransform Properties # name type srcx number srcy number dstx number dsty number repeatx number repeaty number scalex number scaley number rotation number Methods # orxDISPLAY_TRANSFORM:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxDISPLAY_TRANSFORM:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxDISPLAY_TRANSFORM:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxDISPLAY_TRANSFORM:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxDISPLAY_TRANSFORM"},{"location":"types/orxDISPLAY_TRANSFORM.html#type-orxdisplay_transform","text":"constructors: lorx.display.displayTransform","title":"type orxDISPLAY_TRANSFORM"},{"location":"types/orxDISPLAY_TRANSFORM.html#properties","text":"name type srcx number srcy number dstx number dsty number repeatx number repeaty number scalex number scaley number rotation number","title":"Properties"},{"location":"types/orxDISPLAY_TRANSFORM.html#methods","text":"","title":"Methods"},{"location":"types/orxDISPLAY_TRANSFORM.html#orxdisplay_transformaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxDISPLAY_TRANSFORM:addr"},{"location":"types/orxDISPLAY_TRANSFORM.html#orxdisplay_transformaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxDISPLAY_TRANSFORM:aeq"},{"location":"types/orxDISPLAY_TRANSFORM.html#orxdisplay_transformasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxDISPLAY_TRANSFORM:asVoid"},{"location":"types/orxDISPLAY_TRANSFORM.html#orxdisplay_transformtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxDISPLAY_TRANSFORM:type"},{"location":"types/orxDISPLAY_VIDEO_MODE.html","text":"type orxDISPLAY_VIDEO_MODE # constructors: lorx.display.displayVideoMode Properties # name type width integer height integer depth integer refreshrate integer fullscreen boolean Methods # orxDISPLAY_VIDEO_MODE:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxDISPLAY_VIDEO_MODE:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxDISPLAY_VIDEO_MODE:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxDISPLAY_VIDEO_MODE:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxDISPLAY_VIDEO_MODE"},{"location":"types/orxDISPLAY_VIDEO_MODE.html#type-orxdisplay_video_mode","text":"constructors: lorx.display.displayVideoMode","title":"type orxDISPLAY_VIDEO_MODE"},{"location":"types/orxDISPLAY_VIDEO_MODE.html#properties","text":"name type width integer height integer depth integer refreshrate integer fullscreen boolean","title":"Properties"},{"location":"types/orxDISPLAY_VIDEO_MODE.html#methods","text":"","title":"Methods"},{"location":"types/orxDISPLAY_VIDEO_MODE.html#orxdisplay_video_modeaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxDISPLAY_VIDEO_MODE:addr"},{"location":"types/orxDISPLAY_VIDEO_MODE.html#orxdisplay_video_modeaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxDISPLAY_VIDEO_MODE:aeq"},{"location":"types/orxDISPLAY_VIDEO_MODE.html#orxdisplay_video_modeasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxDISPLAY_VIDEO_MODE:asVoid"},{"location":"types/orxDISPLAY_VIDEO_MODE.html#orxdisplay_video_modetype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxDISPLAY_VIDEO_MODE:type"},{"location":"types/orxFILE.html","text":"type orxFILE # Methods # orxFILE:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxFILE:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxFILE:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxFILE:close # Signature: r1 = close () Description: Closes an oppened file (non-const self only) Params: Returns: type description orxSTATUS Returns the status of the operation C signature: orxSTATUS orxFile_Close ( orxFILE * _pstFile ) orxFILE:getSize # Signature: r1 = getSize () Description: Retrieves a file's size Params: Returns: type description integer Returns the length of the file, <= 0 if invalid C signature: orxS64 orxFile_GetSize ( const orxFILE * _pstFile ) orxFILE:getTime # Signature: r1 = getTime () Description: Retrieves a file's time of last modification Params: Returns: type description integer Returns the time of the last modification, in seconds, since epoch C signature: orxS64 orxFile_GetTime ( const orxFILE * _pstFile ) orxFILE:print # Signature: r1 = print ( string ) Description: Prints a formatted string to a file (non-const self only) Params: name type description string string Formatted string Returns: type description integer Returns the number of written characters C signature: orxS32 orxFile_Print ( orxFILE * _pstFile , const orxSTRING _zString , ...) orxFILE:seek # Signature: r1 = seek ( position , whence ) Description: Seeks to a position in the given file (non-const self only) Params: name type description position integer Position (from start) where to set the indicator whence orxSEEK_OFFSET_WHENCE Starting point for the offset computation (start, current position or end) Returns: type description integer Absolute cursor position if successful, -1 otherwise C signature: orxS64 orxFile_Seek ( orxFILE * _pstFile , orxS64 _s64Position , orxSEEK_OFFSET_WHENCE _eWhence ) orxFILE:tell # Signature: r1 = tell () Description: Tells the current position of the indicator in a file Params: Returns: type description integer Returns the current position of the file indicator, -1 is invalid C signature: orxS64 orxFile_Tell ( const orxFILE * _pstFile ) orxFILE:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxFILE"},{"location":"types/orxFILE.html#type-orxfile","text":"","title":"type orxFILE"},{"location":"types/orxFILE.html#methods","text":"","title":"Methods"},{"location":"types/orxFILE.html#orxfileaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxFILE:addr"},{"location":"types/orxFILE.html#orxfileaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxFILE:aeq"},{"location":"types/orxFILE.html#orxfileasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxFILE:asVoid"},{"location":"types/orxFILE.html#orxfileclose","text":"Signature: r1 = close () Description: Closes an oppened file (non-const self only) Params: Returns: type description orxSTATUS Returns the status of the operation C signature: orxSTATUS orxFile_Close ( orxFILE * _pstFile )","title":"orxFILE:close"},{"location":"types/orxFILE.html#orxfilegetsize","text":"Signature: r1 = getSize () Description: Retrieves a file's size Params: Returns: type description integer Returns the length of the file, <= 0 if invalid C signature: orxS64 orxFile_GetSize ( const orxFILE * _pstFile )","title":"orxFILE:getSize"},{"location":"types/orxFILE.html#orxfilegettime","text":"Signature: r1 = getTime () Description: Retrieves a file's time of last modification Params: Returns: type description integer Returns the time of the last modification, in seconds, since epoch C signature: orxS64 orxFile_GetTime ( const orxFILE * _pstFile )","title":"orxFILE:getTime"},{"location":"types/orxFILE.html#orxfileprint","text":"Signature: r1 = print ( string ) Description: Prints a formatted string to a file (non-const self only) Params: name type description string string Formatted string Returns: type description integer Returns the number of written characters C signature: orxS32 orxFile_Print ( orxFILE * _pstFile , const orxSTRING _zString , ...)","title":"orxFILE:print"},{"location":"types/orxFILE.html#orxfileseek","text":"Signature: r1 = seek ( position , whence ) Description: Seeks to a position in the given file (non-const self only) Params: name type description position integer Position (from start) where to set the indicator whence orxSEEK_OFFSET_WHENCE Starting point for the offset computation (start, current position or end) Returns: type description integer Absolute cursor position if successful, -1 otherwise C signature: orxS64 orxFile_Seek ( orxFILE * _pstFile , orxS64 _s64Position , orxSEEK_OFFSET_WHENCE _eWhence )","title":"orxFILE:seek"},{"location":"types/orxFILE.html#orxfiletell","text":"Signature: r1 = tell () Description: Tells the current position of the indicator in a file Params: Returns: type description integer Returns the current position of the file indicator, -1 is invalid C signature: orxS64 orxFile_Tell ( const orxFILE * _pstFile )","title":"orxFILE:tell"},{"location":"types/orxFILE.html#orxfiletype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxFILE:type"},{"location":"types/orxFILE_INFO.html","text":"type orxFILE_INFO # constructors: lorx.file.fileInfo Properties # name type size integer timestamp integer flags integer internal orxHANDLE name string (length-limited) pattern string (length-limited) path string (length-limited) fullname string (length-limited) Methods # orxFILE_INFO:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxFILE_INFO:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxFILE_INFO:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxFILE_INFO:findClose # Signature: findClose () Description: Closes a search (frees the memory allocated for this search) (non-const self only) Params: Returns: C signature: void orxFile_FindClose ( orxFILE_INFO * _pstFileInfo ) orxFILE_INFO:findNext # Signature: r1 = findNext () Description: Continues a file search: finds the next occurrence of a pattern, the search has to be started with orxFile_FindFirst (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFile_FindNext ( orxFILE_INFO * _pstFileInfo ) orxFILE_INFO:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxFILE_INFO"},{"location":"types/orxFILE_INFO.html#type-orxfile_info","text":"constructors: lorx.file.fileInfo","title":"type orxFILE_INFO"},{"location":"types/orxFILE_INFO.html#properties","text":"name type size integer timestamp integer flags integer internal orxHANDLE name string (length-limited) pattern string (length-limited) path string (length-limited) fullname string (length-limited)","title":"Properties"},{"location":"types/orxFILE_INFO.html#methods","text":"","title":"Methods"},{"location":"types/orxFILE_INFO.html#orxfile_infoaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxFILE_INFO:addr"},{"location":"types/orxFILE_INFO.html#orxfile_infoaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxFILE_INFO:aeq"},{"location":"types/orxFILE_INFO.html#orxfile_infoasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxFILE_INFO:asVoid"},{"location":"types/orxFILE_INFO.html#orxfile_infofindclose","text":"Signature: findClose () Description: Closes a search (frees the memory allocated for this search) (non-const self only) Params: Returns: C signature: void orxFile_FindClose ( orxFILE_INFO * _pstFileInfo )","title":"orxFILE_INFO:findClose"},{"location":"types/orxFILE_INFO.html#orxfile_infofindnext","text":"Signature: r1 = findNext () Description: Continues a file search: finds the next occurrence of a pattern, the search has to be started with orxFile_FindFirst (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFile_FindNext ( orxFILE_INFO * _pstFileInfo )","title":"orxFILE_INFO:findNext"},{"location":"types/orxFILE_INFO.html#orxfile_infotype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxFILE_INFO:type"},{"location":"types/orxFONT.html","text":"type orxFONT # Methods # orxFONT:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxFONT:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxFONT:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxFONT:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxFONT:delete # Signature: r1 = delete () Description: Deletes a font (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_Delete ( orxFONT * _pstFont ) orxFONT:getCharacterHeight # Signature: r1 = getCharacterHeight () Description: Gets font's character height Params: Returns: type description number number C signature: orxFLOAT orxFont_GetCharacterHeight ( const orxFONT * _pstFont ) orxFONT:getCharacterList # Signature: r1 = getCharacterList () Description: Gets font's character list Params: Returns: type description string Font's character list / nil C signature: const orxSTRING orxFont_GetCharacterList ( const orxFONT * _pstFont ) orxFONT:getCharacterSpacing # Signature: r1 = getCharacterSpacing () Description: Gets font's character spacing Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFont_GetCharacterSpacing ( const orxFONT * _pstFont , orxVECTOR * _pvSpacing ) orxFONT:getCharacterWidth # Signature: r1 = getCharacterWidth ( charactercodepoint ) Description: Gets font's character width Params: name type description charactercodepoint integer Character code point Returns: type description number number C signature: orxFLOAT orxFont_GetCharacterWidth ( const orxFONT * _pstFont , orxU32 _u32CharacterCodePoint ) orxFONT:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxFONT:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxFONT:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxFONT:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxFONT:getMap # Signature: r1 = getMap () Description: Gets font's map Params: Returns: type description orxCHARACTER_MAP# orxCHARACTER_MAP / nil C signature: const orxCHARACTER_MAP * orxFont_GetMap ( const orxFONT * _pstFont ) orxFONT:getName # Signature: r1 = getName () Description: Gets font name Params: Returns: type description string Font name / empty string C signature: const orxSTRING orxFont_GetName ( const orxFONT * _pstFont ) orxFONT:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxFONT:getOrigin # Signature: r1 = getOrigin () Description: Gets font's origin Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFont_GetOrigin ( const orxFONT * _pstFont , orxVECTOR * _pvOrigin ) orxFONT:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxFONT:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxFONT:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxFONT:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxFONT:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxFONT:getSize # Signature: r1 = getSize () Description: Gets font's size Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFont_GetSize ( const orxFONT * _pstFont , orxVECTOR * _pvSize ) orxFONT:getTexture # Signature: r1 = getTexture () Description: Gets font's texture Params: Returns: type description orxTEXTURE Font texture / nil C signature: orxTEXTURE * orxFont_GetTexture ( const orxFONT * _pstFont ) orxFONT:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxFONT:setCharacterHeight # Signature: r1 = setCharacterHeight ( characterheight ) Description: Sets font's character height (non-const self only) Params: name type description characterheight number Character's height Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetCharacterHeight ( orxFONT * _pstFont , orxFLOAT _fCharacterHeight ) orxFONT:setCharacterList # Signature: r1 = setCharacterList ( list ) Description: Sets font's character list (non-const self only) Params: name type description list string Character list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetCharacterList ( orxFONT * _pstFont , const orxSTRING _zList ) orxFONT:setCharacterSpacing # Signature: r1 = setCharacterSpacing ( spacing ) Description: Sets font's character spacing (non-const self only) Params: name type description spacing orxVECTOR# Character's spacing Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetCharacterSpacing ( orxFONT * _pstFont , const orxVECTOR * _pvSpacing ) orxFONT:setCharacterWidthList # Signature: r1 = setCharacterWidthList ( characternumber , characterwidthlist ) Description: Sets font's character width list (non-const self only) Params: name type description characternumber integer Character's number characterwidthlist table of number List of widths for all the characters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetCharacterWidthList ( orxFONT * _pstFont , orxU32 _u32CharacterNumber , const orxFLOAT * _afCharacterWidthList ) orxFONT:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxFONT:setOrigin # Signature: r1 = setOrigin ( origin ) Description: Sets font's origin (non-const self only) Params: name type description origin orxVECTOR# Font's origin Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetOrigin ( orxFONT * _pstFont , const orxVECTOR * _pvOrigin ) orxFONT:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxFONT:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxFONT:setSize # Signature: r1 = setSize ( size ) Description: Sets font's size (non-const self only) Params: name type description size orxVECTOR# Font's size Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetSize ( orxFONT * _pstFont , const orxVECTOR * _pvSize ) orxFONT:setTexture # Signature: r1 = setTexture ( texture ) Description: Sets font's texture (non-const self only) Params: name type description texture orxTEXTURE Texture to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetTexture ( orxFONT * _pstFont , orxTEXTURE * _pstTexture ) orxFONT:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxFONT:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxFONT:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxFONT:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxFONT"},{"location":"types/orxFONT.html#type-orxfont","text":"","title":"type orxFONT"},{"location":"types/orxFONT.html#methods","text":"","title":"Methods"},{"location":"types/orxFONT.html#orxfontaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxFONT:addr"},{"location":"types/orxFONT.html#orxfontaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxFONT:aeq"},{"location":"types/orxFONT.html#orxfontasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxFONT:asVoid"},{"location":"types/orxFONT.html#orxfontdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxFONT:decreaseCount"},{"location":"types/orxFONT.html#orxfontdelete","text":"Signature: r1 = delete () Description: Deletes a font (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_Delete ( orxFONT * _pstFont )","title":"orxFONT:delete"},{"location":"types/orxFONT.html#orxfontgetcharacterheight","text":"Signature: r1 = getCharacterHeight () Description: Gets font's character height Params: Returns: type description number number C signature: orxFLOAT orxFont_GetCharacterHeight ( const orxFONT * _pstFont )","title":"orxFONT:getCharacterHeight"},{"location":"types/orxFONT.html#orxfontgetcharacterlist","text":"Signature: r1 = getCharacterList () Description: Gets font's character list Params: Returns: type description string Font's character list / nil C signature: const orxSTRING orxFont_GetCharacterList ( const orxFONT * _pstFont )","title":"orxFONT:getCharacterList"},{"location":"types/orxFONT.html#orxfontgetcharacterspacing","text":"Signature: r1 = getCharacterSpacing () Description: Gets font's character spacing Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFont_GetCharacterSpacing ( const orxFONT * _pstFont , orxVECTOR * _pvSpacing )","title":"orxFONT:getCharacterSpacing"},{"location":"types/orxFONT.html#orxfontgetcharacterwidth","text":"Signature: r1 = getCharacterWidth ( charactercodepoint ) Description: Gets font's character width Params: name type description charactercodepoint integer Character code point Returns: type description number number C signature: orxFLOAT orxFont_GetCharacterWidth ( const orxFONT * _pstFont , orxU32 _u32CharacterCodePoint )","title":"orxFONT:getCharacterWidth"},{"location":"types/orxFONT.html#orxfontgetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxFONT:getChild"},{"location":"types/orxFONT.html#orxfontgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxFONT:getFlags"},{"location":"types/orxFONT.html#orxfontgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxFONT:getGUID"},{"location":"types/orxFONT.html#orxfontgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxFONT:getID"},{"location":"types/orxFONT.html#orxfontgetmap","text":"Signature: r1 = getMap () Description: Gets font's map Params: Returns: type description orxCHARACTER_MAP# orxCHARACTER_MAP / nil C signature: const orxCHARACTER_MAP * orxFont_GetMap ( const orxFONT * _pstFont )","title":"orxFONT:getMap"},{"location":"types/orxFONT.html#orxfontgetname","text":"Signature: r1 = getName () Description: Gets font name Params: Returns: type description string Font name / empty string C signature: const orxSTRING orxFont_GetName ( const orxFONT * _pstFont )","title":"orxFONT:getName"},{"location":"types/orxFONT.html#orxfontgetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxFONT:getNext"},{"location":"types/orxFONT.html#orxfontgetorigin","text":"Signature: r1 = getOrigin () Description: Gets font's origin Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFont_GetOrigin ( const orxFONT * _pstFont , orxVECTOR * _pvOrigin )","title":"orxFONT:getOrigin"},{"location":"types/orxFONT.html#orxfontgetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxFONT:getOwner"},{"location":"types/orxFONT.html#orxfontgetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxFONT:getParent"},{"location":"types/orxFONT.html#orxfontgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxFONT:getPrevious"},{"location":"types/orxFONT.html#orxfontgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxFONT:getRefCount"},{"location":"types/orxFONT.html#orxfontgetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxFONT:getSibling"},{"location":"types/orxFONT.html#orxfontgetsize","text":"Signature: r1 = getSize () Description: Gets font's size Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFont_GetSize ( const orxFONT * _pstFont , orxVECTOR * _pvSize )","title":"orxFONT:getSize"},{"location":"types/orxFONT.html#orxfontgettexture","text":"Signature: r1 = getTexture () Description: Gets font's texture Params: Returns: type description orxTEXTURE Font texture / nil C signature: orxTEXTURE * orxFont_GetTexture ( const orxFONT * _pstFont )","title":"orxFONT:getTexture"},{"location":"types/orxFONT.html#orxfontincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxFONT:increaseCount"},{"location":"types/orxFONT.html#orxfontsetcharacterheight","text":"Signature: r1 = setCharacterHeight ( characterheight ) Description: Sets font's character height (non-const self only) Params: name type description characterheight number Character's height Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetCharacterHeight ( orxFONT * _pstFont , orxFLOAT _fCharacterHeight )","title":"orxFONT:setCharacterHeight"},{"location":"types/orxFONT.html#orxfontsetcharacterlist","text":"Signature: r1 = setCharacterList ( list ) Description: Sets font's character list (non-const self only) Params: name type description list string Character list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetCharacterList ( orxFONT * _pstFont , const orxSTRING _zList )","title":"orxFONT:setCharacterList"},{"location":"types/orxFONT.html#orxfontsetcharacterspacing","text":"Signature: r1 = setCharacterSpacing ( spacing ) Description: Sets font's character spacing (non-const self only) Params: name type description spacing orxVECTOR# Character's spacing Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetCharacterSpacing ( orxFONT * _pstFont , const orxVECTOR * _pvSpacing )","title":"orxFONT:setCharacterSpacing"},{"location":"types/orxFONT.html#orxfontsetcharacterwidthlist","text":"Signature: r1 = setCharacterWidthList ( characternumber , characterwidthlist ) Description: Sets font's character width list (non-const self only) Params: name type description characternumber integer Character's number characterwidthlist table of number List of widths for all the characters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetCharacterWidthList ( orxFONT * _pstFont , orxU32 _u32CharacterNumber , const orxFLOAT * _afCharacterWidthList )","title":"orxFONT:setCharacterWidthList"},{"location":"types/orxFONT.html#orxfontsetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxFONT:setFlags"},{"location":"types/orxFONT.html#orxfontsetorigin","text":"Signature: r1 = setOrigin ( origin ) Description: Sets font's origin (non-const self only) Params: name type description origin orxVECTOR# Font's origin Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetOrigin ( orxFONT * _pstFont , const orxVECTOR * _pvOrigin )","title":"orxFONT:setOrigin"},{"location":"types/orxFONT.html#orxfontsetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxFONT:setOwner"},{"location":"types/orxFONT.html#orxfontsetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxFONT:setParent"},{"location":"types/orxFONT.html#orxfontsetsize","text":"Signature: r1 = setSize ( size ) Description: Sets font's size (non-const self only) Params: name type description size orxVECTOR# Font's size Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetSize ( orxFONT * _pstFont , const orxVECTOR * _pvSize )","title":"orxFONT:setSize"},{"location":"types/orxFONT.html#orxfontsettexture","text":"Signature: r1 = setTexture ( texture ) Description: Sets font's texture (non-const self only) Params: name type description texture orxTEXTURE Texture to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFont_SetTexture ( orxFONT * _pstFont , orxTEXTURE * _pstTexture )","title":"orxFONT:setTexture"},{"location":"types/orxFONT.html#orxfonttestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxFONT:testAllFlags"},{"location":"types/orxFONT.html#orxfonttestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxFONT:testFlags"},{"location":"types/orxFONT.html#orxfonttype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxFONT:type"},{"location":"types/orxFONT.html#orxfontupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxFONT:update"},{"location":"types/orxFRAME.html","text":"type orxFRAME # Methods # orxFRAME:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxFRAME:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxFRAME:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxFRAME:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxFRAME:delete # Signature: r1 = delete () Description: Deletes a frame (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFrame_Delete ( orxFRAME * _pstFrame ) orxFRAME:getChild # Signature: r1 = getChild () Description: Gets frame first child Params: Returns: type description orxFRAME orxFRAME / nil C signature: orxFRAME * orxFrame_GetChild ( const orxFRAME * _pstFrame ) orxFRAME:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxFRAME:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxFRAME:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxFRAME:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxFRAME:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxFRAME:getParent # Signature: r1 = getParent () Description: Get frame parent Params: Returns: type description orxFRAME orxFRAME / nil C signature: orxFRAME * orxFrame_GetParent ( const orxFRAME * _pstFrame ) orxFRAME:getPosition # Signature: r1 = getPosition ( space ) Description: Gets frame position (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFrame_GetPosition ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxVECTOR * _pvPos ) orxFRAME:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxFRAME:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxFRAME:getRotation # Signature: r1 = getRotation ( space ) Description: Gets frame rotation (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use Returns: type description number Rotation of the given frame (radians) C signature: orxFLOAT orxFrame_GetRotation ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace ) orxFRAME:getScale # Signature: r1 = getScale ( space ) Description: Gets frame scale (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFrame_GetScale ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxVECTOR * _pvScale ) orxFRAME:getSibling # Signature: r1 = getSibling () Description: Gets frame next sibling Params: Returns: type description orxFRAME orxFRAME / nil C signature: orxFRAME * orxFrame_GetSibling ( const orxFRAME * _pstFrame ) orxFRAME:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxFRAME:isRootChild # Signature: r1 = isRootChild () Description: Is a root child? Params: Returns: type description boolean true if its parent is root, false otherwise C signature: orxBOOL orxFrame_IsRootChild ( const orxFRAME * _pstFrame ) orxFRAME:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxFRAME:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxFRAME:setParent # Signature: setParent ( parent ) Description: Sets frame parent (non-const self only) Params: name type description parent orxFRAME Parent frame to set Returns: C signature: void orxFrame_SetParent ( orxFRAME * _pstFrame , orxFRAME * _pstParent ) orxFRAME:setPosition # Signature: setPosition ( space , pos ) Description: Sets frame position (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use pos orxVECTOR# Position to set Returns: C signature: void orxFrame_SetPosition ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , const orxVECTOR * _pvPos ) orxFRAME:setRotation # Signature: setRotation ( space , rotation ) Description: Sets frame rotation (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use rotation number Rotation angle to set (radians) Returns: C signature: void orxFrame_SetRotation ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxFLOAT _fRotation ) orxFRAME:setScale # Signature: setScale ( space , scale ) Description: Sets frame scale (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use scale orxVECTOR# Scale to set Returns: C signature: void orxFrame_SetScale ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , const orxVECTOR * _pvScale ) orxFRAME:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxFRAME:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxFRAME:transformPosition # Signature: r1 = transformPosition ( space ) Description: Transforms a position given its input space (local -> global or global -> local) (non-const self only) Params: name type description space orxFRAME_SPACE Input coordinate space system to use Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFrame_TransformPosition ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxVECTOR * _pvPos ) orxFRAME:transformRotation # Signature: r1 = transformRotation ( space , rotation ) Description: Transforms a rotation given its input space (local -> global or global -> local) (non-const self only) Params: name type description space orxFRAME_SPACE Input coordinate space system to use rotation number Concerned rotation Returns: type description number Transformed rotation (radians) C signature: orxFLOAT orxFrame_TransformRotation ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxFLOAT _fRotation ) orxFRAME:transformScale # Signature: r1 = transformScale ( space ) Description: Transforms a scale given its input space (local -> global or global -> local) (non-const self only) Params: name type description space orxFRAME_SPACE Input coordinate space system to use Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFrame_TransformScale ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxVECTOR * _pvScale ) orxFRAME:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxFRAME:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxFRAME"},{"location":"types/orxFRAME.html#type-orxframe","text":"","title":"type orxFRAME"},{"location":"types/orxFRAME.html#methods","text":"","title":"Methods"},{"location":"types/orxFRAME.html#orxframeaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxFRAME:addr"},{"location":"types/orxFRAME.html#orxframeaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxFRAME:aeq"},{"location":"types/orxFRAME.html#orxframeasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxFRAME:asVoid"},{"location":"types/orxFRAME.html#orxframedecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxFRAME:decreaseCount"},{"location":"types/orxFRAME.html#orxframedelete","text":"Signature: r1 = delete () Description: Deletes a frame (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFrame_Delete ( orxFRAME * _pstFrame )","title":"orxFRAME:delete"},{"location":"types/orxFRAME.html#orxframegetchild","text":"Signature: r1 = getChild () Description: Gets frame first child Params: Returns: type description orxFRAME orxFRAME / nil C signature: orxFRAME * orxFrame_GetChild ( const orxFRAME * _pstFrame )","title":"orxFRAME:getChild"},{"location":"types/orxFRAME.html#orxframegetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxFRAME:getFlags"},{"location":"types/orxFRAME.html#orxframegetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxFRAME:getGUID"},{"location":"types/orxFRAME.html#orxframegetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxFRAME:getID"},{"location":"types/orxFRAME.html#orxframegetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxFRAME:getNext"},{"location":"types/orxFRAME.html#orxframegetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxFRAME:getOwner"},{"location":"types/orxFRAME.html#orxframegetparent","text":"Signature: r1 = getParent () Description: Get frame parent Params: Returns: type description orxFRAME orxFRAME / nil C signature: orxFRAME * orxFrame_GetParent ( const orxFRAME * _pstFrame )","title":"orxFRAME:getParent"},{"location":"types/orxFRAME.html#orxframegetposition","text":"Signature: r1 = getPosition ( space ) Description: Gets frame position (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFrame_GetPosition ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxVECTOR * _pvPos )","title":"orxFRAME:getPosition"},{"location":"types/orxFRAME.html#orxframegetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxFRAME:getPrevious"},{"location":"types/orxFRAME.html#orxframegetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxFRAME:getRefCount"},{"location":"types/orxFRAME.html#orxframegetrotation","text":"Signature: r1 = getRotation ( space ) Description: Gets frame rotation (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use Returns: type description number Rotation of the given frame (radians) C signature: orxFLOAT orxFrame_GetRotation ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace )","title":"orxFRAME:getRotation"},{"location":"types/orxFRAME.html#orxframegetscale","text":"Signature: r1 = getScale ( space ) Description: Gets frame scale (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFrame_GetScale ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxVECTOR * _pvScale )","title":"orxFRAME:getScale"},{"location":"types/orxFRAME.html#orxframegetsibling","text":"Signature: r1 = getSibling () Description: Gets frame next sibling Params: Returns: type description orxFRAME orxFRAME / nil C signature: orxFRAME * orxFrame_GetSibling ( const orxFRAME * _pstFrame )","title":"orxFRAME:getSibling"},{"location":"types/orxFRAME.html#orxframeincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxFRAME:increaseCount"},{"location":"types/orxFRAME.html#orxframeisrootchild","text":"Signature: r1 = isRootChild () Description: Is a root child? Params: Returns: type description boolean true if its parent is root, false otherwise C signature: orxBOOL orxFrame_IsRootChild ( const orxFRAME * _pstFrame )","title":"orxFRAME:isRootChild"},{"location":"types/orxFRAME.html#orxframesetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxFRAME:setFlags"},{"location":"types/orxFRAME.html#orxframesetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxFRAME:setOwner"},{"location":"types/orxFRAME.html#orxframesetparent","text":"Signature: setParent ( parent ) Description: Sets frame parent (non-const self only) Params: name type description parent orxFRAME Parent frame to set Returns: C signature: void orxFrame_SetParent ( orxFRAME * _pstFrame , orxFRAME * _pstParent )","title":"orxFRAME:setParent"},{"location":"types/orxFRAME.html#orxframesetposition","text":"Signature: setPosition ( space , pos ) Description: Sets frame position (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use pos orxVECTOR# Position to set Returns: C signature: void orxFrame_SetPosition ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , const orxVECTOR * _pvPos )","title":"orxFRAME:setPosition"},{"location":"types/orxFRAME.html#orxframesetrotation","text":"Signature: setRotation ( space , rotation ) Description: Sets frame rotation (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use rotation number Rotation angle to set (radians) Returns: C signature: void orxFrame_SetRotation ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxFLOAT _fRotation )","title":"orxFRAME:setRotation"},{"location":"types/orxFRAME.html#orxframesetscale","text":"Signature: setScale ( space , scale ) Description: Sets frame scale (non-const self only) Params: name type description space orxFRAME_SPACE Coordinate space system to use scale orxVECTOR# Scale to set Returns: C signature: void orxFrame_SetScale ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , const orxVECTOR * _pvScale )","title":"orxFRAME:setScale"},{"location":"types/orxFRAME.html#orxframetestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxFRAME:testAllFlags"},{"location":"types/orxFRAME.html#orxframetestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxFRAME:testFlags"},{"location":"types/orxFRAME.html#orxframetransformposition","text":"Signature: r1 = transformPosition ( space ) Description: Transforms a position given its input space (local -> global or global -> local) (non-const self only) Params: name type description space orxFRAME_SPACE Input coordinate space system to use Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFrame_TransformPosition ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxVECTOR * _pvPos )","title":"orxFRAME:transformPosition"},{"location":"types/orxFRAME.html#orxframetransformrotation","text":"Signature: r1 = transformRotation ( space , rotation ) Description: Transforms a rotation given its input space (local -> global or global -> local) (non-const self only) Params: name type description space orxFRAME_SPACE Input coordinate space system to use rotation number Concerned rotation Returns: type description number Transformed rotation (radians) C signature: orxFLOAT orxFrame_TransformRotation ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxFLOAT _fRotation )","title":"orxFRAME:transformRotation"},{"location":"types/orxFRAME.html#orxframetransformscale","text":"Signature: r1 = transformScale ( space ) Description: Transforms a scale given its input space (local -> global or global -> local) (non-const self only) Params: name type description space orxFRAME_SPACE Input coordinate space system to use Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxFrame_TransformScale ( orxFRAME * _pstFrame , orxFRAME_SPACE _eSpace , orxVECTOR * _pvScale )","title":"orxFRAME:transformScale"},{"location":"types/orxFRAME.html#orxframetype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxFRAME:type"},{"location":"types/orxFRAME.html#orxframeupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxFRAME:update"},{"location":"types/orxFX.html","text":"type orxFX # Methods # orxFX:addAlpha # Signature: r1 = addAlpha ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startalpha , endalpha , curve , pow , flags ) Description: Adds alpha to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startalpha number Starting alpha value endalpha number Ending alpha value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddAlpha ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxFLOAT _fStartAlpha , orxFLOAT _fEndAlpha , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addHSL # Signature: r1 = addHSL ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startcolor , endcolor , curve , pow , flags ) Description: Adds HSL color to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startcolor orxVECTOR Starting color value endcolor orxVECTOR Ending color value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddHSL ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxVECTOR * _pvStartColor , orxVECTOR * _pvEndColor , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addHSV # Signature: r1 = addHSV ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startcolor , endcolor , curve , pow , flags ) Description: Adds HSV color to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startcolor orxVECTOR Starting color value endcolor orxVECTOR Ending color value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddHSV ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxVECTOR * _pvStartColor , orxVECTOR * _pvEndColor , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addPitch # Signature: r1 = addPitch ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startpitch , endpitch , curve , pow , flags ) Description: Adds pitch to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startpitch number Starting pitch value endpitch number Ending pitch value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddPitch ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxFLOAT _fStartPitch , orxFLOAT _fEndPitch , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addPosition # Signature: r1 = addPosition ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , starttranslation , endtranslation , curve , pow , flags ) Description: Adds position to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) starttranslation orxVECTOR# Starting position value endtranslation orxVECTOR# Ending position value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddPosition ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , const orxVECTOR * _pvStartTranslation , const orxVECTOR * _pvEndTranslation , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addRGB # Signature: r1 = addRGB ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startcolor , endcolor , curve , pow , flags ) Description: Adds RGB color to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startcolor orxVECTOR Starting color value endcolor orxVECTOR Ending color value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddRGB ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxVECTOR * _pvStartColor , orxVECTOR * _pvEndColor , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addRotation # Signature: r1 = addRotation ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startrotation , endrotation , curve , pow , flags ) Description: Adds rotation to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startrotation number Starting rotation value (radians) endrotation number Ending rotation value (radians) curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddRotation ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxFLOAT _fStartRotation , orxFLOAT _fEndRotation , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addScale # Signature: r1 = addScale ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startscale , endscale , curve , pow , flags ) Description: Adds scale to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startscale orxVECTOR# Starting scale value endscale orxVECTOR# Ending scale value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddScale ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , const orxVECTOR * _pvStartScale , const orxVECTOR * _pvEndScale , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addSlotFromConfig # Signature: r1 = addSlotFromConfig ( slotid ) Description: Adds a slot to an FX from config (non-const self only) Params: name type description slotid string Config ID Returns: type description orxSTATUS C signature: orxSTATUS orxFX_AddSlotFromConfig ( orxFX * _pstFX , const orxSTRING _zSlotID ) orxFX:addSpeed # Signature: r1 = addSpeed ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startspeed , endspeed , curve , pow , flags ) Description: Adds speed to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startspeed orxVECTOR# Starting speed value endspeed orxVECTOR# Ending speed value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddSpeed ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , const orxVECTOR * _pvStartSpeed , const orxVECTOR * _pvEndSpeed , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addVolume # Signature: r1 = addVolume ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startvolume , endvolume , curve , pow , flags ) Description: Adds volume to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startvolume number Starting volume value endvolume number Ending volume value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddVolume ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxFLOAT _fStartVolume , orxFLOAT _fEndVolume , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags ) orxFX:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxFX:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxFX:apply # Signature: r1 = apply ( object , starttime , endtime ) Description: Applies FX on object Params: name type description object orxOBJECT Object on which to apply the FX starttime number FX local application start time endtime number FX local application end time Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_Apply ( const orxFX * _pstFX , orxOBJECT * _pstObject , orxFLOAT _fStartTime , orxFLOAT _fEndTime ) orxFX:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxFX:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxFX:delete # Signature: r1 = delete () Description: Deletes an FX (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_Delete ( orxFX * _pstFX ) orxFX:enable # Signature: enable ( enable ) Description: Enables/disables an FX (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxFX_Enable ( orxFX * _pstFX , orxBOOL _bEnable ) orxFX:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxFX:getDuration # Signature: r1 = getDuration () Description: Gets FX duration Params: Returns: type description number number C signature: orxFLOAT orxFX_GetDuration ( const orxFX * _pstFX ) orxFX:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxFX:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxFX:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxFX:getName # Signature: r1 = getName () Description: Gets FX name Params: Returns: type description string string / empty string C signature: const orxSTRING orxFX_GetName ( const orxFX * _pstFX ) orxFX:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxFX:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxFX:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxFX:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxFX:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxFX:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxFX:getStagger # Signature: r1 , r2 = getStagger () Description: Get FX stagger / offset Params: Returns: type description boolean true if staggered, false otherwise number If non null, will contain the initial offset C signature: orxBOOL orxFX_GetStagger ( const orxFX * _pstFX , orxFLOAT * _pfOffset ) orxFX:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxFX:isEnabled # Signature: r1 = isEnabled () Description: Is FX enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxFX_IsEnabled ( const orxFX * _pstFX ) orxFX:isLooping # Signature: r1 = isLooping () Description: Is FX looping Params: Returns: type description boolean true if looping, false otherwise C signature: orxBOOL orxFX_IsLooping ( const orxFX * _pstFX ) orxFX:loop # Signature: r1 = loop ( loop ) Description: Set FX loop property (non-const self only) Params: name type description loop boolean Loop / don't loop Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_Loop ( orxFX * _pstFX , orxBOOL _bLoop ) orxFX:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxFX:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxFX:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxFX:setStagger # Signature: r1 = setStagger ( stagger , offset ) Description: Sets FX stagger / offset (non-const self only) Params: name type description stagger boolean If true, this FX will be added after all current FXs offset number Initial offset, in seconds. Cannot result in a negative start time Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_SetStagger ( orxFX * _pstFX , orxBOOL _bStagger , orxFLOAT _fOffset ) orxFX:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxFX:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxFX:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxFX:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxFX"},{"location":"types/orxFX.html#type-orxfx","text":"","title":"type orxFX"},{"location":"types/orxFX.html#methods","text":"","title":"Methods"},{"location":"types/orxFX.html#orxfxaddalpha","text":"Signature: r1 = addAlpha ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startalpha , endalpha , curve , pow , flags ) Description: Adds alpha to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startalpha number Starting alpha value endalpha number Ending alpha value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddAlpha ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxFLOAT _fStartAlpha , orxFLOAT _fEndAlpha , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addAlpha"},{"location":"types/orxFX.html#orxfxaddhsl","text":"Signature: r1 = addHSL ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startcolor , endcolor , curve , pow , flags ) Description: Adds HSL color to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startcolor orxVECTOR Starting color value endcolor orxVECTOR Ending color value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddHSL ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxVECTOR * _pvStartColor , orxVECTOR * _pvEndColor , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addHSL"},{"location":"types/orxFX.html#orxfxaddhsv","text":"Signature: r1 = addHSV ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startcolor , endcolor , curve , pow , flags ) Description: Adds HSV color to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startcolor orxVECTOR Starting color value endcolor orxVECTOR Ending color value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddHSV ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxVECTOR * _pvStartColor , orxVECTOR * _pvEndColor , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addHSV"},{"location":"types/orxFX.html#orxfxaddpitch","text":"Signature: r1 = addPitch ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startpitch , endpitch , curve , pow , flags ) Description: Adds pitch to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startpitch number Starting pitch value endpitch number Ending pitch value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddPitch ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxFLOAT _fStartPitch , orxFLOAT _fEndPitch , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addPitch"},{"location":"types/orxFX.html#orxfxaddposition","text":"Signature: r1 = addPosition ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , starttranslation , endtranslation , curve , pow , flags ) Description: Adds position to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) starttranslation orxVECTOR# Starting position value endtranslation orxVECTOR# Ending position value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddPosition ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , const orxVECTOR * _pvStartTranslation , const orxVECTOR * _pvEndTranslation , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addPosition"},{"location":"types/orxFX.html#orxfxaddrgb","text":"Signature: r1 = addRGB ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startcolor , endcolor , curve , pow , flags ) Description: Adds RGB color to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startcolor orxVECTOR Starting color value endcolor orxVECTOR Ending color value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddRGB ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxVECTOR * _pvStartColor , orxVECTOR * _pvEndColor , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addRGB"},{"location":"types/orxFX.html#orxfxaddrotation","text":"Signature: r1 = addRotation ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startrotation , endrotation , curve , pow , flags ) Description: Adds rotation to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startrotation number Starting rotation value (radians) endrotation number Ending rotation value (radians) curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddRotation ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxFLOAT _fStartRotation , orxFLOAT _fEndRotation , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addRotation"},{"location":"types/orxFX.html#orxfxaddscale","text":"Signature: r1 = addScale ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startscale , endscale , curve , pow , flags ) Description: Adds scale to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startscale orxVECTOR# Starting scale value endscale orxVECTOR# Ending scale value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddScale ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , const orxVECTOR * _pvStartScale , const orxVECTOR * _pvEndScale , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addScale"},{"location":"types/orxFX.html#orxfxaddslotfromconfig","text":"Signature: r1 = addSlotFromConfig ( slotid ) Description: Adds a slot to an FX from config (non-const self only) Params: name type description slotid string Config ID Returns: type description orxSTATUS C signature: orxSTATUS orxFX_AddSlotFromConfig ( orxFX * _pstFX , const orxSTRING _zSlotID )","title":"orxFX:addSlotFromConfig"},{"location":"types/orxFX.html#orxfxaddspeed","text":"Signature: r1 = addSpeed ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startspeed , endspeed , curve , pow , flags ) Description: Adds speed to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startspeed orxVECTOR# Starting speed value endspeed orxVECTOR# Ending speed value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddSpeed ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , const orxVECTOR * _pvStartSpeed , const orxVECTOR * _pvEndSpeed , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addSpeed"},{"location":"types/orxFX.html#orxfxaddvolume","text":"Signature: r1 = addVolume ( starttime , endtime , cycleperiod , cyclephase , amplification , acceleration , startvolume , endvolume , curve , pow , flags ) Description: Adds volume to an FX (non-const self only) Params: name type description starttime number Time start endtime number Time end cycleperiod number Cycle period cyclephase number Cycle phase (at start) amplification number Curve linear amplification over time (1.0 for none) acceleration number Curve linear acceleration over time (1.0 for none) startvolume number Starting volume value endvolume number Ending volume value curve orxFX_CURVE Blending curve type pow number Blending curve exponent flags integer Param flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_AddVolume ( orxFX * _pstFX , orxFLOAT _fStartTime , orxFLOAT _fEndTime , orxFLOAT _fCyclePeriod , orxFLOAT _fCyclePhase , orxFLOAT _fAmplification , orxFLOAT _fAcceleration , orxFLOAT _fStartVolume , orxFLOAT _fEndVolume , orxFX_CURVE _eCurve , orxFLOAT _fPow , orxU32 _u32Flags )","title":"orxFX:addVolume"},{"location":"types/orxFX.html#orxfxaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxFX:addr"},{"location":"types/orxFX.html#orxfxaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxFX:aeq"},{"location":"types/orxFX.html#orxfxapply","text":"Signature: r1 = apply ( object , starttime , endtime ) Description: Applies FX on object Params: name type description object orxOBJECT Object on which to apply the FX starttime number FX local application start time endtime number FX local application end time Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_Apply ( const orxFX * _pstFX , orxOBJECT * _pstObject , orxFLOAT _fStartTime , orxFLOAT _fEndTime )","title":"orxFX:apply"},{"location":"types/orxFX.html#orxfxasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxFX:asVoid"},{"location":"types/orxFX.html#orxfxdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxFX:decreaseCount"},{"location":"types/orxFX.html#orxfxdelete","text":"Signature: r1 = delete () Description: Deletes an FX (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_Delete ( orxFX * _pstFX )","title":"orxFX:delete"},{"location":"types/orxFX.html#orxfxenable","text":"Signature: enable ( enable ) Description: Enables/disables an FX (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxFX_Enable ( orxFX * _pstFX , orxBOOL _bEnable )","title":"orxFX:enable"},{"location":"types/orxFX.html#orxfxgetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxFX:getChild"},{"location":"types/orxFX.html#orxfxgetduration","text":"Signature: r1 = getDuration () Description: Gets FX duration Params: Returns: type description number number C signature: orxFLOAT orxFX_GetDuration ( const orxFX * _pstFX )","title":"orxFX:getDuration"},{"location":"types/orxFX.html#orxfxgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxFX:getFlags"},{"location":"types/orxFX.html#orxfxgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxFX:getGUID"},{"location":"types/orxFX.html#orxfxgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxFX:getID"},{"location":"types/orxFX.html#orxfxgetname","text":"Signature: r1 = getName () Description: Gets FX name Params: Returns: type description string string / empty string C signature: const orxSTRING orxFX_GetName ( const orxFX * _pstFX )","title":"orxFX:getName"},{"location":"types/orxFX.html#orxfxgetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxFX:getNext"},{"location":"types/orxFX.html#orxfxgetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxFX:getOwner"},{"location":"types/orxFX.html#orxfxgetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxFX:getParent"},{"location":"types/orxFX.html#orxfxgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxFX:getPrevious"},{"location":"types/orxFX.html#orxfxgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxFX:getRefCount"},{"location":"types/orxFX.html#orxfxgetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxFX:getSibling"},{"location":"types/orxFX.html#orxfxgetstagger","text":"Signature: r1 , r2 = getStagger () Description: Get FX stagger / offset Params: Returns: type description boolean true if staggered, false otherwise number If non null, will contain the initial offset C signature: orxBOOL orxFX_GetStagger ( const orxFX * _pstFX , orxFLOAT * _pfOffset )","title":"orxFX:getStagger"},{"location":"types/orxFX.html#orxfxincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxFX:increaseCount"},{"location":"types/orxFX.html#orxfxisenabled","text":"Signature: r1 = isEnabled () Description: Is FX enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxFX_IsEnabled ( const orxFX * _pstFX )","title":"orxFX:isEnabled"},{"location":"types/orxFX.html#orxfxislooping","text":"Signature: r1 = isLooping () Description: Is FX looping Params: Returns: type description boolean true if looping, false otherwise C signature: orxBOOL orxFX_IsLooping ( const orxFX * _pstFX )","title":"orxFX:isLooping"},{"location":"types/orxFX.html#orxfxloop","text":"Signature: r1 = loop ( loop ) Description: Set FX loop property (non-const self only) Params: name type description loop boolean Loop / don't loop Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_Loop ( orxFX * _pstFX , orxBOOL _bLoop )","title":"orxFX:loop"},{"location":"types/orxFX.html#orxfxsetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxFX:setFlags"},{"location":"types/orxFX.html#orxfxsetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxFX:setOwner"},{"location":"types/orxFX.html#orxfxsetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxFX:setParent"},{"location":"types/orxFX.html#orxfxsetstagger","text":"Signature: r1 = setStagger ( stagger , offset ) Description: Sets FX stagger / offset (non-const self only) Params: name type description stagger boolean If true, this FX will be added after all current FXs offset number Initial offset, in seconds. Cannot result in a negative start time Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFX_SetStagger ( orxFX * _pstFX , orxBOOL _bStagger , orxFLOAT _fOffset )","title":"orxFX:setStagger"},{"location":"types/orxFX.html#orxfxtestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxFX:testAllFlags"},{"location":"types/orxFX.html#orxfxtestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxFX:testFlags"},{"location":"types/orxFX.html#orxfxtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxFX:type"},{"location":"types/orxFX.html#orxfxupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxFX:update"},{"location":"types/orxFXPOINTER.html","text":"type orxFXPOINTER # Methods # orxFXPOINTER:addDelayedFX # Signature: r1 = addDelayedFX ( fx , delay ) Description: Adds a delayed FX (non-const self only) Params: name type description fx orxFX FX to add delay number Delay time, ignored if the FX is staggered and other FXs are already present Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddDelayedFX ( orxFXPOINTER * _pstFXPointer , orxFX * _pstFX , orxFLOAT _fDelay ) orxFXPOINTER:addDelayedFXFromConfig # Signature: r1 = addDelayedFXFromConfig ( fxconfigid , delay ) Description: Adds a delayed FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add delay number Delay time, ignored if the FX is staggered and other FXs are already present Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddDelayedFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID , orxFLOAT _fDelay ) orxFXPOINTER:addFX # Signature: r1 = addFX ( fx ) Description: Adds an FX (non-const self only) Params: name type description fx orxFX FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddFX ( orxFXPOINTER * _pstFXPointer , orxFX * _pstFX ) orxFXPOINTER:addFXFromConfig # Signature: r1 = addFXFromConfig ( fxconfigid ) Description: Adds an FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID ) orxFXPOINTER:addUniqueDelayedFXFromConfig # Signature: r1 = addUniqueDelayedFXFromConfig ( fxconfigid , delay ) Description: Adds a unique delayed FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add delay number Delay time, ignored if the FX is staggered and other FXs are already present Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddUniqueDelayedFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID , orxFLOAT _fDelay ) orxFXPOINTER:addUniqueFXFromConfig # Signature: r1 = addUniqueFXFromConfig ( fxconfigid ) Description: Adds a unique FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddUniqueFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID ) orxFXPOINTER:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxFXPOINTER:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxFXPOINTER:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxFXPOINTER:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxFXPOINTER:delete # Signature: r1 = delete () Description: Deletes an FXPointer (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_Delete ( orxFXPOINTER * _pstFXPointer ) orxFXPOINTER:enable # Signature: enable ( enable ) Description: Enables/disables an FXPointer (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxFXPointer_Enable ( orxFXPOINTER * _pstFXPointer , orxBOOL _bEnable ) orxFXPOINTER:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxFXPOINTER:getCount # Signature: r1 = getCount () Description: Gets how many FXs are currently in use Params: Returns: type description integer integer (u32) C signature: orxU32 orxFXPointer_GetCount ( const orxFXPOINTER * _pstFXPointer ) orxFXPOINTER:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxFXPOINTER:getFrequency # Signature: r1 = getFrequency () Description: FXPointer frequency get accessor Params: Returns: type description number FXPointer frequency C signature: orxFLOAT orxFXPointer_GetFrequency ( const orxFXPOINTER * _pstFXPointer ) orxFXPOINTER:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxFXPOINTER:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxFXPOINTER:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxFXPOINTER:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxFXPOINTER:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxFXPOINTER:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxFXPOINTER:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxFXPOINTER:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxFXPOINTER:getTime # Signature: r1 = getTime () Description: FXPointer time get accessor Params: Returns: type description number number C signature: orxFLOAT orxFXPointer_GetTime ( const orxFXPOINTER * _pstFXPointer ) orxFXPOINTER:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxFXPOINTER:isEnabled # Signature: r1 = isEnabled () Description: Is FXPointer enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxFXPointer_IsEnabled ( const orxFXPOINTER * _pstFXPointer ) orxFXPOINTER:removeAllFXs # Signature: r1 = removeAllFXs () Description: Removes all FXs (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_RemoveAllFXs ( orxFXPOINTER * _pstFXPointer ) orxFXPOINTER:removeFX # Signature: r1 = removeFX ( fx ) Description: Removes an FX (non-const self only) Params: name type description fx orxFX FX to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_RemoveFX ( orxFXPOINTER * _pstFXPointer , orxFX * _pstFX ) orxFXPOINTER:removeFXFromConfig # Signature: r1 = removeFXFromConfig ( fxconfigid ) Description: Removes an FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_RemoveFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID ) orxFXPOINTER:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxFXPOINTER:setFrequency # Signature: r1 = setFrequency ( frequency ) Description: FXPointer frequency set accessor (non-const self only) Params: name type description frequency number Frequency to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_SetFrequency ( orxFXPOINTER * _pstFXPointer , orxFLOAT _fFrequency ) orxFXPOINTER:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxFXPOINTER:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxFXPOINTER:setTime # Signature: r1 = setTime ( time ) Description: FXPointer time set accessor (non-const self only) Params: name type description time number Time to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_SetTime ( orxFXPOINTER * _pstFXPointer , orxFLOAT _fTime ) orxFXPOINTER:synchronize # Signature: r1 = synchronize ( model ) Description: Synchronizes FX times with an other orxFXPointer if they share common FXs (non-const self only) Params: name type description model orxFXPOINTER# Model FX pointer to use for synchronization Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_Synchronize ( orxFXPOINTER * _pstFXPointer , const orxFXPOINTER * _pstModel ) orxFXPOINTER:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxFXPOINTER:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxFXPOINTER:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxFXPOINTER:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxFXPOINTER"},{"location":"types/orxFXPOINTER.html#type-orxfxpointer","text":"","title":"type orxFXPOINTER"},{"location":"types/orxFXPOINTER.html#methods","text":"","title":"Methods"},{"location":"types/orxFXPOINTER.html#orxfxpointeradddelayedfx","text":"Signature: r1 = addDelayedFX ( fx , delay ) Description: Adds a delayed FX (non-const self only) Params: name type description fx orxFX FX to add delay number Delay time, ignored if the FX is staggered and other FXs are already present Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddDelayedFX ( orxFXPOINTER * _pstFXPointer , orxFX * _pstFX , orxFLOAT _fDelay )","title":"orxFXPOINTER:addDelayedFX"},{"location":"types/orxFXPOINTER.html#orxfxpointeradddelayedfxfromconfig","text":"Signature: r1 = addDelayedFXFromConfig ( fxconfigid , delay ) Description: Adds a delayed FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add delay number Delay time, ignored if the FX is staggered and other FXs are already present Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddDelayedFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID , orxFLOAT _fDelay )","title":"orxFXPOINTER:addDelayedFXFromConfig"},{"location":"types/orxFXPOINTER.html#orxfxpointeraddfx","text":"Signature: r1 = addFX ( fx ) Description: Adds an FX (non-const self only) Params: name type description fx orxFX FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddFX ( orxFXPOINTER * _pstFXPointer , orxFX * _pstFX )","title":"orxFXPOINTER:addFX"},{"location":"types/orxFXPOINTER.html#orxfxpointeraddfxfromconfig","text":"Signature: r1 = addFXFromConfig ( fxconfigid ) Description: Adds an FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID )","title":"orxFXPOINTER:addFXFromConfig"},{"location":"types/orxFXPOINTER.html#orxfxpointeradduniquedelayedfxfromconfig","text":"Signature: r1 = addUniqueDelayedFXFromConfig ( fxconfigid , delay ) Description: Adds a unique delayed FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add delay number Delay time, ignored if the FX is staggered and other FXs are already present Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddUniqueDelayedFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID , orxFLOAT _fDelay )","title":"orxFXPOINTER:addUniqueDelayedFXFromConfig"},{"location":"types/orxFXPOINTER.html#orxfxpointeradduniquefxfromconfig","text":"Signature: r1 = addUniqueFXFromConfig ( fxconfigid ) Description: Adds a unique FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_AddUniqueFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID )","title":"orxFXPOINTER:addUniqueFXFromConfig"},{"location":"types/orxFXPOINTER.html#orxfxpointeraddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxFXPOINTER:addr"},{"location":"types/orxFXPOINTER.html#orxfxpointeraeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxFXPOINTER:aeq"},{"location":"types/orxFXPOINTER.html#orxfxpointerasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxFXPOINTER:asVoid"},{"location":"types/orxFXPOINTER.html#orxfxpointerdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxFXPOINTER:decreaseCount"},{"location":"types/orxFXPOINTER.html#orxfxpointerdelete","text":"Signature: r1 = delete () Description: Deletes an FXPointer (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_Delete ( orxFXPOINTER * _pstFXPointer )","title":"orxFXPOINTER:delete"},{"location":"types/orxFXPOINTER.html#orxfxpointerenable","text":"Signature: enable ( enable ) Description: Enables/disables an FXPointer (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxFXPointer_Enable ( orxFXPOINTER * _pstFXPointer , orxBOOL _bEnable )","title":"orxFXPOINTER:enable"},{"location":"types/orxFXPOINTER.html#orxfxpointergetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxFXPOINTER:getChild"},{"location":"types/orxFXPOINTER.html#orxfxpointergetcount","text":"Signature: r1 = getCount () Description: Gets how many FXs are currently in use Params: Returns: type description integer integer (u32) C signature: orxU32 orxFXPointer_GetCount ( const orxFXPOINTER * _pstFXPointer )","title":"orxFXPOINTER:getCount"},{"location":"types/orxFXPOINTER.html#orxfxpointergetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxFXPOINTER:getFlags"},{"location":"types/orxFXPOINTER.html#orxfxpointergetfrequency","text":"Signature: r1 = getFrequency () Description: FXPointer frequency get accessor Params: Returns: type description number FXPointer frequency C signature: orxFLOAT orxFXPointer_GetFrequency ( const orxFXPOINTER * _pstFXPointer )","title":"orxFXPOINTER:getFrequency"},{"location":"types/orxFXPOINTER.html#orxfxpointergetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxFXPOINTER:getGUID"},{"location":"types/orxFXPOINTER.html#orxfxpointergetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxFXPOINTER:getID"},{"location":"types/orxFXPOINTER.html#orxfxpointergetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxFXPOINTER:getNext"},{"location":"types/orxFXPOINTER.html#orxfxpointergetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxFXPOINTER:getOwner"},{"location":"types/orxFXPOINTER.html#orxfxpointergetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxFXPOINTER:getParent"},{"location":"types/orxFXPOINTER.html#orxfxpointergetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxFXPOINTER:getPrevious"},{"location":"types/orxFXPOINTER.html#orxfxpointergetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxFXPOINTER:getRefCount"},{"location":"types/orxFXPOINTER.html#orxfxpointergetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxFXPOINTER:getSibling"},{"location":"types/orxFXPOINTER.html#orxfxpointergettime","text":"Signature: r1 = getTime () Description: FXPointer time get accessor Params: Returns: type description number number C signature: orxFLOAT orxFXPointer_GetTime ( const orxFXPOINTER * _pstFXPointer )","title":"orxFXPOINTER:getTime"},{"location":"types/orxFXPOINTER.html#orxfxpointerincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxFXPOINTER:increaseCount"},{"location":"types/orxFXPOINTER.html#orxfxpointerisenabled","text":"Signature: r1 = isEnabled () Description: Is FXPointer enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxFXPointer_IsEnabled ( const orxFXPOINTER * _pstFXPointer )","title":"orxFXPOINTER:isEnabled"},{"location":"types/orxFXPOINTER.html#orxfxpointerremoveallfxs","text":"Signature: r1 = removeAllFXs () Description: Removes all FXs (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_RemoveAllFXs ( orxFXPOINTER * _pstFXPointer )","title":"orxFXPOINTER:removeAllFXs"},{"location":"types/orxFXPOINTER.html#orxfxpointerremovefx","text":"Signature: r1 = removeFX ( fx ) Description: Removes an FX (non-const self only) Params: name type description fx orxFX FX to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_RemoveFX ( orxFXPOINTER * _pstFXPointer , orxFX * _pstFX )","title":"orxFXPOINTER:removeFX"},{"location":"types/orxFXPOINTER.html#orxfxpointerremovefxfromconfig","text":"Signature: r1 = removeFXFromConfig ( fxconfigid ) Description: Removes an FX using its config ID (non-const self only) Params: name type description fxconfigid string Config ID of the FX to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_RemoveFXFromConfig ( orxFXPOINTER * _pstFXPointer , const orxSTRING _zFXConfigID )","title":"orxFXPOINTER:removeFXFromConfig"},{"location":"types/orxFXPOINTER.html#orxfxpointersetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxFXPOINTER:setFlags"},{"location":"types/orxFXPOINTER.html#orxfxpointersetfrequency","text":"Signature: r1 = setFrequency ( frequency ) Description: FXPointer frequency set accessor (non-const self only) Params: name type description frequency number Frequency to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_SetFrequency ( orxFXPOINTER * _pstFXPointer , orxFLOAT _fFrequency )","title":"orxFXPOINTER:setFrequency"},{"location":"types/orxFXPOINTER.html#orxfxpointersetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxFXPOINTER:setOwner"},{"location":"types/orxFXPOINTER.html#orxfxpointersetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxFXPOINTER:setParent"},{"location":"types/orxFXPOINTER.html#orxfxpointersettime","text":"Signature: r1 = setTime ( time ) Description: FXPointer time set accessor (non-const self only) Params: name type description time number Time to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_SetTime ( orxFXPOINTER * _pstFXPointer , orxFLOAT _fTime )","title":"orxFXPOINTER:setTime"},{"location":"types/orxFXPOINTER.html#orxfxpointersynchronize","text":"Signature: r1 = synchronize ( model ) Description: Synchronizes FX times with an other orxFXPointer if they share common FXs (non-const self only) Params: name type description model orxFXPOINTER# Model FX pointer to use for synchronization Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxFXPointer_Synchronize ( orxFXPOINTER * _pstFXPointer , const orxFXPOINTER * _pstModel )","title":"orxFXPOINTER:synchronize"},{"location":"types/orxFXPOINTER.html#orxfxpointertestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxFXPOINTER:testAllFlags"},{"location":"types/orxFXPOINTER.html#orxfxpointertestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxFXPOINTER:testFlags"},{"location":"types/orxFXPOINTER.html#orxfxpointertype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxFXPOINTER:type"},{"location":"types/orxFXPOINTER.html#orxfxpointerupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxFXPOINTER:update"},{"location":"types/orxGRAPHIC.html","text":"type orxGRAPHIC # Methods # orxGRAPHIC:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxGRAPHIC:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxGRAPHIC:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxGRAPHIC:clearBlendMode # Signature: r1 = clearBlendMode () Description: Clears graphic blend mode (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_ClearBlendMode ( orxGRAPHIC * _pstGraphic ) orxGRAPHIC:clearColor # Signature: r1 = clearColor () Description: Clears graphic color (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_ClearColor ( orxGRAPHIC * _pstGraphic ) orxGRAPHIC:clone # Signature: r1 = clone () Description: Clones a graphic Params: Returns: type description orxGRAPHIC orxGRAPHIC / nil C signature: orxGRAPHIC * orxGraphic_Clone ( const orxGRAPHIC * _pstGraphic ) orxGRAPHIC:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxGRAPHIC:delete # Signature: r1 = delete () Description: Deletes a graphic (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_Delete ( orxGRAPHIC * _pstGraphic ) orxGRAPHIC:getBlendMode # Signature: r1 = getBlendMode () Description: Gets graphic blend mode Params: Returns: type description orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) C signature: orxDISPLAY_BLEND_MODE orxGraphic_GetBlendMode ( const orxGRAPHIC * _pstGraphic ) orxGRAPHIC:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxGRAPHIC:getColor # Signature: r1 = getColor () Description: Gets graphic color Params: Returns: type description orxCOLOR orxCOLOR / nil C signature: orxCOLOR * orxGraphic_GetColor ( const orxGRAPHIC * _pstGraphic , orxCOLOR * _pstColor ) orxGRAPHIC:getData # Signature: r1 = getData () Description: Gets graphic data Params: Returns: type description orxSTRUCTURE OrxSTRUCTURE / nil C signature: orxSTRUCTURE * orxGraphic_GetData ( const orxGRAPHIC * _pstGraphic ) orxGRAPHIC:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxGRAPHIC:getFlip # Signature: r1 , r2 , r3 = getFlip () Description: Gets graphic flipping Params: Returns: type description orxSTATUS success / failure boolean X axis flipping boolean Y axis flipping C signature: orxSTATUS orxGraphic_GetFlip ( const orxGRAPHIC * _pstGraphic , orxBOOL * _pbFlipX , orxBOOL * _pbFlipY ) orxGRAPHIC:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxGRAPHIC:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxGRAPHIC:getName # Signature: r1 = getName () Description: Gets graphic config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxGraphic_GetName ( const orxGRAPHIC * _pstGraphic ) orxGRAPHIC:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxGRAPHIC:getOrigin # Signature: r1 = getOrigin () Description: Gets graphic origin Params: Returns: type description orxVECTOR Origin coordinates C signature: orxVECTOR * orxGraphic_GetOrigin ( const orxGRAPHIC * _pstGraphic , orxVECTOR * _pvOrigin ) orxGRAPHIC:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxGRAPHIC:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxGRAPHIC:getPivot # Signature: r1 = getPivot () Description: Gets graphic pivot Params: Returns: type description orxVECTOR orxPIVOT / nil C signature: orxVECTOR * orxGraphic_GetPivot ( const orxGRAPHIC * _pstGraphic , orxVECTOR * _pvPivot ) orxGRAPHIC:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxGRAPHIC:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxGRAPHIC:getRepeat # Signature: r1 , r2 , r3 = getRepeat () Description: Gets graphic repeat (wrap) values Params: Returns: type description orxSTATUS success / failure number X-axis repeat value number Y-axis repeat value C signature: orxSTATUS orxGraphic_GetRepeat ( const orxGRAPHIC * _pstGraphic , orxFLOAT * _pfRepeatX , orxFLOAT * _pfRepeatY ) orxGRAPHIC:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxGRAPHIC:getSize # Signature: r1 = getSize () Description: Gets graphic size Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxGraphic_GetSize ( const orxGRAPHIC * _pstGraphic , orxVECTOR * _pvSize ) orxGRAPHIC:getSmoothing # Signature: r1 = getSmoothing () Description: Gets graphic smoothing Params: Returns: type description orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) C signature: orxDISPLAY_SMOOTHING orxGraphic_GetSmoothing ( const orxGRAPHIC * _pstGraphic ) orxGRAPHIC:hasBlendMode # Signature: r1 = hasBlendMode () Description: Graphic has blend mode accessor Params: Returns: type description boolean true / false C signature: orxBOOL orxGraphic_HasBlendMode ( const orxGRAPHIC * _pstGraphic ) orxGRAPHIC:hasColor # Signature: r1 = hasColor () Description: Graphic has color accessor Params: Returns: type description boolean true / false C signature: orxBOOL orxGraphic_HasColor ( const orxGRAPHIC * _pstGraphic ) orxGRAPHIC:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxGRAPHIC:setBlendMode # Signature: r1 = setBlendMode ( blendmode ) Description: Sets object blend mode (non-const self only) Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetBlendMode ( orxGRAPHIC * _pstGraphic , orxDISPLAY_BLEND_MODE _eBlendMode ) orxGRAPHIC:setColor # Signature: r1 = setColor ( color ) Description: Sets graphic color (non-const self only) Params: name type description color orxCOLOR# Color to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetColor ( orxGRAPHIC * _pstGraphic , const orxCOLOR * _pstColor ) orxGRAPHIC:setData # Signature: r1 = setData ( data ) Description: Sets graphic data (non-const self only) Params: name type description data orxSTRUCTURE Data structure to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetData ( orxGRAPHIC * _pstGraphic , orxSTRUCTURE * _pstData ) orxGRAPHIC:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxGRAPHIC:setFlip # Signature: r1 = setFlip ( flipx , flipy ) Description: Sets graphic flipping (non-const self only) Params: name type description flipx boolean Flip it on X axis flipy boolean Flip it on Y axis Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetFlip ( orxGRAPHIC * _pstGraphic , orxBOOL _bFlipX , orxBOOL _bFlipY ) orxGRAPHIC:setOrigin # Signature: r1 = setOrigin ( origin ) Description: Sets graphic origin (non-const self only) Params: name type description origin orxVECTOR# Origin coordinates Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetOrigin ( orxGRAPHIC * _pstGraphic , const orxVECTOR * _pvOrigin ) orxGRAPHIC:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxGRAPHIC:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxGRAPHIC:setPivot # Signature: r1 = setPivot ( pivot ) Description: Sets graphic pivot (non-const self only) Params: name type description pivot orxVECTOR# Pivot to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetPivot ( orxGRAPHIC * _pstGraphic , const orxVECTOR * _pvPivot ) orxGRAPHIC:setRelativePivot # Signature: r1 = setRelativePivot ( alignflags ) Description: Sets relative graphic pivot (non-const self only) Params: name type description alignflags integer Alignment flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetRelativePivot ( orxGRAPHIC * _pstGraphic , orxU32 _u32AlignFlags ) orxGRAPHIC:setRepeat # Signature: r1 = setRepeat ( repeatx , repeaty ) Description: Sets graphic repeat (wrap) value (non-const self only) Params: name type description repeatx number X-axis repeat value repeaty number Y-axis repeat value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetRepeat ( orxGRAPHIC * _pstGraphic , orxFLOAT _fRepeatX , orxFLOAT _fRepeatY ) orxGRAPHIC:setSize # Signature: r1 = setSize ( size ) Description: Sets graphic size (non-const self only) Params: name type description size orxVECTOR# Size to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetSize ( orxGRAPHIC * _pstGraphic , const orxVECTOR * _pvSize ) orxGRAPHIC:setSmoothing # Signature: r1 = setSmoothing ( smoothing ) Description: Sets graphic smoothing (non-const self only) Params: name type description smoothing orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetSmoothing ( orxGRAPHIC * _pstGraphic , orxDISPLAY_SMOOTHING _eSmoothing ) orxGRAPHIC:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxGRAPHIC:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxGRAPHIC:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxGRAPHIC:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo ) orxGRAPHIC:updateSize # Signature: r1 = updateSize () Description: Updates graphic size (recompute) (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_UpdateSize ( orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC"},{"location":"types/orxGRAPHIC.html#type-orxgraphic","text":"","title":"type orxGRAPHIC"},{"location":"types/orxGRAPHIC.html#methods","text":"","title":"Methods"},{"location":"types/orxGRAPHIC.html#orxgraphicaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxGRAPHIC:addr"},{"location":"types/orxGRAPHIC.html#orxgraphicaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxGRAPHIC:aeq"},{"location":"types/orxGRAPHIC.html#orxgraphicasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxGRAPHIC:asVoid"},{"location":"types/orxGRAPHIC.html#orxgraphicclearblendmode","text":"Signature: r1 = clearBlendMode () Description: Clears graphic blend mode (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_ClearBlendMode ( orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:clearBlendMode"},{"location":"types/orxGRAPHIC.html#orxgraphicclearcolor","text":"Signature: r1 = clearColor () Description: Clears graphic color (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_ClearColor ( orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:clearColor"},{"location":"types/orxGRAPHIC.html#orxgraphicclone","text":"Signature: r1 = clone () Description: Clones a graphic Params: Returns: type description orxGRAPHIC orxGRAPHIC / nil C signature: orxGRAPHIC * orxGraphic_Clone ( const orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:clone"},{"location":"types/orxGRAPHIC.html#orxgraphicdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxGRAPHIC:decreaseCount"},{"location":"types/orxGRAPHIC.html#orxgraphicdelete","text":"Signature: r1 = delete () Description: Deletes a graphic (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_Delete ( orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:delete"},{"location":"types/orxGRAPHIC.html#orxgraphicgetblendmode","text":"Signature: r1 = getBlendMode () Description: Gets graphic blend mode Params: Returns: type description orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) C signature: orxDISPLAY_BLEND_MODE orxGraphic_GetBlendMode ( const orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:getBlendMode"},{"location":"types/orxGRAPHIC.html#orxgraphicgetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxGRAPHIC:getChild"},{"location":"types/orxGRAPHIC.html#orxgraphicgetcolor","text":"Signature: r1 = getColor () Description: Gets graphic color Params: Returns: type description orxCOLOR orxCOLOR / nil C signature: orxCOLOR * orxGraphic_GetColor ( const orxGRAPHIC * _pstGraphic , orxCOLOR * _pstColor )","title":"orxGRAPHIC:getColor"},{"location":"types/orxGRAPHIC.html#orxgraphicgetdata","text":"Signature: r1 = getData () Description: Gets graphic data Params: Returns: type description orxSTRUCTURE OrxSTRUCTURE / nil C signature: orxSTRUCTURE * orxGraphic_GetData ( const orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:getData"},{"location":"types/orxGRAPHIC.html#orxgraphicgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxGRAPHIC:getFlags"},{"location":"types/orxGRAPHIC.html#orxgraphicgetflip","text":"Signature: r1 , r2 , r3 = getFlip () Description: Gets graphic flipping Params: Returns: type description orxSTATUS success / failure boolean X axis flipping boolean Y axis flipping C signature: orxSTATUS orxGraphic_GetFlip ( const orxGRAPHIC * _pstGraphic , orxBOOL * _pbFlipX , orxBOOL * _pbFlipY )","title":"orxGRAPHIC:getFlip"},{"location":"types/orxGRAPHIC.html#orxgraphicgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxGRAPHIC:getGUID"},{"location":"types/orxGRAPHIC.html#orxgraphicgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxGRAPHIC:getID"},{"location":"types/orxGRAPHIC.html#orxgraphicgetname","text":"Signature: r1 = getName () Description: Gets graphic config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxGraphic_GetName ( const orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:getName"},{"location":"types/orxGRAPHIC.html#orxgraphicgetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxGRAPHIC:getNext"},{"location":"types/orxGRAPHIC.html#orxgraphicgetorigin","text":"Signature: r1 = getOrigin () Description: Gets graphic origin Params: Returns: type description orxVECTOR Origin coordinates C signature: orxVECTOR * orxGraphic_GetOrigin ( const orxGRAPHIC * _pstGraphic , orxVECTOR * _pvOrigin )","title":"orxGRAPHIC:getOrigin"},{"location":"types/orxGRAPHIC.html#orxgraphicgetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxGRAPHIC:getOwner"},{"location":"types/orxGRAPHIC.html#orxgraphicgetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxGRAPHIC:getParent"},{"location":"types/orxGRAPHIC.html#orxgraphicgetpivot","text":"Signature: r1 = getPivot () Description: Gets graphic pivot Params: Returns: type description orxVECTOR orxPIVOT / nil C signature: orxVECTOR * orxGraphic_GetPivot ( const orxGRAPHIC * _pstGraphic , orxVECTOR * _pvPivot )","title":"orxGRAPHIC:getPivot"},{"location":"types/orxGRAPHIC.html#orxgraphicgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxGRAPHIC:getPrevious"},{"location":"types/orxGRAPHIC.html#orxgraphicgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxGRAPHIC:getRefCount"},{"location":"types/orxGRAPHIC.html#orxgraphicgetrepeat","text":"Signature: r1 , r2 , r3 = getRepeat () Description: Gets graphic repeat (wrap) values Params: Returns: type description orxSTATUS success / failure number X-axis repeat value number Y-axis repeat value C signature: orxSTATUS orxGraphic_GetRepeat ( const orxGRAPHIC * _pstGraphic , orxFLOAT * _pfRepeatX , orxFLOAT * _pfRepeatY )","title":"orxGRAPHIC:getRepeat"},{"location":"types/orxGRAPHIC.html#orxgraphicgetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxGRAPHIC:getSibling"},{"location":"types/orxGRAPHIC.html#orxgraphicgetsize","text":"Signature: r1 = getSize () Description: Gets graphic size Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxGraphic_GetSize ( const orxGRAPHIC * _pstGraphic , orxVECTOR * _pvSize )","title":"orxGRAPHIC:getSize"},{"location":"types/orxGRAPHIC.html#orxgraphicgetsmoothing","text":"Signature: r1 = getSmoothing () Description: Gets graphic smoothing Params: Returns: type description orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) C signature: orxDISPLAY_SMOOTHING orxGraphic_GetSmoothing ( const orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:getSmoothing"},{"location":"types/orxGRAPHIC.html#orxgraphichasblendmode","text":"Signature: r1 = hasBlendMode () Description: Graphic has blend mode accessor Params: Returns: type description boolean true / false C signature: orxBOOL orxGraphic_HasBlendMode ( const orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:hasBlendMode"},{"location":"types/orxGRAPHIC.html#orxgraphichascolor","text":"Signature: r1 = hasColor () Description: Graphic has color accessor Params: Returns: type description boolean true / false C signature: orxBOOL orxGraphic_HasColor ( const orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:hasColor"},{"location":"types/orxGRAPHIC.html#orxgraphicincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxGRAPHIC:increaseCount"},{"location":"types/orxGRAPHIC.html#orxgraphicsetblendmode","text":"Signature: r1 = setBlendMode ( blendmode ) Description: Sets object blend mode (non-const self only) Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetBlendMode ( orxGRAPHIC * _pstGraphic , orxDISPLAY_BLEND_MODE _eBlendMode )","title":"orxGRAPHIC:setBlendMode"},{"location":"types/orxGRAPHIC.html#orxgraphicsetcolor","text":"Signature: r1 = setColor ( color ) Description: Sets graphic color (non-const self only) Params: name type description color orxCOLOR# Color to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetColor ( orxGRAPHIC * _pstGraphic , const orxCOLOR * _pstColor )","title":"orxGRAPHIC:setColor"},{"location":"types/orxGRAPHIC.html#orxgraphicsetdata","text":"Signature: r1 = setData ( data ) Description: Sets graphic data (non-const self only) Params: name type description data orxSTRUCTURE Data structure to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetData ( orxGRAPHIC * _pstGraphic , orxSTRUCTURE * _pstData )","title":"orxGRAPHIC:setData"},{"location":"types/orxGRAPHIC.html#orxgraphicsetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxGRAPHIC:setFlags"},{"location":"types/orxGRAPHIC.html#orxgraphicsetflip","text":"Signature: r1 = setFlip ( flipx , flipy ) Description: Sets graphic flipping (non-const self only) Params: name type description flipx boolean Flip it on X axis flipy boolean Flip it on Y axis Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetFlip ( orxGRAPHIC * _pstGraphic , orxBOOL _bFlipX , orxBOOL _bFlipY )","title":"orxGRAPHIC:setFlip"},{"location":"types/orxGRAPHIC.html#orxgraphicsetorigin","text":"Signature: r1 = setOrigin ( origin ) Description: Sets graphic origin (non-const self only) Params: name type description origin orxVECTOR# Origin coordinates Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetOrigin ( orxGRAPHIC * _pstGraphic , const orxVECTOR * _pvOrigin )","title":"orxGRAPHIC:setOrigin"},{"location":"types/orxGRAPHIC.html#orxgraphicsetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxGRAPHIC:setOwner"},{"location":"types/orxGRAPHIC.html#orxgraphicsetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxGRAPHIC:setParent"},{"location":"types/orxGRAPHIC.html#orxgraphicsetpivot","text":"Signature: r1 = setPivot ( pivot ) Description: Sets graphic pivot (non-const self only) Params: name type description pivot orxVECTOR# Pivot to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetPivot ( orxGRAPHIC * _pstGraphic , const orxVECTOR * _pvPivot )","title":"orxGRAPHIC:setPivot"},{"location":"types/orxGRAPHIC.html#orxgraphicsetrelativepivot","text":"Signature: r1 = setRelativePivot ( alignflags ) Description: Sets relative graphic pivot (non-const self only) Params: name type description alignflags integer Alignment flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetRelativePivot ( orxGRAPHIC * _pstGraphic , orxU32 _u32AlignFlags )","title":"orxGRAPHIC:setRelativePivot"},{"location":"types/orxGRAPHIC.html#orxgraphicsetrepeat","text":"Signature: r1 = setRepeat ( repeatx , repeaty ) Description: Sets graphic repeat (wrap) value (non-const self only) Params: name type description repeatx number X-axis repeat value repeaty number Y-axis repeat value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetRepeat ( orxGRAPHIC * _pstGraphic , orxFLOAT _fRepeatX , orxFLOAT _fRepeatY )","title":"orxGRAPHIC:setRepeat"},{"location":"types/orxGRAPHIC.html#orxgraphicsetsize","text":"Signature: r1 = setSize ( size ) Description: Sets graphic size (non-const self only) Params: name type description size orxVECTOR# Size to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetSize ( orxGRAPHIC * _pstGraphic , const orxVECTOR * _pvSize )","title":"orxGRAPHIC:setSize"},{"location":"types/orxGRAPHIC.html#orxgraphicsetsmoothing","text":"Signature: r1 = setSmoothing ( smoothing ) Description: Sets graphic smoothing (non-const self only) Params: name type description smoothing orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_SetSmoothing ( orxGRAPHIC * _pstGraphic , orxDISPLAY_SMOOTHING _eSmoothing )","title":"orxGRAPHIC:setSmoothing"},{"location":"types/orxGRAPHIC.html#orxgraphictestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxGRAPHIC:testAllFlags"},{"location":"types/orxGRAPHIC.html#orxgraphictestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxGRAPHIC:testFlags"},{"location":"types/orxGRAPHIC.html#orxgraphictype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxGRAPHIC:type"},{"location":"types/orxGRAPHIC.html#orxgraphicupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxGRAPHIC:update"},{"location":"types/orxGRAPHIC.html#orxgraphicupdatesize","text":"Signature: r1 = updateSize () Description: Updates graphic size (recompute) (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxGraphic_UpdateSize ( orxGRAPHIC * _pstGraphic )","title":"orxGRAPHIC:updateSize"},{"location":"types/orxOBJECT.html","text":"type orxOBJECT # Methods # orxOBJECT:addFX # Signature: r1 = addFX ( fxconfigid ) Description: Adds an FX using its config ID. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddFX ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID ) orxOBJECT:addFXRecursive # Signature: addFXRecursive ( fxconfigid , propagationdelay ) Description: Adds an FX to an object and its owned children. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add propagationdelay number Propagation delay for each child Returns: C signature: void orxObject_AddFXRecursive ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID , orxFLOAT _fPropagationDelay ) orxOBJECT:addFilter # Signature: r1 = addFilter ( filterconfigid ) Description: Adds a filter to the sounds of an object (cascading). (non-const self only) Params: name type description filterconfigid string Config ID of the filter to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddFilter ( orxOBJECT * _pstObject , const orxSTRING _zFilterConfigID ) orxOBJECT:addShader # Signature: r1 = addShader ( shaderconfigid ) Description: Adds a shader to an object using its config ID. (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddShader ( orxOBJECT * _pstObject , const orxSTRING _zShaderConfigID ) orxOBJECT:addShaderRecursive # Signature: addShaderRecursive ( shaderconfigid ) Description: Adds a shader to an object and its owned children. (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to add Returns: C signature: void orxObject_AddShaderRecursive ( orxOBJECT * _pstObject , const orxSTRING _zShaderConfigID ) orxOBJECT:addSound # Signature: r1 = addSound ( soundconfigid ) Description: Adds a sound using its config ID. (non-const self only) Params: name type description soundconfigid string Config ID of the sound to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddSound ( orxOBJECT * _pstObject , const orxSTRING _zSoundConfigID ) orxOBJECT:addTimeLineTrack # Signature: r1 = addTimeLineTrack ( trackconfigid ) Description: Adds a timeline track to an object using its config ID. (non-const self only) Params: name type description trackconfigid string Config ID of the timeline track to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddTimeLineTrack ( orxOBJECT * _pstObject , const orxSTRING _zTrackConfigID ) orxOBJECT:addTimeLineTrackRecursive # Signature: addTimeLineTrackRecursive ( trackconfigid ) Description: Adds a timeline track to an object and its owned children. (non-const self only) Params: name type description trackconfigid string Config ID of the timeline track to add Returns: C signature: void orxObject_AddTimeLineTrackRecursive ( orxOBJECT * _pstObject , const orxSTRING _zTrackConfigID ) orxOBJECT:addUniqueFX # Signature: r1 = addUniqueFX ( fxconfigid ) Description: Adds a unique FX using its config ID. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddUniqueFX ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID ) orxOBJECT:addUniqueFXRecursive # Signature: addUniqueFXRecursive ( fxconfigid , propagationdelay ) Description: Adds a unique FX to an object and its owned children. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add propagationdelay number Propagation delay for each child Returns: C signature: void orxObject_AddUniqueFXRecursive ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID , orxFLOAT _fPropagationDelay ) orxOBJECT:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxOBJECT:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxOBJECT:applyForce # Signature: r1 = applyForce ( force , point ) Description: Applies a force. (non-const self only) Params: name type description force orxVECTOR# Force to apply point orxVECTOR# Point (world coordinates) where the force will be applied, if orxNULL, center of mass will be used Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_ApplyForce ( orxOBJECT * _pstObject , const orxVECTOR * _pvForce , const orxVECTOR * _pvPoint ) orxOBJECT:applyImpulse # Signature: r1 = applyImpulse ( impulse , point ) Description: Applies an impulse. (non-const self only) Params: name type description impulse orxVECTOR# Impulse to apply point orxVECTOR# Point (world coordinates) where the impulse will be applied, if orxNULL, center of mass will be used Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_ApplyImpulse ( orxOBJECT * _pstObject , const orxVECTOR * _pvImpulse , const orxVECTOR * _pvPoint ) orxOBJECT:applyTorque # Signature: r1 = applyTorque ( torque ) Description: Applies a torque. (non-const self only) Params: name type description torque number Torque to apply Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_ApplyTorque ( orxOBJECT * _pstObject , orxFLOAT _fTorque ) orxOBJECT:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxOBJECT:attach # Signature: r1 = attach ( parent ) Description: Attaches an object to a parent while maintaining the object's world position. (non-const self only) Params: name type description parent void* Parent structure to attach to (object, spawner, camera or frame) Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxObject_Attach ( orxOBJECT * _pstObject , void * _pParent ) orxOBJECT:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxOBJECT:delete # Signature: r1 = delete () Description: Deletes an object, *unsafe* when called from an event handler: call orxObject_SetLifeTime(orxFLOAT_0) instead (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Delete ( orxOBJECT * _pstObject ) orxOBJECT:detach # Signature: r1 = detach () Description: Detaches an object from a parent while maintaining the object's world position. (non-const self only) Params: Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxObject_Detach ( orxOBJECT * _pstObject ) orxOBJECT:enable # Signature: enable ( enable ) Description: Enables/disables an object. Note that enabling/disabling an object is not recursive, so its children will not be affected, see orxObject_EnableRecursive(). (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxObject_Enable ( orxOBJECT * _pstObject , orxBOOL _bEnable ) orxOBJECT:enableRecursive # Signature: enableRecursive ( enable ) Description: Enables/disables an object and all its owned children. (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxObject_EnableRecursive ( orxOBJECT * _pstObject , orxBOOL _bEnable ) orxOBJECT:enableShader # Signature: enableShader ( enable ) Description: Enables an object's shader. (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxObject_EnableShader ( orxOBJECT * _pstObject , orxBOOL _bEnable ) orxOBJECT:enableTimeLine # Signature: enableTimeLine ( enable ) Description: Enables an object's timeline. (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxObject_EnableTimeLine ( orxOBJECT * _pstObject , orxBOOL _bEnable ) orxOBJECT:getActiveTime # Signature: r1 = getActiveTime () Description: Gets object active time, i.e. the amount of time that the object has been alive taking into account the object's clock multiplier and object's periods of pause. Params: Returns: type description number Active time C signature: orxFLOAT orxObject_GetActiveTime ( const orxOBJECT * _pstObject ) orxOBJECT:getAngularVelocity # Signature: r1 = getAngularVelocity () Description: Gets an object angular velocity. Params: Returns: type description number Object angular velocity (radians/seconds) C signature: orxFLOAT orxObject_GetAngularVelocity ( const orxOBJECT * _pstObject ) orxOBJECT:getAnimFrequency # Signature: r1 = getAnimFrequency () Description: Gets an object's relative animation frequency. Params: Returns: type description number Animation frequency / -orxFLOAT_1 C signature: orxFLOAT orxObject_GetAnimFrequency ( const orxOBJECT * _pstObject ) orxOBJECT:getAnimPointer # Signature: r1 = getAnimPointer () Description: Get the orxANIMPOINTER linked to the orxSTRUCTURE Params: Returns: type description orxANIMPOINTER The orxANIMPOINTER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getBlendMode # Signature: r1 = getBlendMode () Description: Gets object blend mode. Params: Returns: type description orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) C signature: orxDISPLAY_BLEND_MODE orxObject_GetBlendMode ( const orxOBJECT * _pstObject ) orxOBJECT:getBody # Signature: r1 = getBody () Description: Get the orxBODY linked to the orxSTRUCTURE Params: Returns: type description orxBODY The orxBODY or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getBoundingBox # Signature: r1 = getBoundingBox () Description: Gets object's bounding box (OBB). Params: Returns: type description orxOBOX Bounding box / nil C signature: orxOBOX * orxObject_GetBoundingBox ( const orxOBJECT * _pstObject , orxOBOX * _pstBoundingBox ) orxOBJECT:getChild # Signature: r1 = getChild () Description: Gets object's first child object. See orxObject_SetOwner() and orxObject_SetParent() for a comparison of ownership and parenthood in Orx. Note: this function will filter out any camera or spawner and retrieve the first child object. This function is typically used to iterate over the children objects of an object. For example: @code for( orxOBJECT *pstChild = orxObject_GetChild(pstObject); pstChild != orxNULL; pstChild = orxObject_GetSibling(pstChild)) { DoSomething(pstChild); // DoSomething() can recurse into the children of pstChild for a depth-first traversal } @endcode Params: Returns: type description orxOBJECT First child object / nil C signature: orxOBJECT * orxObject_GetChild ( const orxOBJECT * _pstObject ) orxOBJECT:getClock # Signature: r1 = getClock () Description: Get the orxCLOCK linked to the orxSTRUCTURE Params: Returns: type description orxCLOCK The orxCLOCK or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getColor # Signature: r1 = getColor () Description: Gets object color. Params: Returns: type description orxCOLOR orxCOLOR / nil C signature: orxCOLOR * orxObject_GetColor ( const orxOBJECT * _pstObject , orxCOLOR * _pstColor ) orxOBJECT:getCurrentAnim # Signature: r1 = getCurrentAnim () Description: Gets current animation. Params: Returns: type description string Current animation / empty string C signature: const orxSTRING orxObject_GetCurrentAnim ( const orxOBJECT * _pstObject ) orxOBJECT:getCustomGravity # Signature: r1 = getCustomGravity () Description: Gets an object custom gravity. Params: Returns: type description orxVECTOR Object custom gravity / nil is object doesn't have any C signature: orxVECTOR * orxObject_GetCustomGravity ( const orxOBJECT * _pstObject , orxVECTOR * _pvCustomGravity ) orxOBJECT:getFXFrequency # Signature: r1 = getFXFrequency () Description: Gets an object's relative FX frequency. Params: Returns: type description number FX frequency / -orxFLOAT_1 C signature: orxFLOAT orxObject_GetFXFrequency ( const orxOBJECT * _pstObject ) orxOBJECT:getFXPointer # Signature: r1 = getFXPointer () Description: Get the orxFXPOINTER linked to the orxSTRUCTURE Params: Returns: type description orxFXPOINTER The orxFXPOINTER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxOBJECT:getFlip # Signature: r1 , r2 , r3 = getFlip () Description: Gets object flipping. Params: Returns: type description orxSTATUS success / failure boolean X axis flipping boolean Y axis flipping C signature: orxSTATUS orxObject_GetFlip ( const orxOBJECT * _pstObject , orxBOOL * _pbFlipX , orxBOOL * _pbFlipY ) orxOBJECT:getFrame # Signature: r1 = getFrame () Description: Get the orxFRAME linked to the orxSTRUCTURE Params: Returns: type description orxFRAME The orxFRAME or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxOBJECT:getGraphic # Signature: r1 = getGraphic () Description: Get the orxGRAPHIC linked to the orxSTRUCTURE Params: Returns: type description orxGRAPHIC The orxGRAPHIC or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getGroupID # Signature: r1 = getGroupID () Description: Gets object's group ID. Params: Returns: type description integer Object's group ID. This is the string ID (see orxString_GetFromID()) of the object's group name. C signature: orxSTRINGID orxObject_GetGroupID ( const orxOBJECT * _pstObject ) orxOBJECT:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxOBJECT:getIgnoreFlags # Signature: r1 = getIgnoreFlags () Description: Gets object's ignore flags. Params: Returns: type description integer Ignore flags C signature: orxU32 orxObject_GetIgnoreFlags ( const orxOBJECT * _pstObject ) orxOBJECT:getLastAddedSound # Signature: r1 = getLastAddedSound () Description: Gets last added sound (Do *NOT* destroy it directly before removing it!!!). Params: Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxObject_GetLastAddedSound ( const orxOBJECT * _pstObject ) orxOBJECT:getLifeTime # Signature: r1 = getLifeTime () Description: Gets object lifetime. Params: Returns: type description number Lifetime / negative value if none C signature: orxFLOAT orxObject_GetLifeTime ( const orxOBJECT * _pstObject ) orxOBJECT:getLiteralIgnoreFlags # Signature: r1 = getLiteralIgnoreFlags () Description: Gets object's ignore flags literals. The result will not persist through other calls to this function or to orxFrame_GetIgnoreFlagNames(). Params: Returns: type description string Ignore flags literals C signature: const orxSTRING orxObject_GetLiteralIgnoreFlags ( const orxOBJECT * _pstObject ) orxOBJECT:getMass # Signature: r1 = getMass () Description: Gets an object mass. Params: Returns: type description number Object mass C signature: orxFLOAT orxObject_GetMass ( const orxOBJECT * _pstObject ) orxOBJECT:getMassCenter # Signature: r1 = getMassCenter () Description: Gets an object center of mass (object space). Params: Returns: type description orxVECTOR Mass center / nil C signature: orxVECTOR * orxObject_GetMassCenter ( const orxOBJECT * _pstObject , orxVECTOR * _pvMassCenter ) orxOBJECT:getName # Signature: r1 = getName () Description: Gets object config name. Params: Returns: type description string string / empty string C signature: const orxSTRING orxObject_GetName ( const orxOBJECT * _pstObject ) orxOBJECT:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxOBJECT:getNextChild # Signature: r1 = getNextChild ( child , structureid ) Description: Gets object's next child structure of a given type (camera, object or spawner). See orxObject_SetOwner() and orxObject_SetParent() for a comparison of ownership and parenthood in Orx. See orxObject_GetChild()/orxObject_GetSibling() if you want to only consider children objects. This function is typically used to iterate over the children of an object. For example, iterating over the immediate children cameras: @code for( orxCAMERA *pstChild = orxCAMERA(orxObject_GetNextChild(pstObject, orxNULL, orxSTRUCTURE_ID_CAMERA)); pstChild != orxNULL; pstChild = orxCAMERA(orxObject_GetNextChild(pstObject, pstChild, orxSTRUCTURE_ID_CAMERA))) { DoSomethingWithCamera(pstChild); } @endcode Params: name type description child void* Concerned child to retrieve the next sibling, nil to retrieve the first child structureid orxSTRUCTURE_ID ID of the structure to consider (camera, spawner, object or frame) Returns: type description orxSTRUCTURE Next child/sibling structure (camera, spawner, object or frame) / nil C signature: orxSTRUCTURE * orxObject_GetNextChild ( const orxOBJECT * _pstObject , void * _pChild , orxSTRUCTURE_ID _eStructureID ) orxOBJECT:getOrigin # Signature: r1 = getOrigin () Description: Get object origin. See orxObject_SetOrigin() for a more detailed explanation. Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetOrigin ( const orxOBJECT * _pstObject , orxVECTOR * _pvOrigin ) orxOBJECT:getOwnedChild # Signature: r1 = getOwnedChild () Description: Gets object's first owned child (only if created with a config ChildList / has an owner set with orxObject_SetOwner) see orxObject_SetOwner() and orxObject_SetParent() for a comparison of ownership and parenthood in Orx. * This function is typically used to iterate over the owned children of an object. For example; @code for( orxOBJECT * pstChild = orxObject_GetOwnedChild(pstObject); pstChild; pstChild = orxObject_GetOwnedSibling(pstChild)) { do_something(pstChild); } @endcode Params: Returns: type description orxOBJECT First owned child object / nil C signature: orxOBJECT * orxObject_GetOwnedChild ( const orxOBJECT * _pstObject ) orxOBJECT:getOwnedSibling # Signature: r1 = getOwnedSibling () Description: Gets object's next owned sibling (only if created with a config ChildList / has an owner set with orxObject_SetOwner) This function is typically used to iterate over the owned children of an object, see orxObject_GetOwnedChild() for an example. Params: Returns: type description orxOBJECT Next sibling object / nil C signature: orxOBJECT * orxObject_GetOwnedSibling ( const orxOBJECT * _pstObject ) orxOBJECT:getOwner # Signature: r1 = getOwner () Description: Gets object's owner. See orxObject_SetOwner(). Params: Returns: type description orxSTRUCTURE Owner / nil C signature: orxSTRUCTURE * orxObject_GetOwner ( const orxOBJECT * _pstObject ) orxOBJECT:getParent # Signature: r1 = getParent () Description: Gets object's parent. See orxObject_SetParent() for a more detailed explanation. Params: Returns: type description orxSTRUCTURE Parent (object, spawner, camera or frame) / nil C signature: orxSTRUCTURE * orxObject_GetParent ( const orxOBJECT * _pstObject ) orxOBJECT:getPivot # Signature: r1 = getPivot () Description: Get object pivot. See orxObject_SetPivot() for a more detailed explanation. Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetPivot ( const orxOBJECT * _pstObject , orxVECTOR * _pvPivot ) orxOBJECT:getPosition # Signature: r1 = getPosition () Description: Get object position. See orxObject_SetPosition(). Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetPosition ( const orxOBJECT * _pstObject , orxVECTOR * _pvPosition ) orxOBJECT:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxOBJECT:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxOBJECT:getRelativeSpeed # Signature: r1 = getRelativeSpeed () Description: Gets an object relative speed. Params: Returns: type description orxVECTOR Object relative speed / nil C signature: orxVECTOR * orxObject_GetRelativeSpeed ( const orxOBJECT * _pstObject , orxVECTOR * _pvRelativeSpeed ) orxOBJECT:getRepeat # Signature: r1 , r2 , r3 = getRepeat () Description: Gets object repeat (wrap) values. Params: Returns: type description orxSTATUS success / failure number X-axis repeat value number Y-axis repeat value C signature: orxSTATUS orxObject_GetRepeat ( const orxOBJECT * _pstObject , orxFLOAT * _pfRepeatX , orxFLOAT * _pfRepeatY ) orxOBJECT:getRotation # Signature: r1 = getRotation () Description: Get object rotation. See orxObject_SetRotation(). Params: Returns: type description number number (radians) C signature: orxFLOAT orxObject_GetRotation ( const orxOBJECT * _pstObject ) orxOBJECT:getScale # Signature: r1 = getScale () Description: Get object scale. See orxObject_SetScale(). Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetScale ( const orxOBJECT * _pstObject , orxVECTOR * _pvScale ) orxOBJECT:getShaderPointer # Signature: r1 = getShaderPointer () Description: Get the orxSHADERPOINTER linked to the orxSTRUCTURE Params: Returns: type description orxSHADERPOINTER The orxSHADERPOINTER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getSibling # Signature: r1 = getSibling () Description: Gets object's next sibling object. This function is typically used for iterating over the children objects of an object, see orxObject_GetChild() for an iteration example. Note: this function will filter out any camera or spawner and retrieve the next sibling object. Params: Returns: type description orxOBJECT Next sibling object / nil C signature: orxOBJECT * orxObject_GetSibling ( const orxOBJECT * _pstObject ) orxOBJECT:getSize # Signature: r1 = getSize () Description: Gets object size. See orxObject_SetSize() for a more detailed explanation. Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetSize ( const orxOBJECT * _pstObject , orxVECTOR * _pvSize ) orxOBJECT:getSmoothing # Signature: r1 = getSmoothing () Description: Gets object smoothing. Params: Returns: type description orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) C signature: orxDISPLAY_SMOOTHING orxObject_GetSmoothing ( const orxOBJECT * _pstObject ) orxOBJECT:getSoundPointer # Signature: r1 = getSoundPointer () Description: Get the orxSOUNDPOINTER linked to the orxSTRUCTURE Params: Returns: type description orxSOUNDPOINTER The orxSOUNDPOINTER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getSpawner # Signature: r1 = getSpawner () Description: Get the orxSPAWNER linked to the orxSTRUCTURE Params: Returns: type description orxSPAWNER The orxSPAWNER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getSpeed # Signature: r1 = getSpeed () Description: Gets an object speed. Params: Returns: type description orxVECTOR Object speed / nil C signature: orxVECTOR * orxObject_GetSpeed ( const orxOBJECT * _pstObject , orxVECTOR * _pvSpeed ) orxOBJECT:getTargetAnim # Signature: r1 = getTargetAnim () Description: Gets target animation. Params: Returns: type description string Target animation / empty string C signature: const orxSTRING orxObject_GetTargetAnim ( const orxOBJECT * _pstObject ) orxOBJECT:getTextString # Signature: r1 = getTextString () Description: Gets object text string, if object is associated to a text. (non-const self only) Params: Returns: type description string string / empty string C signature: const orxSTRING orxObject_GetTextString ( orxOBJECT * _pstObject ) orxOBJECT:getTimeline # Signature: r1 = getTimeline () Description: Get the orxTIMELINE linked to the orxSTRUCTURE Params: Returns: type description orxTIMELINE The orxTIMELINE or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE) orxOBJECT:getUserData # Signature: r1 = getUserData () Description: Gets object's user data. Params: Returns: type description void* Stored user data / nil C signature: void * orxObject_GetUserData ( const orxOBJECT * _pstObject ) orxOBJECT:getWorkingGraphic # Signature: r1 = getWorkingGraphic () Description: Gets object working graphic. Params: Returns: type description orxGRAPHIC orxGRAPHIC / nil C signature: orxGRAPHIC * orxObject_GetWorkingGraphic ( const orxOBJECT * _pstObject ) orxOBJECT:getWorkingTexture # Signature: r1 = getWorkingTexture () Description: Gets object working texture. Params: Returns: type description orxTEXTURE orxTEXTURE / nil C signature: orxTEXTURE * orxObject_GetWorkingTexture ( const orxOBJECT * _pstObject ) orxOBJECT:getWorldPosition # Signature: r1 = getWorldPosition () Description: Get object world position. See orxObject_SetWorldPosition(). Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetWorldPosition ( const orxOBJECT * _pstObject , orxVECTOR * _pvPosition ) orxOBJECT:getWorldRotation # Signature: r1 = getWorldRotation () Description: Get object world rotation. See orxObject_SetWorldRotation(). Params: Returns: type description number number (radians) C signature: orxFLOAT orxObject_GetWorldRotation ( const orxOBJECT * _pstObject ) orxOBJECT:getWorldScale # Signature: r1 = getWorldScale () Description: Gets object world scale. See orxObject_SetWorldScale(). Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetWorldScale ( const orxOBJECT * _pstObject , orxVECTOR * _pvScale ) orxOBJECT:hasBlendMode # Signature: r1 = hasBlendMode () Description: Object has blend mode accessor? Params: Returns: type description boolean true / false C signature: orxBOOL orxObject_HasBlendMode ( const orxOBJECT * _pstObject ) orxOBJECT:hasColor # Signature: r1 = hasColor () Description: Object has color accessor? Params: Returns: type description boolean true / false C signature: orxBOOL orxObject_HasColor ( const orxOBJECT * _pstObject ) orxOBJECT:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxOBJECT:isCurrentAnim # Signature: r1 = isCurrentAnim ( animname ) Description: Is current animation test. Params: name type description animname string Animation name (config's one) to test Returns: type description boolean true / false C signature: orxBOOL orxObject_IsCurrentAnim ( const orxOBJECT * _pstObject , const orxSTRING _zAnimName ) orxOBJECT:isEnabled # Signature: r1 = isEnabled () Description: Is object enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxObject_IsEnabled ( const orxOBJECT * _pstObject ) orxOBJECT:isPaused # Signature: r1 = isPaused () Description: Is object paused? Params: Returns: type description boolean true if paused, false otherwise C signature: orxBOOL orxObject_IsPaused ( const orxOBJECT * _pstObject ) orxOBJECT:isShaderEnabled # Signature: r1 = isShaderEnabled () Description: Is an object's shader enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxObject_IsShaderEnabled ( const orxOBJECT * _pstObject ) orxOBJECT:isTargetAnim # Signature: r1 = isTargetAnim ( animname ) Description: Is target animation test. Params: name type description animname string Animation name (config's one) to test Returns: type description boolean true / false C signature: orxBOOL orxObject_IsTargetAnim ( const orxOBJECT * _pstObject , const orxSTRING _zAnimName ) orxOBJECT:isTimeLineEnabled # Signature: r1 = isTimeLineEnabled () Description: Is an object's timeline enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxObject_IsTimeLineEnabled ( const orxOBJECT * _pstObject ) orxOBJECT:linkStructure # Signature: r1 = linkStructure ( structure ) Description: Links a structure to an object. (non-const self only) Params: name type description structure orxSTRUCTURE Structure to link Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_LinkStructure ( orxOBJECT * _pstObject , orxSTRUCTURE * _pstStructure ) orxOBJECT:logParents # Signature: r1 = logParents () Description: Logs all parents of an object, including their frame data. Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_LogParents ( const orxOBJECT * _pstObject ) orxOBJECT:pause # Signature: pause ( pause ) Description: Pauses/unpauses an object. Note that pausing an object is not recursive, so its children will not be affected, see orxObject_PauseRecursive(). (non-const self only) Params: name type description pause boolean Pause / unpause Returns: C signature: void orxObject_Pause ( orxOBJECT * _pstObject , orxBOOL _bPause ) orxOBJECT:pauseRecursive # Signature: pauseRecursive ( pause ) Description: Pauses/unpauses an object and its owned children. (non-const self only) Params: name type description pause boolean Pause / unpause Returns: C signature: void orxObject_PauseRecursive ( orxOBJECT * _pstObject , orxBOOL _bPause ) orxOBJECT:play # Signature: r1 = play () Description: Plays all the sounds of an object. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Play ( orxOBJECT * _pstObject ) orxOBJECT:removeAllFXs # Signature: r1 = removeAllFXs () Description: Removes all FXs. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveAllFXs ( orxOBJECT * _pstObject ) orxOBJECT:removeAllFXsRecursive # Signature: r1 = removeAllFXsRecursive () Description: Removes all FXs from an object and its owned children. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveAllFXsRecursive ( orxOBJECT * _pstObject ) orxOBJECT:removeAllFilters # Signature: r1 = removeAllFilters () Description: Removes all filters from the sounds of an object. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveAllFilters ( orxOBJECT * _pstObject ) orxOBJECT:removeFX # Signature: r1 = removeFX ( fxconfigid ) Description: Removes an FX using its config ID. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveFX ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID ) orxOBJECT:removeFXRecursive # Signature: removeFXRecursive ( fxconfigid ) Description: Removes an FX from an object and its owned children. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to remove Returns: C signature: void orxObject_RemoveFXRecursive ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID ) orxOBJECT:removeLastFilter # Signature: r1 = removeLastFilter () Description: Removes last added filter from the sounds of an object. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveLastFilter ( orxOBJECT * _pstObject ) orxOBJECT:removeShader # Signature: r1 = removeShader ( shaderconfigid ) Description: Removes a shader using its config ID. (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveShader ( orxOBJECT * _pstObject , const orxSTRING _zShaderConfigID ) orxOBJECT:removeShaderRecursive # Signature: removeShaderRecursive ( shaderconfigid ) Description: Removes a shader from an object and its owned children. (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to remove Returns: C signature: void orxObject_RemoveShaderRecursive ( orxOBJECT * _pstObject , const orxSTRING _zShaderConfigID ) orxOBJECT:removeSound # Signature: r1 = removeSound ( soundconfigid ) Description: Removes a sound using its config ID. (non-const self only) Params: name type description soundconfigid string Config ID of the sound to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveSound ( orxOBJECT * _pstObject , const orxSTRING _zSoundConfigID ) orxOBJECT:removeTimeLineTrack # Signature: r1 = removeTimeLineTrack ( trackconfigid ) Description: Removes a timeline track using its config ID (non-const self only) Params: name type description trackconfigid string Config ID of the timeline track to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveTimeLineTrack ( orxOBJECT * _pstObject , const orxSTRING _zTrackConfigID ) orxOBJECT:removeTimeLineTrackRecursive # Signature: removeTimeLineTrackRecursive ( trackconfigid ) Description: Removes a timeline track from an object and its owned children. (non-const self only) Params: name type description trackconfigid string Config ID of the timeline track to remove Returns: C signature: void orxObject_RemoveTimeLineTrackRecursive ( orxOBJECT * _pstObject , const orxSTRING _zTrackConfigID ) orxOBJECT:setAlpha # Signature: r1 = setAlpha ( alpha ) Description: Sets object alpha. (non-const self only) Params: name type description alpha number Alpha value to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetAlpha ( orxOBJECT * _pstObject , orxFLOAT _fAlpha ) orxOBJECT:setAlphaRecursive # Signature: setAlphaRecursive ( alpha ) Description: Sets alpha of an object and all its owned children. (non-const self only) Params: name type description alpha number Alpha value to set Returns: C signature: void orxObject_SetAlphaRecursive ( orxOBJECT * _pstObject , orxFLOAT _fAlpha ) orxOBJECT:setAngularVelocity # Signature: r1 = setAngularVelocity ( velocity ) Description: Sets an object angular velocity. (non-const self only) Params: name type description velocity number Angular velocity to set (radians/seconds) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetAngularVelocity ( orxOBJECT * _pstObject , orxFLOAT _fVelocity ) orxOBJECT:setAnimFrequency # Signature: r1 = setAnimFrequency ( frequency ) Description: Sets an object's relative animation frequency. (non-const self only) Params: name type description frequency number Frequency to set: < 1.0 for slower than initial, > 1.0 for faster than initial Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetAnimFrequency ( orxOBJECT * _pstObject , orxFLOAT _fFrequency ) orxOBJECT:setAnimFrequencyRecursive # Signature: setAnimFrequencyRecursive ( frequency ) Description: Sets the relative animation frequency for an object and its owned children. (non-const self only) Params: name type description frequency number Frequency to set: < 1.0 for slower than initial, > 1.0 for faster than initial Returns: C signature: void orxObject_SetAnimFrequencyRecursive ( orxOBJECT * _pstObject , orxFLOAT _fFrequency ) orxOBJECT:setAnimSet # Signature: r1 = setAnimSet ( animset ) Description: Sets an object animset. (non-const self only) Params: name type description animset orxANIMSET Animation set to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetAnimSet ( orxOBJECT * _pstObject , orxANIMSET * _pstAnimSet ) orxOBJECT:setBlendMode # Signature: r1 = setBlendMode ( blendmode ) Description: Sets object blend mode. (non-const self only) Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetBlendMode ( orxOBJECT * _pstObject , orxDISPLAY_BLEND_MODE _eBlendMode ) orxOBJECT:setBlendModeRecursive # Signature: setBlendModeRecursive ( blendmode ) Description: Sets blend mode of an object and its owned children. (non-const self only) Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) Returns: C signature: void orxObject_SetBlendModeRecursive ( orxOBJECT * _pstObject , orxDISPLAY_BLEND_MODE _eBlendMode ) orxOBJECT:setClock # Signature: r1 = setClock ( clock ) Description: Sets associated clock for an object. (non-const self only) Params: name type description clock orxCLOCK Clock to associate / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetClock ( orxOBJECT * _pstObject , orxCLOCK * _pstClock ) orxOBJECT:setClockRecursive # Signature: setClockRecursive ( clock ) Description: Sets associated clock for an object and its owned children. (non-const self only) Params: name type description clock orxCLOCK Clock to associate / nil Returns: C signature: void orxObject_SetClockRecursive ( orxOBJECT * _pstObject , orxCLOCK * _pstClock ) orxOBJECT:setColor # Signature: r1 = setColor ( color ) Description: Sets object color. (non-const self only) Params: name type description color orxCOLOR# Color to set, nil to remove any specific color Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetColor ( orxOBJECT * _pstObject , const orxCOLOR * _pstColor ) orxOBJECT:setColorRecursive # Signature: setColorRecursive ( color ) Description: Sets color of an object and all its owned children. (non-const self only) Params: name type description color orxCOLOR# Color to set, nil to remove any specific color Returns: C signature: void orxObject_SetColorRecursive ( orxOBJECT * _pstObject , const orxCOLOR * _pstColor ) orxOBJECT:setCurrentAnim # Signature: r1 = setCurrentAnim ( animname ) Description: Sets current animation for an object. This function switches the currently displayed animation of the object immediately. Compare this with orxObject_SetTargetAnim(). (non-const self only) Params: name type description animname string Animation name (config's one) to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetCurrentAnim ( orxOBJECT * _pstObject , const orxSTRING _zAnimName ) orxOBJECT:setCurrentAnimRecursive # Signature: setCurrentAnimRecursive ( animname ) Description: Sets current animation for an object and its owned children. (non-const self only) Params: name type description animname string Animation name (config's one) to set / nil Returns: C signature: void orxObject_SetCurrentAnimRecursive ( orxOBJECT * _pstObject , const orxSTRING _zAnimName ) orxOBJECT:setCustomGravity # Signature: r1 = setCustomGravity ( customgravity ) Description: Sets an object custom gravity. (non-const self only) Params: name type description customgravity orxVECTOR# Custom gravity to set / nil to remove it Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetCustomGravity ( orxOBJECT * _pstObject , const orxVECTOR * _pvCustomGravity ) orxOBJECT:setFXFrequency # Signature: r1 = setFXFrequency ( frequency ) Description: Sets an object's relative FX frequency. (non-const self only) Params: name type description frequency number Frequency to set: < 1.0 for slower than initial, > 1.0 for faster than initial Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetFXFrequency ( orxOBJECT * _pstObject , orxFLOAT _fFrequency ) orxOBJECT:setFXFrequencyRecursive # Signature: setFXFrequencyRecursive ( frequency ) Description: Sets the relative FX frequency for an object and its owned children. (non-const self only) Params: name type description frequency number Frequency to set: < 1.0 for slower than initial, > 1.0 for faster than initial Returns: C signature: void orxObject_SetFXFrequencyRecursive ( orxOBJECT * _pstObject , orxFLOAT _fFrequency ) orxOBJECT:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxOBJECT:setFlip # Signature: r1 = setFlip ( flipx , flipy ) Description: Sets object flipping. (non-const self only) Params: name type description flipx boolean Flip it on X axis flipy boolean Flip it on Y axis Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetFlip ( orxOBJECT * _pstObject , orxBOOL _bFlipX , orxBOOL _bFlipY ) orxOBJECT:setGroupID # Signature: r1 = setGroupID ( groupid ) Description: Sets object's group ID. (non-const self only) Params: name type description groupid integer Group ID to set. This is the string ID (see orxString_GetID()) of the object's group name. Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetGroupID ( orxOBJECT * _pstObject , orxSTRINGID _stGroupID ) orxOBJECT:setGroupIDRecursive # Signature: setGroupIDRecursive ( groupid ) Description: Sets group ID of an object and all its owned children. (non-const self only) Params: name type description groupid integer Group ID to set. This is the string ID (see orxString_GetID()) of the object's group name. Returns: C signature: void orxObject_SetGroupIDRecursive ( orxOBJECT * _pstObject , orxSTRINGID _stGroupID ) orxOBJECT:setIgnoreFlags # Signature: r1 = setIgnoreFlags ( ignoreflags ) Description: Sets object's ignore flags. (non-const self only) Params: name type description ignoreflags integer Ignore flags to set (all other ignore flags will get cleared) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetIgnoreFlags ( orxOBJECT * _pstObject , orxU32 _u32IgnoreFlags ) orxOBJECT:setLifeTime # Signature: r1 = setLifeTime ( lifetime ) Description: Sets object lifetime. (non-const self only) Params: name type description lifetime number Lifetime to set, negative value to disable it Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetLifeTime ( orxOBJECT * _pstObject , orxFLOAT _fLifeTime ) orxOBJECT:setLiteralIgnoreFlags # Signature: r1 = setLiteralIgnoreFlags ( ignoreflags ) Description: Sets object's ignore flags using literals. (non-const self only) Params: name type description ignoreflags [in,out] string Literals of the ignore flags to set (all other ignore flags will get cleared) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetLiteralIgnoreFlags ( orxOBJECT * _pstObject , const orxSTRING _zIgnoreFlags ) orxOBJECT:setLiteralLifeTime # Signature: r1 = setLiteralLifeTime ( lifetime ) Description: Sets object literal lifetime. (non-const self only) Params: name type description lifetime string Lifetime to set, can be composed of multiple tags, separated by space: anim, child, fx, sound, spawner and track Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetLiteralLifeTime ( orxOBJECT * _pstObject , const orxSTRING _zLifeTime ) orxOBJECT:setOrigin # Signature: r1 = setOrigin ( origin ) Description: Sets object origin. This is a convenience wrapper around orxGraphic_SetOrigin(). The \"origin\" of a graphic is essentially what is indicated by the \"TextureOrigin\" field of a config graphic section. The \"origin\" together with \"size\" (see orxObject_SetSize()) defines the sprite of an object. (non-const self only) Params: name type description origin orxVECTOR# Object origin Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetOrigin ( orxOBJECT * _pstObject , const orxVECTOR * _pvOrigin ) orxOBJECT:setOwner # Signature: setOwner ( owner ) Description: Sets owner for an object. Ownership in Orx is only about lifetime management. That is, when an object dies, it also kills its owned children. Compare this with orxObject_SetParent(). * Note that the \"ChildList\" field of an object's config section implies two things; that the object is both the owner (orxObject_SetOwner()) and the parent (orxObject_SetParent()) of its owned children. There is an exception to this though; when an object's child has a parent camera, the object is only the owner, and the camera is the parent. (non-const self only) Params: name type description owner void* Owner to set / orxNULL, if owner is an orxOBJECT, the owned object will be added to it as a children Returns: C signature: void orxObject_SetOwner ( orxOBJECT * _pstObject , void * _pOwner ) orxOBJECT:setPanning # Signature: r1 = setPanning ( panning , mix ) Description: Sets panning of all sounds of an object. (non-const self only) Params: name type description panning number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right mix boolean Left/Right channels will be mixed if true or act like a balance otherwise Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetPanning ( orxOBJECT * _pstObject , orxFLOAT _fPanning , orxBOOL _bMix ) orxOBJECT:setParent # Signature: r1 = setParent ( parent ) Description: Sets an object parent (in the frame hierarchy). Parenthood in orx is about the transformation (position, rotation, scale) of objects. Transformation of objects are compounded in a frame hierarchy. Compare this with orxObject_SetOwner() * Note that the \"ChildList\" field of an object's config section implies two things; that the object is both the owner (orxObject_SetOwner()) and the parent (orxObject_SetParent()) of its children. There is an exception to this though; when an object's child has a parent camera, the object is only the owner, and the camera is the parent. (non-const self only) Params: name type description parent void* Parent structure to set (object, spawner, camera or frame) / nil Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxObject_SetParent ( orxOBJECT * _pstObject , void * _pParent ) orxOBJECT:setPitch # Signature: r1 = setPitch ( pitch ) Description: Sets pitch for all sounds of an object. (non-const self only) Params: name type description pitch number Desired pitch (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetPitch ( orxOBJECT * _pstObject , orxFLOAT _fPitch ) orxOBJECT:setPivot # Signature: r1 = setPivot ( pivot ) Description: Sets object pivot. This is a convenience wrapper around orxGraphic_SetPivot(). The \"pivot\" is essentially what is indicated by the \"Pivot\" field of a config graphic section. (non-const self only) Params: name type description pivot orxVECTOR# Object pivot Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetPivot ( orxOBJECT * _pstObject , const orxVECTOR * _pvPivot ) orxOBJECT:setPosition # Signature: r1 = setPosition ( position ) Description: Sets object position in its parent's reference frame. See orxObject_SetWorldPosition() for setting an object's position in the global reference frame. (non-const self only) Params: name type description position orxVECTOR# Object position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetPosition ( orxOBJECT * _pstObject , const orxVECTOR * _pvPosition ) orxOBJECT:setRGB # Signature: r1 = setRGB ( rgb ) Description: Sets object RGB values. (non-const self only) Params: name type description rgb orxVECTOR# RGB values to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetRGB ( orxOBJECT * _pstObject , const orxVECTOR * _pvRGB ) orxOBJECT:setRGBRecursive # Signature: setRGBRecursive ( rgb ) Description: Sets color of an object and all its owned children. (non-const self only) Params: name type description rgb orxVECTOR# RGB values to set Returns: C signature: void orxObject_SetRGBRecursive ( orxOBJECT * _pstObject , const orxVECTOR * _pvRGB ) orxOBJECT:setRelativeSpeed # Signature: r1 = setRelativeSpeed ( relativespeed ) Description: Sets an object speed relative to its rotation/scale. (non-const self only) Params: name type description relativespeed orxVECTOR# Relative speed to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetRelativeSpeed ( orxOBJECT * _pstObject , const orxVECTOR * _pvRelativeSpeed ) orxOBJECT:setRepeat # Signature: r1 = setRepeat ( repeatx , repeaty ) Description: Sets object repeat (wrap) values. (non-const self only) Params: name type description repeatx number X-axis repeat value repeaty number Y-axis repeat value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetRepeat ( orxOBJECT * _pstObject , orxFLOAT _fRepeatX , orxFLOAT _fRepeatY ) orxOBJECT:setRotation # Signature: r1 = setRotation ( rotation ) Description: Sets object rotation in its parent's reference frame. See orxObject_SetWorldRotation() for setting an object's rotation in the global reference frame. (non-const self only) Params: name type description rotation number Object rotation (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetRotation ( orxOBJECT * _pstObject , orxFLOAT _fRotation ) orxOBJECT:setScale # Signature: r1 = setScale ( scale ) Description: Sets object scale in its parent's reference frame. See orxObject_SetWorldScale() for setting an object's scale in the global reference frame. See orxObject_SetSize() for a deeper explanation of the \"size\" of an object. (non-const self only) Params: name type description scale orxVECTOR# Object scale vector Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetScale ( orxOBJECT * _pstObject , const orxVECTOR * _pvScale ) orxOBJECT:setSize # Signature: r1 = setSize ( size ) Description: Sets object size. For objects that have a graphic attached it's simply a convenience wrapper for orxGraphic_SetSize(), but an object can also have a size without a graphic. * Note the difference between \"Scale\" and \"Size\". The size of an object with a non-text graphic is the sprite size in pixels on its texture. The object's effective size for rendering and intersection purposes (see orxObject_Pick() and friends) is proportional to its \"size\" multiplied by its \"scale\". Another important distinction is that the scale of an object also affects its children (see orxObject_SetParent() and note the distinction between parenthood and ownership). (non-const self only) Params: name type description size orxVECTOR# Object size Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetSize ( orxOBJECT * _pstObject , const orxVECTOR * _pvSize ) orxOBJECT:setSmoothing # Signature: r1 = setSmoothing ( smoothing ) Description: Sets object smoothing. (non-const self only) Params: name type description smoothing orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetSmoothing ( orxOBJECT * _pstObject , orxDISPLAY_SMOOTHING _eSmoothing ) orxOBJECT:setSmoothingRecursive # Signature: setSmoothingRecursive ( smoothing ) Description: Sets smoothing for an object and its owned children. (non-const self only) Params: name type description smoothing orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) Returns: C signature: void orxObject_SetSmoothingRecursive ( orxOBJECT * _pstObject , orxDISPLAY_SMOOTHING _eSmoothing ) orxOBJECT:setSpeed # Signature: r1 = setSpeed ( speed ) Description: Sets an object speed. (non-const self only) Params: name type description speed orxVECTOR# Speed to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetSpeed ( orxOBJECT * _pstObject , const orxVECTOR * _pvSpeed ) orxOBJECT:setTargetAnim # Signature: r1 = setTargetAnim ( animname ) Description: Sets target animation for an object. The animations are sequenced on an object according to the animation link graph defined by its AnimationSet. The sequence follows the graph and tries to reach the target animation. Use orxObject_SetCurrentAnim() to switch the animation without using the link graph. (non-const self only) Params: name type description animname string Animation name (config's one) to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetTargetAnim ( orxOBJECT * _pstObject , const orxSTRING _zAnimName ) orxOBJECT:setTargetAnimRecursive # Signature: setTargetAnimRecursive ( animname ) Description: Sets target animation for an object and its owned children. (non-const self only) Params: name type description animname string Animation name (config's one) to set / nil Returns: C signature: void orxObject_SetTargetAnimRecursive ( orxOBJECT * _pstObject , const orxSTRING _zAnimName ) orxOBJECT:setTextString # Signature: r1 = setTextString ( string ) Description: Sets object text string, if object is associated to a text. (non-const self only) Params: name type description string string String to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetTextString ( orxOBJECT * _pstObject , const orxSTRING _zString ) orxOBJECT:setUserData # Signature: setUserData ( userdata ) Description: Sets user data for an object. Orx ignores the user data, this is a mechanism for attaching custom data to be used later by user code. (non-const self only) Params: name type description userdata void* User data to store / nil Returns: C signature: void orxObject_SetUserData ( orxOBJECT * _pstObject , void * _pUserData ) orxOBJECT:setVolume # Signature: r1 = setVolume ( volume ) Description: Sets volume for all sounds of an object. (non-const self only) Params: name type description volume number Desired volume (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetVolume ( orxOBJECT * _pstObject , orxFLOAT _fVolume ) orxOBJECT:setWorldPosition # Signature: r1 = setWorldPosition ( position ) Description: Sets object position in the global reference frame. See orxObject_SetPosition() for setting an object's position in its parent's reference frame. (non-const self only) Params: name type description position orxVECTOR# Object world position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetWorldPosition ( orxOBJECT * _pstObject , const orxVECTOR * _pvPosition ) orxOBJECT:setWorldRotation # Signature: r1 = setWorldRotation ( rotation ) Description: Sets object rotation in the global reference frame. See orxObject_SetRotation() for setting an object's rotation in its parent's reference frame. (non-const self only) Params: name type description rotation number Object world rotation (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetWorldRotation ( orxOBJECT * _pstObject , orxFLOAT _fRotation ) orxOBJECT:setWorldScale # Signature: r1 = setWorldScale ( scale ) Description: Sets object scale in the global reference frame. See orxObject_SetScale() for setting an object's scale in its parent's reference frame. (non-const self only) Params: name type description scale orxVECTOR# Object world scale vector Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetWorldScale ( orxOBJECT * _pstObject , const orxVECTOR * _pvScale ) orxOBJECT:stop # Signature: r1 = stop () Description: Stops all the sounds of an object. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Stop ( orxOBJECT * _pstObject ) orxOBJECT:synchronizeFX # Signature: r1 = synchronizeFX ( model ) Description: Synchronizes FXs with another object's ones (if FXs are not matching on both objects the behavior is undefined). (non-const self only) Params: name type description model orxOBJECT# Model object on which to synchronize FXs Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SynchronizeFX ( orxOBJECT * _pstObject , const orxOBJECT * _pstModel ) orxOBJECT:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxOBJECT:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxOBJECT:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxOBJECT:unlinkStructure # Signature: unlinkStructure ( structureid ) Description: Unlinks structure from an object, given its structure ID. (non-const self only) Params: name type description structureid orxSTRUCTURE_ID ID of structure to unlink Returns: C signature: void orxObject_UnlinkStructure ( orxOBJECT * _pstObject , orxSTRUCTURE_ID _eStructureID ) orxOBJECT:update # Signature: r1 = update ( clockinfo ) Description: Updates an object. (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Clock information used to compute new object's state Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Update ( orxOBJECT * _pstObject , const orxCLOCK_INFO * _pstClockInfo )","title":"orxOBJECT"},{"location":"types/orxOBJECT.html#type-orxobject","text":"","title":"type orxOBJECT"},{"location":"types/orxOBJECT.html#methods","text":"","title":"Methods"},{"location":"types/orxOBJECT.html#orxobjectaddfx","text":"Signature: r1 = addFX ( fxconfigid ) Description: Adds an FX using its config ID. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddFX ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID )","title":"orxOBJECT:addFX"},{"location":"types/orxOBJECT.html#orxobjectaddfxrecursive","text":"Signature: addFXRecursive ( fxconfigid , propagationdelay ) Description: Adds an FX to an object and its owned children. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add propagationdelay number Propagation delay for each child Returns: C signature: void orxObject_AddFXRecursive ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID , orxFLOAT _fPropagationDelay )","title":"orxOBJECT:addFXRecursive"},{"location":"types/orxOBJECT.html#orxobjectaddfilter","text":"Signature: r1 = addFilter ( filterconfigid ) Description: Adds a filter to the sounds of an object (cascading). (non-const self only) Params: name type description filterconfigid string Config ID of the filter to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddFilter ( orxOBJECT * _pstObject , const orxSTRING _zFilterConfigID )","title":"orxOBJECT:addFilter"},{"location":"types/orxOBJECT.html#orxobjectaddshader","text":"Signature: r1 = addShader ( shaderconfigid ) Description: Adds a shader to an object using its config ID. (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddShader ( orxOBJECT * _pstObject , const orxSTRING _zShaderConfigID )","title":"orxOBJECT:addShader"},{"location":"types/orxOBJECT.html#orxobjectaddshaderrecursive","text":"Signature: addShaderRecursive ( shaderconfigid ) Description: Adds a shader to an object and its owned children. (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to add Returns: C signature: void orxObject_AddShaderRecursive ( orxOBJECT * _pstObject , const orxSTRING _zShaderConfigID )","title":"orxOBJECT:addShaderRecursive"},{"location":"types/orxOBJECT.html#orxobjectaddsound","text":"Signature: r1 = addSound ( soundconfigid ) Description: Adds a sound using its config ID. (non-const self only) Params: name type description soundconfigid string Config ID of the sound to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddSound ( orxOBJECT * _pstObject , const orxSTRING _zSoundConfigID )","title":"orxOBJECT:addSound"},{"location":"types/orxOBJECT.html#orxobjectaddtimelinetrack","text":"Signature: r1 = addTimeLineTrack ( trackconfigid ) Description: Adds a timeline track to an object using its config ID. (non-const self only) Params: name type description trackconfigid string Config ID of the timeline track to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddTimeLineTrack ( orxOBJECT * _pstObject , const orxSTRING _zTrackConfigID )","title":"orxOBJECT:addTimeLineTrack"},{"location":"types/orxOBJECT.html#orxobjectaddtimelinetrackrecursive","text":"Signature: addTimeLineTrackRecursive ( trackconfigid ) Description: Adds a timeline track to an object and its owned children. (non-const self only) Params: name type description trackconfigid string Config ID of the timeline track to add Returns: C signature: void orxObject_AddTimeLineTrackRecursive ( orxOBJECT * _pstObject , const orxSTRING _zTrackConfigID )","title":"orxOBJECT:addTimeLineTrackRecursive"},{"location":"types/orxOBJECT.html#orxobjectadduniquefx","text":"Signature: r1 = addUniqueFX ( fxconfigid ) Description: Adds a unique FX using its config ID. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_AddUniqueFX ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID )","title":"orxOBJECT:addUniqueFX"},{"location":"types/orxOBJECT.html#orxobjectadduniquefxrecursive","text":"Signature: addUniqueFXRecursive ( fxconfigid , propagationdelay ) Description: Adds a unique FX to an object and its owned children. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to add propagationdelay number Propagation delay for each child Returns: C signature: void orxObject_AddUniqueFXRecursive ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID , orxFLOAT _fPropagationDelay )","title":"orxOBJECT:addUniqueFXRecursive"},{"location":"types/orxOBJECT.html#orxobjectaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxOBJECT:addr"},{"location":"types/orxOBJECT.html#orxobjectaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxOBJECT:aeq"},{"location":"types/orxOBJECT.html#orxobjectapplyforce","text":"Signature: r1 = applyForce ( force , point ) Description: Applies a force. (non-const self only) Params: name type description force orxVECTOR# Force to apply point orxVECTOR# Point (world coordinates) where the force will be applied, if orxNULL, center of mass will be used Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_ApplyForce ( orxOBJECT * _pstObject , const orxVECTOR * _pvForce , const orxVECTOR * _pvPoint )","title":"orxOBJECT:applyForce"},{"location":"types/orxOBJECT.html#orxobjectapplyimpulse","text":"Signature: r1 = applyImpulse ( impulse , point ) Description: Applies an impulse. (non-const self only) Params: name type description impulse orxVECTOR# Impulse to apply point orxVECTOR# Point (world coordinates) where the impulse will be applied, if orxNULL, center of mass will be used Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_ApplyImpulse ( orxOBJECT * _pstObject , const orxVECTOR * _pvImpulse , const orxVECTOR * _pvPoint )","title":"orxOBJECT:applyImpulse"},{"location":"types/orxOBJECT.html#orxobjectapplytorque","text":"Signature: r1 = applyTorque ( torque ) Description: Applies a torque. (non-const self only) Params: name type description torque number Torque to apply Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_ApplyTorque ( orxOBJECT * _pstObject , orxFLOAT _fTorque )","title":"orxOBJECT:applyTorque"},{"location":"types/orxOBJECT.html#orxobjectasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxOBJECT:asVoid"},{"location":"types/orxOBJECT.html#orxobjectattach","text":"Signature: r1 = attach ( parent ) Description: Attaches an object to a parent while maintaining the object's world position. (non-const self only) Params: name type description parent void* Parent structure to attach to (object, spawner, camera or frame) Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxObject_Attach ( orxOBJECT * _pstObject , void * _pParent )","title":"orxOBJECT:attach"},{"location":"types/orxOBJECT.html#orxobjectdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxOBJECT:decreaseCount"},{"location":"types/orxOBJECT.html#orxobjectdelete","text":"Signature: r1 = delete () Description: Deletes an object, *unsafe* when called from an event handler: call orxObject_SetLifeTime(orxFLOAT_0) instead (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Delete ( orxOBJECT * _pstObject )","title":"orxOBJECT:delete"},{"location":"types/orxOBJECT.html#orxobjectdetach","text":"Signature: r1 = detach () Description: Detaches an object from a parent while maintaining the object's world position. (non-const self only) Params: Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxObject_Detach ( orxOBJECT * _pstObject )","title":"orxOBJECT:detach"},{"location":"types/orxOBJECT.html#orxobjectenable","text":"Signature: enable ( enable ) Description: Enables/disables an object. Note that enabling/disabling an object is not recursive, so its children will not be affected, see orxObject_EnableRecursive(). (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxObject_Enable ( orxOBJECT * _pstObject , orxBOOL _bEnable )","title":"orxOBJECT:enable"},{"location":"types/orxOBJECT.html#orxobjectenablerecursive","text":"Signature: enableRecursive ( enable ) Description: Enables/disables an object and all its owned children. (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxObject_EnableRecursive ( orxOBJECT * _pstObject , orxBOOL _bEnable )","title":"orxOBJECT:enableRecursive"},{"location":"types/orxOBJECT.html#orxobjectenableshader","text":"Signature: enableShader ( enable ) Description: Enables an object's shader. (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxObject_EnableShader ( orxOBJECT * _pstObject , orxBOOL _bEnable )","title":"orxOBJECT:enableShader"},{"location":"types/orxOBJECT.html#orxobjectenabletimeline","text":"Signature: enableTimeLine ( enable ) Description: Enables an object's timeline. (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxObject_EnableTimeLine ( orxOBJECT * _pstObject , orxBOOL _bEnable )","title":"orxOBJECT:enableTimeLine"},{"location":"types/orxOBJECT.html#orxobjectgetactivetime","text":"Signature: r1 = getActiveTime () Description: Gets object active time, i.e. the amount of time that the object has been alive taking into account the object's clock multiplier and object's periods of pause. Params: Returns: type description number Active time C signature: orxFLOAT orxObject_GetActiveTime ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getActiveTime"},{"location":"types/orxOBJECT.html#orxobjectgetangularvelocity","text":"Signature: r1 = getAngularVelocity () Description: Gets an object angular velocity. Params: Returns: type description number Object angular velocity (radians/seconds) C signature: orxFLOAT orxObject_GetAngularVelocity ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getAngularVelocity"},{"location":"types/orxOBJECT.html#orxobjectgetanimfrequency","text":"Signature: r1 = getAnimFrequency () Description: Gets an object's relative animation frequency. Params: Returns: type description number Animation frequency / -orxFLOAT_1 C signature: orxFLOAT orxObject_GetAnimFrequency ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getAnimFrequency"},{"location":"types/orxOBJECT.html#orxobjectgetanimpointer","text":"Signature: r1 = getAnimPointer () Description: Get the orxANIMPOINTER linked to the orxSTRUCTURE Params: Returns: type description orxANIMPOINTER The orxANIMPOINTER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getAnimPointer"},{"location":"types/orxOBJECT.html#orxobjectgetblendmode","text":"Signature: r1 = getBlendMode () Description: Gets object blend mode. Params: Returns: type description orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) C signature: orxDISPLAY_BLEND_MODE orxObject_GetBlendMode ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getBlendMode"},{"location":"types/orxOBJECT.html#orxobjectgetbody","text":"Signature: r1 = getBody () Description: Get the orxBODY linked to the orxSTRUCTURE Params: Returns: type description orxBODY The orxBODY or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getBody"},{"location":"types/orxOBJECT.html#orxobjectgetboundingbox","text":"Signature: r1 = getBoundingBox () Description: Gets object's bounding box (OBB). Params: Returns: type description orxOBOX Bounding box / nil C signature: orxOBOX * orxObject_GetBoundingBox ( const orxOBJECT * _pstObject , orxOBOX * _pstBoundingBox )","title":"orxOBJECT:getBoundingBox"},{"location":"types/orxOBJECT.html#orxobjectgetchild","text":"Signature: r1 = getChild () Description: Gets object's first child object. See orxObject_SetOwner() and orxObject_SetParent() for a comparison of ownership and parenthood in Orx. Note: this function will filter out any camera or spawner and retrieve the first child object. This function is typically used to iterate over the children objects of an object. For example: @code for( orxOBJECT *pstChild = orxObject_GetChild(pstObject); pstChild != orxNULL; pstChild = orxObject_GetSibling(pstChild)) { DoSomething(pstChild); // DoSomething() can recurse into the children of pstChild for a depth-first traversal } @endcode Params: Returns: type description orxOBJECT First child object / nil C signature: orxOBJECT * orxObject_GetChild ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getChild"},{"location":"types/orxOBJECT.html#orxobjectgetclock","text":"Signature: r1 = getClock () Description: Get the orxCLOCK linked to the orxSTRUCTURE Params: Returns: type description orxCLOCK The orxCLOCK or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getClock"},{"location":"types/orxOBJECT.html#orxobjectgetcolor","text":"Signature: r1 = getColor () Description: Gets object color. Params: Returns: type description orxCOLOR orxCOLOR / nil C signature: orxCOLOR * orxObject_GetColor ( const orxOBJECT * _pstObject , orxCOLOR * _pstColor )","title":"orxOBJECT:getColor"},{"location":"types/orxOBJECT.html#orxobjectgetcurrentanim","text":"Signature: r1 = getCurrentAnim () Description: Gets current animation. Params: Returns: type description string Current animation / empty string C signature: const orxSTRING orxObject_GetCurrentAnim ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getCurrentAnim"},{"location":"types/orxOBJECT.html#orxobjectgetcustomgravity","text":"Signature: r1 = getCustomGravity () Description: Gets an object custom gravity. Params: Returns: type description orxVECTOR Object custom gravity / nil is object doesn't have any C signature: orxVECTOR * orxObject_GetCustomGravity ( const orxOBJECT * _pstObject , orxVECTOR * _pvCustomGravity )","title":"orxOBJECT:getCustomGravity"},{"location":"types/orxOBJECT.html#orxobjectgetfxfrequency","text":"Signature: r1 = getFXFrequency () Description: Gets an object's relative FX frequency. Params: Returns: type description number FX frequency / -orxFLOAT_1 C signature: orxFLOAT orxObject_GetFXFrequency ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getFXFrequency"},{"location":"types/orxOBJECT.html#orxobjectgetfxpointer","text":"Signature: r1 = getFXPointer () Description: Get the orxFXPOINTER linked to the orxSTRUCTURE Params: Returns: type description orxFXPOINTER The orxFXPOINTER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getFXPointer"},{"location":"types/orxOBJECT.html#orxobjectgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxOBJECT:getFlags"},{"location":"types/orxOBJECT.html#orxobjectgetflip","text":"Signature: r1 , r2 , r3 = getFlip () Description: Gets object flipping. Params: Returns: type description orxSTATUS success / failure boolean X axis flipping boolean Y axis flipping C signature: orxSTATUS orxObject_GetFlip ( const orxOBJECT * _pstObject , orxBOOL * _pbFlipX , orxBOOL * _pbFlipY )","title":"orxOBJECT:getFlip"},{"location":"types/orxOBJECT.html#orxobjectgetframe","text":"Signature: r1 = getFrame () Description: Get the orxFRAME linked to the orxSTRUCTURE Params: Returns: type description orxFRAME The orxFRAME or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getFrame"},{"location":"types/orxOBJECT.html#orxobjectgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxOBJECT:getGUID"},{"location":"types/orxOBJECT.html#orxobjectgetgraphic","text":"Signature: r1 = getGraphic () Description: Get the orxGRAPHIC linked to the orxSTRUCTURE Params: Returns: type description orxGRAPHIC The orxGRAPHIC or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getGraphic"},{"location":"types/orxOBJECT.html#orxobjectgetgroupid","text":"Signature: r1 = getGroupID () Description: Gets object's group ID. Params: Returns: type description integer Object's group ID. This is the string ID (see orxString_GetFromID()) of the object's group name. C signature: orxSTRINGID orxObject_GetGroupID ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getGroupID"},{"location":"types/orxOBJECT.html#orxobjectgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxOBJECT:getID"},{"location":"types/orxOBJECT.html#orxobjectgetignoreflags","text":"Signature: r1 = getIgnoreFlags () Description: Gets object's ignore flags. Params: Returns: type description integer Ignore flags C signature: orxU32 orxObject_GetIgnoreFlags ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getIgnoreFlags"},{"location":"types/orxOBJECT.html#orxobjectgetlastaddedsound","text":"Signature: r1 = getLastAddedSound () Description: Gets last added sound (Do *NOT* destroy it directly before removing it!!!). Params: Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxObject_GetLastAddedSound ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getLastAddedSound"},{"location":"types/orxOBJECT.html#orxobjectgetlifetime","text":"Signature: r1 = getLifeTime () Description: Gets object lifetime. Params: Returns: type description number Lifetime / negative value if none C signature: orxFLOAT orxObject_GetLifeTime ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getLifeTime"},{"location":"types/orxOBJECT.html#orxobjectgetliteralignoreflags","text":"Signature: r1 = getLiteralIgnoreFlags () Description: Gets object's ignore flags literals. The result will not persist through other calls to this function or to orxFrame_GetIgnoreFlagNames(). Params: Returns: type description string Ignore flags literals C signature: const orxSTRING orxObject_GetLiteralIgnoreFlags ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getLiteralIgnoreFlags"},{"location":"types/orxOBJECT.html#orxobjectgetmass","text":"Signature: r1 = getMass () Description: Gets an object mass. Params: Returns: type description number Object mass C signature: orxFLOAT orxObject_GetMass ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getMass"},{"location":"types/orxOBJECT.html#orxobjectgetmasscenter","text":"Signature: r1 = getMassCenter () Description: Gets an object center of mass (object space). Params: Returns: type description orxVECTOR Mass center / nil C signature: orxVECTOR * orxObject_GetMassCenter ( const orxOBJECT * _pstObject , orxVECTOR * _pvMassCenter )","title":"orxOBJECT:getMassCenter"},{"location":"types/orxOBJECT.html#orxobjectgetname","text":"Signature: r1 = getName () Description: Gets object config name. Params: Returns: type description string string / empty string C signature: const orxSTRING orxObject_GetName ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getName"},{"location":"types/orxOBJECT.html#orxobjectgetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxOBJECT:getNext"},{"location":"types/orxOBJECT.html#orxobjectgetnextchild","text":"Signature: r1 = getNextChild ( child , structureid ) Description: Gets object's next child structure of a given type (camera, object or spawner). See orxObject_SetOwner() and orxObject_SetParent() for a comparison of ownership and parenthood in Orx. See orxObject_GetChild()/orxObject_GetSibling() if you want to only consider children objects. This function is typically used to iterate over the children of an object. For example, iterating over the immediate children cameras: @code for( orxCAMERA *pstChild = orxCAMERA(orxObject_GetNextChild(pstObject, orxNULL, orxSTRUCTURE_ID_CAMERA)); pstChild != orxNULL; pstChild = orxCAMERA(orxObject_GetNextChild(pstObject, pstChild, orxSTRUCTURE_ID_CAMERA))) { DoSomethingWithCamera(pstChild); } @endcode Params: name type description child void* Concerned child to retrieve the next sibling, nil to retrieve the first child structureid orxSTRUCTURE_ID ID of the structure to consider (camera, spawner, object or frame) Returns: type description orxSTRUCTURE Next child/sibling structure (camera, spawner, object or frame) / nil C signature: orxSTRUCTURE * orxObject_GetNextChild ( const orxOBJECT * _pstObject , void * _pChild , orxSTRUCTURE_ID _eStructureID )","title":"orxOBJECT:getNextChild"},{"location":"types/orxOBJECT.html#orxobjectgetorigin","text":"Signature: r1 = getOrigin () Description: Get object origin. See orxObject_SetOrigin() for a more detailed explanation. Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetOrigin ( const orxOBJECT * _pstObject , orxVECTOR * _pvOrigin )","title":"orxOBJECT:getOrigin"},{"location":"types/orxOBJECT.html#orxobjectgetownedchild","text":"Signature: r1 = getOwnedChild () Description: Gets object's first owned child (only if created with a config ChildList / has an owner set with orxObject_SetOwner) see orxObject_SetOwner() and orxObject_SetParent() for a comparison of ownership and parenthood in Orx. * This function is typically used to iterate over the owned children of an object. For example; @code for( orxOBJECT * pstChild = orxObject_GetOwnedChild(pstObject); pstChild; pstChild = orxObject_GetOwnedSibling(pstChild)) { do_something(pstChild); } @endcode Params: Returns: type description orxOBJECT First owned child object / nil C signature: orxOBJECT * orxObject_GetOwnedChild ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getOwnedChild"},{"location":"types/orxOBJECT.html#orxobjectgetownedsibling","text":"Signature: r1 = getOwnedSibling () Description: Gets object's next owned sibling (only if created with a config ChildList / has an owner set with orxObject_SetOwner) This function is typically used to iterate over the owned children of an object, see orxObject_GetOwnedChild() for an example. Params: Returns: type description orxOBJECT Next sibling object / nil C signature: orxOBJECT * orxObject_GetOwnedSibling ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getOwnedSibling"},{"location":"types/orxOBJECT.html#orxobjectgetowner","text":"Signature: r1 = getOwner () Description: Gets object's owner. See orxObject_SetOwner(). Params: Returns: type description orxSTRUCTURE Owner / nil C signature: orxSTRUCTURE * orxObject_GetOwner ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getOwner"},{"location":"types/orxOBJECT.html#orxobjectgetparent","text":"Signature: r1 = getParent () Description: Gets object's parent. See orxObject_SetParent() for a more detailed explanation. Params: Returns: type description orxSTRUCTURE Parent (object, spawner, camera or frame) / nil C signature: orxSTRUCTURE * orxObject_GetParent ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getParent"},{"location":"types/orxOBJECT.html#orxobjectgetpivot","text":"Signature: r1 = getPivot () Description: Get object pivot. See orxObject_SetPivot() for a more detailed explanation. Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetPivot ( const orxOBJECT * _pstObject , orxVECTOR * _pvPivot )","title":"orxOBJECT:getPivot"},{"location":"types/orxOBJECT.html#orxobjectgetposition","text":"Signature: r1 = getPosition () Description: Get object position. See orxObject_SetPosition(). Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetPosition ( const orxOBJECT * _pstObject , orxVECTOR * _pvPosition )","title":"orxOBJECT:getPosition"},{"location":"types/orxOBJECT.html#orxobjectgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxOBJECT:getPrevious"},{"location":"types/orxOBJECT.html#orxobjectgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxOBJECT:getRefCount"},{"location":"types/orxOBJECT.html#orxobjectgetrelativespeed","text":"Signature: r1 = getRelativeSpeed () Description: Gets an object relative speed. Params: Returns: type description orxVECTOR Object relative speed / nil C signature: orxVECTOR * orxObject_GetRelativeSpeed ( const orxOBJECT * _pstObject , orxVECTOR * _pvRelativeSpeed )","title":"orxOBJECT:getRelativeSpeed"},{"location":"types/orxOBJECT.html#orxobjectgetrepeat","text":"Signature: r1 , r2 , r3 = getRepeat () Description: Gets object repeat (wrap) values. Params: Returns: type description orxSTATUS success / failure number X-axis repeat value number Y-axis repeat value C signature: orxSTATUS orxObject_GetRepeat ( const orxOBJECT * _pstObject , orxFLOAT * _pfRepeatX , orxFLOAT * _pfRepeatY )","title":"orxOBJECT:getRepeat"},{"location":"types/orxOBJECT.html#orxobjectgetrotation","text":"Signature: r1 = getRotation () Description: Get object rotation. See orxObject_SetRotation(). Params: Returns: type description number number (radians) C signature: orxFLOAT orxObject_GetRotation ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getRotation"},{"location":"types/orxOBJECT.html#orxobjectgetscale","text":"Signature: r1 = getScale () Description: Get object scale. See orxObject_SetScale(). Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetScale ( const orxOBJECT * _pstObject , orxVECTOR * _pvScale )","title":"orxOBJECT:getScale"},{"location":"types/orxOBJECT.html#orxobjectgetshaderpointer","text":"Signature: r1 = getShaderPointer () Description: Get the orxSHADERPOINTER linked to the orxSTRUCTURE Params: Returns: type description orxSHADERPOINTER The orxSHADERPOINTER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getShaderPointer"},{"location":"types/orxOBJECT.html#orxobjectgetsibling","text":"Signature: r1 = getSibling () Description: Gets object's next sibling object. This function is typically used for iterating over the children objects of an object, see orxObject_GetChild() for an iteration example. Note: this function will filter out any camera or spawner and retrieve the next sibling object. Params: Returns: type description orxOBJECT Next sibling object / nil C signature: orxOBJECT * orxObject_GetSibling ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getSibling"},{"location":"types/orxOBJECT.html#orxobjectgetsize","text":"Signature: r1 = getSize () Description: Gets object size. See orxObject_SetSize() for a more detailed explanation. Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetSize ( const orxOBJECT * _pstObject , orxVECTOR * _pvSize )","title":"orxOBJECT:getSize"},{"location":"types/orxOBJECT.html#orxobjectgetsmoothing","text":"Signature: r1 = getSmoothing () Description: Gets object smoothing. Params: Returns: type description orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) C signature: orxDISPLAY_SMOOTHING orxObject_GetSmoothing ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getSmoothing"},{"location":"types/orxOBJECT.html#orxobjectgetsoundpointer","text":"Signature: r1 = getSoundPointer () Description: Get the orxSOUNDPOINTER linked to the orxSTRUCTURE Params: Returns: type description orxSOUNDPOINTER The orxSOUNDPOINTER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getSoundPointer"},{"location":"types/orxOBJECT.html#orxobjectgetspawner","text":"Signature: r1 = getSpawner () Description: Get the orxSPAWNER linked to the orxSTRUCTURE Params: Returns: type description orxSPAWNER The orxSPAWNER or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getSpawner"},{"location":"types/orxOBJECT.html#orxobjectgetspeed","text":"Signature: r1 = getSpeed () Description: Gets an object speed. Params: Returns: type description orxVECTOR Object speed / nil C signature: orxVECTOR * orxObject_GetSpeed ( const orxOBJECT * _pstObject , orxVECTOR * _pvSpeed )","title":"orxOBJECT:getSpeed"},{"location":"types/orxOBJECT.html#orxobjectgettargetanim","text":"Signature: r1 = getTargetAnim () Description: Gets target animation. Params: Returns: type description string Target animation / empty string C signature: const orxSTRING orxObject_GetTargetAnim ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getTargetAnim"},{"location":"types/orxOBJECT.html#orxobjectgettextstring","text":"Signature: r1 = getTextString () Description: Gets object text string, if object is associated to a text. (non-const self only) Params: Returns: type description string string / empty string C signature: const orxSTRING orxObject_GetTextString ( orxOBJECT * _pstObject )","title":"orxOBJECT:getTextString"},{"location":"types/orxOBJECT.html#orxobjectgettimeline","text":"Signature: r1 = getTimeline () Description: Get the orxTIMELINE linked to the orxSTRUCTURE Params: Returns: type description orxTIMELINE The orxTIMELINE or nil C signature: #define orxOBJECT_GET_STRUCTURE(OBJECT, TYPE)","title":"orxOBJECT:getTimeline"},{"location":"types/orxOBJECT.html#orxobjectgetuserdata","text":"Signature: r1 = getUserData () Description: Gets object's user data. Params: Returns: type description void* Stored user data / nil C signature: void * orxObject_GetUserData ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getUserData"},{"location":"types/orxOBJECT.html#orxobjectgetworkinggraphic","text":"Signature: r1 = getWorkingGraphic () Description: Gets object working graphic. Params: Returns: type description orxGRAPHIC orxGRAPHIC / nil C signature: orxGRAPHIC * orxObject_GetWorkingGraphic ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getWorkingGraphic"},{"location":"types/orxOBJECT.html#orxobjectgetworkingtexture","text":"Signature: r1 = getWorkingTexture () Description: Gets object working texture. Params: Returns: type description orxTEXTURE orxTEXTURE / nil C signature: orxTEXTURE * orxObject_GetWorkingTexture ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getWorkingTexture"},{"location":"types/orxOBJECT.html#orxobjectgetworldposition","text":"Signature: r1 = getWorldPosition () Description: Get object world position. See orxObject_SetWorldPosition(). Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetWorldPosition ( const orxOBJECT * _pstObject , orxVECTOR * _pvPosition )","title":"orxOBJECT:getWorldPosition"},{"location":"types/orxOBJECT.html#orxobjectgetworldrotation","text":"Signature: r1 = getWorldRotation () Description: Get object world rotation. See orxObject_SetWorldRotation(). Params: Returns: type description number number (radians) C signature: orxFLOAT orxObject_GetWorldRotation ( const orxOBJECT * _pstObject )","title":"orxOBJECT:getWorldRotation"},{"location":"types/orxOBJECT.html#orxobjectgetworldscale","text":"Signature: r1 = getWorldScale () Description: Gets object world scale. See orxObject_SetWorldScale(). Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxObject_GetWorldScale ( const orxOBJECT * _pstObject , orxVECTOR * _pvScale )","title":"orxOBJECT:getWorldScale"},{"location":"types/orxOBJECT.html#orxobjecthasblendmode","text":"Signature: r1 = hasBlendMode () Description: Object has blend mode accessor? Params: Returns: type description boolean true / false C signature: orxBOOL orxObject_HasBlendMode ( const orxOBJECT * _pstObject )","title":"orxOBJECT:hasBlendMode"},{"location":"types/orxOBJECT.html#orxobjecthascolor","text":"Signature: r1 = hasColor () Description: Object has color accessor? Params: Returns: type description boolean true / false C signature: orxBOOL orxObject_HasColor ( const orxOBJECT * _pstObject )","title":"orxOBJECT:hasColor"},{"location":"types/orxOBJECT.html#orxobjectincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxOBJECT:increaseCount"},{"location":"types/orxOBJECT.html#orxobjectiscurrentanim","text":"Signature: r1 = isCurrentAnim ( animname ) Description: Is current animation test. Params: name type description animname string Animation name (config's one) to test Returns: type description boolean true / false C signature: orxBOOL orxObject_IsCurrentAnim ( const orxOBJECT * _pstObject , const orxSTRING _zAnimName )","title":"orxOBJECT:isCurrentAnim"},{"location":"types/orxOBJECT.html#orxobjectisenabled","text":"Signature: r1 = isEnabled () Description: Is object enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxObject_IsEnabled ( const orxOBJECT * _pstObject )","title":"orxOBJECT:isEnabled"},{"location":"types/orxOBJECT.html#orxobjectispaused","text":"Signature: r1 = isPaused () Description: Is object paused? Params: Returns: type description boolean true if paused, false otherwise C signature: orxBOOL orxObject_IsPaused ( const orxOBJECT * _pstObject )","title":"orxOBJECT:isPaused"},{"location":"types/orxOBJECT.html#orxobjectisshaderenabled","text":"Signature: r1 = isShaderEnabled () Description: Is an object's shader enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxObject_IsShaderEnabled ( const orxOBJECT * _pstObject )","title":"orxOBJECT:isShaderEnabled"},{"location":"types/orxOBJECT.html#orxobjectistargetanim","text":"Signature: r1 = isTargetAnim ( animname ) Description: Is target animation test. Params: name type description animname string Animation name (config's one) to test Returns: type description boolean true / false C signature: orxBOOL orxObject_IsTargetAnim ( const orxOBJECT * _pstObject , const orxSTRING _zAnimName )","title":"orxOBJECT:isTargetAnim"},{"location":"types/orxOBJECT.html#orxobjectistimelineenabled","text":"Signature: r1 = isTimeLineEnabled () Description: Is an object's timeline enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxObject_IsTimeLineEnabled ( const orxOBJECT * _pstObject )","title":"orxOBJECT:isTimeLineEnabled"},{"location":"types/orxOBJECT.html#orxobjectlinkstructure","text":"Signature: r1 = linkStructure ( structure ) Description: Links a structure to an object. (non-const self only) Params: name type description structure orxSTRUCTURE Structure to link Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_LinkStructure ( orxOBJECT * _pstObject , orxSTRUCTURE * _pstStructure )","title":"orxOBJECT:linkStructure"},{"location":"types/orxOBJECT.html#orxobjectlogparents","text":"Signature: r1 = logParents () Description: Logs all parents of an object, including their frame data. Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_LogParents ( const orxOBJECT * _pstObject )","title":"orxOBJECT:logParents"},{"location":"types/orxOBJECT.html#orxobjectpause","text":"Signature: pause ( pause ) Description: Pauses/unpauses an object. Note that pausing an object is not recursive, so its children will not be affected, see orxObject_PauseRecursive(). (non-const self only) Params: name type description pause boolean Pause / unpause Returns: C signature: void orxObject_Pause ( orxOBJECT * _pstObject , orxBOOL _bPause )","title":"orxOBJECT:pause"},{"location":"types/orxOBJECT.html#orxobjectpauserecursive","text":"Signature: pauseRecursive ( pause ) Description: Pauses/unpauses an object and its owned children. (non-const self only) Params: name type description pause boolean Pause / unpause Returns: C signature: void orxObject_PauseRecursive ( orxOBJECT * _pstObject , orxBOOL _bPause )","title":"orxOBJECT:pauseRecursive"},{"location":"types/orxOBJECT.html#orxobjectplay","text":"Signature: r1 = play () Description: Plays all the sounds of an object. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Play ( orxOBJECT * _pstObject )","title":"orxOBJECT:play"},{"location":"types/orxOBJECT.html#orxobjectremoveallfxs","text":"Signature: r1 = removeAllFXs () Description: Removes all FXs. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveAllFXs ( orxOBJECT * _pstObject )","title":"orxOBJECT:removeAllFXs"},{"location":"types/orxOBJECT.html#orxobjectremoveallfxsrecursive","text":"Signature: r1 = removeAllFXsRecursive () Description: Removes all FXs from an object and its owned children. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveAllFXsRecursive ( orxOBJECT * _pstObject )","title":"orxOBJECT:removeAllFXsRecursive"},{"location":"types/orxOBJECT.html#orxobjectremoveallfilters","text":"Signature: r1 = removeAllFilters () Description: Removes all filters from the sounds of an object. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveAllFilters ( orxOBJECT * _pstObject )","title":"orxOBJECT:removeAllFilters"},{"location":"types/orxOBJECT.html#orxobjectremovefx","text":"Signature: r1 = removeFX ( fxconfigid ) Description: Removes an FX using its config ID. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveFX ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID )","title":"orxOBJECT:removeFX"},{"location":"types/orxOBJECT.html#orxobjectremovefxrecursive","text":"Signature: removeFXRecursive ( fxconfigid ) Description: Removes an FX from an object and its owned children. (non-const self only) Params: name type description fxconfigid string Config ID of the FX to remove Returns: C signature: void orxObject_RemoveFXRecursive ( orxOBJECT * _pstObject , const orxSTRING _zFXConfigID )","title":"orxOBJECT:removeFXRecursive"},{"location":"types/orxOBJECT.html#orxobjectremovelastfilter","text":"Signature: r1 = removeLastFilter () Description: Removes last added filter from the sounds of an object. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveLastFilter ( orxOBJECT * _pstObject )","title":"orxOBJECT:removeLastFilter"},{"location":"types/orxOBJECT.html#orxobjectremoveshader","text":"Signature: r1 = removeShader ( shaderconfigid ) Description: Removes a shader using its config ID. (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveShader ( orxOBJECT * _pstObject , const orxSTRING _zShaderConfigID )","title":"orxOBJECT:removeShader"},{"location":"types/orxOBJECT.html#orxobjectremoveshaderrecursive","text":"Signature: removeShaderRecursive ( shaderconfigid ) Description: Removes a shader from an object and its owned children. (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to remove Returns: C signature: void orxObject_RemoveShaderRecursive ( orxOBJECT * _pstObject , const orxSTRING _zShaderConfigID )","title":"orxOBJECT:removeShaderRecursive"},{"location":"types/orxOBJECT.html#orxobjectremovesound","text":"Signature: r1 = removeSound ( soundconfigid ) Description: Removes a sound using its config ID. (non-const self only) Params: name type description soundconfigid string Config ID of the sound to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveSound ( orxOBJECT * _pstObject , const orxSTRING _zSoundConfigID )","title":"orxOBJECT:removeSound"},{"location":"types/orxOBJECT.html#orxobjectremovetimelinetrack","text":"Signature: r1 = removeTimeLineTrack ( trackconfigid ) Description: Removes a timeline track using its config ID (non-const self only) Params: name type description trackconfigid string Config ID of the timeline track to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_RemoveTimeLineTrack ( orxOBJECT * _pstObject , const orxSTRING _zTrackConfigID )","title":"orxOBJECT:removeTimeLineTrack"},{"location":"types/orxOBJECT.html#orxobjectremovetimelinetrackrecursive","text":"Signature: removeTimeLineTrackRecursive ( trackconfigid ) Description: Removes a timeline track from an object and its owned children. (non-const self only) Params: name type description trackconfigid string Config ID of the timeline track to remove Returns: C signature: void orxObject_RemoveTimeLineTrackRecursive ( orxOBJECT * _pstObject , const orxSTRING _zTrackConfigID )","title":"orxOBJECT:removeTimeLineTrackRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetalpha","text":"Signature: r1 = setAlpha ( alpha ) Description: Sets object alpha. (non-const self only) Params: name type description alpha number Alpha value to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetAlpha ( orxOBJECT * _pstObject , orxFLOAT _fAlpha )","title":"orxOBJECT:setAlpha"},{"location":"types/orxOBJECT.html#orxobjectsetalpharecursive","text":"Signature: setAlphaRecursive ( alpha ) Description: Sets alpha of an object and all its owned children. (non-const self only) Params: name type description alpha number Alpha value to set Returns: C signature: void orxObject_SetAlphaRecursive ( orxOBJECT * _pstObject , orxFLOAT _fAlpha )","title":"orxOBJECT:setAlphaRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetangularvelocity","text":"Signature: r1 = setAngularVelocity ( velocity ) Description: Sets an object angular velocity. (non-const self only) Params: name type description velocity number Angular velocity to set (radians/seconds) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetAngularVelocity ( orxOBJECT * _pstObject , orxFLOAT _fVelocity )","title":"orxOBJECT:setAngularVelocity"},{"location":"types/orxOBJECT.html#orxobjectsetanimfrequency","text":"Signature: r1 = setAnimFrequency ( frequency ) Description: Sets an object's relative animation frequency. (non-const self only) Params: name type description frequency number Frequency to set: < 1.0 for slower than initial, > 1.0 for faster than initial Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetAnimFrequency ( orxOBJECT * _pstObject , orxFLOAT _fFrequency )","title":"orxOBJECT:setAnimFrequency"},{"location":"types/orxOBJECT.html#orxobjectsetanimfrequencyrecursive","text":"Signature: setAnimFrequencyRecursive ( frequency ) Description: Sets the relative animation frequency for an object and its owned children. (non-const self only) Params: name type description frequency number Frequency to set: < 1.0 for slower than initial, > 1.0 for faster than initial Returns: C signature: void orxObject_SetAnimFrequencyRecursive ( orxOBJECT * _pstObject , orxFLOAT _fFrequency )","title":"orxOBJECT:setAnimFrequencyRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetanimset","text":"Signature: r1 = setAnimSet ( animset ) Description: Sets an object animset. (non-const self only) Params: name type description animset orxANIMSET Animation set to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetAnimSet ( orxOBJECT * _pstObject , orxANIMSET * _pstAnimSet )","title":"orxOBJECT:setAnimSet"},{"location":"types/orxOBJECT.html#orxobjectsetblendmode","text":"Signature: r1 = setBlendMode ( blendmode ) Description: Sets object blend mode. (non-const self only) Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetBlendMode ( orxOBJECT * _pstObject , orxDISPLAY_BLEND_MODE _eBlendMode )","title":"orxOBJECT:setBlendMode"},{"location":"types/orxOBJECT.html#orxobjectsetblendmoderecursive","text":"Signature: setBlendModeRecursive ( blendmode ) Description: Sets blend mode of an object and its owned children. (non-const self only) Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode (alpha, multiply, add or none) Returns: C signature: void orxObject_SetBlendModeRecursive ( orxOBJECT * _pstObject , orxDISPLAY_BLEND_MODE _eBlendMode )","title":"orxOBJECT:setBlendModeRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetclock","text":"Signature: r1 = setClock ( clock ) Description: Sets associated clock for an object. (non-const self only) Params: name type description clock orxCLOCK Clock to associate / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetClock ( orxOBJECT * _pstObject , orxCLOCK * _pstClock )","title":"orxOBJECT:setClock"},{"location":"types/orxOBJECT.html#orxobjectsetclockrecursive","text":"Signature: setClockRecursive ( clock ) Description: Sets associated clock for an object and its owned children. (non-const self only) Params: name type description clock orxCLOCK Clock to associate / nil Returns: C signature: void orxObject_SetClockRecursive ( orxOBJECT * _pstObject , orxCLOCK * _pstClock )","title":"orxOBJECT:setClockRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetcolor","text":"Signature: r1 = setColor ( color ) Description: Sets object color. (non-const self only) Params: name type description color orxCOLOR# Color to set, nil to remove any specific color Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetColor ( orxOBJECT * _pstObject , const orxCOLOR * _pstColor )","title":"orxOBJECT:setColor"},{"location":"types/orxOBJECT.html#orxobjectsetcolorrecursive","text":"Signature: setColorRecursive ( color ) Description: Sets color of an object and all its owned children. (non-const self only) Params: name type description color orxCOLOR# Color to set, nil to remove any specific color Returns: C signature: void orxObject_SetColorRecursive ( orxOBJECT * _pstObject , const orxCOLOR * _pstColor )","title":"orxOBJECT:setColorRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetcurrentanim","text":"Signature: r1 = setCurrentAnim ( animname ) Description: Sets current animation for an object. This function switches the currently displayed animation of the object immediately. Compare this with orxObject_SetTargetAnim(). (non-const self only) Params: name type description animname string Animation name (config's one) to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetCurrentAnim ( orxOBJECT * _pstObject , const orxSTRING _zAnimName )","title":"orxOBJECT:setCurrentAnim"},{"location":"types/orxOBJECT.html#orxobjectsetcurrentanimrecursive","text":"Signature: setCurrentAnimRecursive ( animname ) Description: Sets current animation for an object and its owned children. (non-const self only) Params: name type description animname string Animation name (config's one) to set / nil Returns: C signature: void orxObject_SetCurrentAnimRecursive ( orxOBJECT * _pstObject , const orxSTRING _zAnimName )","title":"orxOBJECT:setCurrentAnimRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetcustomgravity","text":"Signature: r1 = setCustomGravity ( customgravity ) Description: Sets an object custom gravity. (non-const self only) Params: name type description customgravity orxVECTOR# Custom gravity to set / nil to remove it Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetCustomGravity ( orxOBJECT * _pstObject , const orxVECTOR * _pvCustomGravity )","title":"orxOBJECT:setCustomGravity"},{"location":"types/orxOBJECT.html#orxobjectsetfxfrequency","text":"Signature: r1 = setFXFrequency ( frequency ) Description: Sets an object's relative FX frequency. (non-const self only) Params: name type description frequency number Frequency to set: < 1.0 for slower than initial, > 1.0 for faster than initial Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetFXFrequency ( orxOBJECT * _pstObject , orxFLOAT _fFrequency )","title":"orxOBJECT:setFXFrequency"},{"location":"types/orxOBJECT.html#orxobjectsetfxfrequencyrecursive","text":"Signature: setFXFrequencyRecursive ( frequency ) Description: Sets the relative FX frequency for an object and its owned children. (non-const self only) Params: name type description frequency number Frequency to set: < 1.0 for slower than initial, > 1.0 for faster than initial Returns: C signature: void orxObject_SetFXFrequencyRecursive ( orxOBJECT * _pstObject , orxFLOAT _fFrequency )","title":"orxOBJECT:setFXFrequencyRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxOBJECT:setFlags"},{"location":"types/orxOBJECT.html#orxobjectsetflip","text":"Signature: r1 = setFlip ( flipx , flipy ) Description: Sets object flipping. (non-const self only) Params: name type description flipx boolean Flip it on X axis flipy boolean Flip it on Y axis Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetFlip ( orxOBJECT * _pstObject , orxBOOL _bFlipX , orxBOOL _bFlipY )","title":"orxOBJECT:setFlip"},{"location":"types/orxOBJECT.html#orxobjectsetgroupid","text":"Signature: r1 = setGroupID ( groupid ) Description: Sets object's group ID. (non-const self only) Params: name type description groupid integer Group ID to set. This is the string ID (see orxString_GetID()) of the object's group name. Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetGroupID ( orxOBJECT * _pstObject , orxSTRINGID _stGroupID )","title":"orxOBJECT:setGroupID"},{"location":"types/orxOBJECT.html#orxobjectsetgroupidrecursive","text":"Signature: setGroupIDRecursive ( groupid ) Description: Sets group ID of an object and all its owned children. (non-const self only) Params: name type description groupid integer Group ID to set. This is the string ID (see orxString_GetID()) of the object's group name. Returns: C signature: void orxObject_SetGroupIDRecursive ( orxOBJECT * _pstObject , orxSTRINGID _stGroupID )","title":"orxOBJECT:setGroupIDRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetignoreflags","text":"Signature: r1 = setIgnoreFlags ( ignoreflags ) Description: Sets object's ignore flags. (non-const self only) Params: name type description ignoreflags integer Ignore flags to set (all other ignore flags will get cleared) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetIgnoreFlags ( orxOBJECT * _pstObject , orxU32 _u32IgnoreFlags )","title":"orxOBJECT:setIgnoreFlags"},{"location":"types/orxOBJECT.html#orxobjectsetlifetime","text":"Signature: r1 = setLifeTime ( lifetime ) Description: Sets object lifetime. (non-const self only) Params: name type description lifetime number Lifetime to set, negative value to disable it Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetLifeTime ( orxOBJECT * _pstObject , orxFLOAT _fLifeTime )","title":"orxOBJECT:setLifeTime"},{"location":"types/orxOBJECT.html#orxobjectsetliteralignoreflags","text":"Signature: r1 = setLiteralIgnoreFlags ( ignoreflags ) Description: Sets object's ignore flags using literals. (non-const self only) Params: name type description ignoreflags [in,out] string Literals of the ignore flags to set (all other ignore flags will get cleared) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetLiteralIgnoreFlags ( orxOBJECT * _pstObject , const orxSTRING _zIgnoreFlags )","title":"orxOBJECT:setLiteralIgnoreFlags"},{"location":"types/orxOBJECT.html#orxobjectsetliterallifetime","text":"Signature: r1 = setLiteralLifeTime ( lifetime ) Description: Sets object literal lifetime. (non-const self only) Params: name type description lifetime string Lifetime to set, can be composed of multiple tags, separated by space: anim, child, fx, sound, spawner and track Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetLiteralLifeTime ( orxOBJECT * _pstObject , const orxSTRING _zLifeTime )","title":"orxOBJECT:setLiteralLifeTime"},{"location":"types/orxOBJECT.html#orxobjectsetorigin","text":"Signature: r1 = setOrigin ( origin ) Description: Sets object origin. This is a convenience wrapper around orxGraphic_SetOrigin(). The \"origin\" of a graphic is essentially what is indicated by the \"TextureOrigin\" field of a config graphic section. The \"origin\" together with \"size\" (see orxObject_SetSize()) defines the sprite of an object. (non-const self only) Params: name type description origin orxVECTOR# Object origin Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetOrigin ( orxOBJECT * _pstObject , const orxVECTOR * _pvOrigin )","title":"orxOBJECT:setOrigin"},{"location":"types/orxOBJECT.html#orxobjectsetowner","text":"Signature: setOwner ( owner ) Description: Sets owner for an object. Ownership in Orx is only about lifetime management. That is, when an object dies, it also kills its owned children. Compare this with orxObject_SetParent(). * Note that the \"ChildList\" field of an object's config section implies two things; that the object is both the owner (orxObject_SetOwner()) and the parent (orxObject_SetParent()) of its owned children. There is an exception to this though; when an object's child has a parent camera, the object is only the owner, and the camera is the parent. (non-const self only) Params: name type description owner void* Owner to set / orxNULL, if owner is an orxOBJECT, the owned object will be added to it as a children Returns: C signature: void orxObject_SetOwner ( orxOBJECT * _pstObject , void * _pOwner )","title":"orxOBJECT:setOwner"},{"location":"types/orxOBJECT.html#orxobjectsetpanning","text":"Signature: r1 = setPanning ( panning , mix ) Description: Sets panning of all sounds of an object. (non-const self only) Params: name type description panning number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right mix boolean Left/Right channels will be mixed if true or act like a balance otherwise Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetPanning ( orxOBJECT * _pstObject , orxFLOAT _fPanning , orxBOOL _bMix )","title":"orxOBJECT:setPanning"},{"location":"types/orxOBJECT.html#orxobjectsetparent","text":"Signature: r1 = setParent ( parent ) Description: Sets an object parent (in the frame hierarchy). Parenthood in orx is about the transformation (position, rotation, scale) of objects. Transformation of objects are compounded in a frame hierarchy. Compare this with orxObject_SetOwner() * Note that the \"ChildList\" field of an object's config section implies two things; that the object is both the owner (orxObject_SetOwner()) and the parent (orxObject_SetParent()) of its children. There is an exception to this though; when an object's child has a parent camera, the object is only the owner, and the camera is the parent. (non-const self only) Params: name type description parent void* Parent structure to set (object, spawner, camera or frame) / nil Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxObject_SetParent ( orxOBJECT * _pstObject , void * _pParent )","title":"orxOBJECT:setParent"},{"location":"types/orxOBJECT.html#orxobjectsetpitch","text":"Signature: r1 = setPitch ( pitch ) Description: Sets pitch for all sounds of an object. (non-const self only) Params: name type description pitch number Desired pitch (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetPitch ( orxOBJECT * _pstObject , orxFLOAT _fPitch )","title":"orxOBJECT:setPitch"},{"location":"types/orxOBJECT.html#orxobjectsetpivot","text":"Signature: r1 = setPivot ( pivot ) Description: Sets object pivot. This is a convenience wrapper around orxGraphic_SetPivot(). The \"pivot\" is essentially what is indicated by the \"Pivot\" field of a config graphic section. (non-const self only) Params: name type description pivot orxVECTOR# Object pivot Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetPivot ( orxOBJECT * _pstObject , const orxVECTOR * _pvPivot )","title":"orxOBJECT:setPivot"},{"location":"types/orxOBJECT.html#orxobjectsetposition","text":"Signature: r1 = setPosition ( position ) Description: Sets object position in its parent's reference frame. See orxObject_SetWorldPosition() for setting an object's position in the global reference frame. (non-const self only) Params: name type description position orxVECTOR# Object position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetPosition ( orxOBJECT * _pstObject , const orxVECTOR * _pvPosition )","title":"orxOBJECT:setPosition"},{"location":"types/orxOBJECT.html#orxobjectsetrgb","text":"Signature: r1 = setRGB ( rgb ) Description: Sets object RGB values. (non-const self only) Params: name type description rgb orxVECTOR# RGB values to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetRGB ( orxOBJECT * _pstObject , const orxVECTOR * _pvRGB )","title":"orxOBJECT:setRGB"},{"location":"types/orxOBJECT.html#orxobjectsetrgbrecursive","text":"Signature: setRGBRecursive ( rgb ) Description: Sets color of an object and all its owned children. (non-const self only) Params: name type description rgb orxVECTOR# RGB values to set Returns: C signature: void orxObject_SetRGBRecursive ( orxOBJECT * _pstObject , const orxVECTOR * _pvRGB )","title":"orxOBJECT:setRGBRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetrelativespeed","text":"Signature: r1 = setRelativeSpeed ( relativespeed ) Description: Sets an object speed relative to its rotation/scale. (non-const self only) Params: name type description relativespeed orxVECTOR# Relative speed to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetRelativeSpeed ( orxOBJECT * _pstObject , const orxVECTOR * _pvRelativeSpeed )","title":"orxOBJECT:setRelativeSpeed"},{"location":"types/orxOBJECT.html#orxobjectsetrepeat","text":"Signature: r1 = setRepeat ( repeatx , repeaty ) Description: Sets object repeat (wrap) values. (non-const self only) Params: name type description repeatx number X-axis repeat value repeaty number Y-axis repeat value Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetRepeat ( orxOBJECT * _pstObject , orxFLOAT _fRepeatX , orxFLOAT _fRepeatY )","title":"orxOBJECT:setRepeat"},{"location":"types/orxOBJECT.html#orxobjectsetrotation","text":"Signature: r1 = setRotation ( rotation ) Description: Sets object rotation in its parent's reference frame. See orxObject_SetWorldRotation() for setting an object's rotation in the global reference frame. (non-const self only) Params: name type description rotation number Object rotation (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetRotation ( orxOBJECT * _pstObject , orxFLOAT _fRotation )","title":"orxOBJECT:setRotation"},{"location":"types/orxOBJECT.html#orxobjectsetscale","text":"Signature: r1 = setScale ( scale ) Description: Sets object scale in its parent's reference frame. See orxObject_SetWorldScale() for setting an object's scale in the global reference frame. See orxObject_SetSize() for a deeper explanation of the \"size\" of an object. (non-const self only) Params: name type description scale orxVECTOR# Object scale vector Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetScale ( orxOBJECT * _pstObject , const orxVECTOR * _pvScale )","title":"orxOBJECT:setScale"},{"location":"types/orxOBJECT.html#orxobjectsetsize","text":"Signature: r1 = setSize ( size ) Description: Sets object size. For objects that have a graphic attached it's simply a convenience wrapper for orxGraphic_SetSize(), but an object can also have a size without a graphic. * Note the difference between \"Scale\" and \"Size\". The size of an object with a non-text graphic is the sprite size in pixels on its texture. The object's effective size for rendering and intersection purposes (see orxObject_Pick() and friends) is proportional to its \"size\" multiplied by its \"scale\". Another important distinction is that the scale of an object also affects its children (see orxObject_SetParent() and note the distinction between parenthood and ownership). (non-const self only) Params: name type description size orxVECTOR# Object size Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetSize ( orxOBJECT * _pstObject , const orxVECTOR * _pvSize )","title":"orxOBJECT:setSize"},{"location":"types/orxOBJECT.html#orxobjectsetsmoothing","text":"Signature: r1 = setSmoothing ( smoothing ) Description: Sets object smoothing. (non-const self only) Params: name type description smoothing orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetSmoothing ( orxOBJECT * _pstObject , orxDISPLAY_SMOOTHING _eSmoothing )","title":"orxOBJECT:setSmoothing"},{"location":"types/orxOBJECT.html#orxobjectsetsmoothingrecursive","text":"Signature: setSmoothingRecursive ( smoothing ) Description: Sets smoothing for an object and its owned children. (non-const self only) Params: name type description smoothing orxDISPLAY_SMOOTHING Smoothing type (enabled, default or none) Returns: C signature: void orxObject_SetSmoothingRecursive ( orxOBJECT * _pstObject , orxDISPLAY_SMOOTHING _eSmoothing )","title":"orxOBJECT:setSmoothingRecursive"},{"location":"types/orxOBJECT.html#orxobjectsetspeed","text":"Signature: r1 = setSpeed ( speed ) Description: Sets an object speed. (non-const self only) Params: name type description speed orxVECTOR# Speed to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetSpeed ( orxOBJECT * _pstObject , const orxVECTOR * _pvSpeed )","title":"orxOBJECT:setSpeed"},{"location":"types/orxOBJECT.html#orxobjectsettargetanim","text":"Signature: r1 = setTargetAnim ( animname ) Description: Sets target animation for an object. The animations are sequenced on an object according to the animation link graph defined by its AnimationSet. The sequence follows the graph and tries to reach the target animation. Use orxObject_SetCurrentAnim() to switch the animation without using the link graph. (non-const self only) Params: name type description animname string Animation name (config's one) to set / nil Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetTargetAnim ( orxOBJECT * _pstObject , const orxSTRING _zAnimName )","title":"orxOBJECT:setTargetAnim"},{"location":"types/orxOBJECT.html#orxobjectsettargetanimrecursive","text":"Signature: setTargetAnimRecursive ( animname ) Description: Sets target animation for an object and its owned children. (non-const self only) Params: name type description animname string Animation name (config's one) to set / nil Returns: C signature: void orxObject_SetTargetAnimRecursive ( orxOBJECT * _pstObject , const orxSTRING _zAnimName )","title":"orxOBJECT:setTargetAnimRecursive"},{"location":"types/orxOBJECT.html#orxobjectsettextstring","text":"Signature: r1 = setTextString ( string ) Description: Sets object text string, if object is associated to a text. (non-const self only) Params: name type description string string String to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetTextString ( orxOBJECT * _pstObject , const orxSTRING _zString )","title":"orxOBJECT:setTextString"},{"location":"types/orxOBJECT.html#orxobjectsetuserdata","text":"Signature: setUserData ( userdata ) Description: Sets user data for an object. Orx ignores the user data, this is a mechanism for attaching custom data to be used later by user code. (non-const self only) Params: name type description userdata void* User data to store / nil Returns: C signature: void orxObject_SetUserData ( orxOBJECT * _pstObject , void * _pUserData )","title":"orxOBJECT:setUserData"},{"location":"types/orxOBJECT.html#orxobjectsetvolume","text":"Signature: r1 = setVolume ( volume ) Description: Sets volume for all sounds of an object. (non-const self only) Params: name type description volume number Desired volume (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetVolume ( orxOBJECT * _pstObject , orxFLOAT _fVolume )","title":"orxOBJECT:setVolume"},{"location":"types/orxOBJECT.html#orxobjectsetworldposition","text":"Signature: r1 = setWorldPosition ( position ) Description: Sets object position in the global reference frame. See orxObject_SetPosition() for setting an object's position in its parent's reference frame. (non-const self only) Params: name type description position orxVECTOR# Object world position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetWorldPosition ( orxOBJECT * _pstObject , const orxVECTOR * _pvPosition )","title":"orxOBJECT:setWorldPosition"},{"location":"types/orxOBJECT.html#orxobjectsetworldrotation","text":"Signature: r1 = setWorldRotation ( rotation ) Description: Sets object rotation in the global reference frame. See orxObject_SetRotation() for setting an object's rotation in its parent's reference frame. (non-const self only) Params: name type description rotation number Object world rotation (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetWorldRotation ( orxOBJECT * _pstObject , orxFLOAT _fRotation )","title":"orxOBJECT:setWorldRotation"},{"location":"types/orxOBJECT.html#orxobjectsetworldscale","text":"Signature: r1 = setWorldScale ( scale ) Description: Sets object scale in the global reference frame. See orxObject_SetScale() for setting an object's scale in its parent's reference frame. (non-const self only) Params: name type description scale orxVECTOR# Object world scale vector Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SetWorldScale ( orxOBJECT * _pstObject , const orxVECTOR * _pvScale )","title":"orxOBJECT:setWorldScale"},{"location":"types/orxOBJECT.html#orxobjectstop","text":"Signature: r1 = stop () Description: Stops all the sounds of an object. (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Stop ( orxOBJECT * _pstObject )","title":"orxOBJECT:stop"},{"location":"types/orxOBJECT.html#orxobjectsynchronizefx","text":"Signature: r1 = synchronizeFX ( model ) Description: Synchronizes FXs with another object's ones (if FXs are not matching on both objects the behavior is undefined). (non-const self only) Params: name type description model orxOBJECT# Model object on which to synchronize FXs Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_SynchronizeFX ( orxOBJECT * _pstObject , const orxOBJECT * _pstModel )","title":"orxOBJECT:synchronizeFX"},{"location":"types/orxOBJECT.html#orxobjecttestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxOBJECT:testAllFlags"},{"location":"types/orxOBJECT.html#orxobjecttestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxOBJECT:testFlags"},{"location":"types/orxOBJECT.html#orxobjecttype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxOBJECT:type"},{"location":"types/orxOBJECT.html#orxobjectunlinkstructure","text":"Signature: unlinkStructure ( structureid ) Description: Unlinks structure from an object, given its structure ID. (non-const self only) Params: name type description structureid orxSTRUCTURE_ID ID of structure to unlink Returns: C signature: void orxObject_UnlinkStructure ( orxOBJECT * _pstObject , orxSTRUCTURE_ID _eStructureID )","title":"orxOBJECT:unlinkStructure"},{"location":"types/orxOBJECT.html#orxobjectupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates an object. (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Clock information used to compute new object's state Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxObject_Update ( orxOBJECT * _pstObject , const orxCLOCK_INFO * _pstClockInfo )","title":"orxOBJECT:update"},{"location":"types/orxOBOX.html","text":"type orxOBOX # constructors: lorx.obox.obox Properties # name type position orxVECTOR pivot orxVECTOR x orxVECTOR y orxVECTOR z orxVECTOR Methods # orxOBOX:_2DIsInside # Signature: r1 = _2DIsInside ( position ) Description: Is 2D position inside oriented box test Params: name type description position orxVECTOR# Position to test against the box (no Z-test) Returns: type description boolean true if position is inside the box, false otherwise C signature: orxBOOL orxOBox_2DIsInside ( const orxOBOX * _pstBox , const orxVECTOR * _pvPosition ) orxOBOX:_2DRotate # Signature: r1 = _2DRotate ( angle ) Description: Rotates in 2D an OBox Params: name type description angle number Z-axis rotation angle (radians) Returns: type description orxOBOX Rotated OBox C signature: orxOBOX * orxOBox_2DRotate ( orxOBOX * _pstRes , const orxOBOX * _pstOp , orxFLOAT _fAngle ) orxOBOX:_2DSet # Signature: r1 = _2DSet ( worldposition , pivot , size , angle ) Description: Sets 2D oriented box values (non-const self only) Params: name type description worldposition orxVECTOR# World space position vector pivot orxVECTOR# Pivot vector size orxVECTOR# Size vector angle number Z-axis angle (radians) Returns: type description orxOBOX orxOBOX / nil C signature: orxOBOX * orxOBox_2DSet ( orxOBOX * _pstRes , const orxVECTOR * _pvWorldPosition , const orxVECTOR * _pvPivot , const orxVECTOR * _pvSize , orxFLOAT _fAngle ) orxOBOX:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxOBOX:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxOBOX:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxOBOX:copy # Signature: r1 = copy () Description: Copies an OBox onto another one Params: Returns: type description orxOBOX Destination OBox C signature: orxOBOX * orxOBox_Copy ( orxOBOX * _pstDst , const orxOBOX * _pstSrc ) orxOBOX:getCenter # Signature: r1 = getCenter () Description: Gets OBox center position Params: Returns: type description orxVECTOR Center position vector C signature: orxVECTOR * orxOBox_GetCenter ( const orxOBOX * _pstOp , orxVECTOR * _pvRes ) orxOBOX:isInside # Signature: r1 = isInside ( position ) Description: Is position inside oriented box test Params: name type description position orxVECTOR# Position to test against the box Returns: type description boolean true if position is inside the box, false otherwise C signature: orxBOOL orxOBox_IsInside ( const orxOBOX * _pstBox , const orxVECTOR * _pvPosition ) orxOBOX:move # Signature: r1 = move ( move ) Description: Moves an OBox Params: name type description move orxVECTOR# Move vector Returns: type description orxOBOX Moved OBox C signature: orxOBOX * orxOBox_Move ( orxOBOX * _pstRes , const orxOBOX * _pstOp , const orxVECTOR * _pvMove ) orxOBOX:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxOBOX:zAlignedTestIntersection # Signature: r1 = zAlignedTestIntersection ( box2 ) Description: Tests oriented box intersection (simple Z-axis test, to use with Z-axis aligned orxOBOX) Params: name type description box2 orxOBOX# Second box operand Returns: type description boolean true if boxes intersect, false otherwise C signature: orxBOOL orxOBox_ZAlignedTestIntersection ( const orxOBOX * _pstBox1 , const orxOBOX * _pstBox2 )","title":"orxOBOX"},{"location":"types/orxOBOX.html#type-orxobox","text":"constructors: lorx.obox.obox","title":"type orxOBOX"},{"location":"types/orxOBOX.html#properties","text":"name type position orxVECTOR pivot orxVECTOR x orxVECTOR y orxVECTOR z orxVECTOR","title":"Properties"},{"location":"types/orxOBOX.html#methods","text":"","title":"Methods"},{"location":"types/orxOBOX.html#orxobox_2disinside","text":"Signature: r1 = _2DIsInside ( position ) Description: Is 2D position inside oriented box test Params: name type description position orxVECTOR# Position to test against the box (no Z-test) Returns: type description boolean true if position is inside the box, false otherwise C signature: orxBOOL orxOBox_2DIsInside ( const orxOBOX * _pstBox , const orxVECTOR * _pvPosition )","title":"orxOBOX:_2DIsInside"},{"location":"types/orxOBOX.html#orxobox_2drotate","text":"Signature: r1 = _2DRotate ( angle ) Description: Rotates in 2D an OBox Params: name type description angle number Z-axis rotation angle (radians) Returns: type description orxOBOX Rotated OBox C signature: orxOBOX * orxOBox_2DRotate ( orxOBOX * _pstRes , const orxOBOX * _pstOp , orxFLOAT _fAngle )","title":"orxOBOX:_2DRotate"},{"location":"types/orxOBOX.html#orxobox_2dset","text":"Signature: r1 = _2DSet ( worldposition , pivot , size , angle ) Description: Sets 2D oriented box values (non-const self only) Params: name type description worldposition orxVECTOR# World space position vector pivot orxVECTOR# Pivot vector size orxVECTOR# Size vector angle number Z-axis angle (radians) Returns: type description orxOBOX orxOBOX / nil C signature: orxOBOX * orxOBox_2DSet ( orxOBOX * _pstRes , const orxVECTOR * _pvWorldPosition , const orxVECTOR * _pvPivot , const orxVECTOR * _pvSize , orxFLOAT _fAngle )","title":"orxOBOX:_2DSet"},{"location":"types/orxOBOX.html#orxoboxaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxOBOX:addr"},{"location":"types/orxOBOX.html#orxoboxaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxOBOX:aeq"},{"location":"types/orxOBOX.html#orxoboxasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxOBOX:asVoid"},{"location":"types/orxOBOX.html#orxoboxcopy","text":"Signature: r1 = copy () Description: Copies an OBox onto another one Params: Returns: type description orxOBOX Destination OBox C signature: orxOBOX * orxOBox_Copy ( orxOBOX * _pstDst , const orxOBOX * _pstSrc )","title":"orxOBOX:copy"},{"location":"types/orxOBOX.html#orxoboxgetcenter","text":"Signature: r1 = getCenter () Description: Gets OBox center position Params: Returns: type description orxVECTOR Center position vector C signature: orxVECTOR * orxOBox_GetCenter ( const orxOBOX * _pstOp , orxVECTOR * _pvRes )","title":"orxOBOX:getCenter"},{"location":"types/orxOBOX.html#orxoboxisinside","text":"Signature: r1 = isInside ( position ) Description: Is position inside oriented box test Params: name type description position orxVECTOR# Position to test against the box Returns: type description boolean true if position is inside the box, false otherwise C signature: orxBOOL orxOBox_IsInside ( const orxOBOX * _pstBox , const orxVECTOR * _pvPosition )","title":"orxOBOX:isInside"},{"location":"types/orxOBOX.html#orxoboxmove","text":"Signature: r1 = move ( move ) Description: Moves an OBox Params: name type description move orxVECTOR# Move vector Returns: type description orxOBOX Moved OBox C signature: orxOBOX * orxOBox_Move ( orxOBOX * _pstRes , const orxOBOX * _pstOp , const orxVECTOR * _pvMove )","title":"orxOBOX:move"},{"location":"types/orxOBOX.html#orxoboxtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxOBOX:type"},{"location":"types/orxOBOX.html#orxoboxzalignedtestintersection","text":"Signature: r1 = zAlignedTestIntersection ( box2 ) Description: Tests oriented box intersection (simple Z-axis test, to use with Z-axis aligned orxOBOX) Params: name type description box2 orxOBOX# Second box operand Returns: type description boolean true if boxes intersect, false otherwise C signature: orxBOOL orxOBox_ZAlignedTestIntersection ( const orxOBOX * _pstBox1 , const orxOBOX * _pstBox2 )","title":"orxOBOX:zAlignedTestIntersection"},{"location":"types/orxPHYSICS_BODY.html","text":"type orxPHYSICS_BODY # Methods # orxPHYSICS_BODY:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxPHYSICS_BODY:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxPHYSICS_BODY:applyForce # Signature: r1 = applyForce ( force , point ) Description: Applies a force to a physical body (non-const self only) Params: name type description force orxVECTOR# Force to apply point orxVECTOR# Point of application (world coordinates) (if null, center of mass will be used) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_ApplyForce ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvForce , const orxVECTOR * _pvPoint ) orxPHYSICS_BODY:applyImpulse # Signature: r1 = applyImpulse ( impulse , point ) Description: Applies an impulse to a physical body (non-const self only) Params: name type description impulse orxVECTOR# Impulse to apply point orxVECTOR# Point of application (world coordinates) (if null, center of mass will be used) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_ApplyImpulse ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvImpulse , const orxVECTOR * _pvPoint ) orxPHYSICS_BODY:applyTorque # Signature: r1 = applyTorque ( torque ) Description: Applies a torque to a physical body (non-const self only) Params: name type description torque number Torque to apply Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_ApplyTorque ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fTorque ) orxPHYSICS_BODY:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxPHYSICS_BODY:delete # Signature: delete () Description: Deletes a physical body (non-const self only) Params: Returns: C signature: void orxPhysics_DeleteBody ( orxPHYSICS_BODY * _pstBody ) orxPHYSICS_BODY:getAngularDamping # Signature: r1 = getAngularDamping () Description: Gets angular damping of a physical body Params: Returns: type description number Angular damping of the physical body C signature: orxFLOAT orxPhysics_GetAngularDamping ( const orxPHYSICS_BODY * _pstBody ) orxPHYSICS_BODY:getAngularVelocity # Signature: r1 = getAngularVelocity () Description: Gets the angular velocity of a physical body Params: Returns: type description number Angular velocity (radians/seconds) of the physical body C signature: orxFLOAT orxPhysics_GetAngularVelocity ( const orxPHYSICS_BODY * _pstBody ) orxPHYSICS_BODY:getCustomGravity # Signature: r1 = getCustomGravity () Description: Gets the custom gravity of a physical body Params: Returns: type description orxVECTOR Physical body custom gravity / nil is object doesn't have any C signature: orxVECTOR * orxPhysics_GetCustomGravity ( const orxPHYSICS_BODY * _pstBody , orxVECTOR * _pvCustomGravity ) orxPHYSICS_BODY:getLinearDamping # Signature: r1 = getLinearDamping () Description: Gets linear damping of a physical body Params: Returns: type description number Linear damping of the physical body C signature: orxFLOAT orxPhysics_GetLinearDamping ( const orxPHYSICS_BODY * _pstBody ) orxPHYSICS_BODY:getMass # Signature: r1 = getMass () Description: Gets the mass of a physical body Params: Returns: type description number Mass of the physical body C signature: orxFLOAT orxPhysics_GetMass ( const orxPHYSICS_BODY * _pstBody ) orxPHYSICS_BODY:getMassCenter # Signature: r1 = getMassCenter () Description: Gets the center of mass of a physical body (object space but scale isn't accounted for) Params: Returns: type description orxVECTOR Center of mass of the physical body C signature: orxVECTOR * orxPhysics_GetMassCenter ( const orxPHYSICS_BODY * _pstBody , orxVECTOR * _pvMassCenter ) orxPHYSICS_BODY:getPosition # Signature: r1 = getPosition () Description: Gets the position of a physical body Params: Returns: type description orxVECTOR Position of the physical body C signature: orxVECTOR * orxPhysics_GetPosition ( const orxPHYSICS_BODY * _pstBody , orxVECTOR * _pvPosition ) orxPHYSICS_BODY:getRotation # Signature: r1 = getRotation () Description: Gets the rotation of a physical body Params: Returns: type description number Rotation (radians) of the physical body C signature: orxFLOAT orxPhysics_GetRotation ( const orxPHYSICS_BODY * _pstBody ) orxPHYSICS_BODY:getSpeed # Signature: r1 = getSpeed () Description: Gets the speed of a physical body Params: Returns: type description orxVECTOR Speed of the physical body C signature: orxVECTOR * orxPhysics_GetSpeed ( const orxPHYSICS_BODY * _pstBody , orxVECTOR * _pvSpeed ) orxPHYSICS_BODY:getSpeedAtWorldPosition # Signature: r1 = getSpeedAtWorldPosition ( position ) Description: Gets the speed of a physical body at a specified world position Params: name type description position orxVECTOR# Concerned world position Returns: type description orxVECTOR Speed of the physical body C signature: orxVECTOR * orxPhysics_GetSpeedAtWorldPosition ( const orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvPosition , orxVECTOR * _pvSpeed ) orxPHYSICS_BODY:isFixedRotation # Signature: r1 = isFixedRotation () Description: Is a physical body using a fixed rotation Params: Returns: type description boolean true if fixed rotation, false otherwise C signature: orxBOOL orxPhysics_IsFixedRotation ( const orxPHYSICS_BODY * _pstBody ) orxPHYSICS_BODY:setAllowMoving # Signature: r1 = setAllowMoving ( allowmoving ) Description: Sets the \"allow moving\" property of a body (non-const self only) Params: name type description allowmoving boolean Only used for non-dynamic bodies, Kinematic / Static Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetAllowMoving ( orxPHYSICS_BODY * _pstBody , orxBOOL _bAllowMoving ) orxPHYSICS_BODY:setAngularDamping # Signature: r1 = setAngularDamping ( damping ) Description: Sets angular damping of a physical body (non-const self only) Params: name type description damping number Angular damping to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetAngularDamping ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fDamping ) orxPHYSICS_BODY:setAngularVelocity # Signature: r1 = setAngularVelocity ( velocity ) Description: Sets the angular velocity of a physical body (non-const self only) Params: name type description velocity number Angular velocity (radians/seconds) to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetAngularVelocity ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fVelocity ) orxPHYSICS_BODY:setCustomGravity # Signature: r1 = setCustomGravity ( customgravity ) Description: Sets the custom gravity of a physical body (non-const self only) Params: name type description customgravity orxVECTOR# Custom gravity multiplier to set / nil to remove it Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetCustomGravity ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvCustomGravity ) orxPHYSICS_BODY:setDynamic # Signature: r1 = setDynamic ( dynamic ) Description: Sets the dynamic property of a body (non-const self only) Params: name type description dynamic boolean Dynamic / Static (or Kinematic depending on the \"allow moving\" property) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetDynamic ( orxPHYSICS_BODY * _pstBody , orxBOOL _bDynamic ) orxPHYSICS_BODY:setFixedRotation # Signature: r1 = setFixedRotation ( fixed ) Description: Sets the fixed rotation property of a physical body (non-const self only) Params: name type description fixed boolean Fixed / not fixed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetFixedRotation ( orxPHYSICS_BODY * _pstBody , orxBOOL _bFixed ) orxPHYSICS_BODY:setLinearDamping # Signature: r1 = setLinearDamping ( damping ) Description: Sets linear damping of a physical body (non-const self only) Params: name type description damping number Linear damping to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetLinearDamping ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fDamping ) orxPHYSICS_BODY:setPosition # Signature: r1 = setPosition ( position ) Description: Sets the position of a physical body (non-const self only) Params: name type description position orxVECTOR# Position to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPosition ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvPosition ) orxPHYSICS_BODY:setRotation # Signature: r1 = setRotation ( rotation ) Description: Sets the rotation of a physical body (non-const self only) Params: name type description rotation number Rotation (radians) to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetRotation ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fRotation ) orxPHYSICS_BODY:setSpeed # Signature: r1 = setSpeed ( speed ) Description: Sets the speed of a physical body (non-const self only) Params: name type description speed orxVECTOR# Speed to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetSpeed ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvSpeed ) orxPHYSICS_BODY:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxPHYSICS_BODY"},{"location":"types/orxPHYSICS_BODY.html#type-orxphysics_body","text":"","title":"type orxPHYSICS_BODY"},{"location":"types/orxPHYSICS_BODY.html#methods","text":"","title":"Methods"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodyaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxPHYSICS_BODY:addr"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodyaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxPHYSICS_BODY:aeq"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodyapplyforce","text":"Signature: r1 = applyForce ( force , point ) Description: Applies a force to a physical body (non-const self only) Params: name type description force orxVECTOR# Force to apply point orxVECTOR# Point of application (world coordinates) (if null, center of mass will be used) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_ApplyForce ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvForce , const orxVECTOR * _pvPoint )","title":"orxPHYSICS_BODY:applyForce"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodyapplyimpulse","text":"Signature: r1 = applyImpulse ( impulse , point ) Description: Applies an impulse to a physical body (non-const self only) Params: name type description impulse orxVECTOR# Impulse to apply point orxVECTOR# Point of application (world coordinates) (if null, center of mass will be used) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_ApplyImpulse ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvImpulse , const orxVECTOR * _pvPoint )","title":"orxPHYSICS_BODY:applyImpulse"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodyapplytorque","text":"Signature: r1 = applyTorque ( torque ) Description: Applies a torque to a physical body (non-const self only) Params: name type description torque number Torque to apply Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_ApplyTorque ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fTorque )","title":"orxPHYSICS_BODY:applyTorque"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodyasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxPHYSICS_BODY:asVoid"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodydelete","text":"Signature: delete () Description: Deletes a physical body (non-const self only) Params: Returns: C signature: void orxPhysics_DeleteBody ( orxPHYSICS_BODY * _pstBody )","title":"orxPHYSICS_BODY:delete"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetangulardamping","text":"Signature: r1 = getAngularDamping () Description: Gets angular damping of a physical body Params: Returns: type description number Angular damping of the physical body C signature: orxFLOAT orxPhysics_GetAngularDamping ( const orxPHYSICS_BODY * _pstBody )","title":"orxPHYSICS_BODY:getAngularDamping"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetangularvelocity","text":"Signature: r1 = getAngularVelocity () Description: Gets the angular velocity of a physical body Params: Returns: type description number Angular velocity (radians/seconds) of the physical body C signature: orxFLOAT orxPhysics_GetAngularVelocity ( const orxPHYSICS_BODY * _pstBody )","title":"orxPHYSICS_BODY:getAngularVelocity"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetcustomgravity","text":"Signature: r1 = getCustomGravity () Description: Gets the custom gravity of a physical body Params: Returns: type description orxVECTOR Physical body custom gravity / nil is object doesn't have any C signature: orxVECTOR * orxPhysics_GetCustomGravity ( const orxPHYSICS_BODY * _pstBody , orxVECTOR * _pvCustomGravity )","title":"orxPHYSICS_BODY:getCustomGravity"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetlineardamping","text":"Signature: r1 = getLinearDamping () Description: Gets linear damping of a physical body Params: Returns: type description number Linear damping of the physical body C signature: orxFLOAT orxPhysics_GetLinearDamping ( const orxPHYSICS_BODY * _pstBody )","title":"orxPHYSICS_BODY:getLinearDamping"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetmass","text":"Signature: r1 = getMass () Description: Gets the mass of a physical body Params: Returns: type description number Mass of the physical body C signature: orxFLOAT orxPhysics_GetMass ( const orxPHYSICS_BODY * _pstBody )","title":"orxPHYSICS_BODY:getMass"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetmasscenter","text":"Signature: r1 = getMassCenter () Description: Gets the center of mass of a physical body (object space but scale isn't accounted for) Params: Returns: type description orxVECTOR Center of mass of the physical body C signature: orxVECTOR * orxPhysics_GetMassCenter ( const orxPHYSICS_BODY * _pstBody , orxVECTOR * _pvMassCenter )","title":"orxPHYSICS_BODY:getMassCenter"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetposition","text":"Signature: r1 = getPosition () Description: Gets the position of a physical body Params: Returns: type description orxVECTOR Position of the physical body C signature: orxVECTOR * orxPhysics_GetPosition ( const orxPHYSICS_BODY * _pstBody , orxVECTOR * _pvPosition )","title":"orxPHYSICS_BODY:getPosition"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetrotation","text":"Signature: r1 = getRotation () Description: Gets the rotation of a physical body Params: Returns: type description number Rotation (radians) of the physical body C signature: orxFLOAT orxPhysics_GetRotation ( const orxPHYSICS_BODY * _pstBody )","title":"orxPHYSICS_BODY:getRotation"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetspeed","text":"Signature: r1 = getSpeed () Description: Gets the speed of a physical body Params: Returns: type description orxVECTOR Speed of the physical body C signature: orxVECTOR * orxPhysics_GetSpeed ( const orxPHYSICS_BODY * _pstBody , orxVECTOR * _pvSpeed )","title":"orxPHYSICS_BODY:getSpeed"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodygetspeedatworldposition","text":"Signature: r1 = getSpeedAtWorldPosition ( position ) Description: Gets the speed of a physical body at a specified world position Params: name type description position orxVECTOR# Concerned world position Returns: type description orxVECTOR Speed of the physical body C signature: orxVECTOR * orxPhysics_GetSpeedAtWorldPosition ( const orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvPosition , orxVECTOR * _pvSpeed )","title":"orxPHYSICS_BODY:getSpeedAtWorldPosition"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodyisfixedrotation","text":"Signature: r1 = isFixedRotation () Description: Is a physical body using a fixed rotation Params: Returns: type description boolean true if fixed rotation, false otherwise C signature: orxBOOL orxPhysics_IsFixedRotation ( const orxPHYSICS_BODY * _pstBody )","title":"orxPHYSICS_BODY:isFixedRotation"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetallowmoving","text":"Signature: r1 = setAllowMoving ( allowmoving ) Description: Sets the \"allow moving\" property of a body (non-const self only) Params: name type description allowmoving boolean Only used for non-dynamic bodies, Kinematic / Static Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetAllowMoving ( orxPHYSICS_BODY * _pstBody , orxBOOL _bAllowMoving )","title":"orxPHYSICS_BODY:setAllowMoving"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetangulardamping","text":"Signature: r1 = setAngularDamping ( damping ) Description: Sets angular damping of a physical body (non-const self only) Params: name type description damping number Angular damping to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetAngularDamping ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fDamping )","title":"orxPHYSICS_BODY:setAngularDamping"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetangularvelocity","text":"Signature: r1 = setAngularVelocity ( velocity ) Description: Sets the angular velocity of a physical body (non-const self only) Params: name type description velocity number Angular velocity (radians/seconds) to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetAngularVelocity ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fVelocity )","title":"orxPHYSICS_BODY:setAngularVelocity"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetcustomgravity","text":"Signature: r1 = setCustomGravity ( customgravity ) Description: Sets the custom gravity of a physical body (non-const self only) Params: name type description customgravity orxVECTOR# Custom gravity multiplier to set / nil to remove it Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetCustomGravity ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvCustomGravity )","title":"orxPHYSICS_BODY:setCustomGravity"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetdynamic","text":"Signature: r1 = setDynamic ( dynamic ) Description: Sets the dynamic property of a body (non-const self only) Params: name type description dynamic boolean Dynamic / Static (or Kinematic depending on the \"allow moving\" property) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetDynamic ( orxPHYSICS_BODY * _pstBody , orxBOOL _bDynamic )","title":"orxPHYSICS_BODY:setDynamic"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetfixedrotation","text":"Signature: r1 = setFixedRotation ( fixed ) Description: Sets the fixed rotation property of a physical body (non-const self only) Params: name type description fixed boolean Fixed / not fixed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetFixedRotation ( orxPHYSICS_BODY * _pstBody , orxBOOL _bFixed )","title":"orxPHYSICS_BODY:setFixedRotation"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetlineardamping","text":"Signature: r1 = setLinearDamping ( damping ) Description: Sets linear damping of a physical body (non-const self only) Params: name type description damping number Linear damping to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetLinearDamping ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fDamping )","title":"orxPHYSICS_BODY:setLinearDamping"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetposition","text":"Signature: r1 = setPosition ( position ) Description: Sets the position of a physical body (non-const self only) Params: name type description position orxVECTOR# Position to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPosition ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvPosition )","title":"orxPHYSICS_BODY:setPosition"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetrotation","text":"Signature: r1 = setRotation ( rotation ) Description: Sets the rotation of a physical body (non-const self only) Params: name type description rotation number Rotation (radians) to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetRotation ( orxPHYSICS_BODY * _pstBody , orxFLOAT _fRotation )","title":"orxPHYSICS_BODY:setRotation"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodysetspeed","text":"Signature: r1 = setSpeed ( speed ) Description: Sets the speed of a physical body (non-const self only) Params: name type description speed orxVECTOR# Speed to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetSpeed ( orxPHYSICS_BODY * _pstBody , const orxVECTOR * _pvSpeed )","title":"orxPHYSICS_BODY:setSpeed"},{"location":"types/orxPHYSICS_BODY.html#orxphysics_bodytype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxPHYSICS_BODY:type"},{"location":"types/orxPHYSICS_BODY_JOINT.html","text":"type orxPHYSICS_BODY_JOINT # Methods # orxPHYSICS_BODY_JOINT:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxPHYSICS_BODY_JOINT:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxPHYSICS_BODY_JOINT:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxPHYSICS_BODY_JOINT:delete # Signature: delete () Description: Deletes a physical body joint (non-const self only) Params: Returns: C signature: void orxPhysics_DeleteJoint ( orxPHYSICS_BODY_JOINT * _pstBodyJoint ) orxPHYSICS_BODY_JOINT:enableMotor # Signature: enableMotor ( enable ) Description: Enables a (revolute) body joint motor (non-const self only) Params: name type description enable boolean Enable / Disable Returns: C signature: void orxPhysics_EnableMotor ( orxPHYSICS_BODY_JOINT * _pstBodyJoint , orxBOOL _bEnable ) orxPHYSICS_BODY_JOINT:getReactionForce # Signature: r1 = getReactionForce () Description: Gets the reaction force on the attached body at the joint anchor Params: Returns: type description orxVECTOR Reaction force in Newtons C signature: orxVECTOR * orxPhysics_GetJointReactionForce ( const orxPHYSICS_BODY_JOINT * _pstBodyJoint , orxVECTOR * _pvForce ) orxPHYSICS_BODY_JOINT:getReactionTorque # Signature: r1 = getReactionTorque () Description: Gets the reaction torque on the attached body Params: Returns: type description number Reaction torque C signature: orxFLOAT orxPhysics_GetJointReactionTorque ( const orxPHYSICS_BODY_JOINT * _pstBodyJoint ) orxPHYSICS_BODY_JOINT:setMaxMotorTorque # Signature: setMaxMotorTorque ( maxtorque ) Description: Sets a (revolute) body joint maximum motor torque (non-const self only) Params: name type description maxtorque number Maximum motor torque Returns: C signature: void orxPhysics_SetJointMaxMotorTorque ( orxPHYSICS_BODY_JOINT * _pstBodyJoint , orxFLOAT _fMaxTorque ) orxPHYSICS_BODY_JOINT:setMotorSpeed # Signature: setMotorSpeed ( speed ) Description: Sets a (revolute) body joint motor speed (non-const self only) Params: name type description speed number Speed Returns: C signature: void orxPhysics_SetJointMotorSpeed ( orxPHYSICS_BODY_JOINT * _pstBodyJoint , orxFLOAT _fSpeed ) orxPHYSICS_BODY_JOINT:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxPHYSICS_BODY_JOINT"},{"location":"types/orxPHYSICS_BODY_JOINT.html#type-orxphysics_body_joint","text":"","title":"type orxPHYSICS_BODY_JOINT"},{"location":"types/orxPHYSICS_BODY_JOINT.html#methods","text":"","title":"Methods"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxPHYSICS_BODY_JOINT:addr"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxPHYSICS_BODY_JOINT:aeq"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxPHYSICS_BODY_JOINT:asVoid"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointdelete","text":"Signature: delete () Description: Deletes a physical body joint (non-const self only) Params: Returns: C signature: void orxPhysics_DeleteJoint ( orxPHYSICS_BODY_JOINT * _pstBodyJoint )","title":"orxPHYSICS_BODY_JOINT:delete"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointenablemotor","text":"Signature: enableMotor ( enable ) Description: Enables a (revolute) body joint motor (non-const self only) Params: name type description enable boolean Enable / Disable Returns: C signature: void orxPhysics_EnableMotor ( orxPHYSICS_BODY_JOINT * _pstBodyJoint , orxBOOL _bEnable )","title":"orxPHYSICS_BODY_JOINT:enableMotor"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointgetreactionforce","text":"Signature: r1 = getReactionForce () Description: Gets the reaction force on the attached body at the joint anchor Params: Returns: type description orxVECTOR Reaction force in Newtons C signature: orxVECTOR * orxPhysics_GetJointReactionForce ( const orxPHYSICS_BODY_JOINT * _pstBodyJoint , orxVECTOR * _pvForce )","title":"orxPHYSICS_BODY_JOINT:getReactionForce"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointgetreactiontorque","text":"Signature: r1 = getReactionTorque () Description: Gets the reaction torque on the attached body Params: Returns: type description number Reaction torque C signature: orxFLOAT orxPhysics_GetJointReactionTorque ( const orxPHYSICS_BODY_JOINT * _pstBodyJoint )","title":"orxPHYSICS_BODY_JOINT:getReactionTorque"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointsetmaxmotortorque","text":"Signature: setMaxMotorTorque ( maxtorque ) Description: Sets a (revolute) body joint maximum motor torque (non-const self only) Params: name type description maxtorque number Maximum motor torque Returns: C signature: void orxPhysics_SetJointMaxMotorTorque ( orxPHYSICS_BODY_JOINT * _pstBodyJoint , orxFLOAT _fMaxTorque )","title":"orxPHYSICS_BODY_JOINT:setMaxMotorTorque"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointsetmotorspeed","text":"Signature: setMotorSpeed ( speed ) Description: Sets a (revolute) body joint motor speed (non-const self only) Params: name type description speed number Speed Returns: C signature: void orxPhysics_SetJointMotorSpeed ( orxPHYSICS_BODY_JOINT * _pstBodyJoint , orxFLOAT _fSpeed )","title":"orxPHYSICS_BODY_JOINT:setMotorSpeed"},{"location":"types/orxPHYSICS_BODY_JOINT.html#orxphysics_body_jointtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxPHYSICS_BODY_JOINT:type"},{"location":"types/orxPHYSICS_BODY_PART.html","text":"type orxPHYSICS_BODY_PART # Methods # orxPHYSICS_BODY_PART:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxPHYSICS_BODY_PART:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxPHYSICS_BODY_PART:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxPHYSICS_BODY_PART:delete # Signature: delete () Description: Deletes a physical body part (non-const self only) Params: Returns: C signature: void orxPhysics_DeletePart ( orxPHYSICS_BODY_PART * _pstBodyPart ) orxPHYSICS_BODY_PART:getCheckMask # Signature: r1 = getCheckMask () Description: Gets check mask of a physical body part Params: Returns: type description integer Check mask of the physical body part C signature: orxU16 orxPhysics_GetPartCheckMask ( const orxPHYSICS_BODY_PART * _pstBodyPart ) orxPHYSICS_BODY_PART:getDensity # Signature: r1 = getDensity () Description: Gets density of a physical body part Params: Returns: type description number Density C signature: orxFLOAT orxPhysics_GetPartDensity ( const orxPHYSICS_BODY_PART * _pstBodyPart ) orxPHYSICS_BODY_PART:getFriction # Signature: r1 = getFriction () Description: Gets friction of a physical body part Params: Returns: type description number Friction C signature: orxFLOAT orxPhysics_GetPartFriction ( const orxPHYSICS_BODY_PART * _pstBodyPart ) orxPHYSICS_BODY_PART:getRestitution # Signature: r1 = getRestitution () Description: Gets restitution of a physical body part Params: Returns: type description number Restitution C signature: orxFLOAT orxPhysics_GetPartRestitution ( const orxPHYSICS_BODY_PART * _pstBodyPart ) orxPHYSICS_BODY_PART:getSelfFlags # Signature: r1 = getSelfFlags () Description: Gets self flags of a physical body part Params: Returns: type description integer Self flags of the physical body part C signature: orxU16 orxPhysics_GetPartSelfFlags ( const orxPHYSICS_BODY_PART * _pstBodyPart ) orxPHYSICS_BODY_PART:isInside # Signature: r1 = isInside ( position ) Description: Is point inside part? (Using world coordinates) Params: name type description position orxVECTOR# Position to test (world coordinates) Returns: type description boolean true / false C signature: orxBOOL orxPhysics_IsInsidePart ( const orxPHYSICS_BODY_PART * _pstBodyPart , const orxVECTOR * _pvPosition ) orxPHYSICS_BODY_PART:isSolid # Signature: r1 = isSolid () Description: Is a physical body part solid? Params: Returns: type description boolean true / false C signature: orxBOOL orxPhysics_IsPartSolid ( const orxPHYSICS_BODY_PART * _pstBodyPart ) orxPHYSICS_BODY_PART:setCheckMask # Signature: r1 = setCheckMask ( checkmask ) Description: Sets check mask of a physical body part (non-const self only) Params: name type description checkmask integer Check mask to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartCheckMask ( orxPHYSICS_BODY_PART * _pstBodyPart , orxU16 _u16CheckMask ) orxPHYSICS_BODY_PART:setDensity # Signature: r1 = setDensity ( density ) Description: Sets density of a physical body part (non-const self only) Params: name type description density number Density Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartDensity ( orxPHYSICS_BODY_PART * _pstBodyPart , orxFLOAT _fDensity ) orxPHYSICS_BODY_PART:setFriction # Signature: r1 = setFriction ( friction ) Description: Sets friction of a physical body part (non-const self only) Params: name type description friction number Friction Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartFriction ( orxPHYSICS_BODY_PART * _pstBodyPart , orxFLOAT _fFriction ) orxPHYSICS_BODY_PART:setRestitution # Signature: r1 = setRestitution ( restitution ) Description: Sets restitution of a physical body part (non-const self only) Params: name type description restitution number Restitution Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartRestitution ( orxPHYSICS_BODY_PART * _pstBodyPart , orxFLOAT _fRestitution ) orxPHYSICS_BODY_PART:setSelfFlags # Signature: r1 = setSelfFlags ( selfflags ) Description: Sets self flags of a physical body part (non-const self only) Params: name type description selfflags integer Self flags to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartSelfFlags ( orxPHYSICS_BODY_PART * _pstBodyPart , orxU16 _u16SelfFlags ) orxPHYSICS_BODY_PART:setSolid # Signature: r1 = setSolid ( solid ) Description: Sets a physical body part solid (non-const self only) Params: name type description solid boolean Solid or sensor? Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartSolid ( orxPHYSICS_BODY_PART * _pstBodyPart , orxBOOL _bSolid ) orxPHYSICS_BODY_PART:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxPHYSICS_BODY_PART"},{"location":"types/orxPHYSICS_BODY_PART.html#type-orxphysics_body_part","text":"","title":"type orxPHYSICS_BODY_PART"},{"location":"types/orxPHYSICS_BODY_PART.html#methods","text":"","title":"Methods"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxPHYSICS_BODY_PART:addr"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxPHYSICS_BODY_PART:aeq"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxPHYSICS_BODY_PART:asVoid"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partdelete","text":"Signature: delete () Description: Deletes a physical body part (non-const self only) Params: Returns: C signature: void orxPhysics_DeletePart ( orxPHYSICS_BODY_PART * _pstBodyPart )","title":"orxPHYSICS_BODY_PART:delete"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partgetcheckmask","text":"Signature: r1 = getCheckMask () Description: Gets check mask of a physical body part Params: Returns: type description integer Check mask of the physical body part C signature: orxU16 orxPhysics_GetPartCheckMask ( const orxPHYSICS_BODY_PART * _pstBodyPart )","title":"orxPHYSICS_BODY_PART:getCheckMask"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partgetdensity","text":"Signature: r1 = getDensity () Description: Gets density of a physical body part Params: Returns: type description number Density C signature: orxFLOAT orxPhysics_GetPartDensity ( const orxPHYSICS_BODY_PART * _pstBodyPart )","title":"orxPHYSICS_BODY_PART:getDensity"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partgetfriction","text":"Signature: r1 = getFriction () Description: Gets friction of a physical body part Params: Returns: type description number Friction C signature: orxFLOAT orxPhysics_GetPartFriction ( const orxPHYSICS_BODY_PART * _pstBodyPart )","title":"orxPHYSICS_BODY_PART:getFriction"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partgetrestitution","text":"Signature: r1 = getRestitution () Description: Gets restitution of a physical body part Params: Returns: type description number Restitution C signature: orxFLOAT orxPhysics_GetPartRestitution ( const orxPHYSICS_BODY_PART * _pstBodyPart )","title":"orxPHYSICS_BODY_PART:getRestitution"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partgetselfflags","text":"Signature: r1 = getSelfFlags () Description: Gets self flags of a physical body part Params: Returns: type description integer Self flags of the physical body part C signature: orxU16 orxPhysics_GetPartSelfFlags ( const orxPHYSICS_BODY_PART * _pstBodyPart )","title":"orxPHYSICS_BODY_PART:getSelfFlags"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partisinside","text":"Signature: r1 = isInside ( position ) Description: Is point inside part? (Using world coordinates) Params: name type description position orxVECTOR# Position to test (world coordinates) Returns: type description boolean true / false C signature: orxBOOL orxPhysics_IsInsidePart ( const orxPHYSICS_BODY_PART * _pstBodyPart , const orxVECTOR * _pvPosition )","title":"orxPHYSICS_BODY_PART:isInside"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partissolid","text":"Signature: r1 = isSolid () Description: Is a physical body part solid? Params: Returns: type description boolean true / false C signature: orxBOOL orxPhysics_IsPartSolid ( const orxPHYSICS_BODY_PART * _pstBodyPart )","title":"orxPHYSICS_BODY_PART:isSolid"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partsetcheckmask","text":"Signature: r1 = setCheckMask ( checkmask ) Description: Sets check mask of a physical body part (non-const self only) Params: name type description checkmask integer Check mask to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartCheckMask ( orxPHYSICS_BODY_PART * _pstBodyPart , orxU16 _u16CheckMask )","title":"orxPHYSICS_BODY_PART:setCheckMask"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partsetdensity","text":"Signature: r1 = setDensity ( density ) Description: Sets density of a physical body part (non-const self only) Params: name type description density number Density Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartDensity ( orxPHYSICS_BODY_PART * _pstBodyPart , orxFLOAT _fDensity )","title":"orxPHYSICS_BODY_PART:setDensity"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partsetfriction","text":"Signature: r1 = setFriction ( friction ) Description: Sets friction of a physical body part (non-const self only) Params: name type description friction number Friction Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartFriction ( orxPHYSICS_BODY_PART * _pstBodyPart , orxFLOAT _fFriction )","title":"orxPHYSICS_BODY_PART:setFriction"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partsetrestitution","text":"Signature: r1 = setRestitution ( restitution ) Description: Sets restitution of a physical body part (non-const self only) Params: name type description restitution number Restitution Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartRestitution ( orxPHYSICS_BODY_PART * _pstBodyPart , orxFLOAT _fRestitution )","title":"orxPHYSICS_BODY_PART:setRestitution"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partsetselfflags","text":"Signature: r1 = setSelfFlags ( selfflags ) Description: Sets self flags of a physical body part (non-const self only) Params: name type description selfflags integer Self flags to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartSelfFlags ( orxPHYSICS_BODY_PART * _pstBodyPart , orxU16 _u16SelfFlags )","title":"orxPHYSICS_BODY_PART:setSelfFlags"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_partsetsolid","text":"Signature: r1 = setSolid ( solid ) Description: Sets a physical body part solid (non-const self only) Params: name type description solid boolean Solid or sensor? Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxPhysics_SetPartSolid ( orxPHYSICS_BODY_PART * _pstBodyPart , orxBOOL _bSolid )","title":"orxPHYSICS_BODY_PART:setSolid"},{"location":"types/orxPHYSICS_BODY_PART.html#orxphysics_body_parttype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxPHYSICS_BODY_PART:type"},{"location":"types/orxRGBA.html","text":"type orxRGBA # constructors: lorx.display.rgba Properties # name type r integer g integer b integer a integer rgba integer Methods # orxRGBA:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxRGBA:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxRGBA:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxRGBA:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxRGBA"},{"location":"types/orxRGBA.html#type-orxrgba","text":"constructors: lorx.display.rgba","title":"type orxRGBA"},{"location":"types/orxRGBA.html#properties","text":"name type r integer g integer b integer a integer rgba integer","title":"Properties"},{"location":"types/orxRGBA.html#methods","text":"","title":"Methods"},{"location":"types/orxRGBA.html#orxrgbaaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxRGBA:addr"},{"location":"types/orxRGBA.html#orxrgbaaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxRGBA:aeq"},{"location":"types/orxRGBA.html#orxrgbaasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxRGBA:asVoid"},{"location":"types/orxRGBA.html#orxrgbatype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxRGBA:type"},{"location":"types/orxSHADER.html","text":"type orxSHADER # Methods # orxSHADER:addFloatParam # Signature: r1 = addFloatParam ( name , arraysize , valuelist ) Description: Adds a float parameter definition to a shader (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable valuelist table of number Parameter's float value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_AddFloatParam ( orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxFLOAT * _afValueList ) orxSHADER:addTextureParam # Signature: r1 = addTextureParam ( name , arraysize , valuelist ) Description: Adds a texture parameter definition to a shader (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 simple variable valuelist table of orxTEXTURE# Parameter's texture value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_AddTextureParam ( orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxTEXTURE ** _apstValueList ) orxSHADER:addTimeParam # Signature: r1 = addTimeParam ( name ) Description: Adds a time parameter definition to a shader (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description name string Parameter's literal name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_AddTimeParam ( orxSHADER * _pstShader , const orxSTRING _zName ) orxSHADER:addVectorParam # Signature: r1 = addVectorParam ( name , arraysize , valuelist ) Description: Adds a vector parameter definition to a shader (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable valuelist table of orxVECTOR Parameter's vector value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_AddVectorParam ( orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxVECTOR * _avValueList ) orxSHADER:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSHADER:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSHADER:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSHADER:compileCode # Signature: r1 = compileCode ( codelist , size ) Description: Sets shader code & compiles it (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description codelist table of string List of shader codes to compile (parameters need to be set beforehand), will be processed in order size integer Size of the shader code list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_CompileCode ( orxSHADER * _pstShader , const orxSTRING * _azCodeList , orxU32 _u32Size ) orxSHADER:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxSHADER:delete # Signature: r1 = delete () Description: Deletes a shader (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_Delete ( orxSHADER * _pstShader ) orxSHADER:enable # Signature: enable ( enable ) Description: Enables/disables a shader (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxShader_Enable ( orxSHADER * _pstShader , orxBOOL _bEnable ) orxSHADER:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxSHADER:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxSHADER:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxSHADER:getID # Signature: r1 = getID () Description: Gets shader (internal) ID Params: Returns: type description integer ID C signature: orxU32 orxShader_GetID ( const orxSHADER * _pstShader ) orxSHADER:getName # Signature: r1 = getName () Description: Gets shader name Params: Returns: type description string string / empty string C signature: const orxSTRING orxShader_GetName ( const orxSHADER * _pstShader ) orxSHADER:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxSHADER:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxSHADER:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxSHADER:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxSHADER:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxSHADER:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxSHADER:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxSHADER:isEnabled # Signature: r1 = isEnabled () Description: Is shader enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxShader_IsEnabled ( const orxSHADER * _pstShader ) orxSHADER:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxSHADER:setFloatParam # Signature: r1 = setFloatParam ( name , arraysize , valuelist ) Description: Sets the default value for a given float parameter in a shader (parameters need to be added beforehand) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable, has to match the size used when declaring the parameter valuelist table of number Parameter's float value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_SetFloatParam ( const orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxFLOAT * _afValueList ) orxSHADER:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxSHADER:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxSHADER:setTextureParam # Signature: r1 = setTextureParam ( name , arraysize , valuelist ) Description: Sets the default value for a given float parameter in a shader (parameters need to be added beforehand) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable, has to match the size used when declaring the parameter valuelist table of orxTEXTURE# Parameter's texture value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_SetTextureParam ( const orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxTEXTURE ** _apstValueList ) orxSHADER:setVectorParam # Signature: r1 = setVectorParam ( name , arraysize , valuelist ) Description: Sets the default value for a given float parameter in a shader (parameters need to be added beforehand) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable, has to match the size used when declaring the parameter valuelist table of orxVECTOR Parameter's vector value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_SetVectorParam ( const orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxVECTOR * _avValueList ) orxSHADER:start # Signature: r1 = start ( owner ) Description: Starts a shader Params: name type description owner orxSTRUCTURE# Owner structure (orxOBJECT / orxVIEWPORT / orxNULL) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_Start ( const orxSHADER * _pstShader , const orxSTRUCTURE * _pstOwner ) orxSHADER:stop # Signature: r1 = stop () Description: Stops a shader Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_Stop ( const orxSHADER * _pstShader ) orxSHADER:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSHADER:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSHADER:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxSHADER:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSHADER"},{"location":"types/orxSHADER.html#type-orxshader","text":"","title":"type orxSHADER"},{"location":"types/orxSHADER.html#methods","text":"","title":"Methods"},{"location":"types/orxSHADER.html#orxshaderaddfloatparam","text":"Signature: r1 = addFloatParam ( name , arraysize , valuelist ) Description: Adds a float parameter definition to a shader (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable valuelist table of number Parameter's float value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_AddFloatParam ( orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxFLOAT * _afValueList )","title":"orxSHADER:addFloatParam"},{"location":"types/orxSHADER.html#orxshaderaddtextureparam","text":"Signature: r1 = addTextureParam ( name , arraysize , valuelist ) Description: Adds a texture parameter definition to a shader (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 simple variable valuelist table of orxTEXTURE# Parameter's texture value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_AddTextureParam ( orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxTEXTURE ** _apstValueList )","title":"orxSHADER:addTextureParam"},{"location":"types/orxSHADER.html#orxshaderaddtimeparam","text":"Signature: r1 = addTimeParam ( name ) Description: Adds a time parameter definition to a shader (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description name string Parameter's literal name Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_AddTimeParam ( orxSHADER * _pstShader , const orxSTRING _zName )","title":"orxSHADER:addTimeParam"},{"location":"types/orxSHADER.html#orxshaderaddvectorparam","text":"Signature: r1 = addVectorParam ( name , arraysize , valuelist ) Description: Adds a vector parameter definition to a shader (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable valuelist table of orxVECTOR Parameter's vector value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_AddVectorParam ( orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxVECTOR * _avValueList )","title":"orxSHADER:addVectorParam"},{"location":"types/orxSHADER.html#orxshaderaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSHADER:addr"},{"location":"types/orxSHADER.html#orxshaderaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSHADER:aeq"},{"location":"types/orxSHADER.html#orxshaderasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSHADER:asVoid"},{"location":"types/orxSHADER.html#orxshadercompilecode","text":"Signature: r1 = compileCode ( codelist , size ) Description: Sets shader code & compiles it (parameters need to be set before compiling the shader code) (non-const self only) Params: name type description codelist table of string List of shader codes to compile (parameters need to be set beforehand), will be processed in order size integer Size of the shader code list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_CompileCode ( orxSHADER * _pstShader , const orxSTRING * _azCodeList , orxU32 _u32Size )","title":"orxSHADER:compileCode"},{"location":"types/orxSHADER.html#orxshaderdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxSHADER:decreaseCount"},{"location":"types/orxSHADER.html#orxshaderdelete","text":"Signature: r1 = delete () Description: Deletes a shader (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_Delete ( orxSHADER * _pstShader )","title":"orxSHADER:delete"},{"location":"types/orxSHADER.html#orxshaderenable","text":"Signature: enable ( enable ) Description: Enables/disables a shader (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxShader_Enable ( orxSHADER * _pstShader , orxBOOL _bEnable )","title":"orxSHADER:enable"},{"location":"types/orxSHADER.html#orxshadergetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxSHADER:getChild"},{"location":"types/orxSHADER.html#orxshadergetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxSHADER:getFlags"},{"location":"types/orxSHADER.html#orxshadergetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxSHADER:getGUID"},{"location":"types/orxSHADER.html#orxshadergetid","text":"Signature: r1 = getID () Description: Gets shader (internal) ID Params: Returns: type description integer ID C signature: orxU32 orxShader_GetID ( const orxSHADER * _pstShader )","title":"orxSHADER:getID"},{"location":"types/orxSHADER.html#orxshadergetname","text":"Signature: r1 = getName () Description: Gets shader name Params: Returns: type description string string / empty string C signature: const orxSTRING orxShader_GetName ( const orxSHADER * _pstShader )","title":"orxSHADER:getName"},{"location":"types/orxSHADER.html#orxshadergetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxSHADER:getNext"},{"location":"types/orxSHADER.html#orxshadergetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxSHADER:getOwner"},{"location":"types/orxSHADER.html#orxshadergetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxSHADER:getParent"},{"location":"types/orxSHADER.html#orxshadergetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxSHADER:getPrevious"},{"location":"types/orxSHADER.html#orxshadergetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxSHADER:getRefCount"},{"location":"types/orxSHADER.html#orxshadergetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxSHADER:getSibling"},{"location":"types/orxSHADER.html#orxshaderincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxSHADER:increaseCount"},{"location":"types/orxSHADER.html#orxshaderisenabled","text":"Signature: r1 = isEnabled () Description: Is shader enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxShader_IsEnabled ( const orxSHADER * _pstShader )","title":"orxSHADER:isEnabled"},{"location":"types/orxSHADER.html#orxshadersetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxSHADER:setFlags"},{"location":"types/orxSHADER.html#orxshadersetfloatparam","text":"Signature: r1 = setFloatParam ( name , arraysize , valuelist ) Description: Sets the default value for a given float parameter in a shader (parameters need to be added beforehand) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable, has to match the size used when declaring the parameter valuelist table of number Parameter's float value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_SetFloatParam ( const orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxFLOAT * _afValueList )","title":"orxSHADER:setFloatParam"},{"location":"types/orxSHADER.html#orxshadersetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxSHADER:setOwner"},{"location":"types/orxSHADER.html#orxshadersetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxSHADER:setParent"},{"location":"types/orxSHADER.html#orxshadersettextureparam","text":"Signature: r1 = setTextureParam ( name , arraysize , valuelist ) Description: Sets the default value for a given float parameter in a shader (parameters need to be added beforehand) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable, has to match the size used when declaring the parameter valuelist table of orxTEXTURE# Parameter's texture value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_SetTextureParam ( const orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxTEXTURE ** _apstValueList )","title":"orxSHADER:setTextureParam"},{"location":"types/orxSHADER.html#orxshadersetvectorparam","text":"Signature: r1 = setVectorParam ( name , arraysize , valuelist ) Description: Sets the default value for a given float parameter in a shader (parameters need to be added beforehand) Params: name type description name string Parameter's literal name arraysize integer Parameter's array size, 0 for simple variable, has to match the size used when declaring the parameter valuelist table of orxVECTOR Parameter's vector value list Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_SetVectorParam ( const orxSHADER * _pstShader , const orxSTRING _zName , orxU32 _u32ArraySize , const orxVECTOR * _avValueList )","title":"orxSHADER:setVectorParam"},{"location":"types/orxSHADER.html#orxshaderstart","text":"Signature: r1 = start ( owner ) Description: Starts a shader Params: name type description owner orxSTRUCTURE# Owner structure (orxOBJECT / orxVIEWPORT / orxNULL) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_Start ( const orxSHADER * _pstShader , const orxSTRUCTURE * _pstOwner )","title":"orxSHADER:start"},{"location":"types/orxSHADER.html#orxshaderstop","text":"Signature: r1 = stop () Description: Stops a shader Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShader_Stop ( const orxSHADER * _pstShader )","title":"orxSHADER:stop"},{"location":"types/orxSHADER.html#orxshadertestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSHADER:testAllFlags"},{"location":"types/orxSHADER.html#orxshadertestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSHADER:testFlags"},{"location":"types/orxSHADER.html#orxshadertype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSHADER:type"},{"location":"types/orxSHADER.html#orxshaderupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSHADER:update"},{"location":"types/orxSHADERPOINTER.html","text":"type orxSHADERPOINTER # Methods # orxSHADERPOINTER:addShader # Signature: r1 = addShader ( shader ) Description: Adds a shader (non-const self only) Params: name type description shader orxSHADER Shader to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_AddShader ( orxSHADERPOINTER * _pstShaderPointer , orxSHADER * _pstShader ) orxSHADERPOINTER:addShaderFromConfig # Signature: r1 = addShaderFromConfig ( shaderconfigid ) Description: Adds a shader using its config ID (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_AddShaderFromConfig ( orxSHADERPOINTER * _pstShaderPointer , const orxSTRING _zShaderConfigID ) orxSHADERPOINTER:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSHADERPOINTER:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSHADERPOINTER:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSHADERPOINTER:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxSHADERPOINTER:delete # Signature: r1 = delete () Description: Deletes an ShaderPointer (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_Delete ( orxSHADERPOINTER * _pstShaderPointer ) orxSHADERPOINTER:enable # Signature: enable ( enable ) Description: Enables/disables an ShaderPointer (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxShaderPointer_Enable ( orxSHADERPOINTER * _pstShaderPointer , orxBOOL _bEnable ) orxSHADERPOINTER:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxSHADERPOINTER:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxSHADERPOINTER:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxSHADERPOINTER:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxSHADERPOINTER:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxSHADERPOINTER:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxSHADERPOINTER:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxSHADERPOINTER:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxSHADERPOINTER:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxSHADERPOINTER:getShader # Signature: r1 = getShader ( index ) Description: Gets a shader Params: name type description index integer Index of shader to get Returns: type description orxSHADER# orxSHADER / nil C signature: const orxSHADER * orxShaderPointer_GetShader ( const orxSHADERPOINTER * _pstShaderPointer , orxU32 _u32Index ) orxSHADERPOINTER:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxSHADERPOINTER:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxSHADERPOINTER:isEnabled # Signature: r1 = isEnabled () Description: Is ShaderPointer enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxShaderPointer_IsEnabled ( const orxSHADERPOINTER * _pstShaderPointer ) orxSHADERPOINTER:removeShader # Signature: r1 = removeShader ( shader ) Description: Removes a shader (non-const self only) Params: name type description shader orxSHADER Shader to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_RemoveShader ( orxSHADERPOINTER * _pstShaderPointer , orxSHADER * _pstShader ) orxSHADERPOINTER:removeShaderFromConfig # Signature: r1 = removeShaderFromConfig ( shaderconfigid ) Description: Removes a shader using its config ID (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_RemoveShaderFromConfig ( orxSHADERPOINTER * _pstShaderPointer , const orxSTRING _zShaderConfigID ) orxSHADERPOINTER:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxSHADERPOINTER:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxSHADERPOINTER:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxSHADERPOINTER:start # Signature: r1 = start () Description: Starts a ShaderPointer Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_Start ( const orxSHADERPOINTER * _pstShaderPointer ) orxSHADERPOINTER:stop # Signature: r1 = stop () Description: Stops a ShaderPointer Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_Stop ( const orxSHADERPOINTER * _pstShaderPointer ) orxSHADERPOINTER:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSHADERPOINTER:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSHADERPOINTER:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxSHADERPOINTER:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSHADERPOINTER"},{"location":"types/orxSHADERPOINTER.html#type-orxshaderpointer","text":"","title":"type orxSHADERPOINTER"},{"location":"types/orxSHADERPOINTER.html#methods","text":"","title":"Methods"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointeraddshader","text":"Signature: r1 = addShader ( shader ) Description: Adds a shader (non-const self only) Params: name type description shader orxSHADER Shader to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_AddShader ( orxSHADERPOINTER * _pstShaderPointer , orxSHADER * _pstShader )","title":"orxSHADERPOINTER:addShader"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointeraddshaderfromconfig","text":"Signature: r1 = addShaderFromConfig ( shaderconfigid ) Description: Adds a shader using its config ID (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_AddShaderFromConfig ( orxSHADERPOINTER * _pstShaderPointer , const orxSTRING _zShaderConfigID )","title":"orxSHADERPOINTER:addShaderFromConfig"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointeraddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSHADERPOINTER:addr"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointeraeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSHADERPOINTER:aeq"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSHADERPOINTER:asVoid"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxSHADERPOINTER:decreaseCount"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerdelete","text":"Signature: r1 = delete () Description: Deletes an ShaderPointer (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_Delete ( orxSHADERPOINTER * _pstShaderPointer )","title":"orxSHADERPOINTER:delete"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerenable","text":"Signature: enable ( enable ) Description: Enables/disables an ShaderPointer (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxShaderPointer_Enable ( orxSHADERPOINTER * _pstShaderPointer , orxBOOL _bEnable )","title":"orxSHADERPOINTER:enable"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxSHADERPOINTER:getChild"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxSHADERPOINTER:getFlags"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxSHADERPOINTER:getGUID"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxSHADERPOINTER:getID"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxSHADERPOINTER:getNext"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxSHADERPOINTER:getOwner"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxSHADERPOINTER:getParent"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxSHADERPOINTER:getPrevious"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxSHADERPOINTER:getRefCount"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetshader","text":"Signature: r1 = getShader ( index ) Description: Gets a shader Params: name type description index integer Index of shader to get Returns: type description orxSHADER# orxSHADER / nil C signature: const orxSHADER * orxShaderPointer_GetShader ( const orxSHADERPOINTER * _pstShaderPointer , orxU32 _u32Index )","title":"orxSHADERPOINTER:getShader"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointergetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxSHADERPOINTER:getSibling"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxSHADERPOINTER:increaseCount"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerisenabled","text":"Signature: r1 = isEnabled () Description: Is ShaderPointer enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxShaderPointer_IsEnabled ( const orxSHADERPOINTER * _pstShaderPointer )","title":"orxSHADERPOINTER:isEnabled"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerremoveshader","text":"Signature: r1 = removeShader ( shader ) Description: Removes a shader (non-const self only) Params: name type description shader orxSHADER Shader to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_RemoveShader ( orxSHADERPOINTER * _pstShaderPointer , orxSHADER * _pstShader )","title":"orxSHADERPOINTER:removeShader"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerremoveshaderfromconfig","text":"Signature: r1 = removeShaderFromConfig ( shaderconfigid ) Description: Removes a shader using its config ID (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_RemoveShaderFromConfig ( orxSHADERPOINTER * _pstShaderPointer , const orxSTRING _zShaderConfigID )","title":"orxSHADERPOINTER:removeShaderFromConfig"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointersetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxSHADERPOINTER:setFlags"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointersetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxSHADERPOINTER:setOwner"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointersetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxSHADERPOINTER:setParent"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerstart","text":"Signature: r1 = start () Description: Starts a ShaderPointer Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_Start ( const orxSHADERPOINTER * _pstShaderPointer )","title":"orxSHADERPOINTER:start"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerstop","text":"Signature: r1 = stop () Description: Stops a ShaderPointer Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxShaderPointer_Stop ( const orxSHADERPOINTER * _pstShaderPointer )","title":"orxSHADERPOINTER:stop"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointertestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSHADERPOINTER:testAllFlags"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointertestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSHADERPOINTER:testFlags"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointertype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSHADERPOINTER:type"},{"location":"types/orxSHADERPOINTER.html#orxshaderpointerupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSHADERPOINTER:update"},{"location":"types/orxSOUND.html","text":"type orxSOUND # Methods # orxSOUND:addFilter # Signature: r1 = addFilter ( filterdata , usecustomparam ) Description: Adds a filter to a sound (cascading) (non-const self only) Params: name type description filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_AddFilter ( orxSOUND * _pstSound , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam ) orxSOUND:addFilterFromConfig # Signature: r1 = addFilterFromConfig ( filterconfigid ) Description: Adds a filter to a sound (cascading) from config (non-const self only) Params: name type description filterconfigid string Config ID of the filter to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_AddFilterFromConfig ( orxSOUND * _pstSound , const orxSTRING _zFilterConfigID ) orxSOUND:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSOUND:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSOUND:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSOUND:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxSOUND:delete # Signature: r1 = delete () Description: Deletes sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Delete ( orxSOUND * _pstSound ) orxSOUND:getBusID # Signature: r1 = getBusID () Description: Gets sound's bus ID Params: Returns: type description integer Sound's bus ID C signature: orxSTRINGID orxSound_GetBusID ( const orxSOUND * _pstSound ) orxSOUND:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxSOUND:getDuration # Signature: r1 = getDuration () Description: Gets sound duration Params: Returns: type description number number C signature: orxFLOAT orxSound_GetDuration ( const orxSOUND * _pstSound ) orxSOUND:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxSOUND:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxSOUND:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxSOUND:getName # Signature: r1 = getName () Description: Gets sound config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxSound_GetName ( const orxSOUND * _pstSound ) orxSOUND:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxSOUND:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxSOUND:getPanning # Signature: r1 , r2 , r3 = getPanning () Description: Gets a sound panning Params: Returns: type description orxSTATUS success / failure number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right boolean Left/Right channels are be mixed if true or act like a balance otherwise C signature: orxSTATUS orxSound_GetPanning ( const orxSOUND * _pstSound , orxFLOAT * _pfPanning , orxBOOL * _pbMix ) orxSOUND:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxSOUND:getPitch # Signature: r1 = getPitch () Description: Gets sound pitch Params: Returns: type description number number C signature: orxFLOAT orxSound_GetPitch ( const orxSOUND * _pstSound ) orxSOUND:getPosition # Signature: r1 = getPosition () Description: Gets sound position Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxSound_GetPosition ( const orxSOUND * _pstSound , orxVECTOR * _pvPosition ) orxSOUND:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxSOUND:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxSOUND:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxSOUND:getSpatialization # Signature: r1 , r2 , r3 , r4 , r5 , r6 = getSpatialization () Description: Gets a sound spatialization information Params: Returns: type description orxSTATUS success / failure number Min distance, inside which the max gain will be used, will be strictly negative if the sound isn't spatialized number Max distance, outside which the gain will stop decreasing, will be strictly negative if the sound isn't spatialized number Min gain in [0.0f - 1.0f] number Max gain in [0.0f - 1.0f] number RollOff factor applied when interpolating the gain between inner and outer distances, defaults to 1.0f C signature: orxSTATUS orxSound_GetSpatialization ( const orxSOUND * _pstSound , orxFLOAT * _pfMinDistance , orxFLOAT * _pfMaxDistance , orxFLOAT * _pfMinGain , orxFLOAT * _pfMaxGain , orxFLOAT * _pfRollOff ) orxSOUND:getStatus # Signature: r1 = getStatus () Description: Gets sound status Params: Returns: type description orxSOUND_STATUS orxSOUND_STATUS C signature: orxSOUND_STATUS orxSound_GetStatus ( const orxSOUND * _pstSound ) orxSOUND:getTime # Signature: r1 = getTime () Description: Gets a sound's time (ie. cursor/play position from beginning) Params: Returns: type description number Sound's time (cursor/play position), in seconds C signature: orxFLOAT orxSound_GetTime ( const orxSOUND * _pstSound ) orxSOUND:getVolume # Signature: r1 = getVolume () Description: Gets sound volume Params: Returns: type description number number C signature: orxFLOAT orxSound_GetVolume ( const orxSOUND * _pstSound ) orxSOUND:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxSOUND:isLooping # Signature: r1 = isLooping () Description: Is sound looping? Params: Returns: type description boolean true / false C signature: orxBOOL orxSound_IsLooping ( const orxSOUND * _pstSound ) orxSOUND:isStream # Signature: r1 = isStream () Description: Is a stream (ie. music)? (non-const self only) Params: Returns: type description boolean true / false C signature: orxBOOL orxSound_IsStream ( orxSOUND * _pstSound ) orxSOUND:linkSample # Signature: r1 = linkSample ( samplename ) Description: Links a sample (non-const self only) Params: name type description samplename string Name of the sample to link (must already be loaded/created) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_LinkSample ( orxSOUND * _pstSound , const orxSTRING _zSampleName ) orxSOUND:loop # Signature: r1 = loop ( loop ) Description: Loops sound (non-const self only) Params: name type description loop boolean true / false Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Loop ( orxSOUND * _pstSound , orxBOOL _bLoop ) orxSOUND:pause # Signature: r1 = pause () Description: Pauses sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Pause ( orxSOUND * _pstSound ) orxSOUND:play # Signature: r1 = play () Description: Plays sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Play ( orxSOUND * _pstSound ) orxSOUND:removeAllFilters # Signature: r1 = removeAllFilters () Description: Removes all filters from a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_RemoveAllFilters ( orxSOUND * _pstSound ) orxSOUND:removeLastFilter # Signature: r1 = removeLastFilter () Description: Removes last added filter from a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_RemoveLastFilter ( orxSOUND * _pstSound ) orxSOUND:setBusID # Signature: r1 = setBusID ( busid ) Description: Sets sound's bus ID (non-const self only) Params: name type description busid integer Bus ID to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetBusID ( orxSOUND * _pstSound , orxSTRINGID _stBusID ) orxSOUND:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxSOUND:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxSOUND:setPanning # Signature: r1 = setPanning ( panning , mix ) Description: Sets a sound panning (non-const self only) Params: name type description panning number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right mix boolean Left/Right channels will be mixed if true or act like a balance otherwise Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetPanning ( orxSOUND * _pstSound , orxFLOAT _fPanning , orxBOOL _bMix ) orxSOUND:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxSOUND:setPitch # Signature: r1 = setPitch ( pitch ) Description: Sets sound pitch (non-const self only) Params: name type description pitch number Desired pitch Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetPitch ( orxSOUND * _pstSound , orxFLOAT _fPitch ) orxSOUND:setPosition # Signature: r1 = setPosition ( position ) Description: Sets sound position (non-const self only) Params: name type description position orxVECTOR# Desired position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetPosition ( orxSOUND * _pstSound , const orxVECTOR * _pvPosition ) orxSOUND:setSpatialization # Signature: r1 = setSpatialization ( mindistance , maxdistance , mingain , maxgain , rolloff ) Description: Sets a sound spatialization, with gain decreasing between the minimum and maximum distances, when enabled (non-const self only) Params: name type description mindistance number Min distance, inside which the max gain will be used, strictly negative value to disable spatialization entirely maxdistance number Max distance, outside which the gain will stop decreasing, strictly negative value to disable spatialization entirely mingain number Min gain in [0.0f - 1.0f] maxgain number Max gain in [0.0f - 1.0f] rolloff number RollOff factor applied when interpolating the gain between inner and outer distances, defaults to 1.0f Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetSpatialization ( orxSOUND * _pstSound , orxFLOAT _fMinDistance , orxFLOAT _fMaxDistance , orxFLOAT _fMinGain , orxFLOAT _fMaxGain , orxFLOAT _fRollOff ) orxSOUND:setTime # Signature: r1 = setTime ( time ) Description: Sets a sound time (ie. cursor/play position from beginning) (non-const self only) Params: name type description time number Time, in seconds Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetTime ( orxSOUND * _pstSound , orxFLOAT _fTime ) orxSOUND:setVolume # Signature: r1 = setVolume ( volume ) Description: Sets sound volume (non-const self only) Params: name type description volume number Desired volume (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetVolume ( orxSOUND * _pstSound , orxFLOAT _fVolume ) orxSOUND:stop # Signature: r1 = stop () Description: Stops sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Stop ( orxSOUND * _pstSound ) orxSOUND:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSOUND:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSOUND:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxSOUND:unlinkSample # Signature: r1 = unlinkSample () Description: Unlinks (and deletes if not used anymore) a sample (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_UnlinkSample ( orxSOUND * _pstSound ) orxSOUND:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSOUND"},{"location":"types/orxSOUND.html#type-orxsound","text":"","title":"type orxSOUND"},{"location":"types/orxSOUND.html#methods","text":"","title":"Methods"},{"location":"types/orxSOUND.html#orxsoundaddfilter","text":"Signature: r1 = addFilter ( filterdata , usecustomparam ) Description: Adds a filter to a sound (cascading) (non-const self only) Params: name type description filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_AddFilter ( orxSOUND * _pstSound , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam )","title":"orxSOUND:addFilter"},{"location":"types/orxSOUND.html#orxsoundaddfilterfromconfig","text":"Signature: r1 = addFilterFromConfig ( filterconfigid ) Description: Adds a filter to a sound (cascading) from config (non-const self only) Params: name type description filterconfigid string Config ID of the filter to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_AddFilterFromConfig ( orxSOUND * _pstSound , const orxSTRING _zFilterConfigID )","title":"orxSOUND:addFilterFromConfig"},{"location":"types/orxSOUND.html#orxsoundaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSOUND:addr"},{"location":"types/orxSOUND.html#orxsoundaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSOUND:aeq"},{"location":"types/orxSOUND.html#orxsoundasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSOUND:asVoid"},{"location":"types/orxSOUND.html#orxsounddecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxSOUND:decreaseCount"},{"location":"types/orxSOUND.html#orxsounddelete","text":"Signature: r1 = delete () Description: Deletes sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Delete ( orxSOUND * _pstSound )","title":"orxSOUND:delete"},{"location":"types/orxSOUND.html#orxsoundgetbusid","text":"Signature: r1 = getBusID () Description: Gets sound's bus ID Params: Returns: type description integer Sound's bus ID C signature: orxSTRINGID orxSound_GetBusID ( const orxSOUND * _pstSound )","title":"orxSOUND:getBusID"},{"location":"types/orxSOUND.html#orxsoundgetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxSOUND:getChild"},{"location":"types/orxSOUND.html#orxsoundgetduration","text":"Signature: r1 = getDuration () Description: Gets sound duration Params: Returns: type description number number C signature: orxFLOAT orxSound_GetDuration ( const orxSOUND * _pstSound )","title":"orxSOUND:getDuration"},{"location":"types/orxSOUND.html#orxsoundgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxSOUND:getFlags"},{"location":"types/orxSOUND.html#orxsoundgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxSOUND:getGUID"},{"location":"types/orxSOUND.html#orxsoundgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxSOUND:getID"},{"location":"types/orxSOUND.html#orxsoundgetname","text":"Signature: r1 = getName () Description: Gets sound config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxSound_GetName ( const orxSOUND * _pstSound )","title":"orxSOUND:getName"},{"location":"types/orxSOUND.html#orxsoundgetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxSOUND:getNext"},{"location":"types/orxSOUND.html#orxsoundgetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxSOUND:getOwner"},{"location":"types/orxSOUND.html#orxsoundgetpanning","text":"Signature: r1 , r2 , r3 = getPanning () Description: Gets a sound panning Params: Returns: type description orxSTATUS success / failure number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right boolean Left/Right channels are be mixed if true or act like a balance otherwise C signature: orxSTATUS orxSound_GetPanning ( const orxSOUND * _pstSound , orxFLOAT * _pfPanning , orxBOOL * _pbMix )","title":"orxSOUND:getPanning"},{"location":"types/orxSOUND.html#orxsoundgetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxSOUND:getParent"},{"location":"types/orxSOUND.html#orxsoundgetpitch","text":"Signature: r1 = getPitch () Description: Gets sound pitch Params: Returns: type description number number C signature: orxFLOAT orxSound_GetPitch ( const orxSOUND * _pstSound )","title":"orxSOUND:getPitch"},{"location":"types/orxSOUND.html#orxsoundgetposition","text":"Signature: r1 = getPosition () Description: Gets sound position Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxSound_GetPosition ( const orxSOUND * _pstSound , orxVECTOR * _pvPosition )","title":"orxSOUND:getPosition"},{"location":"types/orxSOUND.html#orxsoundgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxSOUND:getPrevious"},{"location":"types/orxSOUND.html#orxsoundgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxSOUND:getRefCount"},{"location":"types/orxSOUND.html#orxsoundgetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxSOUND:getSibling"},{"location":"types/orxSOUND.html#orxsoundgetspatialization","text":"Signature: r1 , r2 , r3 , r4 , r5 , r6 = getSpatialization () Description: Gets a sound spatialization information Params: Returns: type description orxSTATUS success / failure number Min distance, inside which the max gain will be used, will be strictly negative if the sound isn't spatialized number Max distance, outside which the gain will stop decreasing, will be strictly negative if the sound isn't spatialized number Min gain in [0.0f - 1.0f] number Max gain in [0.0f - 1.0f] number RollOff factor applied when interpolating the gain between inner and outer distances, defaults to 1.0f C signature: orxSTATUS orxSound_GetSpatialization ( const orxSOUND * _pstSound , orxFLOAT * _pfMinDistance , orxFLOAT * _pfMaxDistance , orxFLOAT * _pfMinGain , orxFLOAT * _pfMaxGain , orxFLOAT * _pfRollOff )","title":"orxSOUND:getSpatialization"},{"location":"types/orxSOUND.html#orxsoundgetstatus","text":"Signature: r1 = getStatus () Description: Gets sound status Params: Returns: type description orxSOUND_STATUS orxSOUND_STATUS C signature: orxSOUND_STATUS orxSound_GetStatus ( const orxSOUND * _pstSound )","title":"orxSOUND:getStatus"},{"location":"types/orxSOUND.html#orxsoundgettime","text":"Signature: r1 = getTime () Description: Gets a sound's time (ie. cursor/play position from beginning) Params: Returns: type description number Sound's time (cursor/play position), in seconds C signature: orxFLOAT orxSound_GetTime ( const orxSOUND * _pstSound )","title":"orxSOUND:getTime"},{"location":"types/orxSOUND.html#orxsoundgetvolume","text":"Signature: r1 = getVolume () Description: Gets sound volume Params: Returns: type description number number C signature: orxFLOAT orxSound_GetVolume ( const orxSOUND * _pstSound )","title":"orxSOUND:getVolume"},{"location":"types/orxSOUND.html#orxsoundincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxSOUND:increaseCount"},{"location":"types/orxSOUND.html#orxsoundislooping","text":"Signature: r1 = isLooping () Description: Is sound looping? Params: Returns: type description boolean true / false C signature: orxBOOL orxSound_IsLooping ( const orxSOUND * _pstSound )","title":"orxSOUND:isLooping"},{"location":"types/orxSOUND.html#orxsoundisstream","text":"Signature: r1 = isStream () Description: Is a stream (ie. music)? (non-const self only) Params: Returns: type description boolean true / false C signature: orxBOOL orxSound_IsStream ( orxSOUND * _pstSound )","title":"orxSOUND:isStream"},{"location":"types/orxSOUND.html#orxsoundlinksample","text":"Signature: r1 = linkSample ( samplename ) Description: Links a sample (non-const self only) Params: name type description samplename string Name of the sample to link (must already be loaded/created) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_LinkSample ( orxSOUND * _pstSound , const orxSTRING _zSampleName )","title":"orxSOUND:linkSample"},{"location":"types/orxSOUND.html#orxsoundloop","text":"Signature: r1 = loop ( loop ) Description: Loops sound (non-const self only) Params: name type description loop boolean true / false Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Loop ( orxSOUND * _pstSound , orxBOOL _bLoop )","title":"orxSOUND:loop"},{"location":"types/orxSOUND.html#orxsoundpause","text":"Signature: r1 = pause () Description: Pauses sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Pause ( orxSOUND * _pstSound )","title":"orxSOUND:pause"},{"location":"types/orxSOUND.html#orxsoundplay","text":"Signature: r1 = play () Description: Plays sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Play ( orxSOUND * _pstSound )","title":"orxSOUND:play"},{"location":"types/orxSOUND.html#orxsoundremoveallfilters","text":"Signature: r1 = removeAllFilters () Description: Removes all filters from a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_RemoveAllFilters ( orxSOUND * _pstSound )","title":"orxSOUND:removeAllFilters"},{"location":"types/orxSOUND.html#orxsoundremovelastfilter","text":"Signature: r1 = removeLastFilter () Description: Removes last added filter from a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_RemoveLastFilter ( orxSOUND * _pstSound )","title":"orxSOUND:removeLastFilter"},{"location":"types/orxSOUND.html#orxsoundsetbusid","text":"Signature: r1 = setBusID ( busid ) Description: Sets sound's bus ID (non-const self only) Params: name type description busid integer Bus ID to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetBusID ( orxSOUND * _pstSound , orxSTRINGID _stBusID )","title":"orxSOUND:setBusID"},{"location":"types/orxSOUND.html#orxsoundsetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxSOUND:setFlags"},{"location":"types/orxSOUND.html#orxsoundsetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxSOUND:setOwner"},{"location":"types/orxSOUND.html#orxsoundsetpanning","text":"Signature: r1 = setPanning ( panning , mix ) Description: Sets a sound panning (non-const self only) Params: name type description panning number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right mix boolean Left/Right channels will be mixed if true or act like a balance otherwise Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetPanning ( orxSOUND * _pstSound , orxFLOAT _fPanning , orxBOOL _bMix )","title":"orxSOUND:setPanning"},{"location":"types/orxSOUND.html#orxsoundsetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxSOUND:setParent"},{"location":"types/orxSOUND.html#orxsoundsetpitch","text":"Signature: r1 = setPitch ( pitch ) Description: Sets sound pitch (non-const self only) Params: name type description pitch number Desired pitch Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetPitch ( orxSOUND * _pstSound , orxFLOAT _fPitch )","title":"orxSOUND:setPitch"},{"location":"types/orxSOUND.html#orxsoundsetposition","text":"Signature: r1 = setPosition ( position ) Description: Sets sound position (non-const self only) Params: name type description position orxVECTOR# Desired position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetPosition ( orxSOUND * _pstSound , const orxVECTOR * _pvPosition )","title":"orxSOUND:setPosition"},{"location":"types/orxSOUND.html#orxsoundsetspatialization","text":"Signature: r1 = setSpatialization ( mindistance , maxdistance , mingain , maxgain , rolloff ) Description: Sets a sound spatialization, with gain decreasing between the minimum and maximum distances, when enabled (non-const self only) Params: name type description mindistance number Min distance, inside which the max gain will be used, strictly negative value to disable spatialization entirely maxdistance number Max distance, outside which the gain will stop decreasing, strictly negative value to disable spatialization entirely mingain number Min gain in [0.0f - 1.0f] maxgain number Max gain in [0.0f - 1.0f] rolloff number RollOff factor applied when interpolating the gain between inner and outer distances, defaults to 1.0f Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetSpatialization ( orxSOUND * _pstSound , orxFLOAT _fMinDistance , orxFLOAT _fMaxDistance , orxFLOAT _fMinGain , orxFLOAT _fMaxGain , orxFLOAT _fRollOff )","title":"orxSOUND:setSpatialization"},{"location":"types/orxSOUND.html#orxsoundsettime","text":"Signature: r1 = setTime ( time ) Description: Sets a sound time (ie. cursor/play position from beginning) (non-const self only) Params: name type description time number Time, in seconds Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetTime ( orxSOUND * _pstSound , orxFLOAT _fTime )","title":"orxSOUND:setTime"},{"location":"types/orxSOUND.html#orxsoundsetvolume","text":"Signature: r1 = setVolume ( volume ) Description: Sets sound volume (non-const self only) Params: name type description volume number Desired volume (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_SetVolume ( orxSOUND * _pstSound , orxFLOAT _fVolume )","title":"orxSOUND:setVolume"},{"location":"types/orxSOUND.html#orxsoundstop","text":"Signature: r1 = stop () Description: Stops sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_Stop ( orxSOUND * _pstSound )","title":"orxSOUND:stop"},{"location":"types/orxSOUND.html#orxsoundtestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSOUND:testAllFlags"},{"location":"types/orxSOUND.html#orxsoundtestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSOUND:testFlags"},{"location":"types/orxSOUND.html#orxsoundtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUND:type"},{"location":"types/orxSOUND.html#orxsoundunlinksample","text":"Signature: r1 = unlinkSample () Description: Unlinks (and deletes if not used anymore) a sample (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSound_UnlinkSample ( orxSOUND * _pstSound )","title":"orxSOUND:unlinkSample"},{"location":"types/orxSOUND.html#orxsoundupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSOUND:update"},{"location":"types/orxSOUNDPOINTER.html","text":"type orxSOUNDPOINTER # Methods # orxSOUNDPOINTER:addFilter # Signature: r1 = addFilter ( filterdata , usecustomparam ) Description: Adds a filter to all related sounds (cascading) (non-const self only) Params: name type description filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_AddFilter ( orxSOUNDPOINTER * _pstSoundPointer , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam ) orxSOUNDPOINTER:addFilterFromConfig # Signature: r1 = addFilterFromConfig ( filterconfigid ) Description: Adds a filter to all related sounds from config (cascading) (non-const self only) Params: name type description filterconfigid string Config ID of the filter to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_AddFilterFromConfig ( orxSOUNDPOINTER * _pstSoundPointer , const orxSTRING _zFilterConfigID ) orxSOUNDPOINTER:addSound # Signature: r1 = addSound ( sound ) Description: Adds a sound (non-const self only) Params: name type description sound orxSOUND Sound to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_AddSound ( orxSOUNDPOINTER * _pstSoundPointer , orxSOUND * _pstSound ) orxSOUNDPOINTER:addSoundFromConfig # Signature: r1 = addSoundFromConfig ( soundconfigid ) Description: Adds a sound using its config ID (non-const self only) Params: name type description soundconfigid string Config ID of the sound to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_AddSoundFromConfig ( orxSOUNDPOINTER * _pstSoundPointer , const orxSTRING _zSoundConfigID ) orxSOUNDPOINTER:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSOUNDPOINTER:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSOUNDPOINTER:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSOUNDPOINTER:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxSOUNDPOINTER:delete # Signature: r1 = delete () Description: Deletes a SoundPointer (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Delete ( orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:enable # Signature: enable ( enable ) Description: Enables/disables a SoundPointer (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxSoundPointer_Enable ( orxSOUNDPOINTER * _pstSoundPointer , orxBOOL _bEnable ) orxSOUNDPOINTER:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxSOUNDPOINTER:getCount # Signature: r1 = getCount () Description: Gets how many sounds are currently in use Params: Returns: type description integer integer (u32) C signature: orxU32 orxSoundPointer_GetCount ( const orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxSOUNDPOINTER:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxSOUNDPOINTER:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxSOUNDPOINTER:getLastAddedSound # Signature: r1 = getLastAddedSound () Description: Gets last added sound (Do *NOT* destroy it directly before removing it!!!) Params: Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxSoundPointer_GetLastAddedSound ( const orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxSOUNDPOINTER:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxSOUNDPOINTER:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxSOUNDPOINTER:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxSOUNDPOINTER:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxSOUNDPOINTER:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxSOUNDPOINTER:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxSOUNDPOINTER:isEnabled # Signature: r1 = isEnabled () Description: Is SoundPointer enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxSoundPointer_IsEnabled ( const orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:pause # Signature: r1 = pause () Description: Pauses all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Pause ( orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:play # Signature: r1 = play () Description: Plays all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Play ( orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:removeAllFilters # Signature: r1 = removeAllFilters () Description: Removes all filters from all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveAllFilters ( orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:removeAllSounds # Signature: r1 = removeAllSounds () Description: Removes all sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveAllSounds ( orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:removeLastFilter # Signature: r1 = removeLastFilter () Description: Removes last added filter from all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveLastFilter ( orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:removeSound # Signature: r1 = removeSound ( sound ) Description: Removes a sound (non-const self only) Params: name type description sound orxSOUND Sound to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveSound ( orxSOUNDPOINTER * _pstSoundPointer , orxSOUND * _pstSound ) orxSOUNDPOINTER:removeSoundFromConfig # Signature: r1 = removeSoundFromConfig ( soundconfigid ) Description: Removes a sound using its config ID (non-const self only) Params: name type description soundconfigid string Config ID of the sound to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveSoundFromConfig ( orxSOUNDPOINTER * _pstSoundPointer , const orxSTRING _zSoundConfigID ) orxSOUNDPOINTER:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxSOUNDPOINTER:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxSOUNDPOINTER:setPanning # Signature: r1 = setPanning ( panning , mix ) Description: Sets panning of all related sounds (non-const self only) Params: name type description panning number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right mix boolean Left/Right channels will be mixed if true or act like a balance otherwise Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_SetPanning ( orxSOUNDPOINTER * _pstSoundPointer , orxFLOAT _fPanning , orxBOOL _bMix ) orxSOUNDPOINTER:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxSOUNDPOINTER:setPitch # Signature: r1 = setPitch ( pitch ) Description: Sets pitch of all related sounds (non-const self only) Params: name type description pitch number Desired pitch Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_SetPitch ( orxSOUNDPOINTER * _pstSoundPointer , orxFLOAT _fPitch ) orxSOUNDPOINTER:setVolume # Signature: r1 = setVolume ( volume ) Description: Sets volume of all related sounds (non-const self only) Params: name type description volume number Desired volume (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_SetVolume ( orxSOUNDPOINTER * _pstSoundPointer , orxFLOAT _fVolume ) orxSOUNDPOINTER:stop # Signature: r1 = stop () Description: Stops all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Stop ( orxSOUNDPOINTER * _pstSoundPointer ) orxSOUNDPOINTER:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSOUNDPOINTER:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSOUNDPOINTER:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxSOUNDPOINTER:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSOUNDPOINTER"},{"location":"types/orxSOUNDPOINTER.html#type-orxsoundpointer","text":"","title":"type orxSOUNDPOINTER"},{"location":"types/orxSOUNDPOINTER.html#methods","text":"","title":"Methods"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointeraddfilter","text":"Signature: r1 = addFilter ( filterdata , usecustomparam ) Description: Adds a filter to all related sounds (cascading) (non-const self only) Params: name type description filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_AddFilter ( orxSOUNDPOINTER * _pstSoundPointer , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam )","title":"orxSOUNDPOINTER:addFilter"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointeraddfilterfromconfig","text":"Signature: r1 = addFilterFromConfig ( filterconfigid ) Description: Adds a filter to all related sounds from config (cascading) (non-const self only) Params: name type description filterconfigid string Config ID of the filter to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_AddFilterFromConfig ( orxSOUNDPOINTER * _pstSoundPointer , const orxSTRING _zFilterConfigID )","title":"orxSOUNDPOINTER:addFilterFromConfig"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointeraddsound","text":"Signature: r1 = addSound ( sound ) Description: Adds a sound (non-const self only) Params: name type description sound orxSOUND Sound to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_AddSound ( orxSOUNDPOINTER * _pstSoundPointer , orxSOUND * _pstSound )","title":"orxSOUNDPOINTER:addSound"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointeraddsoundfromconfig","text":"Signature: r1 = addSoundFromConfig ( soundconfigid ) Description: Adds a sound using its config ID (non-const self only) Params: name type description soundconfigid string Config ID of the sound to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_AddSoundFromConfig ( orxSOUNDPOINTER * _pstSoundPointer , const orxSTRING _zSoundConfigID )","title":"orxSOUNDPOINTER:addSoundFromConfig"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointeraddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSOUNDPOINTER:addr"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointeraeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSOUNDPOINTER:aeq"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSOUNDPOINTER:asVoid"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxSOUNDPOINTER:decreaseCount"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerdelete","text":"Signature: r1 = delete () Description: Deletes a SoundPointer (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Delete ( orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:delete"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerenable","text":"Signature: enable ( enable ) Description: Enables/disables a SoundPointer (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxSoundPointer_Enable ( orxSOUNDPOINTER * _pstSoundPointer , orxBOOL _bEnable )","title":"orxSOUNDPOINTER:enable"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxSOUNDPOINTER:getChild"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetcount","text":"Signature: r1 = getCount () Description: Gets how many sounds are currently in use Params: Returns: type description integer integer (u32) C signature: orxU32 orxSoundPointer_GetCount ( const orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:getCount"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxSOUNDPOINTER:getFlags"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxSOUNDPOINTER:getGUID"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxSOUNDPOINTER:getID"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetlastaddedsound","text":"Signature: r1 = getLastAddedSound () Description: Gets last added sound (Do *NOT* destroy it directly before removing it!!!) Params: Returns: type description orxSOUND orxSOUND / nil C signature: orxSOUND * orxSoundPointer_GetLastAddedSound ( const orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:getLastAddedSound"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxSOUNDPOINTER:getNext"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxSOUNDPOINTER:getOwner"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxSOUNDPOINTER:getParent"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxSOUNDPOINTER:getPrevious"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxSOUNDPOINTER:getRefCount"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointergetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxSOUNDPOINTER:getSibling"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxSOUNDPOINTER:increaseCount"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerisenabled","text":"Signature: r1 = isEnabled () Description: Is SoundPointer enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxSoundPointer_IsEnabled ( const orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:isEnabled"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerpause","text":"Signature: r1 = pause () Description: Pauses all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Pause ( orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:pause"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerplay","text":"Signature: r1 = play () Description: Plays all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Play ( orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:play"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerremoveallfilters","text":"Signature: r1 = removeAllFilters () Description: Removes all filters from all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveAllFilters ( orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:removeAllFilters"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerremoveallsounds","text":"Signature: r1 = removeAllSounds () Description: Removes all sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveAllSounds ( orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:removeAllSounds"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerremovelastfilter","text":"Signature: r1 = removeLastFilter () Description: Removes last added filter from all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveLastFilter ( orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:removeLastFilter"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerremovesound","text":"Signature: r1 = removeSound ( sound ) Description: Removes a sound (non-const self only) Params: name type description sound orxSOUND Sound to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveSound ( orxSOUNDPOINTER * _pstSoundPointer , orxSOUND * _pstSound )","title":"orxSOUNDPOINTER:removeSound"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerremovesoundfromconfig","text":"Signature: r1 = removeSoundFromConfig ( soundconfigid ) Description: Removes a sound using its config ID (non-const self only) Params: name type description soundconfigid string Config ID of the sound to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_RemoveSoundFromConfig ( orxSOUNDPOINTER * _pstSoundPointer , const orxSTRING _zSoundConfigID )","title":"orxSOUNDPOINTER:removeSoundFromConfig"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointersetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxSOUNDPOINTER:setFlags"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointersetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxSOUNDPOINTER:setOwner"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointersetpanning","text":"Signature: r1 = setPanning ( panning , mix ) Description: Sets panning of all related sounds (non-const self only) Params: name type description panning number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right mix boolean Left/Right channels will be mixed if true or act like a balance otherwise Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_SetPanning ( orxSOUNDPOINTER * _pstSoundPointer , orxFLOAT _fPanning , orxBOOL _bMix )","title":"orxSOUNDPOINTER:setPanning"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointersetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxSOUNDPOINTER:setParent"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointersetpitch","text":"Signature: r1 = setPitch ( pitch ) Description: Sets pitch of all related sounds (non-const self only) Params: name type description pitch number Desired pitch Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_SetPitch ( orxSOUNDPOINTER * _pstSoundPointer , orxFLOAT _fPitch )","title":"orxSOUNDPOINTER:setPitch"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointersetvolume","text":"Signature: r1 = setVolume ( volume ) Description: Sets volume of all related sounds (non-const self only) Params: name type description volume number Desired volume (0.0 - 1.0) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_SetVolume ( orxSOUNDPOINTER * _pstSoundPointer , orxFLOAT _fVolume )","title":"orxSOUNDPOINTER:setVolume"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerstop","text":"Signature: r1 = stop () Description: Stops all related sounds (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundPointer_Stop ( orxSOUNDPOINTER * _pstSoundPointer )","title":"orxSOUNDPOINTER:stop"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointertestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSOUNDPOINTER:testAllFlags"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointertestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSOUNDPOINTER:testFlags"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointertype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUNDPOINTER:type"},{"location":"types/orxSOUNDPOINTER.html#orxsoundpointerupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSOUNDPOINTER:update"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html","text":"type orxSOUNDSYSTEM_SAMPLE # Methods # orxSOUNDSYSTEM_SAMPLE:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSOUNDSYSTEM_SAMPLE:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSOUNDSYSTEM_SAMPLE:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSOUNDSYSTEM_SAMPLE:delete # Signature: r1 = delete () Description: Deletes a sound sample (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_DeleteSample ( orxSOUNDSYSTEM_SAMPLE * _pstSample ) orxSOUNDSYSTEM_SAMPLE:getInfo # Signature: r1 , r2 , r3 , r4 = getInfo () Description: Gets sample info Params: Returns: type description orxSTATUS success / failure integer Number of channels of the sample integer Number of frame of the sample (number of \"samples\" = number of frames * number of channels) integer Sampling rate of the sample (ie. number of frames per second) C signature: orxSTATUS orxSoundSystem_GetSampleInfo ( const orxSOUNDSYSTEM_SAMPLE * _pstSample , orxU32 * _pu32ChannelNumber , orxU32 * _pu32FrameNumber , orxU32 * _pu32SampleRate ) orxSOUNDSYSTEM_SAMPLE:setData # Signature: r1 = setData ( data , samplenumber ) Description: Sets sample data (non-const self only) Params: name type description data table of number Data to set (samples are expected to be signed/normalized) samplenumber integer Number of samples in the data array Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetSampleData ( orxSOUNDSYSTEM_SAMPLE * _pstSample , const orxFLOAT * _afData , orxU32 _u32SampleNumber ) orxSOUNDSYSTEM_SAMPLE:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUNDSYSTEM_SAMPLE"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html#type-orxsoundsystem_sample","text":"","title":"type orxSOUNDSYSTEM_SAMPLE"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html#methods","text":"","title":"Methods"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html#orxsoundsystem_sampleaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSOUNDSYSTEM_SAMPLE:addr"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html#orxsoundsystem_sampleaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSOUNDSYSTEM_SAMPLE:aeq"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html#orxsoundsystem_sampleasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSOUNDSYSTEM_SAMPLE:asVoid"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html#orxsoundsystem_sampledelete","text":"Signature: r1 = delete () Description: Deletes a sound sample (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_DeleteSample ( orxSOUNDSYSTEM_SAMPLE * _pstSample )","title":"orxSOUNDSYSTEM_SAMPLE:delete"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html#orxsoundsystem_samplegetinfo","text":"Signature: r1 , r2 , r3 , r4 = getInfo () Description: Gets sample info Params: Returns: type description orxSTATUS success / failure integer Number of channels of the sample integer Number of frame of the sample (number of \"samples\" = number of frames * number of channels) integer Sampling rate of the sample (ie. number of frames per second) C signature: orxSTATUS orxSoundSystem_GetSampleInfo ( const orxSOUNDSYSTEM_SAMPLE * _pstSample , orxU32 * _pu32ChannelNumber , orxU32 * _pu32FrameNumber , orxU32 * _pu32SampleRate )","title":"orxSOUNDSYSTEM_SAMPLE:getInfo"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html#orxsoundsystem_samplesetdata","text":"Signature: r1 = setData ( data , samplenumber ) Description: Sets sample data (non-const self only) Params: name type description data table of number Data to set (samples are expected to be signed/normalized) samplenumber integer Number of samples in the data array Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetSampleData ( orxSOUNDSYSTEM_SAMPLE * _pstSample , const orxFLOAT * _afData , orxU32 _u32SampleNumber )","title":"orxSOUNDSYSTEM_SAMPLE:setData"},{"location":"types/orxSOUNDSYSTEM_SAMPLE.html#orxsoundsystem_sampletype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUNDSYSTEM_SAMPLE:type"},{"location":"types/orxSOUNDSYSTEM_SOUND.html","text":"type orxSOUNDSYSTEM_SOUND # Methods # orxSOUNDSYSTEM_SOUND:addFilter # Signature: r1 = addFilter ( filterdata , usecustomparam ) Description: Adds a filter to a sound (cascading) (non-const self only) Params: name type description filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_AddFilter ( orxSOUNDSYSTEM_SOUND * _pstSound , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam ) orxSOUNDSYSTEM_SOUND:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSOUNDSYSTEM_SOUND:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSOUNDSYSTEM_SOUND:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSOUNDSYSTEM_SOUND:delete # Signature: r1 = delete () Description: Deletes a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Delete ( orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:getDuration # Signature: r1 = getDuration () Description: Gets a sound duration Params: Returns: type description number Sound's duration (seconds) C signature: orxFLOAT orxSoundSystem_GetDuration ( const orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:getPanning # Signature: r1 , r2 , r3 = getPanning () Description: Gets a sound panning Params: Returns: type description orxSTATUS success / failure number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right boolean Left/Right channels are be mixed if true or act like a balance otherwise C signature: orxSTATUS orxSoundSystem_GetPanning ( const orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT * _pfPanning , orxBOOL * _pbMix ) orxSOUNDSYSTEM_SOUND:getPitch # Signature: r1 = getPitch () Description: Gets a sound pitch Params: Returns: type description number Sound's pitch C signature: orxFLOAT orxSoundSystem_GetPitch ( const orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:getPosition # Signature: r1 = getPosition () Description: Gets a sound position Params: Returns: type description orxVECTOR Sound's position C signature: orxVECTOR * orxSoundSystem_GetPosition ( const orxSOUNDSYSTEM_SOUND * _pstSound , orxVECTOR * _pvPosition ) orxSOUNDSYSTEM_SOUND:getSpatialization # Signature: r1 , r2 , r3 , r4 , r5 , r6 = getSpatialization () Description: Gets a sound spatialization information Params: Returns: type description orxSTATUS success / failure number Min distance, inside which the max gain will be used, will be strictly negative if the sound isn't spatialized number Max distance, outside which the gain will stop decreasing, will be strictly negative if the sound isn't spatialized number Min gain in [0.0f - 1.0f] number Max gain in [0.0f - 1.0f] number RollOff factor applied when interpolating the gain between inner and outer distances, defaults to 1.0f C signature: orxSTATUS orxSoundSystem_GetSpatialization ( const orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT * _pfMinDistance , orxFLOAT * _pfMaxDistance , orxFLOAT * _pfMinGain , orxFLOAT * _pfMaxGain , orxFLOAT * _pfRollOff ) orxSOUNDSYSTEM_SOUND:getStatus # Signature: r1 = getStatus () Description: Gets a sound status (play/pause/stop) Params: Returns: type description orxSOUNDSYSTEM_STATUS orxSOUNDSYSTEM_STATUS C signature: orxSOUNDSYSTEM_STATUS orxSoundSystem_GetStatus ( const orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:getTime # Signature: r1 = getTime () Description: Gets a sound's time (ie. cursor/play position from beginning) Params: Returns: type description number Sound's time (cursor/play position), in seconds C signature: orxFLOAT orxSoundSystem_GetTime ( const orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:getVolume # Signature: r1 = getVolume () Description: Gets a sound volume Params: Returns: type description number Sound's volume C signature: orxFLOAT orxSoundSystem_GetVolume ( const orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:isLooping # Signature: r1 = isLooping () Description: Is sound looping? Params: Returns: type description boolean true if looping, false otherwise C signature: orxBOOL orxSoundSystem_IsLooping ( const orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:loop # Signature: r1 = loop ( loop ) Description: Loops a sound (non-const self only) Params: name type description loop boolean Loop / no loop Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Loop ( orxSOUNDSYSTEM_SOUND * _pstSound , orxBOOL _bLoop ) orxSOUNDSYSTEM_SOUND:pause # Signature: r1 = pause () Description: Pauses a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Pause ( orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:play # Signature: r1 = play () Description: Plays a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Play ( orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:removeAllFilters # Signature: r1 = removeAllFilters () Description: Removes all filters from a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_RemoveAllFilters ( orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:removeLastFilter # Signature: r1 = removeLastFilter () Description: Removes last added filter from a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_RemoveLastFilter ( orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:setBus # Signature: r1 = setBus ( bus ) Description: Sets a sound's bus (non-const self only) Params: name type description bus orxHANDLE Concerned bus Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetBus ( orxSOUNDSYSTEM_SOUND * _pstSound , orxHANDLE _hBus ) orxSOUNDSYSTEM_SOUND:setPanning # Signature: r1 = setPanning ( panning , mix ) Description: Sets a sound panning (non-const self only) Params: name type description panning number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right mix boolean Left/Right channels will be mixed if true or act like a balance otherwise Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetPanning ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fPanning , orxBOOL _bMix ) orxSOUNDSYSTEM_SOUND:setPitch # Signature: r1 = setPitch ( pitch ) Description: Sets a sound pitch (non-const self only) Params: name type description pitch number Pitch to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetPitch ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fPitch ) orxSOUNDSYSTEM_SOUND:setPosition # Signature: r1 = setPosition ( position ) Description: Sets a sound position (non-const self only) Params: name type description position orxVECTOR# Position to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetPosition ( orxSOUNDSYSTEM_SOUND * _pstSound , const orxVECTOR * _pvPosition ) orxSOUNDSYSTEM_SOUND:setSpatialization # Signature: r1 = setSpatialization ( mindistance , maxdistance , mingain , maxgain , rolloff ) Description: Sets a sound spatialization, with gain decreasing between the minimum and maximum distances, when enabled (non-const self only) Params: name type description mindistance number Min distance, inside which the max gain will be used, strictly negative value to disable spatialization entirely maxdistance number Max distance, outside which the gain will stop decreasing, strictly negative value to disable spatialization entirely mingain number Min gain in [0.0f - 1.0f] maxgain number Max gain in [0.0f - 1.0f] rolloff number RollOff factor applied when interpolating the gain between inner and outer distances, defaults to 1.0f Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetSpatialization ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fMinDistance , orxFLOAT _fMaxDistance , orxFLOAT _fMinGain , orxFLOAT _fMaxGain , orxFLOAT _fRollOff ) orxSOUNDSYSTEM_SOUND:setTime # Signature: r1 = setTime ( time ) Description: Sets a sound time (ie. cursor/play position from beginning) (non-const self only) Params: name type description time number Time, in seconds Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetTime ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fTime ) orxSOUNDSYSTEM_SOUND:setVolume # Signature: r1 = setVolume ( volume ) Description: Sets a sound volume (non-const self only) Params: name type description volume number Volume to set [0, 1] Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetVolume ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fVolume ) orxSOUNDSYSTEM_SOUND:stop # Signature: r1 = stop () Description: Stops a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Stop ( orxSOUNDSYSTEM_SOUND * _pstSound ) orxSOUNDSYSTEM_SOUND:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUNDSYSTEM_SOUND"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#type-orxsoundsystem_sound","text":"","title":"type orxSOUNDSYSTEM_SOUND"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#methods","text":"","title":"Methods"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundaddfilter","text":"Signature: r1 = addFilter ( filterdata , usecustomparam ) Description: Adds a filter to a sound (cascading) (non-const self only) Params: name type description filterdata orxSOUND_FILTER_DATA# Concerned filter data usecustomparam boolean Filter uses custom parameters Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_AddFilter ( orxSOUNDSYSTEM_SOUND * _pstSound , const orxSOUND_FILTER_DATA * _pstFilterData , orxBOOL _bUseCustomParam )","title":"orxSOUNDSYSTEM_SOUND:addFilter"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSOUNDSYSTEM_SOUND:addr"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSOUNDSYSTEM_SOUND:aeq"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSOUNDSYSTEM_SOUND:asVoid"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_sounddelete","text":"Signature: r1 = delete () Description: Deletes a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Delete ( orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:delete"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundgetduration","text":"Signature: r1 = getDuration () Description: Gets a sound duration Params: Returns: type description number Sound's duration (seconds) C signature: orxFLOAT orxSoundSystem_GetDuration ( const orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:getDuration"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundgetpanning","text":"Signature: r1 , r2 , r3 = getPanning () Description: Gets a sound panning Params: Returns: type description orxSTATUS success / failure number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right boolean Left/Right channels are be mixed if true or act like a balance otherwise C signature: orxSTATUS orxSoundSystem_GetPanning ( const orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT * _pfPanning , orxBOOL * _pbMix )","title":"orxSOUNDSYSTEM_SOUND:getPanning"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundgetpitch","text":"Signature: r1 = getPitch () Description: Gets a sound pitch Params: Returns: type description number Sound's pitch C signature: orxFLOAT orxSoundSystem_GetPitch ( const orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:getPitch"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundgetposition","text":"Signature: r1 = getPosition () Description: Gets a sound position Params: Returns: type description orxVECTOR Sound's position C signature: orxVECTOR * orxSoundSystem_GetPosition ( const orxSOUNDSYSTEM_SOUND * _pstSound , orxVECTOR * _pvPosition )","title":"orxSOUNDSYSTEM_SOUND:getPosition"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundgetspatialization","text":"Signature: r1 , r2 , r3 , r4 , r5 , r6 = getSpatialization () Description: Gets a sound spatialization information Params: Returns: type description orxSTATUS success / failure number Min distance, inside which the max gain will be used, will be strictly negative if the sound isn't spatialized number Max distance, outside which the gain will stop decreasing, will be strictly negative if the sound isn't spatialized number Min gain in [0.0f - 1.0f] number Max gain in [0.0f - 1.0f] number RollOff factor applied when interpolating the gain between inner and outer distances, defaults to 1.0f C signature: orxSTATUS orxSoundSystem_GetSpatialization ( const orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT * _pfMinDistance , orxFLOAT * _pfMaxDistance , orxFLOAT * _pfMinGain , orxFLOAT * _pfMaxGain , orxFLOAT * _pfRollOff )","title":"orxSOUNDSYSTEM_SOUND:getSpatialization"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundgetstatus","text":"Signature: r1 = getStatus () Description: Gets a sound status (play/pause/stop) Params: Returns: type description orxSOUNDSYSTEM_STATUS orxSOUNDSYSTEM_STATUS C signature: orxSOUNDSYSTEM_STATUS orxSoundSystem_GetStatus ( const orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:getStatus"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundgettime","text":"Signature: r1 = getTime () Description: Gets a sound's time (ie. cursor/play position from beginning) Params: Returns: type description number Sound's time (cursor/play position), in seconds C signature: orxFLOAT orxSoundSystem_GetTime ( const orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:getTime"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundgetvolume","text":"Signature: r1 = getVolume () Description: Gets a sound volume Params: Returns: type description number Sound's volume C signature: orxFLOAT orxSoundSystem_GetVolume ( const orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:getVolume"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundislooping","text":"Signature: r1 = isLooping () Description: Is sound looping? Params: Returns: type description boolean true if looping, false otherwise C signature: orxBOOL orxSoundSystem_IsLooping ( const orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:isLooping"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundloop","text":"Signature: r1 = loop ( loop ) Description: Loops a sound (non-const self only) Params: name type description loop boolean Loop / no loop Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Loop ( orxSOUNDSYSTEM_SOUND * _pstSound , orxBOOL _bLoop )","title":"orxSOUNDSYSTEM_SOUND:loop"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundpause","text":"Signature: r1 = pause () Description: Pauses a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Pause ( orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:pause"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundplay","text":"Signature: r1 = play () Description: Plays a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Play ( orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:play"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundremoveallfilters","text":"Signature: r1 = removeAllFilters () Description: Removes all filters from a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_RemoveAllFilters ( orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:removeAllFilters"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundremovelastfilter","text":"Signature: r1 = removeLastFilter () Description: Removes last added filter from a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_RemoveLastFilter ( orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:removeLastFilter"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundsetbus","text":"Signature: r1 = setBus ( bus ) Description: Sets a sound's bus (non-const self only) Params: name type description bus orxHANDLE Concerned bus Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetBus ( orxSOUNDSYSTEM_SOUND * _pstSound , orxHANDLE _hBus )","title":"orxSOUNDSYSTEM_SOUND:setBus"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundsetpanning","text":"Signature: r1 = setPanning ( panning , mix ) Description: Sets a sound panning (non-const self only) Params: name type description panning number Sound panning, -1.0f for full left, 0.0f for center, 1.0f for full right mix boolean Left/Right channels will be mixed if true or act like a balance otherwise Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetPanning ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fPanning , orxBOOL _bMix )","title":"orxSOUNDSYSTEM_SOUND:setPanning"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundsetpitch","text":"Signature: r1 = setPitch ( pitch ) Description: Sets a sound pitch (non-const self only) Params: name type description pitch number Pitch to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetPitch ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fPitch )","title":"orxSOUNDSYSTEM_SOUND:setPitch"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundsetposition","text":"Signature: r1 = setPosition ( position ) Description: Sets a sound position (non-const self only) Params: name type description position orxVECTOR# Position to set Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetPosition ( orxSOUNDSYSTEM_SOUND * _pstSound , const orxVECTOR * _pvPosition )","title":"orxSOUNDSYSTEM_SOUND:setPosition"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundsetspatialization","text":"Signature: r1 = setSpatialization ( mindistance , maxdistance , mingain , maxgain , rolloff ) Description: Sets a sound spatialization, with gain decreasing between the minimum and maximum distances, when enabled (non-const self only) Params: name type description mindistance number Min distance, inside which the max gain will be used, strictly negative value to disable spatialization entirely maxdistance number Max distance, outside which the gain will stop decreasing, strictly negative value to disable spatialization entirely mingain number Min gain in [0.0f - 1.0f] maxgain number Max gain in [0.0f - 1.0f] rolloff number RollOff factor applied when interpolating the gain between inner and outer distances, defaults to 1.0f Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetSpatialization ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fMinDistance , orxFLOAT _fMaxDistance , orxFLOAT _fMinGain , orxFLOAT _fMaxGain , orxFLOAT _fRollOff )","title":"orxSOUNDSYSTEM_SOUND:setSpatialization"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundsettime","text":"Signature: r1 = setTime ( time ) Description: Sets a sound time (ie. cursor/play position from beginning) (non-const self only) Params: name type description time number Time, in seconds Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetTime ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fTime )","title":"orxSOUNDSYSTEM_SOUND:setTime"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundsetvolume","text":"Signature: r1 = setVolume ( volume ) Description: Sets a sound volume (non-const self only) Params: name type description volume number Volume to set [0, 1] Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_SetVolume ( orxSOUNDSYSTEM_SOUND * _pstSound , orxFLOAT _fVolume )","title":"orxSOUNDSYSTEM_SOUND:setVolume"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundstop","text":"Signature: r1 = stop () Description: Stops a sound (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSoundSystem_Stop ( orxSOUNDSYSTEM_SOUND * _pstSound )","title":"orxSOUNDSYSTEM_SOUND:stop"},{"location":"types/orxSOUNDSYSTEM_SOUND.html#orxsoundsystem_soundtype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUNDSYSTEM_SOUND:type"},{"location":"types/orxSOUND_FILTER_DATA.html","text":"type orxSOUND_FILTER_DATA # not all the properties are available at the same time, refer to the constructors to find out about that constructors: lorx.sound.filterDataBiquad lorx.sound.filterDataLowPass lorx.sound.filterDataHighPass lorx.sound.filterDataLowShelf lorx.sound.filterDataHighShelf lorx.sound.filterDataNotch lorx.sound.filterDataPeaking lorx.sound.filterDataDelay Properties # name type type orxSOUND_FILTER_TYPE nameid integer a0 number a1 number a2 number b0 number b1 number b2 number frequency number order integer q number gain number delay number decay number Methods # orxSOUND_FILTER_DATA:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSOUND_FILTER_DATA:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSOUND_FILTER_DATA:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSOUND_FILTER_DATA:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUND_FILTER_DATA"},{"location":"types/orxSOUND_FILTER_DATA.html#type-orxsound_filter_data","text":"not all the properties are available at the same time, refer to the constructors to find out about that constructors: lorx.sound.filterDataBiquad lorx.sound.filterDataLowPass lorx.sound.filterDataHighPass lorx.sound.filterDataLowShelf lorx.sound.filterDataHighShelf lorx.sound.filterDataNotch lorx.sound.filterDataPeaking lorx.sound.filterDataDelay","title":"type orxSOUND_FILTER_DATA"},{"location":"types/orxSOUND_FILTER_DATA.html#properties","text":"name type type orxSOUND_FILTER_TYPE nameid integer a0 number a1 number a2 number b0 number b1 number b2 number frequency number order integer q number gain number delay number decay number","title":"Properties"},{"location":"types/orxSOUND_FILTER_DATA.html#methods","text":"","title":"Methods"},{"location":"types/orxSOUND_FILTER_DATA.html#orxsound_filter_dataaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSOUND_FILTER_DATA:addr"},{"location":"types/orxSOUND_FILTER_DATA.html#orxsound_filter_dataaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSOUND_FILTER_DATA:aeq"},{"location":"types/orxSOUND_FILTER_DATA.html#orxsound_filter_dataasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSOUND_FILTER_DATA:asVoid"},{"location":"types/orxSOUND_FILTER_DATA.html#orxsound_filter_datatype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUND_FILTER_DATA:type"},{"location":"types/orxSOUND_STREAM_INFO.html","text":"type orxSOUND_STREAM_INFO # Properties # name type name string samplerate integer channelnumber integer Methods # orxSOUND_STREAM_INFO:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSOUND_STREAM_INFO:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSOUND_STREAM_INFO:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSOUND_STREAM_INFO:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUND_STREAM_INFO"},{"location":"types/orxSOUND_STREAM_INFO.html#type-orxsound_stream_info","text":"","title":"type orxSOUND_STREAM_INFO"},{"location":"types/orxSOUND_STREAM_INFO.html#properties","text":"name type name string samplerate integer channelnumber integer","title":"Properties"},{"location":"types/orxSOUND_STREAM_INFO.html#methods","text":"","title":"Methods"},{"location":"types/orxSOUND_STREAM_INFO.html#orxsound_stream_infoaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSOUND_STREAM_INFO:addr"},{"location":"types/orxSOUND_STREAM_INFO.html#orxsound_stream_infoaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSOUND_STREAM_INFO:aeq"},{"location":"types/orxSOUND_STREAM_INFO.html#orxsound_stream_infoasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSOUND_STREAM_INFO:asVoid"},{"location":"types/orxSOUND_STREAM_INFO.html#orxsound_stream_infotype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUND_STREAM_INFO:type"},{"location":"types/orxSOUND_STREAM_PACKET.html","text":"type orxSOUND_STREAM_PACKET # Properties # name type samplelistlist table of number samplenumber integer timestamp number time number id integer discard boolean last boolean Methods # orxSOUND_STREAM_PACKET:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSOUND_STREAM_PACKET:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSOUND_STREAM_PACKET:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSOUND_STREAM_PACKET:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUND_STREAM_PACKET"},{"location":"types/orxSOUND_STREAM_PACKET.html#type-orxsound_stream_packet","text":"","title":"type orxSOUND_STREAM_PACKET"},{"location":"types/orxSOUND_STREAM_PACKET.html#properties","text":"name type samplelistlist table of number samplenumber integer timestamp number time number id integer discard boolean last boolean","title":"Properties"},{"location":"types/orxSOUND_STREAM_PACKET.html#methods","text":"","title":"Methods"},{"location":"types/orxSOUND_STREAM_PACKET.html#orxsound_stream_packetaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSOUND_STREAM_PACKET:addr"},{"location":"types/orxSOUND_STREAM_PACKET.html#orxsound_stream_packetaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSOUND_STREAM_PACKET:aeq"},{"location":"types/orxSOUND_STREAM_PACKET.html#orxsound_stream_packetasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSOUND_STREAM_PACKET:asVoid"},{"location":"types/orxSOUND_STREAM_PACKET.html#orxsound_stream_packettype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSOUND_STREAM_PACKET:type"},{"location":"types/orxSPAWNER.html","text":"type orxSPAWNER # Methods # orxSPAWNER:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSPAWNER:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSPAWNER:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSPAWNER:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxSPAWNER:delete # Signature: r1 = delete () Description: Deletes a spawner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_Delete ( orxSPAWNER * _pstSpawner ) orxSPAWNER:enable # Signature: enable ( enable ) Description: Enables/disables a spawner (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxSpawner_Enable ( orxSPAWNER * _pstSpawner , orxBOOL _bEnable ) orxSPAWNER:getActiveObjectCount # Signature: r1 = getActiveObjectCount () Description: Gets spawner active object count Params: Returns: type description integer Active object count C signature: orxU32 orxSpawner_GetActiveObjectCount ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getActiveObjectLimit # Signature: r1 = getActiveObjectLimit () Description: Gets spawner active object limit Params: Returns: type description integer Active object limit, 0 for unlimited C signature: orxU32 orxSpawner_GetActiveObjectLimit ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxSPAWNER:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxSPAWNER:getFrame # Signature: r1 = getFrame () Description: Gets spawner frame Params: Returns: type description orxFRAME orxFRAME C signature: orxFRAME * orxSpawner_GetFrame ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxSPAWNER:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxSPAWNER:getName # Signature: r1 = getName () Description: Gets spawner name Params: Returns: type description string string / empty string C signature: const orxSTRING orxSpawner_GetName ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxSPAWNER:getNextWaveDelay # Signature: r1 = getNextWaveDelay () Description: Gets spawner next wave delay Params: Returns: type description number Delay before next wave is spawned / -1 if not in wave mode C signature: orxFLOAT orxSpawner_GetNextWaveDelay ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getObjectSpeed # Signature: r1 = getObjectSpeed () Description: Gets spawner object speed Params: Returns: type description orxVECTOR Speed applied to every spawned object / nil if none is applied C signature: orxVECTOR * orxSpawner_GetObjectSpeed ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvObjectSpeed ) orxSPAWNER:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxSPAWNER:getParent # Signature: r1 = getParent () Description: Gets spawner parent Params: Returns: type description orxSTRUCTURE Parent (object, spawner, camera or frame) / nil C signature: orxSTRUCTURE * orxSpawner_GetParent ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getPosition # Signature: r1 = getPosition () Description: Get spawner position Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxSpawner_GetPosition ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvPosition ) orxSPAWNER:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxSPAWNER:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxSPAWNER:getRotation # Signature: r1 = getRotation () Description: Get spawner rotation Params: Returns: type description number number (radians) C signature: orxFLOAT orxSpawner_GetRotation ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getScale # Signature: r1 = getScale () Description: Get spawner scale Params: Returns: type description orxVECTOR Scale vector C signature: orxVECTOR * orxSpawner_GetScale ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvScale ) orxSPAWNER:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxSPAWNER:getTotalObjectCount # Signature: r1 = getTotalObjectCount () Description: Gets spawner total object count Params: Returns: type description integer Total object count C signature: orxU32 orxSpawner_GetTotalObjectCount ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getTotalObjectLimit # Signature: r1 = getTotalObjectLimit () Description: Gets spawner total object limit Params: Returns: type description integer Total object limit, 0 for unlimited C signature: orxU32 orxSpawner_GetTotalObjectLimit ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getWaveDelay # Signature: r1 = getWaveDelay () Description: Gets spawner wave delay Params: Returns: type description number Delay between two waves / -1 if not in wave mode C signature: orxFLOAT orxSpawner_GetWaveDelay ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getWaveSize # Signature: r1 = getWaveSize () Description: Gets spawner wave size Params: Returns: type description integer Number of objects spawned in a wave C signature: orxU32 orxSpawner_GetWaveSize ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getWorldPosition # Signature: r1 = getWorldPosition () Description: Get spawner world position Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxSpawner_GetWorldPosition ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvPosition ) orxSPAWNER:getWorldRotation # Signature: r1 = getWorldRotation () Description: Get spawner world rotation Params: Returns: type description number number (radians) C signature: orxFLOAT orxSpawner_GetWorldRotation ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:getWorldScale # Signature: r1 = getWorldScale () Description: Gets spawner world scale Params: Returns: type description orxVECTOR success / failure C signature: orxVECTOR * orxSpawner_GetWorldScale ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvScale ) orxSPAWNER:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxSPAWNER:isEnabled # Signature: r1 = isEnabled () Description: Is spawner enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxSpawner_IsEnabled ( const orxSPAWNER * _pstSpawner ) orxSPAWNER:reset # Signature: reset () Description: Resets (and disables) a spawner (non-const self only) Params: Returns: C signature: void orxSpawner_Reset ( orxSPAWNER * _pstSpawner ) orxSPAWNER:setActiveObjectLimit # Signature: r1 = setActiveObjectLimit ( activeobjectlimit ) Description: Sets spawner active object limit (non-const self only) Params: name type description activeobjectlimit integer Active object limit, 0 for unlimited Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetActiveObjectLimit ( orxSPAWNER * _pstSpawner , orxU32 _u32ActiveObjectLimit ) orxSPAWNER:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxSPAWNER:setNextWaveDelay # Signature: r1 = setNextWaveDelay ( wavedelay ) Description: Sets spawner next wave delay (without affecting the normal wave delay) (non-const self only) Params: name type description wavedelay number Delay before next wave / -1 for the current full wave delay Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetNextWaveDelay ( orxSPAWNER * _pstSpawner , orxFLOAT _fWaveDelay ) orxSPAWNER:setObjectSpeed # Signature: r1 = setObjectSpeed ( objectspeed ) Description: Sets spawner object speed (non-const self only) Params: name type description objectspeed orxVECTOR# Speed to apply to every spawned object / nil to not apply any speed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetObjectSpeed ( orxSPAWNER * _pstSpawner , const orxVECTOR * _pvObjectSpeed ) orxSPAWNER:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxSPAWNER:setParent # Signature: r1 = setParent ( parent ) Description: Sets spawner parent (non-const self only) Params: name type description parent void* Parent structure to set (object, spawner, camera or frame) / nil Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxSpawner_SetParent ( orxSPAWNER * _pstSpawner , void * _pParent ) orxSPAWNER:setPosition # Signature: r1 = setPosition ( position ) Description: Sets spawner position (non-const self only) Params: name type description position orxVECTOR# Spawner position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetPosition ( orxSPAWNER * _pstSpawner , const orxVECTOR * _pvPosition ) orxSPAWNER:setRotation # Signature: r1 = setRotation ( rotation ) Description: Sets spawner rotation (non-const self only) Params: name type description rotation number Spawner rotation (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetRotation ( orxSPAWNER * _pstSpawner , orxFLOAT _fRotation ) orxSPAWNER:setScale # Signature: r1 = setScale ( scale ) Description: Sets spawner scale (non-const self only) Params: name type description scale orxVECTOR# Spawner scale vector Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetScale ( orxSPAWNER * _pstSpawner , const orxVECTOR * _pvScale ) orxSPAWNER:setTotalObjectLimit # Signature: r1 = setTotalObjectLimit ( totalobjectlimit ) Description: Sets spawner total object limit (non-const self only) Params: name type description totalobjectlimit integer Total object limit, 0 for unlimited Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetTotalObjectLimit ( orxSPAWNER * _pstSpawner , orxU32 _u32TotalObjectLimit ) orxSPAWNER:setWaveDelay # Signature: r1 = setWaveDelay ( wavedelay ) Description: Sets spawner wave delay (non-const self only) Params: name type description wavedelay number Delay between two waves / -1 for deactivating wave mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetWaveDelay ( orxSPAWNER * _pstSpawner , orxFLOAT _fWaveDelay ) orxSPAWNER:setWaveSize # Signature: r1 = setWaveSize ( wavesize ) Description: Sets spawner wave size (non-const self only) Params: name type description wavesize integer Number of objects to spawn in a wave / 0 for deactivating wave mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetWaveSize ( orxSPAWNER * _pstSpawner , orxU32 _u32WaveSize ) orxSPAWNER:spawn # Signature: r1 = spawn ( number ) Description: Spawns items (non-const self only) Params: name type description number integer Number of items to spawn, if orxU32_UNDEFINED, the spawner's wave size will be used instead Returns: type description integer Number of spawned items C signature: orxU32 orxSpawner_Spawn ( orxSPAWNER * _pstSpawner , orxU32 _u32Number ) orxSPAWNER:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSPAWNER:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxSPAWNER:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxSPAWNER:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSPAWNER"},{"location":"types/orxSPAWNER.html#type-orxspawner","text":"","title":"type orxSPAWNER"},{"location":"types/orxSPAWNER.html#methods","text":"","title":"Methods"},{"location":"types/orxSPAWNER.html#orxspawneraddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSPAWNER:addr"},{"location":"types/orxSPAWNER.html#orxspawneraeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSPAWNER:aeq"},{"location":"types/orxSPAWNER.html#orxspawnerasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSPAWNER:asVoid"},{"location":"types/orxSPAWNER.html#orxspawnerdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxSPAWNER:decreaseCount"},{"location":"types/orxSPAWNER.html#orxspawnerdelete","text":"Signature: r1 = delete () Description: Deletes a spawner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_Delete ( orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:delete"},{"location":"types/orxSPAWNER.html#orxspawnerenable","text":"Signature: enable ( enable ) Description: Enables/disables a spawner (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxSpawner_Enable ( orxSPAWNER * _pstSpawner , orxBOOL _bEnable )","title":"orxSPAWNER:enable"},{"location":"types/orxSPAWNER.html#orxspawnergetactiveobjectcount","text":"Signature: r1 = getActiveObjectCount () Description: Gets spawner active object count Params: Returns: type description integer Active object count C signature: orxU32 orxSpawner_GetActiveObjectCount ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getActiveObjectCount"},{"location":"types/orxSPAWNER.html#orxspawnergetactiveobjectlimit","text":"Signature: r1 = getActiveObjectLimit () Description: Gets spawner active object limit Params: Returns: type description integer Active object limit, 0 for unlimited C signature: orxU32 orxSpawner_GetActiveObjectLimit ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getActiveObjectLimit"},{"location":"types/orxSPAWNER.html#orxspawnergetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxSPAWNER:getChild"},{"location":"types/orxSPAWNER.html#orxspawnergetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxSPAWNER:getFlags"},{"location":"types/orxSPAWNER.html#orxspawnergetframe","text":"Signature: r1 = getFrame () Description: Gets spawner frame Params: Returns: type description orxFRAME orxFRAME C signature: orxFRAME * orxSpawner_GetFrame ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getFrame"},{"location":"types/orxSPAWNER.html#orxspawnergetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxSPAWNER:getGUID"},{"location":"types/orxSPAWNER.html#orxspawnergetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxSPAWNER:getID"},{"location":"types/orxSPAWNER.html#orxspawnergetname","text":"Signature: r1 = getName () Description: Gets spawner name Params: Returns: type description string string / empty string C signature: const orxSTRING orxSpawner_GetName ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getName"},{"location":"types/orxSPAWNER.html#orxspawnergetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxSPAWNER:getNext"},{"location":"types/orxSPAWNER.html#orxspawnergetnextwavedelay","text":"Signature: r1 = getNextWaveDelay () Description: Gets spawner next wave delay Params: Returns: type description number Delay before next wave is spawned / -1 if not in wave mode C signature: orxFLOAT orxSpawner_GetNextWaveDelay ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getNextWaveDelay"},{"location":"types/orxSPAWNER.html#orxspawnergetobjectspeed","text":"Signature: r1 = getObjectSpeed () Description: Gets spawner object speed Params: Returns: type description orxVECTOR Speed applied to every spawned object / nil if none is applied C signature: orxVECTOR * orxSpawner_GetObjectSpeed ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvObjectSpeed )","title":"orxSPAWNER:getObjectSpeed"},{"location":"types/orxSPAWNER.html#orxspawnergetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxSPAWNER:getOwner"},{"location":"types/orxSPAWNER.html#orxspawnergetparent","text":"Signature: r1 = getParent () Description: Gets spawner parent Params: Returns: type description orxSTRUCTURE Parent (object, spawner, camera or frame) / nil C signature: orxSTRUCTURE * orxSpawner_GetParent ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getParent"},{"location":"types/orxSPAWNER.html#orxspawnergetposition","text":"Signature: r1 = getPosition () Description: Get spawner position Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxSpawner_GetPosition ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvPosition )","title":"orxSPAWNER:getPosition"},{"location":"types/orxSPAWNER.html#orxspawnergetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxSPAWNER:getPrevious"},{"location":"types/orxSPAWNER.html#orxspawnergetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxSPAWNER:getRefCount"},{"location":"types/orxSPAWNER.html#orxspawnergetrotation","text":"Signature: r1 = getRotation () Description: Get spawner rotation Params: Returns: type description number number (radians) C signature: orxFLOAT orxSpawner_GetRotation ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getRotation"},{"location":"types/orxSPAWNER.html#orxspawnergetscale","text":"Signature: r1 = getScale () Description: Get spawner scale Params: Returns: type description orxVECTOR Scale vector C signature: orxVECTOR * orxSpawner_GetScale ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvScale )","title":"orxSPAWNER:getScale"},{"location":"types/orxSPAWNER.html#orxspawnergetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxSPAWNER:getSibling"},{"location":"types/orxSPAWNER.html#orxspawnergettotalobjectcount","text":"Signature: r1 = getTotalObjectCount () Description: Gets spawner total object count Params: Returns: type description integer Total object count C signature: orxU32 orxSpawner_GetTotalObjectCount ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getTotalObjectCount"},{"location":"types/orxSPAWNER.html#orxspawnergettotalobjectlimit","text":"Signature: r1 = getTotalObjectLimit () Description: Gets spawner total object limit Params: Returns: type description integer Total object limit, 0 for unlimited C signature: orxU32 orxSpawner_GetTotalObjectLimit ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getTotalObjectLimit"},{"location":"types/orxSPAWNER.html#orxspawnergetwavedelay","text":"Signature: r1 = getWaveDelay () Description: Gets spawner wave delay Params: Returns: type description number Delay between two waves / -1 if not in wave mode C signature: orxFLOAT orxSpawner_GetWaveDelay ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getWaveDelay"},{"location":"types/orxSPAWNER.html#orxspawnergetwavesize","text":"Signature: r1 = getWaveSize () Description: Gets spawner wave size Params: Returns: type description integer Number of objects spawned in a wave C signature: orxU32 orxSpawner_GetWaveSize ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getWaveSize"},{"location":"types/orxSPAWNER.html#orxspawnergetworldposition","text":"Signature: r1 = getWorldPosition () Description: Get spawner world position Params: Returns: type description orxVECTOR orxVECTOR / nil C signature: orxVECTOR * orxSpawner_GetWorldPosition ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvPosition )","title":"orxSPAWNER:getWorldPosition"},{"location":"types/orxSPAWNER.html#orxspawnergetworldrotation","text":"Signature: r1 = getWorldRotation () Description: Get spawner world rotation Params: Returns: type description number number (radians) C signature: orxFLOAT orxSpawner_GetWorldRotation ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:getWorldRotation"},{"location":"types/orxSPAWNER.html#orxspawnergetworldscale","text":"Signature: r1 = getWorldScale () Description: Gets spawner world scale Params: Returns: type description orxVECTOR success / failure C signature: orxVECTOR * orxSpawner_GetWorldScale ( const orxSPAWNER * _pstSpawner , orxVECTOR * _pvScale )","title":"orxSPAWNER:getWorldScale"},{"location":"types/orxSPAWNER.html#orxspawnerincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxSPAWNER:increaseCount"},{"location":"types/orxSPAWNER.html#orxspawnerisenabled","text":"Signature: r1 = isEnabled () Description: Is spawner enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxSpawner_IsEnabled ( const orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:isEnabled"},{"location":"types/orxSPAWNER.html#orxspawnerreset","text":"Signature: reset () Description: Resets (and disables) a spawner (non-const self only) Params: Returns: C signature: void orxSpawner_Reset ( orxSPAWNER * _pstSpawner )","title":"orxSPAWNER:reset"},{"location":"types/orxSPAWNER.html#orxspawnersetactiveobjectlimit","text":"Signature: r1 = setActiveObjectLimit ( activeobjectlimit ) Description: Sets spawner active object limit (non-const self only) Params: name type description activeobjectlimit integer Active object limit, 0 for unlimited Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetActiveObjectLimit ( orxSPAWNER * _pstSpawner , orxU32 _u32ActiveObjectLimit )","title":"orxSPAWNER:setActiveObjectLimit"},{"location":"types/orxSPAWNER.html#orxspawnersetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxSPAWNER:setFlags"},{"location":"types/orxSPAWNER.html#orxspawnersetnextwavedelay","text":"Signature: r1 = setNextWaveDelay ( wavedelay ) Description: Sets spawner next wave delay (without affecting the normal wave delay) (non-const self only) Params: name type description wavedelay number Delay before next wave / -1 for the current full wave delay Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetNextWaveDelay ( orxSPAWNER * _pstSpawner , orxFLOAT _fWaveDelay )","title":"orxSPAWNER:setNextWaveDelay"},{"location":"types/orxSPAWNER.html#orxspawnersetobjectspeed","text":"Signature: r1 = setObjectSpeed ( objectspeed ) Description: Sets spawner object speed (non-const self only) Params: name type description objectspeed orxVECTOR# Speed to apply to every spawned object / nil to not apply any speed Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetObjectSpeed ( orxSPAWNER * _pstSpawner , const orxVECTOR * _pvObjectSpeed )","title":"orxSPAWNER:setObjectSpeed"},{"location":"types/orxSPAWNER.html#orxspawnersetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxSPAWNER:setOwner"},{"location":"types/orxSPAWNER.html#orxspawnersetparent","text":"Signature: r1 = setParent ( parent ) Description: Sets spawner parent (non-const self only) Params: name type description parent void* Parent structure to set (object, spawner, camera or frame) / nil Returns: type description orxSTATUS orsSTATUS_SUCCESS / failure C signature: orxSTATUS orxSpawner_SetParent ( orxSPAWNER * _pstSpawner , void * _pParent )","title":"orxSPAWNER:setParent"},{"location":"types/orxSPAWNER.html#orxspawnersetposition","text":"Signature: r1 = setPosition ( position ) Description: Sets spawner position (non-const self only) Params: name type description position orxVECTOR# Spawner position Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetPosition ( orxSPAWNER * _pstSpawner , const orxVECTOR * _pvPosition )","title":"orxSPAWNER:setPosition"},{"location":"types/orxSPAWNER.html#orxspawnersetrotation","text":"Signature: r1 = setRotation ( rotation ) Description: Sets spawner rotation (non-const self only) Params: name type description rotation number Spawner rotation (radians) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetRotation ( orxSPAWNER * _pstSpawner , orxFLOAT _fRotation )","title":"orxSPAWNER:setRotation"},{"location":"types/orxSPAWNER.html#orxspawnersetscale","text":"Signature: r1 = setScale ( scale ) Description: Sets spawner scale (non-const self only) Params: name type description scale orxVECTOR# Spawner scale vector Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetScale ( orxSPAWNER * _pstSpawner , const orxVECTOR * _pvScale )","title":"orxSPAWNER:setScale"},{"location":"types/orxSPAWNER.html#orxspawnersettotalobjectlimit","text":"Signature: r1 = setTotalObjectLimit ( totalobjectlimit ) Description: Sets spawner total object limit (non-const self only) Params: name type description totalobjectlimit integer Total object limit, 0 for unlimited Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetTotalObjectLimit ( orxSPAWNER * _pstSpawner , orxU32 _u32TotalObjectLimit )","title":"orxSPAWNER:setTotalObjectLimit"},{"location":"types/orxSPAWNER.html#orxspawnersetwavedelay","text":"Signature: r1 = setWaveDelay ( wavedelay ) Description: Sets spawner wave delay (non-const self only) Params: name type description wavedelay number Delay between two waves / -1 for deactivating wave mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetWaveDelay ( orxSPAWNER * _pstSpawner , orxFLOAT _fWaveDelay )","title":"orxSPAWNER:setWaveDelay"},{"location":"types/orxSPAWNER.html#orxspawnersetwavesize","text":"Signature: r1 = setWaveSize ( wavesize ) Description: Sets spawner wave size (non-const self only) Params: name type description wavesize integer Number of objects to spawn in a wave / 0 for deactivating wave mode Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxSpawner_SetWaveSize ( orxSPAWNER * _pstSpawner , orxU32 _u32WaveSize )","title":"orxSPAWNER:setWaveSize"},{"location":"types/orxSPAWNER.html#orxspawnerspawn","text":"Signature: r1 = spawn ( number ) Description: Spawns items (non-const self only) Params: name type description number integer Number of items to spawn, if orxU32_UNDEFINED, the spawner's wave size will be used instead Returns: type description integer Number of spawned items C signature: orxU32 orxSpawner_Spawn ( orxSPAWNER * _pstSpawner , orxU32 _u32Number )","title":"orxSPAWNER:spawn"},{"location":"types/orxSPAWNER.html#orxspawnertestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSPAWNER:testAllFlags"},{"location":"types/orxSPAWNER.html#orxspawnertestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxSPAWNER:testFlags"},{"location":"types/orxSPAWNER.html#orxspawnertype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSPAWNER:type"},{"location":"types/orxSPAWNER.html#orxspawnerupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxSPAWNER:update"},{"location":"types/orxSTRUCTURE.html","text":"type orxSTRUCTURE # Methods # orxSTRUCTURE:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxSTRUCTURE:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxSTRUCTURE:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxSTRUCTURE:toAnim # Signature: r1 = toAnim () Description: Convert the orxSTRUCTURE to an orxANIM (pointer cast) Params: Returns: type description orxANIM The converted orxANIM or nil C signature: #define orxANIM(STRUCTURE) orxSTRUCTURE:toAnimConst # Signature: r1 = toAnimConst () Description: Convert the orxSTRUCTURE to an orxANIM# (pointer cast) Params: Returns: type description orxANIM# The converted orxANIM or nil C signature: #define orxANIM(STRUCTURE) orxSTRUCTURE:toAnimPointer # Signature: r1 = toAnimPointer () Description: Convert the orxSTRUCTURE to an orxANIMPOINTER (pointer cast) Params: Returns: type description orxANIMPOINTER The converted orxANIMPOINTER or nil C signature: #define orxANIMPOINTER(STRUCTURE) orxSTRUCTURE:toAnimPointerConst # Signature: r1 = toAnimPointerConst () Description: Convert the orxSTRUCTURE to an orxANIMPOINTER# (pointer cast) Params: Returns: type description orxANIMPOINTER# The converted orxANIMPOINTER or nil C signature: #define orxANIMPOINTER(STRUCTURE) orxSTRUCTURE:toAnimSet # Signature: r1 = toAnimSet () Description: Convert the orxSTRUCTURE to an orxANIMSET (pointer cast) Params: Returns: type description orxANIMSET The converted orxANIMSET or nil C signature: #define orxANIMSET(STRUCTURE) orxSTRUCTURE:toAnimSetConst # Signature: r1 = toAnimSetConst () Description: Convert the orxSTRUCTURE to an orxANIMSET# (pointer cast) Params: Returns: type description orxANIMSET# The converted orxANIMSET or nil C signature: #define orxANIMSET(STRUCTURE) orxSTRUCTURE:toBody # Signature: r1 = toBody () Description: Convert the orxSTRUCTURE to an orxBODY (pointer cast) Params: Returns: type description orxBODY The converted orxBODY or nil C signature: #define orxBODY(STRUCTURE) orxSTRUCTURE:toBodyConst # Signature: r1 = toBodyConst () Description: Convert the orxSTRUCTURE to an orxBODY# (pointer cast) Params: Returns: type description orxBODY# The converted orxBODY or nil C signature: #define orxBODY(STRUCTURE) orxSTRUCTURE:toCamera # Signature: r1 = toCamera () Description: Convert the orxSTRUCTURE to an orxCAMERA (pointer cast) Params: Returns: type description orxCAMERA The converted orxCAMERA or nil C signature: #define orxCAMERA(STRUCTURE) orxSTRUCTURE:toCameraConst # Signature: r1 = toCameraConst () Description: Convert the orxSTRUCTURE to an orxCAMERA# (pointer cast) Params: Returns: type description orxCAMERA# The converted orxCAMERA or nil C signature: #define orxCAMERA(STRUCTURE) orxSTRUCTURE:toClock # Signature: r1 = toClock () Description: Convert the orxSTRUCTURE to an orxCLOCK (pointer cast) Params: Returns: type description orxCLOCK The converted orxCLOCK or nil C signature: #define orxCLOCK(STRUCTURE) orxSTRUCTURE:toClockConst # Signature: r1 = toClockConst () Description: Convert the orxSTRUCTURE to an orxCLOCK# (pointer cast) Params: Returns: type description orxCLOCK# The converted orxCLOCK or nil C signature: #define orxCLOCK(STRUCTURE) orxSTRUCTURE:toFX # Signature: r1 = toFX () Description: Convert the orxSTRUCTURE to an orxFX (pointer cast) Params: Returns: type description orxFX The converted orxFX or nil C signature: #define orxFX(STRUCTURE) orxSTRUCTURE:toFXConst # Signature: r1 = toFXConst () Description: Convert the orxSTRUCTURE to an orxFX# (pointer cast) Params: Returns: type description orxFX# The converted orxFX or nil C signature: #define orxFX(STRUCTURE) orxSTRUCTURE:toFXPointer # Signature: r1 = toFXPointer () Description: Convert the orxSTRUCTURE to an orxFXPOINTER (pointer cast) Params: Returns: type description orxFXPOINTER The converted orxFXPOINTER or nil C signature: #define orxFXPOINTER(STRUCTURE) orxSTRUCTURE:toFXPointerConst # Signature: r1 = toFXPointerConst () Description: Convert the orxSTRUCTURE to an orxFXPOINTER# (pointer cast) Params: Returns: type description orxFXPOINTER# The converted orxFXPOINTER or nil C signature: #define orxFXPOINTER(STRUCTURE) orxSTRUCTURE:toFont # Signature: r1 = toFont () Description: Convert the orxSTRUCTURE to an orxFONT (pointer cast) Params: Returns: type description orxFONT The converted orxFONT or nil C signature: #define orxFONT(STRUCTURE) orxSTRUCTURE:toFontConst # Signature: r1 = toFontConst () Description: Convert the orxSTRUCTURE to an orxFONT# (pointer cast) Params: Returns: type description orxFONT# The converted orxFONT or nil C signature: #define orxFONT(STRUCTURE) orxSTRUCTURE:toFrame # Signature: r1 = toFrame () Description: Convert the orxSTRUCTURE to an orxFRAME (pointer cast) Params: Returns: type description orxFRAME The converted orxFRAME or nil C signature: #define orxFRAME(STRUCTURE) orxSTRUCTURE:toFrameConst # Signature: r1 = toFrameConst () Description: Convert the orxSTRUCTURE to an orxFRAME# (pointer cast) Params: Returns: type description orxFRAME# The converted orxFRAME or nil C signature: #define orxFRAME(STRUCTURE) orxSTRUCTURE:toGraphic # Signature: r1 = toGraphic () Description: Convert the orxSTRUCTURE to an orxGRAPHIC (pointer cast) Params: Returns: type description orxGRAPHIC The converted orxGRAPHIC or nil C signature: #define orxGRAPHIC(STRUCTURE) orxSTRUCTURE:toGraphicConst # Signature: r1 = toGraphicConst () Description: Convert the orxSTRUCTURE to an orxGRAPHIC# (pointer cast) Params: Returns: type description orxGRAPHIC# The converted orxGRAPHIC or nil C signature: #define orxGRAPHIC(STRUCTURE) orxSTRUCTURE:toObject # Signature: r1 = toObject () Description: Convert the orxSTRUCTURE to an orxOBJECT (pointer cast) Params: Returns: type description orxOBJECT The converted orxOBJECT or nil C signature: #define orxOBJECT(STRUCTURE) orxSTRUCTURE:toObjectConst # Signature: r1 = toObjectConst () Description: Convert the orxSTRUCTURE to an orxOBJECT# (pointer cast) Params: Returns: type description orxOBJECT# The converted orxOBJECT or nil C signature: #define orxOBJECT(STRUCTURE) orxSTRUCTURE:toShader # Signature: r1 = toShader () Description: Convert the orxSTRUCTURE to an orxSHADER (pointer cast) Params: Returns: type description orxSHADER The converted orxSHADER or nil C signature: #define orxSHADER(STRUCTURE) orxSTRUCTURE:toShaderConst # Signature: r1 = toShaderConst () Description: Convert the orxSTRUCTURE to an orxSHADER# (pointer cast) Params: Returns: type description orxSHADER# The converted orxSHADER or nil C signature: #define orxSHADER(STRUCTURE) orxSTRUCTURE:toShaderPointer # Signature: r1 = toShaderPointer () Description: Convert the orxSTRUCTURE to an orxSHADERPOINTER (pointer cast) Params: Returns: type description orxSHADERPOINTER The converted orxSHADERPOINTER or nil C signature: #define orxSHADERPOINTER(STRUCTURE) orxSTRUCTURE:toShaderPointerConst # Signature: r1 = toShaderPointerConst () Description: Convert the orxSTRUCTURE to an orxSHADERPOINTER# (pointer cast) Params: Returns: type description orxSHADERPOINTER# The converted orxSHADERPOINTER or nil C signature: #define orxSHADERPOINTER(STRUCTURE) orxSTRUCTURE:toSound # Signature: r1 = toSound () Description: Convert the orxSTRUCTURE to an orxSOUND (pointer cast) Params: Returns: type description orxSOUND The converted orxSOUND or nil C signature: #define orxSOUND(STRUCTURE) orxSTRUCTURE:toSoundConst # Signature: r1 = toSoundConst () Description: Convert the orxSTRUCTURE to an orxSOUND# (pointer cast) Params: Returns: type description orxSOUND# The converted orxSOUND or nil C signature: #define orxSOUND(STRUCTURE) orxSTRUCTURE:toSoundPointer # Signature: r1 = toSoundPointer () Description: Convert the orxSTRUCTURE to an orxSOUNDPOINTER (pointer cast) Params: Returns: type description orxSOUNDPOINTER The converted orxSOUNDPOINTER or nil C signature: #define orxSOUNDPOINTER(STRUCTURE) orxSTRUCTURE:toSoundPointerConst # Signature: r1 = toSoundPointerConst () Description: Convert the orxSTRUCTURE to an orxSOUNDPOINTER# (pointer cast) Params: Returns: type description orxSOUNDPOINTER# The converted orxSOUNDPOINTER or nil C signature: #define orxSOUNDPOINTER(STRUCTURE) orxSTRUCTURE:toSpawner # Signature: r1 = toSpawner () Description: Convert the orxSTRUCTURE to an orxSPAWNER (pointer cast) Params: Returns: type description orxSPAWNER The converted orxSPAWNER or nil C signature: #define orxSPAWNER(STRUCTURE) orxSTRUCTURE:toSpawnerConst # Signature: r1 = toSpawnerConst () Description: Convert the orxSTRUCTURE to an orxSPAWNER# (pointer cast) Params: Returns: type description orxSPAWNER# The converted orxSPAWNER or nil C signature: #define orxSPAWNER(STRUCTURE) orxSTRUCTURE:toText # Signature: r1 = toText () Description: Convert the orxSTRUCTURE to an orxTEXT (pointer cast) Params: Returns: type description orxTEXT The converted orxTEXT or nil C signature: #define orxTEXT(STRUCTURE) orxSTRUCTURE:toTextConst # Signature: r1 = toTextConst () Description: Convert the orxSTRUCTURE to an orxTEXT# (pointer cast) Params: Returns: type description orxTEXT# The converted orxTEXT or nil C signature: #define orxTEXT(STRUCTURE) orxSTRUCTURE:toTexture # Signature: r1 = toTexture () Description: Convert the orxSTRUCTURE to an orxTEXTURE (pointer cast) Params: Returns: type description orxTEXTURE The converted orxTEXTURE or nil C signature: #define orxTEXTURE(STRUCTURE) orxSTRUCTURE:toTextureConst # Signature: r1 = toTextureConst () Description: Convert the orxSTRUCTURE to an orxTEXTURE# (pointer cast) Params: Returns: type description orxTEXTURE# The converted orxTEXTURE or nil C signature: #define orxTEXTURE(STRUCTURE) orxSTRUCTURE:toTimeline # Signature: r1 = toTimeline () Description: Convert the orxSTRUCTURE to an orxTIMELINE (pointer cast) Params: Returns: type description orxTIMELINE The converted orxTIMELINE or nil C signature: #define orxTIMELINE(STRUCTURE) orxSTRUCTURE:toTimelineConst # Signature: r1 = toTimelineConst () Description: Convert the orxSTRUCTURE to an orxTIMELINE# (pointer cast) Params: Returns: type description orxTIMELINE# The converted orxTIMELINE or nil C signature: #define orxTIMELINE(STRUCTURE) orxSTRUCTURE:toViewport # Signature: r1 = toViewport () Description: Convert the orxSTRUCTURE to an orxVIEWPORT (pointer cast) Params: Returns: type description orxVIEWPORT The converted orxVIEWPORT or nil C signature: #define orxVIEWPORT(STRUCTURE) orxSTRUCTURE:toViewportConst # Signature: r1 = toViewportConst () Description: Convert the orxSTRUCTURE to an orxVIEWPORT# (pointer cast) Params: Returns: type description orxVIEWPORT# The converted orxVIEWPORT or nil C signature: #define orxVIEWPORT(STRUCTURE) orxSTRUCTURE:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSTRUCTURE"},{"location":"types/orxSTRUCTURE.html#type-orxstructure","text":"","title":"type orxSTRUCTURE"},{"location":"types/orxSTRUCTURE.html#methods","text":"","title":"Methods"},{"location":"types/orxSTRUCTURE.html#orxstructureaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxSTRUCTURE:addr"},{"location":"types/orxSTRUCTURE.html#orxstructureaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxSTRUCTURE:aeq"},{"location":"types/orxSTRUCTURE.html#orxstructureasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxSTRUCTURE:asVoid"},{"location":"types/orxSTRUCTURE.html#orxstructuretoanim","text":"Signature: r1 = toAnim () Description: Convert the orxSTRUCTURE to an orxANIM (pointer cast) Params: Returns: type description orxANIM The converted orxANIM or nil C signature: #define orxANIM(STRUCTURE)","title":"orxSTRUCTURE:toAnim"},{"location":"types/orxSTRUCTURE.html#orxstructuretoanimconst","text":"Signature: r1 = toAnimConst () Description: Convert the orxSTRUCTURE to an orxANIM# (pointer cast) Params: Returns: type description orxANIM# The converted orxANIM or nil C signature: #define orxANIM(STRUCTURE)","title":"orxSTRUCTURE:toAnimConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretoanimpointer","text":"Signature: r1 = toAnimPointer () Description: Convert the orxSTRUCTURE to an orxANIMPOINTER (pointer cast) Params: Returns: type description orxANIMPOINTER The converted orxANIMPOINTER or nil C signature: #define orxANIMPOINTER(STRUCTURE)","title":"orxSTRUCTURE:toAnimPointer"},{"location":"types/orxSTRUCTURE.html#orxstructuretoanimpointerconst","text":"Signature: r1 = toAnimPointerConst () Description: Convert the orxSTRUCTURE to an orxANIMPOINTER# (pointer cast) Params: Returns: type description orxANIMPOINTER# The converted orxANIMPOINTER or nil C signature: #define orxANIMPOINTER(STRUCTURE)","title":"orxSTRUCTURE:toAnimPointerConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretoanimset","text":"Signature: r1 = toAnimSet () Description: Convert the orxSTRUCTURE to an orxANIMSET (pointer cast) Params: Returns: type description orxANIMSET The converted orxANIMSET or nil C signature: #define orxANIMSET(STRUCTURE)","title":"orxSTRUCTURE:toAnimSet"},{"location":"types/orxSTRUCTURE.html#orxstructuretoanimsetconst","text":"Signature: r1 = toAnimSetConst () Description: Convert the orxSTRUCTURE to an orxANIMSET# (pointer cast) Params: Returns: type description orxANIMSET# The converted orxANIMSET or nil C signature: #define orxANIMSET(STRUCTURE)","title":"orxSTRUCTURE:toAnimSetConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretobody","text":"Signature: r1 = toBody () Description: Convert the orxSTRUCTURE to an orxBODY (pointer cast) Params: Returns: type description orxBODY The converted orxBODY or nil C signature: #define orxBODY(STRUCTURE)","title":"orxSTRUCTURE:toBody"},{"location":"types/orxSTRUCTURE.html#orxstructuretobodyconst","text":"Signature: r1 = toBodyConst () Description: Convert the orxSTRUCTURE to an orxBODY# (pointer cast) Params: Returns: type description orxBODY# The converted orxBODY or nil C signature: #define orxBODY(STRUCTURE)","title":"orxSTRUCTURE:toBodyConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretocamera","text":"Signature: r1 = toCamera () Description: Convert the orxSTRUCTURE to an orxCAMERA (pointer cast) Params: Returns: type description orxCAMERA The converted orxCAMERA or nil C signature: #define orxCAMERA(STRUCTURE)","title":"orxSTRUCTURE:toCamera"},{"location":"types/orxSTRUCTURE.html#orxstructuretocameraconst","text":"Signature: r1 = toCameraConst () Description: Convert the orxSTRUCTURE to an orxCAMERA# (pointer cast) Params: Returns: type description orxCAMERA# The converted orxCAMERA or nil C signature: #define orxCAMERA(STRUCTURE)","title":"orxSTRUCTURE:toCameraConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretoclock","text":"Signature: r1 = toClock () Description: Convert the orxSTRUCTURE to an orxCLOCK (pointer cast) Params: Returns: type description orxCLOCK The converted orxCLOCK or nil C signature: #define orxCLOCK(STRUCTURE)","title":"orxSTRUCTURE:toClock"},{"location":"types/orxSTRUCTURE.html#orxstructuretoclockconst","text":"Signature: r1 = toClockConst () Description: Convert the orxSTRUCTURE to an orxCLOCK# (pointer cast) Params: Returns: type description orxCLOCK# The converted orxCLOCK or nil C signature: #define orxCLOCK(STRUCTURE)","title":"orxSTRUCTURE:toClockConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretofx","text":"Signature: r1 = toFX () Description: Convert the orxSTRUCTURE to an orxFX (pointer cast) Params: Returns: type description orxFX The converted orxFX or nil C signature: #define orxFX(STRUCTURE)","title":"orxSTRUCTURE:toFX"},{"location":"types/orxSTRUCTURE.html#orxstructuretofxconst","text":"Signature: r1 = toFXConst () Description: Convert the orxSTRUCTURE to an orxFX# (pointer cast) Params: Returns: type description orxFX# The converted orxFX or nil C signature: #define orxFX(STRUCTURE)","title":"orxSTRUCTURE:toFXConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretofxpointer","text":"Signature: r1 = toFXPointer () Description: Convert the orxSTRUCTURE to an orxFXPOINTER (pointer cast) Params: Returns: type description orxFXPOINTER The converted orxFXPOINTER or nil C signature: #define orxFXPOINTER(STRUCTURE)","title":"orxSTRUCTURE:toFXPointer"},{"location":"types/orxSTRUCTURE.html#orxstructuretofxpointerconst","text":"Signature: r1 = toFXPointerConst () Description: Convert the orxSTRUCTURE to an orxFXPOINTER# (pointer cast) Params: Returns: type description orxFXPOINTER# The converted orxFXPOINTER or nil C signature: #define orxFXPOINTER(STRUCTURE)","title":"orxSTRUCTURE:toFXPointerConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretofont","text":"Signature: r1 = toFont () Description: Convert the orxSTRUCTURE to an orxFONT (pointer cast) Params: Returns: type description orxFONT The converted orxFONT or nil C signature: #define orxFONT(STRUCTURE)","title":"orxSTRUCTURE:toFont"},{"location":"types/orxSTRUCTURE.html#orxstructuretofontconst","text":"Signature: r1 = toFontConst () Description: Convert the orxSTRUCTURE to an orxFONT# (pointer cast) Params: Returns: type description orxFONT# The converted orxFONT or nil C signature: #define orxFONT(STRUCTURE)","title":"orxSTRUCTURE:toFontConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretoframe","text":"Signature: r1 = toFrame () Description: Convert the orxSTRUCTURE to an orxFRAME (pointer cast) Params: Returns: type description orxFRAME The converted orxFRAME or nil C signature: #define orxFRAME(STRUCTURE)","title":"orxSTRUCTURE:toFrame"},{"location":"types/orxSTRUCTURE.html#orxstructuretoframeconst","text":"Signature: r1 = toFrameConst () Description: Convert the orxSTRUCTURE to an orxFRAME# (pointer cast) Params: Returns: type description orxFRAME# The converted orxFRAME or nil C signature: #define orxFRAME(STRUCTURE)","title":"orxSTRUCTURE:toFrameConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretographic","text":"Signature: r1 = toGraphic () Description: Convert the orxSTRUCTURE to an orxGRAPHIC (pointer cast) Params: Returns: type description orxGRAPHIC The converted orxGRAPHIC or nil C signature: #define orxGRAPHIC(STRUCTURE)","title":"orxSTRUCTURE:toGraphic"},{"location":"types/orxSTRUCTURE.html#orxstructuretographicconst","text":"Signature: r1 = toGraphicConst () Description: Convert the orxSTRUCTURE to an orxGRAPHIC# (pointer cast) Params: Returns: type description orxGRAPHIC# The converted orxGRAPHIC or nil C signature: #define orxGRAPHIC(STRUCTURE)","title":"orxSTRUCTURE:toGraphicConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretoobject","text":"Signature: r1 = toObject () Description: Convert the orxSTRUCTURE to an orxOBJECT (pointer cast) Params: Returns: type description orxOBJECT The converted orxOBJECT or nil C signature: #define orxOBJECT(STRUCTURE)","title":"orxSTRUCTURE:toObject"},{"location":"types/orxSTRUCTURE.html#orxstructuretoobjectconst","text":"Signature: r1 = toObjectConst () Description: Convert the orxSTRUCTURE to an orxOBJECT# (pointer cast) Params: Returns: type description orxOBJECT# The converted orxOBJECT or nil C signature: #define orxOBJECT(STRUCTURE)","title":"orxSTRUCTURE:toObjectConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretoshader","text":"Signature: r1 = toShader () Description: Convert the orxSTRUCTURE to an orxSHADER (pointer cast) Params: Returns: type description orxSHADER The converted orxSHADER or nil C signature: #define orxSHADER(STRUCTURE)","title":"orxSTRUCTURE:toShader"},{"location":"types/orxSTRUCTURE.html#orxstructuretoshaderconst","text":"Signature: r1 = toShaderConst () Description: Convert the orxSTRUCTURE to an orxSHADER# (pointer cast) Params: Returns: type description orxSHADER# The converted orxSHADER or nil C signature: #define orxSHADER(STRUCTURE)","title":"orxSTRUCTURE:toShaderConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretoshaderpointer","text":"Signature: r1 = toShaderPointer () Description: Convert the orxSTRUCTURE to an orxSHADERPOINTER (pointer cast) Params: Returns: type description orxSHADERPOINTER The converted orxSHADERPOINTER or nil C signature: #define orxSHADERPOINTER(STRUCTURE)","title":"orxSTRUCTURE:toShaderPointer"},{"location":"types/orxSTRUCTURE.html#orxstructuretoshaderpointerconst","text":"Signature: r1 = toShaderPointerConst () Description: Convert the orxSTRUCTURE to an orxSHADERPOINTER# (pointer cast) Params: Returns: type description orxSHADERPOINTER# The converted orxSHADERPOINTER or nil C signature: #define orxSHADERPOINTER(STRUCTURE)","title":"orxSTRUCTURE:toShaderPointerConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretosound","text":"Signature: r1 = toSound () Description: Convert the orxSTRUCTURE to an orxSOUND (pointer cast) Params: Returns: type description orxSOUND The converted orxSOUND or nil C signature: #define orxSOUND(STRUCTURE)","title":"orxSTRUCTURE:toSound"},{"location":"types/orxSTRUCTURE.html#orxstructuretosoundconst","text":"Signature: r1 = toSoundConst () Description: Convert the orxSTRUCTURE to an orxSOUND# (pointer cast) Params: Returns: type description orxSOUND# The converted orxSOUND or nil C signature: #define orxSOUND(STRUCTURE)","title":"orxSTRUCTURE:toSoundConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretosoundpointer","text":"Signature: r1 = toSoundPointer () Description: Convert the orxSTRUCTURE to an orxSOUNDPOINTER (pointer cast) Params: Returns: type description orxSOUNDPOINTER The converted orxSOUNDPOINTER or nil C signature: #define orxSOUNDPOINTER(STRUCTURE)","title":"orxSTRUCTURE:toSoundPointer"},{"location":"types/orxSTRUCTURE.html#orxstructuretosoundpointerconst","text":"Signature: r1 = toSoundPointerConst () Description: Convert the orxSTRUCTURE to an orxSOUNDPOINTER# (pointer cast) Params: Returns: type description orxSOUNDPOINTER# The converted orxSOUNDPOINTER or nil C signature: #define orxSOUNDPOINTER(STRUCTURE)","title":"orxSTRUCTURE:toSoundPointerConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretospawner","text":"Signature: r1 = toSpawner () Description: Convert the orxSTRUCTURE to an orxSPAWNER (pointer cast) Params: Returns: type description orxSPAWNER The converted orxSPAWNER or nil C signature: #define orxSPAWNER(STRUCTURE)","title":"orxSTRUCTURE:toSpawner"},{"location":"types/orxSTRUCTURE.html#orxstructuretospawnerconst","text":"Signature: r1 = toSpawnerConst () Description: Convert the orxSTRUCTURE to an orxSPAWNER# (pointer cast) Params: Returns: type description orxSPAWNER# The converted orxSPAWNER or nil C signature: #define orxSPAWNER(STRUCTURE)","title":"orxSTRUCTURE:toSpawnerConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretotext","text":"Signature: r1 = toText () Description: Convert the orxSTRUCTURE to an orxTEXT (pointer cast) Params: Returns: type description orxTEXT The converted orxTEXT or nil C signature: #define orxTEXT(STRUCTURE)","title":"orxSTRUCTURE:toText"},{"location":"types/orxSTRUCTURE.html#orxstructuretotextconst","text":"Signature: r1 = toTextConst () Description: Convert the orxSTRUCTURE to an orxTEXT# (pointer cast) Params: Returns: type description orxTEXT# The converted orxTEXT or nil C signature: #define orxTEXT(STRUCTURE)","title":"orxSTRUCTURE:toTextConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretotexture","text":"Signature: r1 = toTexture () Description: Convert the orxSTRUCTURE to an orxTEXTURE (pointer cast) Params: Returns: type description orxTEXTURE The converted orxTEXTURE or nil C signature: #define orxTEXTURE(STRUCTURE)","title":"orxSTRUCTURE:toTexture"},{"location":"types/orxSTRUCTURE.html#orxstructuretotextureconst","text":"Signature: r1 = toTextureConst () Description: Convert the orxSTRUCTURE to an orxTEXTURE# (pointer cast) Params: Returns: type description orxTEXTURE# The converted orxTEXTURE or nil C signature: #define orxTEXTURE(STRUCTURE)","title":"orxSTRUCTURE:toTextureConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretotimeline","text":"Signature: r1 = toTimeline () Description: Convert the orxSTRUCTURE to an orxTIMELINE (pointer cast) Params: Returns: type description orxTIMELINE The converted orxTIMELINE or nil C signature: #define orxTIMELINE(STRUCTURE)","title":"orxSTRUCTURE:toTimeline"},{"location":"types/orxSTRUCTURE.html#orxstructuretotimelineconst","text":"Signature: r1 = toTimelineConst () Description: Convert the orxSTRUCTURE to an orxTIMELINE# (pointer cast) Params: Returns: type description orxTIMELINE# The converted orxTIMELINE or nil C signature: #define orxTIMELINE(STRUCTURE)","title":"orxSTRUCTURE:toTimelineConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretoviewport","text":"Signature: r1 = toViewport () Description: Convert the orxSTRUCTURE to an orxVIEWPORT (pointer cast) Params: Returns: type description orxVIEWPORT The converted orxVIEWPORT or nil C signature: #define orxVIEWPORT(STRUCTURE)","title":"orxSTRUCTURE:toViewport"},{"location":"types/orxSTRUCTURE.html#orxstructuretoviewportconst","text":"Signature: r1 = toViewportConst () Description: Convert the orxSTRUCTURE to an orxVIEWPORT# (pointer cast) Params: Returns: type description orxVIEWPORT# The converted orxVIEWPORT or nil C signature: #define orxVIEWPORT(STRUCTURE)","title":"orxSTRUCTURE:toViewportConst"},{"location":"types/orxSTRUCTURE.html#orxstructuretype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxSTRUCTURE:type"},{"location":"types/orxTEXT.html","text":"type orxTEXT # Methods # orxTEXT:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxTEXT:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxTEXT:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxTEXT:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxTEXT:delete # Signature: r1 = delete () Description: Deletes a text (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxText_Delete ( orxTEXT * _pstText ) orxTEXT:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxTEXT:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxTEXT:getFont # Signature: r1 = getFont () Description: Gets text font Params: Returns: type description orxFONT Text font / nil C signature: orxFONT * orxText_GetFont ( const orxTEXT * _pstText ) orxTEXT:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxTEXT:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxTEXT:getLineCount # Signature: r1 = getLineCount () Description: Gets text's line count Params: Returns: type description integer integer (u32) C signature: orxU32 orxText_GetLineCount ( const orxTEXT * _pstText ) orxTEXT:getLineSize # Signature: r1 , r2 , r3 = getLineSize ( line ) Description: Gets text's line size Params: name type description line integer Line index Returns: type description orxSTATUS success / failure number Line's width number Line's height C signature: orxSTATUS orxText_GetLineSize ( const orxTEXT * _pstText , orxU32 _u32Line , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight ) orxTEXT:getName # Signature: r1 = getName () Description: Gets text name Params: Returns: type description string Text name / nil C signature: const orxSTRING orxText_GetName ( const orxTEXT * _pstText ) orxTEXT:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxTEXT:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxTEXT:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxTEXT:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxTEXT:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxTEXT:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxTEXT:getSize # Signature: r1 , r2 , r3 = getSize () Description: Gets text size Params: Returns: type description orxSTATUS success / failure number Text's width number Text's height C signature: orxSTATUS orxText_GetSize ( const orxTEXT * _pstText , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight ) orxTEXT:getString # Signature: r1 = getString () Description: Gets text string Params: Returns: type description string Text string / empty string C signature: const orxSTRING orxText_GetString ( const orxTEXT * _pstText ) orxTEXT:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxTEXT:isFixedSize # Signature: r1 = isFixedSize () Description: Is text's size fixed? (ie. manually constrained with orxText_SetSize()) Params: Returns: type description boolean true / false C signature: orxBOOL orxText_IsFixedSize ( const orxTEXT * _pstText ) orxTEXT:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxTEXT:setFont # Signature: r1 = setFont ( font ) Description: Sets text font (non-const self only) Params: name type description font orxFONT Font / nil to use default Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxText_SetFont ( orxTEXT * _pstText , orxFONT * _pstFont ) orxTEXT:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxTEXT:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxTEXT:setSize # Signature: r1 , r2 = setSize ( width , height ) Description: Sets text's size, will lead to reformatting if text doesn't fit (pass width = -1.0f to restore text's original size, ie. unconstrained) (non-const self only) Params: name type description width number Max width for the text, remove any size constraint if negative height number Max height for the text, ignored if negative (ie. unconstrained height) Returns: type description orxSTATUS success / failure string Text that wouldn't fit inside the box if height is provided, empty string if no extra, nil to ignore C signature: orxSTATUS orxText_SetSize ( orxTEXT * _pstText , orxFLOAT _fWidth , orxFLOAT _fHeight , const orxSTRING * _pzExtra ) orxTEXT:setString # Signature: r1 = setString ( string ) Description: Sets text string (non-const self only) Params: name type description string string String to contain Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxText_SetString ( orxTEXT * _pstText , const orxSTRING _zString ) orxTEXT:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxTEXT:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxTEXT:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxTEXT:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxTEXT"},{"location":"types/orxTEXT.html#type-orxtext","text":"","title":"type orxTEXT"},{"location":"types/orxTEXT.html#methods","text":"","title":"Methods"},{"location":"types/orxTEXT.html#orxtextaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxTEXT:addr"},{"location":"types/orxTEXT.html#orxtextaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxTEXT:aeq"},{"location":"types/orxTEXT.html#orxtextasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxTEXT:asVoid"},{"location":"types/orxTEXT.html#orxtextdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxTEXT:decreaseCount"},{"location":"types/orxTEXT.html#orxtextdelete","text":"Signature: r1 = delete () Description: Deletes a text (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxText_Delete ( orxTEXT * _pstText )","title":"orxTEXT:delete"},{"location":"types/orxTEXT.html#orxtextgetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxTEXT:getChild"},{"location":"types/orxTEXT.html#orxtextgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxTEXT:getFlags"},{"location":"types/orxTEXT.html#orxtextgetfont","text":"Signature: r1 = getFont () Description: Gets text font Params: Returns: type description orxFONT Text font / nil C signature: orxFONT * orxText_GetFont ( const orxTEXT * _pstText )","title":"orxTEXT:getFont"},{"location":"types/orxTEXT.html#orxtextgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxTEXT:getGUID"},{"location":"types/orxTEXT.html#orxtextgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxTEXT:getID"},{"location":"types/orxTEXT.html#orxtextgetlinecount","text":"Signature: r1 = getLineCount () Description: Gets text's line count Params: Returns: type description integer integer (u32) C signature: orxU32 orxText_GetLineCount ( const orxTEXT * _pstText )","title":"orxTEXT:getLineCount"},{"location":"types/orxTEXT.html#orxtextgetlinesize","text":"Signature: r1 , r2 , r3 = getLineSize ( line ) Description: Gets text's line size Params: name type description line integer Line index Returns: type description orxSTATUS success / failure number Line's width number Line's height C signature: orxSTATUS orxText_GetLineSize ( const orxTEXT * _pstText , orxU32 _u32Line , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight )","title":"orxTEXT:getLineSize"},{"location":"types/orxTEXT.html#orxtextgetname","text":"Signature: r1 = getName () Description: Gets text name Params: Returns: type description string Text name / nil C signature: const orxSTRING orxText_GetName ( const orxTEXT * _pstText )","title":"orxTEXT:getName"},{"location":"types/orxTEXT.html#orxtextgetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxTEXT:getNext"},{"location":"types/orxTEXT.html#orxtextgetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxTEXT:getOwner"},{"location":"types/orxTEXT.html#orxtextgetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxTEXT:getParent"},{"location":"types/orxTEXT.html#orxtextgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxTEXT:getPrevious"},{"location":"types/orxTEXT.html#orxtextgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxTEXT:getRefCount"},{"location":"types/orxTEXT.html#orxtextgetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxTEXT:getSibling"},{"location":"types/orxTEXT.html#orxtextgetsize","text":"Signature: r1 , r2 , r3 = getSize () Description: Gets text size Params: Returns: type description orxSTATUS success / failure number Text's width number Text's height C signature: orxSTATUS orxText_GetSize ( const orxTEXT * _pstText , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight )","title":"orxTEXT:getSize"},{"location":"types/orxTEXT.html#orxtextgetstring","text":"Signature: r1 = getString () Description: Gets text string Params: Returns: type description string Text string / empty string C signature: const orxSTRING orxText_GetString ( const orxTEXT * _pstText )","title":"orxTEXT:getString"},{"location":"types/orxTEXT.html#orxtextincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxTEXT:increaseCount"},{"location":"types/orxTEXT.html#orxtextisfixedsize","text":"Signature: r1 = isFixedSize () Description: Is text's size fixed? (ie. manually constrained with orxText_SetSize()) Params: Returns: type description boolean true / false C signature: orxBOOL orxText_IsFixedSize ( const orxTEXT * _pstText )","title":"orxTEXT:isFixedSize"},{"location":"types/orxTEXT.html#orxtextsetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxTEXT:setFlags"},{"location":"types/orxTEXT.html#orxtextsetfont","text":"Signature: r1 = setFont ( font ) Description: Sets text font (non-const self only) Params: name type description font orxFONT Font / nil to use default Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxText_SetFont ( orxTEXT * _pstText , orxFONT * _pstFont )","title":"orxTEXT:setFont"},{"location":"types/orxTEXT.html#orxtextsetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxTEXT:setOwner"},{"location":"types/orxTEXT.html#orxtextsetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxTEXT:setParent"},{"location":"types/orxTEXT.html#orxtextsetsize","text":"Signature: r1 , r2 = setSize ( width , height ) Description: Sets text's size, will lead to reformatting if text doesn't fit (pass width = -1.0f to restore text's original size, ie. unconstrained) (non-const self only) Params: name type description width number Max width for the text, remove any size constraint if negative height number Max height for the text, ignored if negative (ie. unconstrained height) Returns: type description orxSTATUS success / failure string Text that wouldn't fit inside the box if height is provided, empty string if no extra, nil to ignore C signature: orxSTATUS orxText_SetSize ( orxTEXT * _pstText , orxFLOAT _fWidth , orxFLOAT _fHeight , const orxSTRING * _pzExtra )","title":"orxTEXT:setSize"},{"location":"types/orxTEXT.html#orxtextsetstring","text":"Signature: r1 = setString ( string ) Description: Sets text string (non-const self only) Params: name type description string string String to contain Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxText_SetString ( orxTEXT * _pstText , const orxSTRING _zString )","title":"orxTEXT:setString"},{"location":"types/orxTEXT.html#orxtexttestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxTEXT:testAllFlags"},{"location":"types/orxTEXT.html#orxtexttestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxTEXT:testFlags"},{"location":"types/orxTEXT.html#orxtexttype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxTEXT:type"},{"location":"types/orxTEXT.html#orxtextupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxTEXT:update"},{"location":"types/orxTEXTURE.html","text":"type orxTEXTURE # Methods # orxTEXTURE:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxTEXTURE:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxTEXTURE:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxTEXTURE:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxTEXTURE:delete # Signature: r1 = delete () Description: Deletes a texture (and its referenced bitmap) (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_Delete ( orxTEXTURE * _pstTexture ) orxTEXTURE:getBitmap # Signature: r1 = getBitmap () Description: Gets texture bitmap Params: Returns: type description orxBITMAP orxBITMAP / nil C signature: orxBITMAP * orxTexture_GetBitmap ( const orxTEXTURE * _pstTexture ) orxTEXTURE:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxTEXTURE:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxTEXTURE:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxTEXTURE:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxTEXTURE:getName # Signature: r1 = getName () Description: Gets texture name Params: Returns: type description string Texture name / empty string C signature: const orxSTRING orxTexture_GetName ( const orxTEXTURE * _pstTexture ) orxTEXTURE:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxTEXTURE:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxTEXTURE:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxTEXTURE:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxTEXTURE:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxTEXTURE:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxTEXTURE:getSize # Signature: r1 , r2 , r3 = getSize () Description: Gets texture size Params: Returns: type description orxSTATUS success / failure number Texture's width number Texture's height C signature: orxSTATUS orxTexture_GetSize ( const orxTEXTURE * _pstTexture , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight ) orxTEXTURE:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxTEXTURE:linkBitmap # Signature: r1 = linkBitmap ( bitmap , dataname , transferownership ) Description: Links a bitmap (non-const self only) Params: name type description bitmap orxBITMAP# Bitmap to link dataname string Name associated with the bitmap (usually filename) transferownership boolean If set to true, the texture will become the bitmap's owner and will have it deleted upon its own deletion Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_LinkBitmap ( orxTEXTURE * _pstTexture , const orxBITMAP * _pstBitmap , const orxSTRING _zDataName , orxBOOL _bTransferOwnership ) orxTEXTURE:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxTEXTURE:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxTEXTURE:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxTEXTURE:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxTEXTURE:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxTEXTURE:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxTEXTURE:unlinkBitmap # Signature: r1 = unlinkBitmap () Description: Unlinks (and deletes if not used anymore) a bitmap (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_UnlinkBitmap ( orxTEXTURE * _pstTexture ) orxTEXTURE:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxTEXTURE"},{"location":"types/orxTEXTURE.html#type-orxtexture","text":"","title":"type orxTEXTURE"},{"location":"types/orxTEXTURE.html#methods","text":"","title":"Methods"},{"location":"types/orxTEXTURE.html#orxtextureaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxTEXTURE:addr"},{"location":"types/orxTEXTURE.html#orxtextureaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxTEXTURE:aeq"},{"location":"types/orxTEXTURE.html#orxtextureasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxTEXTURE:asVoid"},{"location":"types/orxTEXTURE.html#orxtexturedecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxTEXTURE:decreaseCount"},{"location":"types/orxTEXTURE.html#orxtexturedelete","text":"Signature: r1 = delete () Description: Deletes a texture (and its referenced bitmap) (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_Delete ( orxTEXTURE * _pstTexture )","title":"orxTEXTURE:delete"},{"location":"types/orxTEXTURE.html#orxtexturegetbitmap","text":"Signature: r1 = getBitmap () Description: Gets texture bitmap Params: Returns: type description orxBITMAP orxBITMAP / nil C signature: orxBITMAP * orxTexture_GetBitmap ( const orxTEXTURE * _pstTexture )","title":"orxTEXTURE:getBitmap"},{"location":"types/orxTEXTURE.html#orxtexturegetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxTEXTURE:getChild"},{"location":"types/orxTEXTURE.html#orxtexturegetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxTEXTURE:getFlags"},{"location":"types/orxTEXTURE.html#orxtexturegetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxTEXTURE:getGUID"},{"location":"types/orxTEXTURE.html#orxtexturegetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxTEXTURE:getID"},{"location":"types/orxTEXTURE.html#orxtexturegetname","text":"Signature: r1 = getName () Description: Gets texture name Params: Returns: type description string Texture name / empty string C signature: const orxSTRING orxTexture_GetName ( const orxTEXTURE * _pstTexture )","title":"orxTEXTURE:getName"},{"location":"types/orxTEXTURE.html#orxtexturegetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxTEXTURE:getNext"},{"location":"types/orxTEXTURE.html#orxtexturegetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxTEXTURE:getOwner"},{"location":"types/orxTEXTURE.html#orxtexturegetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxTEXTURE:getParent"},{"location":"types/orxTEXTURE.html#orxtexturegetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxTEXTURE:getPrevious"},{"location":"types/orxTEXTURE.html#orxtexturegetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxTEXTURE:getRefCount"},{"location":"types/orxTEXTURE.html#orxtexturegetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxTEXTURE:getSibling"},{"location":"types/orxTEXTURE.html#orxtexturegetsize","text":"Signature: r1 , r2 , r3 = getSize () Description: Gets texture size Params: Returns: type description orxSTATUS success / failure number Texture's width number Texture's height C signature: orxSTATUS orxTexture_GetSize ( const orxTEXTURE * _pstTexture , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight )","title":"orxTEXTURE:getSize"},{"location":"types/orxTEXTURE.html#orxtextureincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxTEXTURE:increaseCount"},{"location":"types/orxTEXTURE.html#orxtexturelinkbitmap","text":"Signature: r1 = linkBitmap ( bitmap , dataname , transferownership ) Description: Links a bitmap (non-const self only) Params: name type description bitmap orxBITMAP# Bitmap to link dataname string Name associated with the bitmap (usually filename) transferownership boolean If set to true, the texture will become the bitmap's owner and will have it deleted upon its own deletion Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_LinkBitmap ( orxTEXTURE * _pstTexture , const orxBITMAP * _pstBitmap , const orxSTRING _zDataName , orxBOOL _bTransferOwnership )","title":"orxTEXTURE:linkBitmap"},{"location":"types/orxTEXTURE.html#orxtexturesetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxTEXTURE:setFlags"},{"location":"types/orxTEXTURE.html#orxtexturesetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxTEXTURE:setOwner"},{"location":"types/orxTEXTURE.html#orxtexturesetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxTEXTURE:setParent"},{"location":"types/orxTEXTURE.html#orxtexturetestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxTEXTURE:testAllFlags"},{"location":"types/orxTEXTURE.html#orxtexturetestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxTEXTURE:testFlags"},{"location":"types/orxTEXTURE.html#orxtexturetype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxTEXTURE:type"},{"location":"types/orxTEXTURE.html#orxtextureunlinkbitmap","text":"Signature: r1 = unlinkBitmap () Description: Unlinks (and deletes if not used anymore) a bitmap (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTexture_UnlinkBitmap ( orxTEXTURE * _pstTexture )","title":"orxTEXTURE:unlinkBitmap"},{"location":"types/orxTEXTURE.html#orxtextureupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxTEXTURE:update"},{"location":"types/orxTHREAD_SEMAPHORE.html","text":"type orxTHREAD_SEMAPHORE # Methods # orxTHREAD_SEMAPHORE:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxTHREAD_SEMAPHORE:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxTHREAD_SEMAPHORE:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxTHREAD_SEMAPHORE:delete # Signature: r1 = delete () Description: Deletes a semaphore (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_DeleteSemaphore ( orxTHREAD_SEMAPHORE * _pstSemaphore ) orxTHREAD_SEMAPHORE:signal # Signature: r1 = signal () Description: Signals a semaphore (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_SignalSemaphore ( orxTHREAD_SEMAPHORE * _pstSemaphore ) orxTHREAD_SEMAPHORE:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxTHREAD_SEMAPHORE:wait # Signature: r1 = wait () Description: Waits for a semaphore (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_WaitSemaphore ( orxTHREAD_SEMAPHORE * _pstSemaphore )","title":"orxTHREAD_SEMAPHORE"},{"location":"types/orxTHREAD_SEMAPHORE.html#type-orxthread_semaphore","text":"","title":"type orxTHREAD_SEMAPHORE"},{"location":"types/orxTHREAD_SEMAPHORE.html#methods","text":"","title":"Methods"},{"location":"types/orxTHREAD_SEMAPHORE.html#orxthread_semaphoreaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxTHREAD_SEMAPHORE:addr"},{"location":"types/orxTHREAD_SEMAPHORE.html#orxthread_semaphoreaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxTHREAD_SEMAPHORE:aeq"},{"location":"types/orxTHREAD_SEMAPHORE.html#orxthread_semaphoreasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxTHREAD_SEMAPHORE:asVoid"},{"location":"types/orxTHREAD_SEMAPHORE.html#orxthread_semaphoredelete","text":"Signature: r1 = delete () Description: Deletes a semaphore (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_DeleteSemaphore ( orxTHREAD_SEMAPHORE * _pstSemaphore )","title":"orxTHREAD_SEMAPHORE:delete"},{"location":"types/orxTHREAD_SEMAPHORE.html#orxthread_semaphoresignal","text":"Signature: r1 = signal () Description: Signals a semaphore (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_SignalSemaphore ( orxTHREAD_SEMAPHORE * _pstSemaphore )","title":"orxTHREAD_SEMAPHORE:signal"},{"location":"types/orxTHREAD_SEMAPHORE.html#orxthread_semaphoretype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxTHREAD_SEMAPHORE:type"},{"location":"types/orxTHREAD_SEMAPHORE.html#orxthread_semaphorewait","text":"Signature: r1 = wait () Description: Waits for a semaphore (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxThread_WaitSemaphore ( orxTHREAD_SEMAPHORE * _pstSemaphore )","title":"orxTHREAD_SEMAPHORE:wait"},{"location":"types/orxTIMELINE.html","text":"type orxTIMELINE # Methods # orxTIMELINE:addTrackFromConfig # Signature: r1 = addTrackFromConfig ( trackid ) Description: Adds a track to a TimeLine from config (non-const self only) Params: name type description trackid string Config ID Returns: type description orxSTATUS C signature: orxSTATUS orxTimeLine_AddTrackFromConfig ( orxTIMELINE * _pstTimeLine , const orxSTRING _zTrackID ) orxTIMELINE:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxTIMELINE:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxTIMELINE:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxTIMELINE:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxTIMELINE:delete # Signature: r1 = delete () Description: Deletes a TimeLine (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTimeLine_Delete ( orxTIMELINE * _pstTimeLine ) orxTIMELINE:enable # Signature: enable ( enable ) Description: Enables/disables a TimeLine (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxTimeLine_Enable ( orxTIMELINE * _pstTimeLine , orxBOOL _bEnable ) orxTIMELINE:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxTIMELINE:getCount # Signature: r1 = getCount () Description: Gets how many tracks are currently in use Params: Returns: type description integer integer (u32) C signature: orxU32 orxTimeLine_GetCount ( const orxTIMELINE * _pstTimeLine ) orxTIMELINE:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxTIMELINE:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxTIMELINE:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxTIMELINE:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxTIMELINE:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxTIMELINE:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxTIMELINE:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxTIMELINE:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxTIMELINE:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxTIMELINE:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxTIMELINE:isEnabled # Signature: r1 = isEnabled () Description: Is TimeLine enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxTimeLine_IsEnabled ( const orxTIMELINE * _pstTimeLine ) orxTIMELINE:removeTrackFromConfig # Signature: r1 = removeTrackFromConfig ( trackid ) Description: Removes a track using its config ID (non-const self only) Params: name type description trackid string Config ID of the track to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTimeLine_RemoveTrackFromConfig ( orxTIMELINE * _pstTimeLine , const orxSTRING _zTrackID ) orxTIMELINE:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxTIMELINE:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxTIMELINE:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxTIMELINE:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxTIMELINE:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxTIMELINE:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxTIMELINE:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxTIMELINE"},{"location":"types/orxTIMELINE.html#type-orxtimeline","text":"","title":"type orxTIMELINE"},{"location":"types/orxTIMELINE.html#methods","text":"","title":"Methods"},{"location":"types/orxTIMELINE.html#orxtimelineaddtrackfromconfig","text":"Signature: r1 = addTrackFromConfig ( trackid ) Description: Adds a track to a TimeLine from config (non-const self only) Params: name type description trackid string Config ID Returns: type description orxSTATUS C signature: orxSTATUS orxTimeLine_AddTrackFromConfig ( orxTIMELINE * _pstTimeLine , const orxSTRING _zTrackID )","title":"orxTIMELINE:addTrackFromConfig"},{"location":"types/orxTIMELINE.html#orxtimelineaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxTIMELINE:addr"},{"location":"types/orxTIMELINE.html#orxtimelineaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxTIMELINE:aeq"},{"location":"types/orxTIMELINE.html#orxtimelineasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxTIMELINE:asVoid"},{"location":"types/orxTIMELINE.html#orxtimelinedecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxTIMELINE:decreaseCount"},{"location":"types/orxTIMELINE.html#orxtimelinedelete","text":"Signature: r1 = delete () Description: Deletes a TimeLine (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTimeLine_Delete ( orxTIMELINE * _pstTimeLine )","title":"orxTIMELINE:delete"},{"location":"types/orxTIMELINE.html#orxtimelineenable","text":"Signature: enable ( enable ) Description: Enables/disables a TimeLine (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxTimeLine_Enable ( orxTIMELINE * _pstTimeLine , orxBOOL _bEnable )","title":"orxTIMELINE:enable"},{"location":"types/orxTIMELINE.html#orxtimelinegetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxTIMELINE:getChild"},{"location":"types/orxTIMELINE.html#orxtimelinegetcount","text":"Signature: r1 = getCount () Description: Gets how many tracks are currently in use Params: Returns: type description integer integer (u32) C signature: orxU32 orxTimeLine_GetCount ( const orxTIMELINE * _pstTimeLine )","title":"orxTIMELINE:getCount"},{"location":"types/orxTIMELINE.html#orxtimelinegetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxTIMELINE:getFlags"},{"location":"types/orxTIMELINE.html#orxtimelinegetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxTIMELINE:getGUID"},{"location":"types/orxTIMELINE.html#orxtimelinegetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxTIMELINE:getID"},{"location":"types/orxTIMELINE.html#orxtimelinegetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxTIMELINE:getNext"},{"location":"types/orxTIMELINE.html#orxtimelinegetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxTIMELINE:getOwner"},{"location":"types/orxTIMELINE.html#orxtimelinegetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxTIMELINE:getParent"},{"location":"types/orxTIMELINE.html#orxtimelinegetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxTIMELINE:getPrevious"},{"location":"types/orxTIMELINE.html#orxtimelinegetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxTIMELINE:getRefCount"},{"location":"types/orxTIMELINE.html#orxtimelinegetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxTIMELINE:getSibling"},{"location":"types/orxTIMELINE.html#orxtimelineincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxTIMELINE:increaseCount"},{"location":"types/orxTIMELINE.html#orxtimelineisenabled","text":"Signature: r1 = isEnabled () Description: Is TimeLine enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxTimeLine_IsEnabled ( const orxTIMELINE * _pstTimeLine )","title":"orxTIMELINE:isEnabled"},{"location":"types/orxTIMELINE.html#orxtimelineremovetrackfromconfig","text":"Signature: r1 = removeTrackFromConfig ( trackid ) Description: Removes a track using its config ID (non-const self only) Params: name type description trackid string Config ID of the track to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxTimeLine_RemoveTrackFromConfig ( orxTIMELINE * _pstTimeLine , const orxSTRING _zTrackID )","title":"orxTIMELINE:removeTrackFromConfig"},{"location":"types/orxTIMELINE.html#orxtimelinesetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxTIMELINE:setFlags"},{"location":"types/orxTIMELINE.html#orxtimelinesetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxTIMELINE:setOwner"},{"location":"types/orxTIMELINE.html#orxtimelinesetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxTIMELINE:setParent"},{"location":"types/orxTIMELINE.html#orxtimelinetestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxTIMELINE:testAllFlags"},{"location":"types/orxTIMELINE.html#orxtimelinetestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxTIMELINE:testFlags"},{"location":"types/orxTIMELINE.html#orxtimelinetype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxTIMELINE:type"},{"location":"types/orxTIMELINE.html#orxtimelineupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxTIMELINE:update"},{"location":"types/orxVECTOR.html","text":"type orxVECTOR # This type has __add, __sub, __mul, __div, __unm, __eq, and __tostring implemented, so it can handle common arithmetic operations, compare with '=' and print as a string constructors: lorx.vector.vector Properties # name type x number rho number r number h number y number theta number g number s number z number phi number b number l number v number Methods # orxVECTOR:_2DRotate # Signature: r1 = _2DRotate ( angle ) Description: Rotates a 2D vector (along Z-axis) Params: name type description angle number Angle of rotation (radians) Returns: type description orxVECTOR Rotated vector C signature: orxVECTOR * orxVector_2DRotate ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp , orxFLOAT _fAngle ) orxVECTOR:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxVECTOR:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxVECTOR:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxVECTOR:bezier # Signature: r1 = bezier ( point2 , point3 , point4 , t ) Description: Computes an interpolated point on a cubic Bezier curve segment for a given parameter Params: name type description point2 orxVECTOR# First control point for this curve segment point3 orxVECTOR# Second control point for this curve segment point4 orxVECTOR# Last point for this curve segment t number Interpolation parameter in [0.0, 1.0] Returns: type description orxVECTOR Interpolated point on the cubic Bezier curve segment C signature: orxVECTOR * orxVector_Bezier ( orxVECTOR * _pvRes , const orxVECTOR * _pvPoint1 , const orxVECTOR * _pvPoint2 , const orxVECTOR * _pvPoint3 , const orxVECTOR * _pvPoint4 , orxFLOAT _fT ) orxVECTOR:catmullRom # Signature: r1 = catmullRom ( point2 , point3 , point4 , t ) Description: Computes an interpolated point on a Catmull-Rom curve segment for a given parameter Params: name type description point2 orxVECTOR# Second control point for this curve segment point3 orxVECTOR# Third control point for this curve segment point4 orxVECTOR# Fourth control point for this curve segment t number Interpolation parameter in [0.0, 1.0] Returns: type description orxVECTOR Interpolated point on the Catmull-Rom curve segment C signature: orxVECTOR * orxVector_CatmullRom ( orxVECTOR * _pvRes , const orxVECTOR * _pvPoint1 , const orxVECTOR * _pvPoint2 , const orxVECTOR * _pvPoint3 , const orxVECTOR * _pvPoint4 , orxFLOAT _fT ) orxVECTOR:clamp # Signature: r1 = clamp ( min , max ) Description: Clamps a vector between two others Params: name type description min orxVECTOR# Minimum boundary max orxVECTOR# Maximum boundary Returns: type description orxVECTOR Resulting vector CLAMP(Op, MIN, MAX) C signature: orxVECTOR * orxVector_Clamp ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp , const orxVECTOR * _pvMin , const orxVECTOR * _pvMax ) orxVECTOR:copy # Signature: r1 = copy () Description: Copies a vector onto another one Params: Returns: type description orxVECTOR Destination vector C signature: orxVECTOR * orxVector_Copy ( orxVECTOR * _pvDst , const orxVECTOR * _pvSrc ) orxVECTOR:floor # Signature: r1 = floor () Description: Gets floored vector and stores the result in another one Params: Returns: type description orxVECTOR Resulting vector Floor(Op) C signature: orxVECTOR * orxVector_Floor ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp ) orxVECTOR:fromCartesianToSpherical # Signature: r1 = fromCartesianToSpherical () Description: Transforms a cartesian vector into a spherical one Params: Returns: type description orxVECTOR Transformed vector C signature: orxVECTOR * orxVector_FromCartesianToSpherical ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp ) orxVECTOR:fromSphericalToCartesian # Signature: r1 = fromSphericalToCartesian () Description: Transforms a spherical vector into a cartesian one Params: Returns: type description orxVECTOR Transformed vector C signature: orxVECTOR * orxVector_FromSphericalToCartesian ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp ) orxVECTOR:getSize # Signature: r1 = getSize () Description: Gets vector size Params: Returns: type description number Vector's size C signature: orxFLOAT orxVector_GetSize ( const orxVECTOR * _pvOp ) orxVECTOR:getSquareSize # Signature: r1 = getSquareSize () Description: Gets vector squared size Params: Returns: type description number Vector's squared size C signature: orxFLOAT orxVector_GetSquareSize ( const orxVECTOR * _pvOp ) orxVECTOR:isNull # Signature: r1 = isNull () Description: Is vector null? Params: Returns: type description boolean true if vector's null, false otherwise C signature: orxBOOL orxVector_IsNull ( const orxVECTOR * _pvOp ) orxVECTOR:neg # Signature: r1 = neg () Description: Negates a vector and stores result in another one Params: Returns: type description orxVECTOR Resulting vector (-Op) C signature: orxVECTOR * orxVector_Neg ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp ) orxVECTOR:normalize # Signature: r1 = normalize () Description: Normalizes a vector Params: Returns: type description orxVECTOR Normalized vector C signature: orxVECTOR * orxVector_Normalize ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp ) orxVECTOR:rec # Signature: r1 = rec () Description: Gets reciprocal (1.0 /) vector and stores the result in another one Params: Returns: type description orxVECTOR Resulting vector (1 / Op) C signature: orxVECTOR * orxVector_Rec ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp ) orxVECTOR:round # Signature: r1 = round () Description: Gets rounded vector and stores the result in another one Params: Returns: type description orxVECTOR Resulting vector Round(Op) C signature: orxVECTOR * orxVector_Round ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp ) orxVECTOR:set # Signature: r1 = set ( x , y , z ) Description: Sets vector XYZ values (also work for other coordinate system) (non-const self only) Params: name type description x number First coordinate value y number Second coordinate value z number Third coordinate value Returns: type description orxVECTOR Vector C signature: orxVECTOR * orxVector_Set ( orxVECTOR * _pvVec , orxFLOAT _fX , orxFLOAT _fY , orxFLOAT _fZ ) orxVECTOR:setAll # Signature: r1 = setAll ( value ) Description: Sets all the vector coordinates with the given value (non-const self only) Params: name type description value number Value to set Returns: type description orxVECTOR Vector C signature: orxVECTOR * orxVector_SetAll ( orxVECTOR * _pvVec , orxFLOAT _fValue ) orxVECTOR:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxVECTOR"},{"location":"types/orxVECTOR.html#type-orxvector","text":"This type has __add, __sub, __mul, __div, __unm, __eq, and __tostring implemented, so it can handle common arithmetic operations, compare with '=' and print as a string constructors: lorx.vector.vector","title":"type orxVECTOR"},{"location":"types/orxVECTOR.html#properties","text":"name type x number rho number r number h number y number theta number g number s number z number phi number b number l number v number","title":"Properties"},{"location":"types/orxVECTOR.html#methods","text":"","title":"Methods"},{"location":"types/orxVECTOR.html#orxvector_2drotate","text":"Signature: r1 = _2DRotate ( angle ) Description: Rotates a 2D vector (along Z-axis) Params: name type description angle number Angle of rotation (radians) Returns: type description orxVECTOR Rotated vector C signature: orxVECTOR * orxVector_2DRotate ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp , orxFLOAT _fAngle )","title":"orxVECTOR:_2DRotate"},{"location":"types/orxVECTOR.html#orxvectoraddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxVECTOR:addr"},{"location":"types/orxVECTOR.html#orxvectoraeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxVECTOR:aeq"},{"location":"types/orxVECTOR.html#orxvectorasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxVECTOR:asVoid"},{"location":"types/orxVECTOR.html#orxvectorbezier","text":"Signature: r1 = bezier ( point2 , point3 , point4 , t ) Description: Computes an interpolated point on a cubic Bezier curve segment for a given parameter Params: name type description point2 orxVECTOR# First control point for this curve segment point3 orxVECTOR# Second control point for this curve segment point4 orxVECTOR# Last point for this curve segment t number Interpolation parameter in [0.0, 1.0] Returns: type description orxVECTOR Interpolated point on the cubic Bezier curve segment C signature: orxVECTOR * orxVector_Bezier ( orxVECTOR * _pvRes , const orxVECTOR * _pvPoint1 , const orxVECTOR * _pvPoint2 , const orxVECTOR * _pvPoint3 , const orxVECTOR * _pvPoint4 , orxFLOAT _fT )","title":"orxVECTOR:bezier"},{"location":"types/orxVECTOR.html#orxvectorcatmullrom","text":"Signature: r1 = catmullRom ( point2 , point3 , point4 , t ) Description: Computes an interpolated point on a Catmull-Rom curve segment for a given parameter Params: name type description point2 orxVECTOR# Second control point for this curve segment point3 orxVECTOR# Third control point for this curve segment point4 orxVECTOR# Fourth control point for this curve segment t number Interpolation parameter in [0.0, 1.0] Returns: type description orxVECTOR Interpolated point on the Catmull-Rom curve segment C signature: orxVECTOR * orxVector_CatmullRom ( orxVECTOR * _pvRes , const orxVECTOR * _pvPoint1 , const orxVECTOR * _pvPoint2 , const orxVECTOR * _pvPoint3 , const orxVECTOR * _pvPoint4 , orxFLOAT _fT )","title":"orxVECTOR:catmullRom"},{"location":"types/orxVECTOR.html#orxvectorclamp","text":"Signature: r1 = clamp ( min , max ) Description: Clamps a vector between two others Params: name type description min orxVECTOR# Minimum boundary max orxVECTOR# Maximum boundary Returns: type description orxVECTOR Resulting vector CLAMP(Op, MIN, MAX) C signature: orxVECTOR * orxVector_Clamp ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp , const orxVECTOR * _pvMin , const orxVECTOR * _pvMax )","title":"orxVECTOR:clamp"},{"location":"types/orxVECTOR.html#orxvectorcopy","text":"Signature: r1 = copy () Description: Copies a vector onto another one Params: Returns: type description orxVECTOR Destination vector C signature: orxVECTOR * orxVector_Copy ( orxVECTOR * _pvDst , const orxVECTOR * _pvSrc )","title":"orxVECTOR:copy"},{"location":"types/orxVECTOR.html#orxvectorfloor","text":"Signature: r1 = floor () Description: Gets floored vector and stores the result in another one Params: Returns: type description orxVECTOR Resulting vector Floor(Op) C signature: orxVECTOR * orxVector_Floor ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp )","title":"orxVECTOR:floor"},{"location":"types/orxVECTOR.html#orxvectorfromcartesiantospherical","text":"Signature: r1 = fromCartesianToSpherical () Description: Transforms a cartesian vector into a spherical one Params: Returns: type description orxVECTOR Transformed vector C signature: orxVECTOR * orxVector_FromCartesianToSpherical ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp )","title":"orxVECTOR:fromCartesianToSpherical"},{"location":"types/orxVECTOR.html#orxvectorfromsphericaltocartesian","text":"Signature: r1 = fromSphericalToCartesian () Description: Transforms a spherical vector into a cartesian one Params: Returns: type description orxVECTOR Transformed vector C signature: orxVECTOR * orxVector_FromSphericalToCartesian ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp )","title":"orxVECTOR:fromSphericalToCartesian"},{"location":"types/orxVECTOR.html#orxvectorgetsize","text":"Signature: r1 = getSize () Description: Gets vector size Params: Returns: type description number Vector's size C signature: orxFLOAT orxVector_GetSize ( const orxVECTOR * _pvOp )","title":"orxVECTOR:getSize"},{"location":"types/orxVECTOR.html#orxvectorgetsquaresize","text":"Signature: r1 = getSquareSize () Description: Gets vector squared size Params: Returns: type description number Vector's squared size C signature: orxFLOAT orxVector_GetSquareSize ( const orxVECTOR * _pvOp )","title":"orxVECTOR:getSquareSize"},{"location":"types/orxVECTOR.html#orxvectorisnull","text":"Signature: r1 = isNull () Description: Is vector null? Params: Returns: type description boolean true if vector's null, false otherwise C signature: orxBOOL orxVector_IsNull ( const orxVECTOR * _pvOp )","title":"orxVECTOR:isNull"},{"location":"types/orxVECTOR.html#orxvectorneg","text":"Signature: r1 = neg () Description: Negates a vector and stores result in another one Params: Returns: type description orxVECTOR Resulting vector (-Op) C signature: orxVECTOR * orxVector_Neg ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp )","title":"orxVECTOR:neg"},{"location":"types/orxVECTOR.html#orxvectornormalize","text":"Signature: r1 = normalize () Description: Normalizes a vector Params: Returns: type description orxVECTOR Normalized vector C signature: orxVECTOR * orxVector_Normalize ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp )","title":"orxVECTOR:normalize"},{"location":"types/orxVECTOR.html#orxvectorrec","text":"Signature: r1 = rec () Description: Gets reciprocal (1.0 /) vector and stores the result in another one Params: Returns: type description orxVECTOR Resulting vector (1 / Op) C signature: orxVECTOR * orxVector_Rec ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp )","title":"orxVECTOR:rec"},{"location":"types/orxVECTOR.html#orxvectorround","text":"Signature: r1 = round () Description: Gets rounded vector and stores the result in another one Params: Returns: type description orxVECTOR Resulting vector Round(Op) C signature: orxVECTOR * orxVector_Round ( orxVECTOR * _pvRes , const orxVECTOR * _pvOp )","title":"orxVECTOR:round"},{"location":"types/orxVECTOR.html#orxvectorset","text":"Signature: r1 = set ( x , y , z ) Description: Sets vector XYZ values (also work for other coordinate system) (non-const self only) Params: name type description x number First coordinate value y number Second coordinate value z number Third coordinate value Returns: type description orxVECTOR Vector C signature: orxVECTOR * orxVector_Set ( orxVECTOR * _pvVec , orxFLOAT _fX , orxFLOAT _fY , orxFLOAT _fZ )","title":"orxVECTOR:set"},{"location":"types/orxVECTOR.html#orxvectorsetall","text":"Signature: r1 = setAll ( value ) Description: Sets all the vector coordinates with the given value (non-const self only) Params: name type description value number Value to set Returns: type description orxVECTOR Vector C signature: orxVECTOR * orxVector_SetAll ( orxVECTOR * _pvVec , orxFLOAT _fValue )","title":"orxVECTOR:setAll"},{"location":"types/orxVECTOR.html#orxvectortype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxVECTOR:type"},{"location":"types/orxVIEWPORT.html","text":"type orxVIEWPORT # Methods # orxVIEWPORT:addShader # Signature: r1 = addShader ( shaderconfigid ) Description: Adds a shader to a viewport using its config ID (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_AddShader ( orxVIEWPORT * _pstViewport , const orxSTRING _zShaderConfigID ) orxVIEWPORT:addr # Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string orxVIEWPORT:aeq # Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false orxVIEWPORT:asVoid # Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void* orxVIEWPORT:clearBackgroundColor # Signature: r1 = clearBackgroundColor () Description: Clears viewport background color (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_ClearBackgroundColor ( orxVIEWPORT * _pstViewport ) orxVIEWPORT:decreaseCount # Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure ) orxVIEWPORT:delete # Signature: r1 = delete () Description: Deletes a viewport (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_Delete ( orxVIEWPORT * _pstViewport ) orxVIEWPORT:enable # Signature: enable ( enable ) Description: Enables / disables a viewport (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxViewport_Enable ( orxVIEWPORT * _pstViewport , orxBOOL _bEnable ) orxVIEWPORT:enableShader # Signature: enableShader ( enable ) Description: Enables a viewport's shader (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxViewport_EnableShader ( orxVIEWPORT * _pstViewport , orxBOOL _bEnable ) orxVIEWPORT:getBackgroundColor # Signature: r1 = getBackgroundColor () Description: Gets a viewport background color Params: Returns: type description orxCOLOR Current background color C signature: orxCOLOR * orxViewport_GetBackgroundColor ( const orxVIEWPORT * _pstViewport , orxCOLOR * _pstColor ) orxVIEWPORT:getBlendMode # Signature: r1 = getBlendMode () Description: Gets a viewport blend mode Params: Returns: type description orxDISPLAY_BLEND_MODE orxDISPLAY_BLEND_MODE C signature: orxDISPLAY_BLEND_MODE orxViewport_GetBlendMode ( const orxVIEWPORT * _pstViewport ) orxVIEWPORT:getBox # Signature: r1 = getBox () Description: Gets an axis aligned box of viewport Params: Returns: type description orxAABOX orxAABOX / nil C signature: orxAABOX * orxViewport_GetBox ( const orxVIEWPORT * _pstViewport , orxAABOX * _pstBox ) orxVIEWPORT:getCamera # Signature: r1 = getCamera () Description: Gets a viewport camera Params: Returns: type description orxCAMERA Associated camera / nil C signature: orxCAMERA * orxViewport_GetCamera ( const orxVIEWPORT * _pstViewport ) orxVIEWPORT:getChild # Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure ) orxVIEWPORT:getCorrectionRatio # Signature: r1 = getCorrectionRatio () Description: Get viewport correction ratio Params: Returns: type description number Correction ratio value C signature: orxFLOAT orxViewport_GetCorrectionRatio ( const orxVIEWPORT * _pstViewport ) orxVIEWPORT:getFlags # Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask ) orxVIEWPORT:getGUID # Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure ) orxVIEWPORT:getID # Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure ) orxVIEWPORT:getName # Signature: r1 = getName () Description: Gets viewport config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxViewport_GetName ( const orxVIEWPORT * _pstViewport ) orxVIEWPORT:getNext # Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure ) orxVIEWPORT:getOwner # Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure ) orxVIEWPORT:getParent # Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure ) orxVIEWPORT:getPosition # Signature: r1 , r2 = getPosition () Description: Gets a viewport position Params: Returns: type description number X axis position (top left corner) number Y axis position (top left corner) C signature: void orxViewport_GetPosition ( const orxVIEWPORT * _pstViewport , orxFLOAT * _pfX , orxFLOAT * _pfY ) orxVIEWPORT:getPrevious # Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure ) orxVIEWPORT:getRefCount # Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure ) orxVIEWPORT:getRelativeSize # Signature: r1 , r2 = getRelativeSize () Description: Gets a viewport relative size Params: Returns: type description number Relative width number Relative height C signature: void orxViewport_GetRelativeSize ( const orxVIEWPORT * _pstViewport , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight ) orxVIEWPORT:getShaderPointer # Signature: r1 = getShaderPointer () Description: Gets a viewport's shader pointer Params: Returns: type description orxSHADERPOINTER# orxSHADERPOINTER / nil C signature: const orxSHADERPOINTER * orxViewport_GetShaderPointer ( const orxVIEWPORT * _pstViewport ) orxVIEWPORT:getSibling # Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure ) orxVIEWPORT:getSize # Signature: r1 , r2 = getSize () Description: Gets a viewport size Params: Returns: type description number Width number Height C signature: void orxViewport_GetSize ( const orxVIEWPORT * _pstViewport , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight ) orxVIEWPORT:getTextureCount # Signature: r1 = getTextureCount () Description: Gets a viewport texture count Params: Returns: type description integer Number of textures associated with the viewport C signature: orxU32 orxViewport_GetTextureCount ( const orxVIEWPORT * _pstViewport ) orxVIEWPORT:getTextureList # Signature: r1 , r2 = getTextureList ( texturenumber ) Description: Gets a viewport texture list Params: name type description texturenumber integer Number of textures to be retrieved Returns: type description orxSTATUS success / failure table of orxTEXTURE List of textures associated with the viewport C signature: orxSTATUS orxViewport_GetTextureList ( const orxVIEWPORT * _pstViewport , orxU32 _u32TextureNumber , orxTEXTURE ** _apstTextureList ) orxVIEWPORT:hasBackgroundColor # Signature: r1 = hasBackgroundColor () Description: Viewport has background color accessor Params: Returns: type description boolean true / false C signature: orxBOOL orxViewport_HasBackgroundColor ( const orxVIEWPORT * _pstViewport ) orxVIEWPORT:increaseCount # Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure ) orxVIEWPORT:isEnabled # Signature: r1 = isEnabled () Description: Is a viewport enabled? Params: Returns: type description boolean true / false C signature: orxBOOL orxViewport_IsEnabled ( const orxVIEWPORT * _pstViewport ) orxVIEWPORT:isShaderEnabled # Signature: r1 = isShaderEnabled () Description: Is a viewport's shader enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxViewport_IsShaderEnabled ( const orxVIEWPORT * _pstViewport ) orxVIEWPORT:removeShader # Signature: r1 = removeShader ( shaderconfigid ) Description: Removes a shader using its config ID (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_RemoveShader ( orxVIEWPORT * _pstViewport , const orxSTRING _zShaderConfigID ) orxVIEWPORT:setBackgroundColor # Signature: r1 = setBackgroundColor ( color ) Description: Sets a viewport background color (non-const self only) Params: name type description color orxCOLOR# Color to use for background Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_SetBackgroundColor ( orxVIEWPORT * _pstViewport , const orxCOLOR * _pstColor ) orxVIEWPORT:setBlendMode # Signature: r1 = setBlendMode ( blendmode ) Description: Sets a viewport blend mode (only used when has active shaders attached) (non-const self only) Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode to set Returns: type description orxSTATUS C signature: orxSTATUS orxViewport_SetBlendMode ( orxVIEWPORT * _pstViewport , orxDISPLAY_BLEND_MODE _eBlendMode ) orxVIEWPORT:setCamera # Signature: setCamera ( camera ) Description: Sets a viewport camera (non-const self only) Params: name type description camera orxCAMERA Associated camera Returns: C signature: void orxViewport_SetCamera ( orxVIEWPORT * _pstViewport , orxCAMERA * _pstCamera ) orxVIEWPORT:setFlags # Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags ) orxVIEWPORT:setOwner # Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner ) orxVIEWPORT:setParent # Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent ) orxVIEWPORT:setPosition # Signature: setPosition ( x , y ) Description: Sets a viewport position (non-const self only) Params: name type description x number X axis position (top left corner) y number Y axis position (top left corner) Returns: C signature: void orxViewport_SetPosition ( orxVIEWPORT * _pstViewport , orxFLOAT _fX , orxFLOAT _fY ) orxVIEWPORT:setRelativePosition # Signature: r1 = setRelativePosition ( alignflags ) Description: Sets a viewport relative position (non-const self only) Params: name type description alignflags integer Alignment flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_SetRelativePosition ( orxVIEWPORT * _pstViewport , orxU32 _u32AlignFlags ) orxVIEWPORT:setRelativeSize # Signature: r1 = setRelativeSize ( width , height ) Description: Sets a viewport relative size (non-const self only) Params: name type description width number Relative width (0.0f - 1.0f) height number Relative height (0.0f - 1.0f) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_SetRelativeSize ( orxVIEWPORT * _pstViewport , orxFLOAT _fWidth , orxFLOAT _fHeight ) orxVIEWPORT:setSize # Signature: setSize ( width , height ) Description: Sets a viewport size (non-const self only) Params: name type description width number Width height number Height Returns: C signature: void orxViewport_SetSize ( orxVIEWPORT * _pstViewport , orxFLOAT _fWidth , orxFLOAT _fHeight ) orxVIEWPORT:setTextureList # Signature: setTextureList ( texturenumber , texturelist ) Description: Sets a viewport texture list (non-const self only) Params: name type description texturenumber integer Number of textures to associate with the viewport texturelist table of orxTEXTURE List of textures to associate with the viewport Returns: C signature: void orxViewport_SetTextureList ( orxVIEWPORT * _pstViewport , orxU32 _u32TextureNumber , orxTEXTURE ** _apstTextureList ) orxVIEWPORT:testAllFlags # Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags ) orxVIEWPORT:testFlags # Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags ) orxVIEWPORT:type # Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name orxVIEWPORT:update # Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxVIEWPORT"},{"location":"types/orxVIEWPORT.html#type-orxviewport","text":"","title":"type orxVIEWPORT"},{"location":"types/orxVIEWPORT.html#methods","text":"","title":"Methods"},{"location":"types/orxVIEWPORT.html#orxviewportaddshader","text":"Signature: r1 = addShader ( shaderconfigid ) Description: Adds a shader to a viewport using its config ID (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to add Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_AddShader ( orxVIEWPORT * _pstViewport , const orxSTRING _zShaderConfigID )","title":"orxVIEWPORT:addShader"},{"location":"types/orxVIEWPORT.html#orxviewportaddr","text":"Signature: r1 = addr () Description: get the c memory address of the lorx userdata Params: Returns: type description string address string","title":"orxVIEWPORT:addr"},{"location":"types/orxVIEWPORT.html#orxviewportaeq","text":"Signature: r1 = aeq ( u ) Description: check if the c memory address of this lorx userdata equals to another Params: name type description u any lorx utype another lorx userdata Returns: type description boolean true or false","title":"orxVIEWPORT:aeq"},{"location":"types/orxVIEWPORT.html#orxviewportasvoid","text":"Signature: r1 = asVoid () Description: convert to a void* Params: Returns: type description void* the converted void*","title":"orxVIEWPORT:asVoid"},{"location":"types/orxVIEWPORT.html#orxviewportclearbackgroundcolor","text":"Signature: r1 = clearBackgroundColor () Description: Clears viewport background color (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_ClearBackgroundColor ( orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:clearBackgroundColor"},{"location":"types/orxVIEWPORT.html#orxviewportdecreasecount","text":"Signature: decreaseCount () Description: Decreases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_DecreaseCount ( void * _pStructure )","title":"orxVIEWPORT:decreaseCount"},{"location":"types/orxVIEWPORT.html#orxviewportdelete","text":"Signature: r1 = delete () Description: Deletes a viewport (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_Delete ( orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:delete"},{"location":"types/orxVIEWPORT.html#orxviewportenable","text":"Signature: enable ( enable ) Description: Enables / disables a viewport (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxViewport_Enable ( orxVIEWPORT * _pstViewport , orxBOOL _bEnable )","title":"orxVIEWPORT:enable"},{"location":"types/orxVIEWPORT.html#orxviewportenableshader","text":"Signature: enableShader ( enable ) Description: Enables a viewport's shader (non-const self only) Params: name type description enable boolean Enable / disable Returns: C signature: void orxViewport_EnableShader ( orxVIEWPORT * _pstViewport , orxBOOL _bEnable )","title":"orxVIEWPORT:enableShader"},{"location":"types/orxVIEWPORT.html#orxviewportgetbackgroundcolor","text":"Signature: r1 = getBackgroundColor () Description: Gets a viewport background color Params: Returns: type description orxCOLOR Current background color C signature: orxCOLOR * orxViewport_GetBackgroundColor ( const orxVIEWPORT * _pstViewport , orxCOLOR * _pstColor )","title":"orxVIEWPORT:getBackgroundColor"},{"location":"types/orxVIEWPORT.html#orxviewportgetblendmode","text":"Signature: r1 = getBlendMode () Description: Gets a viewport blend mode Params: Returns: type description orxDISPLAY_BLEND_MODE orxDISPLAY_BLEND_MODE C signature: orxDISPLAY_BLEND_MODE orxViewport_GetBlendMode ( const orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:getBlendMode"},{"location":"types/orxVIEWPORT.html#orxviewportgetbox","text":"Signature: r1 = getBox () Description: Gets an axis aligned box of viewport Params: Returns: type description orxAABOX orxAABOX / nil C signature: orxAABOX * orxViewport_GetBox ( const orxVIEWPORT * _pstViewport , orxAABOX * _pstBox )","title":"orxVIEWPORT:getBox"},{"location":"types/orxVIEWPORT.html#orxviewportgetcamera","text":"Signature: r1 = getCamera () Description: Gets a viewport camera Params: Returns: type description orxCAMERA Associated camera / nil C signature: orxCAMERA * orxViewport_GetCamera ( const orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:getCamera"},{"location":"types/orxVIEWPORT.html#orxviewportgetchild","text":"Signature: r1 = getChild () Description: Gets structure tree child Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetChild ( const void * _pStructure )","title":"orxVIEWPORT:getChild"},{"location":"types/orxVIEWPORT.html#orxviewportgetcorrectionratio","text":"Signature: r1 = getCorrectionRatio () Description: Get viewport correction ratio Params: Returns: type description number Correction ratio value C signature: orxFLOAT orxViewport_GetCorrectionRatio ( const orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:getCorrectionRatio"},{"location":"types/orxVIEWPORT.html#orxviewportgetflags","text":"Signature: r1 = getFlags () Description: Gets structure flags Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetFlags ( const void * _pStructure , orxU32 _u32Mask )","title":"orxVIEWPORT:getFlags"},{"location":"types/orxVIEWPORT.html#orxviewportgetguid","text":"Signature: r1 = getGUID () Description: Gets structure GUID Params: Returns: type description integer integer (u64) C signature: orxU64 orxStructure_GetGUID ( const void * _pStructure )","title":"orxVIEWPORT:getGUID"},{"location":"types/orxVIEWPORT.html#orxviewportgetid","text":"Signature: r1 = getID () Description: Gets structure ID Params: Returns: type description orxSTRUCTURE_ID orxSTRUCTURE_ID C signature: orxSTRUCTURE_ID orxStructure_GetID ( const void * _pStructure )","title":"orxVIEWPORT:getID"},{"location":"types/orxVIEWPORT.html#orxviewportgetname","text":"Signature: r1 = getName () Description: Gets viewport config name Params: Returns: type description string string / empty string C signature: const orxSTRING orxViewport_GetName ( const orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:getName"},{"location":"types/orxVIEWPORT.html#orxviewportgetnext","text":"Signature: r1 = getNext () Description: Gets structure list next Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetNext ( const void * _pStructure )","title":"orxVIEWPORT:getNext"},{"location":"types/orxVIEWPORT.html#orxviewportgetowner","text":"Signature: r1 = getOwner () Description: Gets structure's owner Params: Returns: type description orxSTRUCTURE orxSTRUCTURE / nil if not found/alive C signature: orxSTRUCTURE * orxStructure_GetOwner ( const void * _pStructure )","title":"orxVIEWPORT:getOwner"},{"location":"types/orxVIEWPORT.html#orxviewportgetparent","text":"Signature: r1 = getParent () Description: Gets structure tree parent Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetParent ( const void * _pStructure )","title":"orxVIEWPORT:getParent"},{"location":"types/orxVIEWPORT.html#orxviewportgetposition","text":"Signature: r1 , r2 = getPosition () Description: Gets a viewport position Params: Returns: type description number X axis position (top left corner) number Y axis position (top left corner) C signature: void orxViewport_GetPosition ( const orxVIEWPORT * _pstViewport , orxFLOAT * _pfX , orxFLOAT * _pfY )","title":"orxVIEWPORT:getPosition"},{"location":"types/orxVIEWPORT.html#orxviewportgetprevious","text":"Signature: r1 = getPrevious () Description: Gets structure list previous Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetPrevious ( const void * _pStructure )","title":"orxVIEWPORT:getPrevious"},{"location":"types/orxVIEWPORT.html#orxviewportgetrefcount","text":"Signature: r1 = getRefCount () Description: Gets structure reference count Params: Returns: type description integer integer (u32) C signature: orxU32 orxStructure_GetRefCount ( const void * _pStructure )","title":"orxVIEWPORT:getRefCount"},{"location":"types/orxVIEWPORT.html#orxviewportgetrelativesize","text":"Signature: r1 , r2 = getRelativeSize () Description: Gets a viewport relative size Params: Returns: type description number Relative width number Relative height C signature: void orxViewport_GetRelativeSize ( const orxVIEWPORT * _pstViewport , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight )","title":"orxVIEWPORT:getRelativeSize"},{"location":"types/orxVIEWPORT.html#orxviewportgetshaderpointer","text":"Signature: r1 = getShaderPointer () Description: Gets a viewport's shader pointer Params: Returns: type description orxSHADERPOINTER# orxSHADERPOINTER / nil C signature: const orxSHADERPOINTER * orxViewport_GetShaderPointer ( const orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:getShaderPointer"},{"location":"types/orxVIEWPORT.html#orxviewportgetsibling","text":"Signature: r1 = getSibling () Description: Gets structure tree sibling Params: Returns: type description orxSTRUCTURE orxSTRUCTURE C signature: orxSTRUCTURE * orxStructure_GetSibling ( const void * _pStructure )","title":"orxVIEWPORT:getSibling"},{"location":"types/orxVIEWPORT.html#orxviewportgetsize","text":"Signature: r1 , r2 = getSize () Description: Gets a viewport size Params: Returns: type description number Width number Height C signature: void orxViewport_GetSize ( const orxVIEWPORT * _pstViewport , orxFLOAT * _pfWidth , orxFLOAT * _pfHeight )","title":"orxVIEWPORT:getSize"},{"location":"types/orxVIEWPORT.html#orxviewportgettexturecount","text":"Signature: r1 = getTextureCount () Description: Gets a viewport texture count Params: Returns: type description integer Number of textures associated with the viewport C signature: orxU32 orxViewport_GetTextureCount ( const orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:getTextureCount"},{"location":"types/orxVIEWPORT.html#orxviewportgettexturelist","text":"Signature: r1 , r2 = getTextureList ( texturenumber ) Description: Gets a viewport texture list Params: name type description texturenumber integer Number of textures to be retrieved Returns: type description orxSTATUS success / failure table of orxTEXTURE List of textures associated with the viewport C signature: orxSTATUS orxViewport_GetTextureList ( const orxVIEWPORT * _pstViewport , orxU32 _u32TextureNumber , orxTEXTURE ** _apstTextureList )","title":"orxVIEWPORT:getTextureList"},{"location":"types/orxVIEWPORT.html#orxviewporthasbackgroundcolor","text":"Signature: r1 = hasBackgroundColor () Description: Viewport has background color accessor Params: Returns: type description boolean true / false C signature: orxBOOL orxViewport_HasBackgroundColor ( const orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:hasBackgroundColor"},{"location":"types/orxVIEWPORT.html#orxviewportincreasecount","text":"Signature: increaseCount () Description: Increases structure reference count (non-const self only) Params: Returns: C signature: void orxStructure_IncreaseCount ( void * _pStructure )","title":"orxVIEWPORT:increaseCount"},{"location":"types/orxVIEWPORT.html#orxviewportisenabled","text":"Signature: r1 = isEnabled () Description: Is a viewport enabled? Params: Returns: type description boolean true / false C signature: orxBOOL orxViewport_IsEnabled ( const orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:isEnabled"},{"location":"types/orxVIEWPORT.html#orxviewportisshaderenabled","text":"Signature: r1 = isShaderEnabled () Description: Is a viewport's shader enabled? Params: Returns: type description boolean true if enabled, false otherwise C signature: orxBOOL orxViewport_IsShaderEnabled ( const orxVIEWPORT * _pstViewport )","title":"orxVIEWPORT:isShaderEnabled"},{"location":"types/orxVIEWPORT.html#orxviewportremoveshader","text":"Signature: r1 = removeShader ( shaderconfigid ) Description: Removes a shader using its config ID (non-const self only) Params: name type description shaderconfigid string Config ID of the shader to remove Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_RemoveShader ( orxVIEWPORT * _pstViewport , const orxSTRING _zShaderConfigID )","title":"orxVIEWPORT:removeShader"},{"location":"types/orxVIEWPORT.html#orxviewportsetbackgroundcolor","text":"Signature: r1 = setBackgroundColor ( color ) Description: Sets a viewport background color (non-const self only) Params: name type description color orxCOLOR# Color to use for background Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_SetBackgroundColor ( orxVIEWPORT * _pstViewport , const orxCOLOR * _pstColor )","title":"orxVIEWPORT:setBackgroundColor"},{"location":"types/orxVIEWPORT.html#orxviewportsetblendmode","text":"Signature: r1 = setBlendMode ( blendmode ) Description: Sets a viewport blend mode (only used when has active shaders attached) (non-const self only) Params: name type description blendmode orxDISPLAY_BLEND_MODE Blend mode to set Returns: type description orxSTATUS C signature: orxSTATUS orxViewport_SetBlendMode ( orxVIEWPORT * _pstViewport , orxDISPLAY_BLEND_MODE _eBlendMode )","title":"orxVIEWPORT:setBlendMode"},{"location":"types/orxVIEWPORT.html#orxviewportsetcamera","text":"Signature: setCamera ( camera ) Description: Sets a viewport camera (non-const self only) Params: name type description camera orxCAMERA Associated camera Returns: C signature: void orxViewport_SetCamera ( orxVIEWPORT * _pstViewport , orxCAMERA * _pstCamera )","title":"orxVIEWPORT:setCamera"},{"location":"types/orxVIEWPORT.html#orxviewportsetflags","text":"Signature: setFlags ( removeflags ) Description: Sets structure flags (non-const self only) Params: name type description removeflags integer Flags to remove Returns: C signature: void orxStructure_SetFlags ( void * _pStructure , orxU32 _u32AddFlags , orxU32 _u32RemoveFlags )","title":"orxVIEWPORT:setFlags"},{"location":"types/orxVIEWPORT.html#orxviewportsetowner","text":"Signature: r1 = setOwner () Description: Sets structure owner (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetOwner ( void * _pStructure , void * _pOwner )","title":"orxVIEWPORT:setOwner"},{"location":"types/orxVIEWPORT.html#orxviewportsetparent","text":"Signature: r1 = setParent () Description: Sets structure tree parent (non-const self only) Params: Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_SetParent ( void * _pStructure , void * _phParent )","title":"orxVIEWPORT:setParent"},{"location":"types/orxVIEWPORT.html#orxviewportsetposition","text":"Signature: setPosition ( x , y ) Description: Sets a viewport position (non-const self only) Params: name type description x number X axis position (top left corner) y number Y axis position (top left corner) Returns: C signature: void orxViewport_SetPosition ( orxVIEWPORT * _pstViewport , orxFLOAT _fX , orxFLOAT _fY )","title":"orxVIEWPORT:setPosition"},{"location":"types/orxVIEWPORT.html#orxviewportsetrelativeposition","text":"Signature: r1 = setRelativePosition ( alignflags ) Description: Sets a viewport relative position (non-const self only) Params: name type description alignflags integer Alignment flags Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_SetRelativePosition ( orxVIEWPORT * _pstViewport , orxU32 _u32AlignFlags )","title":"orxVIEWPORT:setRelativePosition"},{"location":"types/orxVIEWPORT.html#orxviewportsetrelativesize","text":"Signature: r1 = setRelativeSize ( width , height ) Description: Sets a viewport relative size (non-const self only) Params: name type description width number Relative width (0.0f - 1.0f) height number Relative height (0.0f - 1.0f) Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxViewport_SetRelativeSize ( orxVIEWPORT * _pstViewport , orxFLOAT _fWidth , orxFLOAT _fHeight )","title":"orxVIEWPORT:setRelativeSize"},{"location":"types/orxVIEWPORT.html#orxviewportsetsize","text":"Signature: setSize ( width , height ) Description: Sets a viewport size (non-const self only) Params: name type description width number Width height number Height Returns: C signature: void orxViewport_SetSize ( orxVIEWPORT * _pstViewport , orxFLOAT _fWidth , orxFLOAT _fHeight )","title":"orxVIEWPORT:setSize"},{"location":"types/orxVIEWPORT.html#orxviewportsettexturelist","text":"Signature: setTextureList ( texturenumber , texturelist ) Description: Sets a viewport texture list (non-const self only) Params: name type description texturenumber integer Number of textures to associate with the viewport texturelist table of orxTEXTURE List of textures to associate with the viewport Returns: C signature: void orxViewport_SetTextureList ( orxVIEWPORT * _pstViewport , orxU32 _u32TextureNumber , orxTEXTURE ** _apstTextureList )","title":"orxVIEWPORT:setTextureList"},{"location":"types/orxVIEWPORT.html#orxviewporttestallflags","text":"Signature: r1 = testAllFlags () Description: Tests all flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestAllFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxVIEWPORT:testAllFlags"},{"location":"types/orxVIEWPORT.html#orxviewporttestflags","text":"Signature: r1 = testFlags () Description: Tests flags against structure ones Params: Returns: type description boolean true / false C signature: orxBOOL orxStructure_TestFlags ( const void * _pStructure , orxU32 _u32Flags )","title":"orxVIEWPORT:testFlags"},{"location":"types/orxVIEWPORT.html#orxviewporttype","text":"Signature: r1 = type () Description: get the type name of the lorx userdata Params: Returns: type description string the type name","title":"orxVIEWPORT:type"},{"location":"types/orxVIEWPORT.html#orxviewportupdate","text":"Signature: r1 = update ( clockinfo ) Description: Updates structure if update function was registered for the structure type (non-const self only) Params: name type description clockinfo orxCLOCK_INFO# Update associated clock info Returns: type description orxSTATUS success / failure C signature: orxSTATUS orxStructure_Update ( void * _pStructure , const void * _phCaller , const orxCLOCK_INFO * _pstClockInfo )","title":"orxVIEWPORT:update"}]}; var __search = { index: Promise.resolve(local_index) }